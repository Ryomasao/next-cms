AUTHOR: konoemario
TITLE: Vueのメモ
BASENAME: 2020/12/05/180024
STATUS: Draft
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 11/10/2020 18:36:18
-----
BODY:
<h2>Vuexの初期データとdataとcreatedの関係</h2>

<ul>
<li>createdのタイミングでは、data()は実行されており、アクセスできる</li>
<li>Vuexの初期データは、data()実行時には投入されている
※なお、mapGetters経由だととれないかも。this.$store.getters['storeName/getterName']でいける</li>
</ul>


<p>なので以下の順になる。</p>

<p>VuexのinitialState
data()
created</p>

<h2>勘違いしてた ライフサイクルとawait</h2>

<p>ライフサイクルメソッドでawaitすると、Promiseが解決されないと、次のライフサイクルに行かないとなぜか勘違いしてた。
created()を呼んであるであろう、VueのFWでawaitしてないと、そういう挙動にならないないじゃんと気づいた。
また非同期中にローディングを出すとかもできなくなる。</p>

<pre class="code js" data-lang="js" data-unlink>
async created(){
 const response = await someApiCall()
 console.log(response)
},


mounted(){
console.log(&#39;&#39;mounted)
}
</pre>


-----
--------
AUTHOR: konoemario
TITLE: Storybook V6 + Vueのメモ
BASENAME: 2020/08/22/111806
STATUS: Draft
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 08/22/2020 11:18:00
-----
BODY:
<p>いきなり鬼門。</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">export</span> <span class="synStatement">default</span> <span class="synIdentifier">{</span>
  title: <span class="synConstant">'Atoms/Step'</span>,
  component: Step
<span class="synIdentifier">}</span>;


<span class="synStatement">const</span> Template = (args, <span class="synIdentifier">{</span> argTypes <span class="synIdentifier">}</span>) =&gt; <span class="synIdentifier">{</span>
  <span class="synStatement">return</span> <span class="synIdentifier">{</span>
    props: <span class="synType">Object</span>.keys(argTypes),
    components: <span class="synIdentifier">{</span> Step <span class="synIdentifier">}</span>,
    template: <span class="synConstant">'&lt;Step v-bind=&quot;$props&quot;/&gt;'</span>
  <span class="synIdentifier">}</span>;
<span class="synIdentifier">}</span>;
</pre>


<ul>
<li>Template: 文字通りテンプレート。これをexportするだけだとStoryは表示されない。</li>
</ul>


<p> <code>props: Object.keys(argTypes)</code>　これがポイントっぽい。
argsTypesには、Vueコンポーネントのpropsを自動で拾ってくるっぽい。なんかすごい。</p>

<p><a href="https://github.com/storybookjs/storybook/issues/12073#issuecomment-674886463">https://github.com/storybookjs/storybook/issues/12073#issuecomment-674886463</a></p>

<p>ほんで、<code>v-bind="$props"</code> をテンプレートにbindすることで、↑で拾っていたpropsを自動でbindする。<br />
これにより、StoryBookのUI上で、propsを編集できるんだと思う。</p>

<p>一方、パターンを書いていきたい場合は、argsにpropsを書くんだと思う。だよね？</p>

<pre class="code" data-lang="" data-unlink>export const Disable = Template.bind();
Disable.args = {
  index: 1,
  active: false
};</pre>


-----
--------
AUTHOR: konoemario
TITLE: Vueのv-modelのメモ
BASENAME: 2020/07/27/112906
STATUS: Draft
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 07/27/2020 11:29:06
-----
BODY:
<p><code>v-model="data"</code> は<code>:value="data" @input="e =&gt; data = e.target.value"</code>のことだよ！と覚えていて、久しぶりVueをさわったら、よくわからなくなったのでメモ。</p>

<h2>CheckBox</h2>

<p><a href="https://jp.vuejs.org/v2/guide/forms.html#%E3%83%81%E3%82%A7%E3%83%83%E3%82%AF%E3%83%9C%E3%83%83%E3%82%AF%E3%82%B9">&#x30D5;&#x30A9;&#x30FC;&#x30E0;&#x5165;&#x529B;&#x30D0;&#x30A4;&#x30F3;&#x30C7;&#x30A3;&#x30F3;&#x30B0; &mdash; Vue.js</a></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>&lt;template&gt;
  &lt;div id=<span class="synConstant">&quot;app&quot;</span>&gt;
    &lt;div&gt;
      &lt;h1&gt;NativeSingleCheckBox&lt;/h1&gt;
      &lt;input type=<span class="synConstant">&quot;checkbox&quot;</span> v-model=<span class="synConstant">&quot;single&quot;</span>&gt;
      &lt;p&gt;SingleValue: <span class="synIdentifier">{{</span>single<span class="synIdentifier">}}</span>&lt;/p&gt;
    &lt;/div&gt;

    &lt;div&gt;
      &lt;h1&gt;NativeMulitiCheckBox&lt;/h1&gt;
      &lt;input type=<span class="synConstant">&quot;checkbox&quot;</span> value=<span class="synConstant">&quot;1&quot;</span> v-model=<span class="synConstant">&quot;multi&quot;</span>&gt;
      &lt;input type=<span class="synConstant">&quot;checkbox&quot;</span> value=<span class="synConstant">&quot;2&quot;</span> v-model=<span class="synConstant">&quot;multi&quot;</span>&gt;
      &lt;p&gt;MultiValue: <span class="synIdentifier">{{</span>multi<span class="synIdentifier">}}</span>&lt;/p&gt;
    &lt;/div&gt;

    &lt;div&gt;
      &lt;h1&gt;PureCheckBoxComponent&lt;/h1&gt;
      &lt;PureCheckBox value=<span class="synConstant">&quot;1&quot;</span> @input=<span class="synConstant">&quot;onChange&quot;</span> :checked=<span class="synConstant">&quot;pureValue&quot;</span>/&gt;
      &lt;p&gt;PureValue: <span class="synIdentifier">{{</span>pureValue<span class="synIdentifier">}}</span>&lt;/p&gt;
    &lt;/div&gt;

    &lt;div&gt;
      &lt;h1&gt;V-ModelCheckBoxComponent&lt;/h1&gt;
      &lt;CheckBox v-model=<span class="synConstant">&quot;vModelValue&quot;</span> value=<span class="synConstant">&quot;1&quot;</span>/&gt;
      &lt;p&gt;vModelValue: <span class="synIdentifier">{{</span>vModelValue<span class="synIdentifier">}}</span>&lt;/p&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/template&gt;

&lt;script&gt;
<span class="synStatement">import</span> CheckBox from <span class="synConstant">&quot;./components/CheckBox&quot;</span>;
<span class="synStatement">import</span> PureCheckBox from <span class="synConstant">&quot;./components/PureCheckBox&quot;</span>;

<span class="synStatement">export</span> <span class="synStatement">default</span> <span class="synIdentifier">{</span>
  name: <span class="synConstant">&quot;App&quot;</span>,
  components: <span class="synIdentifier">{</span>
    CheckBox,
    PureCheckBox
  <span class="synIdentifier">}</span>,
  methods: <span class="synIdentifier">{</span>
    onChange(value) <span class="synIdentifier">{</span>
      <span class="synIdentifier">this</span>.pureValue = value;
    <span class="synIdentifier">}</span>
  <span class="synIdentifier">}</span>,
  data() <span class="synIdentifier">{</span>
    <span class="synStatement">return</span> <span class="synIdentifier">{</span>
      single: <span class="synConstant">false</span>,
      multi: <span class="synIdentifier">[]</span>,
      pureValue: <span class="synConstant">&quot;&quot;</span>,
      vModelValue: <span class="synConstant">&quot;&quot;</span>
    <span class="synIdentifier">}</span>;
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>;
&lt;/script&gt;
</pre>




<pre class="code" data-lang="" data-unlink>&lt;template&gt;
  &lt;div&gt;
    &lt;input type=&#34;checkbox&#34; :value=&#34;value&#34; @input=&#34;onChange&#34;&gt;
    {{checked ? &#39;yes&#39; : &#39;no&#39;}}
  &lt;/div&gt;
&lt;/template&gt;

&lt;script&gt;
export default {
  model: {
    prop: &#34;checked&#34;
  },
  props: [&#34;value&#34;, &#34;checked&#34;],
  methods: {
    onChange(e) {
      if (e.target.checked) {
        this.$emit(&#34;input&#34;, e.target.value);
      } else {
        this.$emit(&#34;input&#34;, &#34;&#34;);
      }
    }
  }
};
&lt;/script&gt;
</pre>




<pre class="code" data-lang="" data-unlink>&lt;template&gt;
  &lt;div&gt;
    &lt;input type=&#34;checkbox&#34; :value=&#34;value&#34; @input=&#34;onChange&#34;&gt;
    {{checked ? &#39;yes&#39; : &#39;no&#39;}}
  &lt;/div&gt;
&lt;/template&gt;

&lt;script&gt;
export default {
  props: [&#34;value&#34;, &#34;checked&#34;],
  methods: {
    onChange(e) {
      if (e.target.checked) {
        this.$emit(&#34;input&#34;, e.target.value);
      } else {
        this.$emit(&#34;input&#34;, &#34;&#34;);
      }
    }
  }
};
&lt;/script&gt;</pre>


-----
--------
AUTHOR: konoemario
TITLE: javascriptのモジュールのメモ
BASENAME: 2020/07/21/105122
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 07/21/2020 10:51:22
CATEGORY: プログラム
CATEGORY: javascript
-----
BODY:
<p>ライブラリを作成する際の脳内の辻褄を合わせるためのメモ。</p>

<h1>やりたいこと</h1>

<p>ES6形式で書かれたライブラリを作成したい。<br />
ライブラリを作成するときにいろんなフォーマットがあるので整理。</p>

<h2>対象のjavascript(ES6)</h2>

<p>エントリーポイント</p>

<p>index.js</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">import</span> <span class="synStatement">parent</span> from <span class="synConstant">'./parent'</span>;

<span class="synStatement">export</span> <span class="synIdentifier">{</span> <span class="synStatement">parent</span> <span class="synIdentifier">}</span>;
</pre>


<p>parent.js</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">import</span> <span class="synIdentifier">{</span> child <span class="synIdentifier">}</span> from <span class="synConstant">'./child'</span>;

<span class="synStatement">export</span> <span class="synStatement">default</span> () =&gt; <span class="synIdentifier">{</span>
  <span class="synStatement">const</span> name = <span class="synConstant">'taro'</span>;

  child(name);
<span class="synIdentifier">}</span>;
</pre>


<p>child.js</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">export</span> <span class="synStatement">const</span> child = name =&gt; <span class="synIdentifier">{</span>
  console.log(name);
<span class="synIdentifier">}</span>;
</pre>


<h2>使うバンドルツール</h2>

<p>ES6形式で複数モジュールから構成されるライブラリなので、ひとつのファイルにまとめる。
まとめる際に、<code>webpack</code>や<code>rollup</code>等がある。
ライブラリにまとめる際には、バンドルサイズが小さくなる<code>rollup</code>がよいとのことなので、こっちを使ってみる。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fpostd.cc%2Fwebpack-and-rollup-the-same-but-different" title="webpackとRollup：似て非なるもの | POSTD" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://postd.cc/webpack-and-rollup-the-same-but-different">postd.cc</a></cite></p>

<blockquote><p> アプリケーションにはwebpackを、ライブラリにはRollupを使おう</p></blockquote>

<p>最近では、Go言語で実装されたバンドルツール<code>esbuild</code>なるものも最近よさげなので、これは別の機会に。</p>

<p>rollupでは、バンドル後の形式に以下を選ぶことができる。</p>

<ul>
<li>iife</li>
<li>cjs</li>
<li>es6</li>
<li>amd</li>
<li>umd</li>
<li>system</li>
</ul>


<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Frollupjs.org%2Fguide%2Fen%2F%23command-line-flags" title="rollup.js" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://rollupjs.org/guide/en/#command-line-flags">rollupjs.org</a></cite></p>

<h2>結果</h2>

<hr/>


<h3>iife</h3>

<p>いきなりなんぞってやつなんだけど、中身を見ると理解しやすい。
この形式は、ライブラリをほんとにそのまま実行できるようになっている形式。<br />
HTMLの<script></script>に直接書いてもいい。</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synIdentifier">var</span> bundle = (<span class="synIdentifier">function</span> (exports) <span class="synIdentifier">{</span>
  <span class="synConstant">'use strict'</span>;

  <span class="synStatement">const</span> child = name =&gt; <span class="synIdentifier">{</span>
    console.log(name);
  <span class="synIdentifier">}</span>;

  <span class="synIdentifier">var</span> <span class="synStatement">parent</span> = () =&gt; <span class="synIdentifier">{</span>
    <span class="synStatement">const</span> name = <span class="synConstant">'taro'</span>;

    child(name);
  <span class="synIdentifier">}</span>;

  exports.<span class="synStatement">parent</span> = <span class="synStatement">parent</span>;

  <span class="synStatement">return</span> exports;

<span class="synIdentifier">}</span>(<span class="synIdentifier">{}</span>));
</pre>


<p>即時関数があるのでぱっとみわかりにくいので、分解するとこんな感じになる。</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>      <span class="synIdentifier">function</span> foo(<span class="synStatement">export</span>) <span class="synIdentifier">{</span>
        <span class="synStatement">export</span>.<span class="synStatement">parent</span> = exportする関数
      <span class="synIdentifier">}</span>
      <span class="synIdentifier">var</span> bundle = foo(<span class="synIdentifier">{}</span>)
</pre>


<p><code>export</code>って名前があるので、おや？って思うんだけどただの仮引数名ね。</p>

<h4>使ってみる</h4>

<p>シンプルにグローバル変数を介してこんな感じで使える。</p>

<pre class="code lang-html" data-lang="html" data-unlink>  <span class="synIdentifier">&lt;</span><span class="synStatement">script</span><span class="synIdentifier"> </span><span class="synType">src</span><span class="synIdentifier">=</span><span class="synConstant">&quot;bundle.js&quot;</span><span class="synIdentifier"> &gt;&lt;/</span><span class="synStatement">script</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">script</span><span class="synIdentifier">&gt;</span>
<span class="synSpecial">　bundle.</span><span class="synStatement">parent</span>()
<span class="synSpecial">　</span><span class="synIdentifier">&lt;/</span><span class="synStatement">script</span><span class="synIdentifier">&gt;</span>
</pre>


<table>
<thead>
<tr>
<th>  方式  </th>
<th>  結果  </th>
<th>  補足  </th>
</tr>
</thead>
<tbody>
<tr>
<td>  ブラウザNative </td>
<td>  ○  </td>
<td></td>
</tr>
<tr>
<td>  ブラウザNative(module) </td>
<td>  ×  </td>
<td>ライブラリ側がexportしてないのでimportできない</td>
</tr>
<tr>
<td>  Webpack </td>
<td>  ×  </td>
<td>同様</td>
</tr>
<tr>
<td>  Node.js </td>
<td>  ×  </td>
<td>ライブラリ側がexportしてないので、requireできない</td>
</tr>
</tbody>
</table>


<hr/>


<h3>cjs</h3>

<p>この辺から理解が怪しくなってくる。cjsとはCommonJS形式のもの。<br />
CommonJS=Node.jsと思いがちだけど、CommonJSはただの仕様で実装ではない。<br />
jsをブラウザ以外でも使えるようにしたいってなったときに規定した仕様。<br />
Node.jsはCommonJSに大きく影響を受けてるけど、100%その仕様を満たしているわけではないとのこと。</p>

<p>とてもわかりやすい記事。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Ftsuchikazu.net%2Fjavascript-module%2F" title="JavaScriptのモジュール管理(CommonJSとかAMDとかBrowserifyとかwebpack)" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://tsuchikazu.net/javascript-module/">tsuchikazu.net</a></cite></p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fmedium.com%2Fcomputed-comparisons%2Fcommonjs-vs-amd-vs-requirejs-vs-es6-modules-2e814b114a0b" title="- — — — — CommonJS vs AMD vs RequireJS vs ES6 Modules — — — — -" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://medium.com/computed-comparisons/commonjs-vs-amd-vs-requirejs-vs-es6-modules-2e814b114a0b">medium.com</a></cite></p>

<p>※ <code>Browserify</code>使ったことないけど、webpackと同じ感じってことがわかった。</p>

<blockquote><p>Browserifyは、実行時にrequireに指定されたモジュールを読み込むというアプローチではなく、事前にrequire部分を書き換えるビルドプロセスというアプローチをとっています。本題の依存関係もそのビルドプロセスで解決してくれます。実際にブラウザが実行するファイルは、Browserifyによってビルドされたものになります。</p></blockquote>

<p>話がそれまくったけど、cjs形式でビルドされたものがこちら。</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synConstant">'use strict'</span>;

<span class="synType">Object</span>.defineProperty(exports, <span class="synConstant">'__esModule'</span>, <span class="synIdentifier">{</span> value: <span class="synConstant">true</span> <span class="synIdentifier">}</span>);

<span class="synStatement">const</span> child = name =&gt; <span class="synIdentifier">{</span>
  console.log(name);
<span class="synIdentifier">}</span>;

<span class="synIdentifier">var</span> <span class="synStatement">parent</span> = () =&gt; <span class="synIdentifier">{</span>
  <span class="synStatement">const</span> name = <span class="synConstant">'taro'</span>;

  child(name);
<span class="synIdentifier">}</span>;

exports.<span class="synStatement">parent</span> = <span class="synStatement">parent</span>
</pre>


<p><code>Object.defineProperty</code>をする必要性が現時点ではわからない。</p>

<h4>使ってみる</h4>

<p>cjs形式なのでNode.jsで問題なく実行することができる。</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">const</span> bundle = require(<span class="synConstant">'./bundle'</span>);
bundle.<span class="synStatement">parent</span>();
</pre>


<table>
<thead>
<tr>
<th>  方式  </th>
<th>  結果  </th>
<th>  補足  </th>
</tr>
</thead>
<tbody>
<tr>
<td>  ブラウザNative </td>
<td>  ×  </td>
<td>グローバル変数exportsは存在しないのでエラー 。varでexportsを定義してあげればいけそうな気配はある？</td>
</tr>
<tr>
<td>  ブラウザNative(module) </td>
<td>  ×  </td>
<td>ライブラリはcjsでexport。使う側はes6でimportなので互換性がない</td>
</tr>
<tr>
<td>  Webpack </td>
<td>  ○ </td>
<td>Webpackはcjs形式のものを解釈できるのでいける。</td>
</tr>
<tr>
<td>  Node.js </td>
<td>  ○  </td>
<td></td>
</tr>
</tbody>
</table>


<p>※ 冒頭で、Node.jsはCommonJSに100%沿ったものではないって書いたけど、今回みたいにES6形式のものをCommonJSとしてビルドしたときに、Node.jsで動作しないパターンってあるんだろうか。rollupが解決してくれるものが、モジュールのimprot/export周りだけでなのであれば、問題ないのかな。</p>

<hr/>


<h4>es6</h4>

<p>続いては、見慣れたes6形式。1ファイルにまとまっただけで、あとは見慣れた構文。</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">const</span> child = name =&gt; <span class="synIdentifier">{</span>
  console.log(name);
<span class="synIdentifier">}</span>;

<span class="synIdentifier">var</span> <span class="synStatement">parent</span> = () =&gt; <span class="synIdentifier">{</span>
  <span class="synStatement">const</span> name = <span class="synConstant">'taro'</span>;

  child(name);
<span class="synIdentifier">}</span>;

<span class="synStatement">export</span> <span class="synIdentifier">{</span> <span class="synStatement">parent</span> <span class="synIdentifier">}</span>;
</pre>


<h4>使ってみる</h4>

<p>これは馴染みがあるので、予想通り。</p>

<table>
<thead>
<tr>
<th>  方式  </th>
<th>  結果  </th>
<th>  補足  </th>
</tr>
</thead>
<tbody>
<tr>
<td>  ブラウザNative </td>
<td>  ×  </td>
<td>import/exportは存在しないのでエラー </td>
</tr>
<tr>
<td>  ブラウザNative(module) </td>
<td>  ○  </td>
<td></td>
</tr>
<tr>
<td>  Webpack </td>
<td>  ○ </td>
<td>Webpackはes6形式を解釈できるのでいける</td>
</tr>
<tr>
<td>  Node.js </td>
<td>  ×  </td>
<td>ES6のexport {}を解釈できないのでエラー</td>
</tr>
</tbody>
</table>


<hr/>


<h4>amd</h4>

<p>もう忘れてもよさそうな形式。webpackとかがCommonJS形式のものをブラウザで使えるようにビルドすることが流行る前に存在していたやつ。<br />
<code>RequireJS</code>と呼ばれるものをブラウザで読み込んで、実行時に依存解決を行う。</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>define(<span class="synIdentifier">[</span><span class="synConstant">'exports'</span><span class="synIdentifier">]</span>, <span class="synIdentifier">function</span> (exports) <span class="synIdentifier">{</span> <span class="synConstant">'use strict'</span>;

  <span class="synStatement">const</span> child = name =&gt; <span class="synIdentifier">{</span>
    console.log(name);
  <span class="synIdentifier">}</span>;

  <span class="synIdentifier">var</span> <span class="synStatement">parent</span> = () =&gt; <span class="synIdentifier">{</span>
    <span class="synStatement">const</span> name = <span class="synConstant">'taro'</span>;

    child(name);
  <span class="synIdentifier">}</span>;

  exports.<span class="synStatement">parent</span> = <span class="synStatement">parent</span>;

  <span class="synType">Object</span>.defineProperty(exports, <span class="synConstant">'__esModule'</span>, <span class="synIdentifier">{</span> value: <span class="synConstant">true</span> <span class="synIdentifier">}</span>);

<span class="synIdentifier">}</span>);
</pre>


<h4>使ってみる</h4>

<p>割愛。</p>

<hr/>


<h4>umd</h4>

<p>ライブラリを使う側の環境に応じてAMDとCommonJS形式のいずれかになるやつ。
AMDを忘れていい形式だとしたら、これも忘れていいのかな。</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>(<span class="synIdentifier">function</span>(global, factory) <span class="synIdentifier">{</span>
  <span class="synStatement">typeof</span> exports === <span class="synConstant">'object'</span> &amp;&amp; <span class="synStatement">typeof</span> module !== <span class="synConstant">'undefined'</span>
    ? factory(exports)
    : <span class="synStatement">typeof</span> define === <span class="synConstant">'function'</span> &amp;&amp; define.amd
    ? define(<span class="synIdentifier">[</span><span class="synConstant">'exports'</span><span class="synIdentifier">]</span>, factory)
    : ((global = global || <span class="synStatement">self</span>), factory((global.myModule = <span class="synIdentifier">{}</span>)));
<span class="synIdentifier">}</span>)(<span class="synIdentifier">this</span>, <span class="synIdentifier">function</span>(exports) <span class="synIdentifier">{</span>
  <span class="synConstant">'use strict'</span>;

  <span class="synStatement">const</span> child = name =&gt; <span class="synIdentifier">{</span>
    console.log(name);
  <span class="synIdentifier">}</span>;

  <span class="synIdentifier">var</span> <span class="synStatement">parent</span> = () =&gt; <span class="synIdentifier">{</span>
    <span class="synStatement">const</span> name = <span class="synConstant">'taro'</span>;

    child(name);
  <span class="synIdentifier">}</span>;

  exports.<span class="synStatement">parent</span> = <span class="synStatement">parent</span>;

  <span class="synType">Object</span>.defineProperty(exports, <span class="synConstant">'__esModule'</span>, <span class="synIdentifier">{</span> value: <span class="synConstant">true</span> <span class="synIdentifier">}</span>);
<span class="synIdentifier">}</span>);
</pre>


<p>読みやすいように分解すると、こんな感じ。</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synComment">// これはcjs形式のやつと同じ</span>
<span class="synStatement">const</span> bar = <span class="synIdentifier">function</span>(exports) <span class="synIdentifier">{</span>
  <span class="synConstant">'use strict'</span>;

  <span class="synStatement">const</span> child = name =&gt; <span class="synIdentifier">{</span>
    console.log(name);
  <span class="synIdentifier">}</span>;

  <span class="synIdentifier">var</span> <span class="synStatement">parent</span> = () =&gt; <span class="synIdentifier">{</span>
    <span class="synStatement">const</span> name = <span class="synConstant">'taro'</span>;

    child(name);
  <span class="synIdentifier">}</span>;
  exports.<span class="synStatement">parent</span> = <span class="synStatement">parent</span>;
  <span class="synType">Object</span>.defineProperty(exports, <span class="synConstant">'__esModule'</span>, <span class="synIdentifier">{</span> value: <span class="synConstant">true</span> <span class="synIdentifier">}</span>);
<span class="synIdentifier">}</span>;

<span class="synIdentifier">function</span> foo(global, factory) <span class="synIdentifier">{</span>
  <span class="synComment">// Node.jsとかにあるexportsオブジェクトがあるんであれば、cjs形式に</span>
  <span class="synStatement">typeof</span> exports === <span class="synConstant">'object'</span> &amp;&amp; <span class="synStatement">typeof</span> module !== <span class="synConstant">'undefined'</span>
    ? factory(exports)
     <span class="synComment">// amdのdefineがあればamd</span>
    : <span class="synStatement">typeof</span> define === <span class="synConstant">'function'</span> &amp;&amp; define.amd
    ? define(<span class="synIdentifier">[</span><span class="synConstant">'exports'</span><span class="synIdentifier">]</span>, factory)
    <span class="synComment">// いずれでもない場合は全然わからん</span>
    : ((global = global || <span class="synStatement">self</span>), factory((global.myModule = <span class="synIdentifier">{}</span>)));
<span class="synIdentifier">}</span>

foo(<span class="synIdentifier">this</span>, bar);
</pre>


<h4>使ってみる</h4>

<p>割愛。</p>

<hr/>


<h4>system</h4>

<p>一番謎のやつ。</p>

<p>たぶんもう忘れてよさそう？UMDと同じような感じでAMDとCommonJS形式両方をサポートするっぽい形式。AMDがRequireJSを必要とするのとおんなじ感じで、SystemJSなるものを読み込んどくんだと思う。<br />
違いがよくわからない。</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>System.register(<span class="synIdentifier">[]</span>, <span class="synIdentifier">function</span> (exports) <span class="synIdentifier">{</span>
  <span class="synConstant">'use strict'</span>;
  <span class="synStatement">return</span> <span class="synIdentifier">{</span>
    execute: <span class="synIdentifier">function</span> () <span class="synIdentifier">{</span>

      <span class="synStatement">const</span> child = name =&gt; <span class="synIdentifier">{</span>
        console.log(name);
      <span class="synIdentifier">}</span>;

      <span class="synIdentifier">var</span> <span class="synStatement">parent</span> = exports(<span class="synConstant">'parent'</span>, () =&gt; <span class="synIdentifier">{</span>
        <span class="synStatement">const</span> name = <span class="synConstant">'taro'</span>;

        child(name);
      <span class="synIdentifier">}</span>);

    <span class="synIdentifier">}</span>
  <span class="synIdentifier">}</span>;
<span class="synIdentifier">}</span>)
</pre>


<h4>使ってみる</h4>

<p>割愛。</p>

-----
--------
AUTHOR: konoemario
TITLE:  yumでPHPをインストールするメモ
BASENAME: 2020/04/30/191205
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 04/30/2020 19:12:05
CATEGORY: PHP
-----
BODY:
<p>ちょっとしたメモだったりを、gistで書くようになったらブログを書かなくなってしまったでござる。
せっかくなので転機。</p>

<h1>yumでPHPをインストールするメモ</h1>

<p>AmazonLinux2環境でphpをインストールしたときに毎回迷うのでメモ。</p>

<h2>基本的なこと</h2>

<ul>
<li>古くはソースコードから自分でmakeして、実行ファイルを所定の場所に置くなりしてた。</li>
<li>とあるソースコードが別のソースコードに依存するのであれば、makeしてエラーになって気づいて、もってきてーの繰り返しが必要だった。</li>
<li>パッケージシステムができたことで、ほしいパッケージ名を叩くだけで、依存関係を管理しながらインストールができるようになった。</li>
</ul>


<p>ありがとうパッケージシステム。</p>

<ul>
<li>パッケージ管理システムには、Debian系とRedHat系で採用されるRPM系がある。</li>
<li>AmazonLinuxはRPM系なので、ここではRPM系の話を書く。<br />
※ラズパイとかはDebian系だったね！Dockerの軽量LinuxであるAlpineも<code>apk</code>みたいな別の管理システムがあったね！</li>
</ul>


<h3>RPM系の話</h3>

<p>パッケージは<code>rpm</code>っていう拡張子でまとめられている。
試しに適当にPHPの<code>rpm</code>をAmazonLinuxがデフォルトで提供する<code>amzn-core</code>リポジトリから取ってくる。
<code>yum</code>については後述。</p>

<pre class="code" data-lang="" data-unlink>$ cd ~
$ mkdir pkg
// installって書いてあるけど、rpm形式のパッケージをとってくるだけ
$ sudo yum install php --downloadonly --downloaddir=.
php-5.4.16-46.amzn2.0.2.x86_64.rpm</pre>


<p>ちょっと怪しいけど、パッケージにはこんな規則で名前がついてるっぽい。</p>

<p>php: パッケージ名称<br />
5.4.16: バージョン番号<br />
46.amzn2.0.2: リリース番号<br />
x86_64: アーキテクチャ</p>

<p>中身を覗いてみる。
<a href="https://www.atmarkit.co.jp/flinux/rensai/linuxtips/522rpmcpio.html">https://www.atmarkit.co.jp/flinux/rensai/linuxtips/522rpmcpio.html</a></p>

<pre class="code" data-lang="" data-unlink>$ mkdir php &amp;&amp; cd php
$ rpm2cpio ../php-5.4.16-46.amzn2.0.2.x86_64.rpm  | cpio -id</pre>


<p>すると、ソースコードではなく、実行ファイルと設定ファイルが入ってることが確認できる。
ソースコードじゃないのでビルドする必要もなくお手軽なんだね。</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ tree
.
├── etc
│   └── httpd
│       ├── conf.d
│       │   └── php.conf
│       └── conf.modules.d
│           └── 10-php.conf
├── usr
│   ├── lib64
│   │   └── httpd
│   │       └── modules
│   │           └── libphp5.so
│   └── share
│       └── httpd
│           └── icons
│               └── php.gif
└── var
    └── lib
        └── php
            └── session
</pre>


<p>上記のように面倒なことをしなくても、<code>rpm -qlp</code>をするとパッケージの中身が確認できる。</p>

<pre class="code" data-lang="" data-unlink>$ rpm -qlp php-5.4.16-46.amzn2.0.2.x86_64.rpm
/etc/httpd/conf.d/php.conf
/etc/httpd/conf.modules.d/10-php.conf
/usr/lib64/httpd/modules/libphp5.so
/usr/share/httpd/icons/php.gif
/var/lib/php/session</pre>


<h4>横道にそれる</h4>

<p>ソースコードからビルドしないってなった場合、この実行ファイルってどの環境がサポートされてるのかが気になった。
AmazonLinux2が提供するパッケージなのでAmazonLinux2は当然なんだけど、これをCentOSとかに持ってたらどうなるのかが気になる。</p>

<p>特に外部リポジトリを追加する場合、AmazonLinux2で動作するパッケージが含まれるリポジトリってどうやって判断するのだろう。</p>

<p>外部リポジトリの<code>epel</code>とかのリンクをみると<code>CentOS</code>も<code>RHEL</code>もまとめられてるから、互換性があるのかな。
<a href="https://fedoraproject.org/wiki/EPEL">https://fedoraproject.org/wiki/EPEL</a></p>

<p>→ そもそも<code>CentOS</code>って<code>RHEL</code>の互換性があることを目指したフリーのディストリビューション。
だから、<code>CentOS</code>と<code>RHEL</code>は互換性があると思ってよさそう。<br />
AmazonLinux2は、<code>RHEL</code>ベースっぽいので、<code>CentOS</code>、<code>RHEL</code>、<code>AmazonLinux2</code>間の互換性はありそう。
<a href="https://qiita.com/akira345/items/2a09c4d06d2e3415bc8d">https://qiita.com/akira345/items/2a09c4d06d2e3415bc8d</a></p>

<p>AWSの公式記事にも<code>epel</code>の追加方法が書いてあって、追加するリポジトリはRHEL7と同じことから、この認識であってそうな気がする。
<a href="https://aws.amazon.com/jp/premiumsupport/knowledge-center/ec2-enable-epel/">https://aws.amazon.com/jp/premiumsupport/knowledge-center/ec2-enable-epel/</a></p>

<p>冒頭に触れたDebian系とかは、そもそもパッケージ管理の仕組みが違うからepelとかもないのかしら？</p>

<h3>yum</h3>

<p>パッケージは<code>rpm</code>でまとめられているんだけど、このrpmはwgetとかで個別にダウンロードしたり、ftpクライアントとかで上げたりといろんな取得方法がある。</p>

<p>なんだけど、手軽に追加したり、消したりするのために<code>yum</code>を使うのが普通。
<code>yum</code>を使うと、登録しているリポジトリからパッケージ名を検索して、<code>rpm</code>を取ってきて、インストールまでしてくれる。</p>

<h2>AmazonLinux2にPHPをインストールする</h2>

<p>ようやく本題。</p>

<h3>AmazonLinxu2が公式が提供するPHPを使う</h3>

<p>公式チュートリアルを見よう。
<a href="https://docs.aws.amazon.com/ja_jp/AWSEC2/latest/UserGuide/ec2-lamp-amazon-linux-2.html">https://docs.aws.amazon.com/ja_jp/AWSEC2/latest/UserGuide/ec2-lamp-amazon-linux-2.html</a></p>

<p>さらっとみると、<code>Amazon Linux Extras</code>リポジトリを追加して、yumではない独自のコマンドでインストールできるみたい。</p>

<h3>特定バージョンのPHPをインストールする。</h3>

<p>PHPを提供しているリポジトリを追加しよう。<code>remi</code>っていうリポジトリがいろんなバージョンを提供してくれている。</p>

<p><a href="https://rpms.remirepo.net/">https://rpms.remirepo.net/</a></p>

<p>リポジトリを追加する前に、せっかくなので今存在しているリポジトリをみてみよう。
いろいろ触っちゃった後なので、初期構築時からかわってるかもしれないけど、以下のようなリポジトリがあることがわかる。</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ yum repolist
読み込んだプラグイン:extras_suggestions, langpacks, priorities, update-motd
リポジトリー ID                                                                                  リポジトリー名                                                                                       状態
!amzn2-core/<span class="synConstant">2</span>/x86_64                                                                             Amazon Linux <span class="synConstant">2</span> core repository                                                                       <span class="synConstant">19</span>,<span class="synConstant">545</span>
amzn2extra-docker/<span class="synConstant">2</span>/x86_64                                                                       Amazon Extras repo <span class="synStatement">for</span> docker
</pre>


<p>若干怪しいのだけど、remiをインストールした際にepelも追加してね！ってメッセージが出た気がするので、epelも追加するよ。<br />
気になる人は、先にremiだけインストールしてみてね。</p>

<pre class="code" data-lang="" data-unlink>$ sudo yum install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
$ sudo yum install -y http://rpms.famillecollet.com/enterprise/remi-release-7.rpm</pre>


<p>この後に、remiとかはデフォルトで有効になってないとのことなので、リポジトリを有効にしてあげます。</p>

<pre class="code" data-lang="" data-unlink>$ sudo yum-config-manager --enable epel
$ sudo yum-config-manager --enable remi</pre>


<p>リポジトリが増えていることが確認できました！</p>

<pre class="code" data-lang="" data-unlink>$ yum repolist
読み込んだプラグイン:extras_suggestions, langpacks, priorities, update-motd
250 packages excluded due to repository priority protections
リポジトリー ID                                                                  リポジトリー名                                                                                                   状態
!amzn2-core/2/x86_64                                                             Amazon Linux 2 core repository                                                                                       19,545
amzn2extra-docker/2/x86_64                                                       Amazon Extras repo for docker                                                                                            24
epel/x86_64                                                                      Extra Packages for Enterprise Linux 7 - x86_64                                                                   13,054+192
remi                                                                             Remi&#39;s RPM repository for Enterprise Linux 7 - x86_64                                                              6,092+55
remi-safe                                                                        Safe Remi&#39;s RPM repository for Enterprise Linux 7 - x86_64                                                          3,791+3</pre>


<p>次に、だいぶ古いPHPの5系を入れていこうと思います。</p>

<p>まずは、現在の状態でどのバージョンのphpがインストールされるか確認してみる。</p>

<pre class="code" data-lang="" data-unlink>$ sudo yum info php
名前                : php
アーキテクチャー    : x86_64
バージョン          : 5.4.16
リリース            : 46.amzn2.0.2
容量                : 1.4 M
リポジトリー        : amzn2-core/2/x86_64</pre>


<p><code>remi</code>ではなく、<code>amzn2-core</code>のリポジトリからになってることがわかる。
<code>yum</code>のコンフィグファイルを設定することで、どのリポジトリを優先するのか変更できるのですが、コマンドラインのオプションでも変更できるので以下のように<code>amzn2-core</code>を無効にしてみる。</p>

<pre class="code" data-lang="" data-unlink>$ sudo yum  info php  --disablerepo=amzn2-core
名前                : php
アーキテクチャー    : x86_64
バージョン          : 5.4.45
リリース            : 18.el7.remi
容量                : 2.8 M</pre>


<p><code>remi</code>の情報を参照してることがわかる！</p>

<p>続いて、狙ったバージョンのPHPをインストールできるように以下のようにしてみる。</p>

<pre class="code" data-lang="" data-unlink>$ sudo yum  info php  --enablerepo=remi-php56 --disablerepo=amzn2-core
名前                : php
アーキテクチャー    : x86_64
バージョン          : 5.6.40
リリース            : 20.el7.remi</pre>


<p><code>remi-php56</code>リポジトリは、phpの特定のバージョンが入ってるリポジトリとのこと。
<a href="https://blog.remirepo.net/pages/English-FAQ#scl">https://blog.remirepo.net/pages/English-FAQ#scl</a></p>

<p>ちなみに、<code>remi-php56</code>リポジトリではなく、<code>remi</code>リポジトリで<code>php56</code>のパッケージ名でもインストールできる。
これの違いは上記FAQにも書いてある通り、<code>remi-phpxx</code>は1環境にひとつのPHPを導入する前提のものっぽくて、インストールされる実行ファイルも<code>php</code>で実行できる。システムのデフォルトのPHPとして実行する感じ。</p>

<p>一方、<code>php56</code>の方でインストールされるファイルは<code>php56</code>になり、デフォルトのPHPとは別でインストールすることができる。
複数バージョンのPHPを導入したいんであれば、こっちを使うのがいいんだね。</p>

<pre class="code" data-lang="" data-unlink>$ sudo yum  info php56   --disablerepo=amzn2-core
名前                : php56
アーキテクチャー    : x86_64
バージョン          : 3.0
リリース            : 1.el7.remi
容量                : 4.0 k
リポジトリー        : remi</pre>


-----
--------
AUTHOR: konoemario
TITLE: VSCode の Prettier の設定を理解する
BASENAME: 2020/01/13/153155
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 01/13/2020 15:31:55
CATEGORY: プログラム
CATEGORY: javascript
-----
BODY:
<h1>VSCode の Prettier の設定を理解する</h1>

<p>VSCode で prettier を使う際に、なんとなくで設定していてたまに困るので整理する。
prettier の vscode 用拡張機能のページをちゃんと読めば、いろいろと書いてあったのでメモ。
<a href="https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode">https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode</a></p>

<h3>どの言語に対応してるんだっけ</h3>

<p>以下の言語(FrameWork)に対応している。</p>

<pre class="code" data-lang="" data-unlink>JavaScript · TypeScript · Flow · JSX · JSON
CSS · SCSS · Less
HTML · Vue · Angular
GraphQL · Markdown · YAML</pre>


<p>プラグインを使うことで、<code>php</code>とか<code>ruby</code>とかもいけるっぽい。
<a href="https://prettier.io/docs/en/plugins.html">https://prettier.io/docs/en/plugins.html</a></p>

<h3>VSCode で prettier を使う場合って何が必要なんだっけ</h3>

<p>1.拡張機能を入れる。
<code>cmd</code>+ <code>shift</code> + <code>P</code>で以下を実行 or VSCode の拡張機能で prettier を検索してインストールする。</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>ext install esbenp.prettier-vscode
</pre>


<p>2.VSCode で最小限の設定をする。
他のドキュメントフォーマット用の拡張機能を導入しているのであれば、<code>cmd</code> + <code>,</code>で設定を開き、右上の JSON 編集画面から以下の設定を行う。(※後述のユーザー or ワークスペースを参照)
特に他のドキュメントフォーマット用の拡張機能を入れてなければ、この設定もいらない。</p>

<pre class="code lang-json" data-lang="json" data-unlink><span class="synSpecial">{</span>
  &quot;<span class="synStatement">editor.defaultFormatter</span>&quot;: &quot;<span class="synConstant">esbenp.prettier-vscode</span>&quot;,
  <span class="synError">// 特定の言語だけデフォルトのドキュメントのフォーマットを設定する場合</span>
  &quot;<span class="synStatement">[javascript]</span>&quot;: <span class="synSpecial">{</span>
    &quot;<span class="synStatement">editor.defaultFormatter</span>&quot;: &quot;<span class="synConstant">esbenp.prettier-vscode</span>&quot;
  <span class="synSpecial">}</span>
<span class="synSpecial">}</span>
</pre>


<p>この状態で、編集したいファイルを開いて、<code>cmd</code> + <code>shift</code> + <code>P</code> -> Format Document を実行 or ファイルを開いた状態で右クリックで、ドキュメントのフォーマットを選択すると prettier を実行することができる。</p>

<h4>ユーザー or ワークスペース</h4>

<p>ワークスペースは、VSCode で現在開いているディレクトリを指している。特定のプロジェクトのみ適用させたい場合は、ワークスペースに書く。ワークスペースに書くと、<code>.vscode</code>ディレクトリの<code>settings.json</code>に設定が記載される。
<code>.vscode</code>で管理するのであれば、git の管理対象に含めておきたい。
一方、プロジェクトを横断する形で全体に適用させたい場合は、ユーザーに書く。
適当に VSCode でマークダウンでメモ書くときも prettier 適用させたい場合とかに便利だね。
優先順位は、ワークスペース > ユーザー設定。</p>

<h3>ファイル保存時に prettier を実行したい</h3>

<p>VSCode で以下の設定を追加する。</p>

<pre class="code lang-json" data-lang="json" data-unlink>    <span class="synError">// prettierに対応している言語は保存時にprettierを行う</span>
    &quot;<span class="synStatement">editor.formatOnSave</span>&quot;: <span class="synConstant">true</span>,
    <span class="synError">// 一部の言語について対象外にしたい場合は、個別で設定を切る</span>
    <span class="synError">// または editor.formatOnSave:trueを必要な言語のみ設定する</span>
    <span class="synError">// ex) 以下はmarkdownは保存時にprettierを実行しない</span>
    &quot;<span class="synStatement">[markdown]</span>&quot;: <span class="synSpecial">{</span>
        &quot;<span class="synStatement">editor.formatOnSave</span>&quot;: <span class="synConstant">false</span>
    <span class="synSpecial">}</span>,
</pre>


<p>、<code>editor.fortmatOnSave</code>は prettier ではなく、eslint の VSCode 拡張機能のためのオプションっぽい？</p>

<h3>VSCode で prettier と、node_modules の prettier ってどんな関係？</h3>

<p>ややこしいので、前者を VSCode 用 prettier、後者を prettier とここでは呼ぶ。
前述の通り、VSCode で prettier を実行するには VSCode 用 prettier を入れるだけでよいので、<br/>
<code>yarn add -D prettier</code>等で <strong>prettier をローカルの node_modules にインストールする必要はない。</strong>
これは、VSCode 用 prettier に、prettier そのものが含まれているから。
しかし、これだと VSCode だけの設定になってしまい、他のエディタや CLI で prettier を実行したい場合不都合がある。
なので、VScode 拡張用の prettier は、node_modules に prettier がインストールされていれば、そちらを実行するようになっている。
プロジェクトとして管理するのであれば、別途 node_modules にインストールしておいたほうがいい。</p>

<h3>フォーマットの設定を変更したい</h3>

<p>以下の 3 つの方法がある。
・prettier がサポートしている設定ファイルを書く
・<code>.editorconfig</code>を使う
・VSCode の設定に直接書く</p>

<h4>prettier がサポートしている設定ファイルを書く</h4>

<p>推奨。
プロジェクトの直下に<code>prettierrc</code>を JSON or YAML 形式で書く、<code>.prettierrc.js</code>にオブジェクト形式で書く、<code>package.json</code>に書く等、好みの方法を選ぶ。
<a href="https://prettier.io/docs/en/configuration.html">https://prettier.io/docs/en/configuration.html</a></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>module.exports = <span class="synIdentifier">{</span>
  <span class="synComment">// prettier.config.js or .prettierrc.jsに書く場合の例</span>
  <span class="synComment">// 行末のセミコロンはいらない</span>
  semi: <span class="synConstant">false</span>
<span class="synIdentifier">}</span>
</pre>


<h4>.editconfig を使う</h4>

<p>EditConfig は、これまた prettier と別のコードフォーマッターで、その設定ファイルが<code>.editconfig</code>になる。
EditConfig 用の VSCode 拡張機能を入れて、<code>.editconfig</code>に設定を書くと、ファイル編集中にコード整形をしてくれる。
この<code>.editconfig</code>に書いた設定の一部を prettier と連携させることができるみたい。
今回、EditConfig は使わないので詳細は割愛。
尚、過去に EditConfig を導入していて、それを忘れたあとに prettier を導入し、ファイル編集中に整形が走り、さらに保存時に別の結果に整形されるという事象に悩まされた。
これは、親ディレクトリに、<code>.editconfig</code>があるから起こることにこのメモを書くことで気づけた。やったね。</p>

<h4>VSCode の設定に直接書く</h4>

<p>非推奨だけど書ける。
尚、prettier の設定ファイル(.editconfig 含む)を探しにいく場合、<strong>対象のプロジェクトだけではなく、ユーザーのルートディレクトリまで遡ってファイルを探しに行く。</strong>
それでもファイルが見つからなかった場合に、VSCode の設定が使われる。</p>

<h1>VSCode の ESLint の設定を理解する。</h1>

<p>eslint は prettier と異なり、VSCode 拡張機能とは別に別途 node_modules に eslint をインストールする必要がある。
v2 になってから設定方法がかわったみたい。VSCode の設定方法はこちらに記事を参考にさせていただく。
<a href="https://qiita.com/mysticatea/items/3f306470e8262e50bb70">https://qiita.com/mysticatea/items/3f306470e8262e50bb70</a>
保存時に eslint --fix を走らせる設定例。</p>

<pre class="code lang-json" data-lang="json" data-unlink>    &quot;<span class="synStatement">editor.codeActionsOnSave</span>&quot;: <span class="synSpecial">{</span>
        &quot;<span class="synStatement">source.fixAll.eslint</span>&quot;: <span class="synConstant">true</span>
    <span class="synSpecial">}</span>,
</pre>


<h1>VSCode で prettier と eslint を連携させる</h1>

<p><a href="https://prettier.io/docs/en/integrating-with-linters.html">https://prettier.io/docs/en/integrating-with-linters.html</a>
1. <code>eslint-config-prettier</code>を追加して、Prettier のルールと衝突するものは ESlint のルールから無効にしておく。
ex) <code>.prettierrc</code>でセミコロン不要って書いとくと、eslint のデフォルト設定でセミコロンが必要になってたとしても、エラーにはならない。
2. <code>eslint-plugin-prettier</code>を追加して、<code>eslint --fix</code>時に prettier も走らせる。
上記は eslint の設定ファイルに、以下を追加するだけでいい。</p>

<pre class="code lang-json" data-lang="json" data-unlink><span class="synSpecial">{</span>
  &quot;<span class="synStatement">extends</span>&quot;: <span class="synSpecial">[</span>&quot;<span class="synConstant">plugin:prettier/recommended</span>&quot;<span class="synSpecial">]</span>
<span class="synSpecial">}</span>
</pre>


<p>前述の保存時に VSCode で<code>eslint --fix</code>を行う例の設定により、prettier の整形処理も行われるようになる。</p>

<pre class="code lang-json" data-lang="json" data-unlink>    &quot;<span class="synStatement">editor.codeActionsOnSave</span>&quot;: <span class="synSpecial">{</span>
        &quot;<span class="synStatement">source.fixAll.eslint</span>&quot;: <span class="synConstant">true</span>
    <span class="synSpecial">}</span>,
</pre>


<h2>補足</h2>

<p>eslint を prettier を連携させるのであれば、VSCode 保存時に prettier を走らせる必要がなくなるので、個別で設定をオフにしとくといい。</p>

<pre class="code lang-json" data-lang="json" data-unlink>    &quot;<span class="synStatement">editor.formatOnSave</span>&quot;: <span class="synConstant">true</span>,
    <span class="synError">// 以下はeslint --fixで行う。</span>
    &quot;<span class="synStatement">[javascript]</span>&quot;: <span class="synSpecial">{</span>
      &quot;<span class="synStatement">editor.formatOnSave</span>&quot;: <span class="synConstant">false</span>
    <span class="synSpecial">}</span>,
    &quot;<span class="synStatement">[typescript]</span>&quot;: <span class="synSpecial">{</span>
      &quot;<span class="synStatement">editor.formatOnSave</span>&quot;: <span class="synConstant">false</span>
    <span class="synSpecial">}</span>,
    &quot;<span class="synStatement">[javascriptreact]</span>&quot;: <span class="synSpecial">{</span>
      &quot;<span class="synStatement">editor.formatOnSave</span>&quot;: <span class="synConstant">false</span>
    <span class="synSpecial">}</span>,
    &quot;<span class="synStatement">[typescriptreact]</span>&quot;: <span class="synSpecial">{</span>
      &quot;<span class="synStatement">editor.formatOnSave</span>&quot;: <span class="synConstant">false</span>
    <span class="synSpecial">}</span>,
</pre>


-----
--------
AUTHOR: konoemario
TITLE: 2019年の振り返り
BASENAME: 2020/01/04/194637
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 01/04/2020 19:46:37
CATEGORY: 雑談
-----
BODY:
<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fwww.tohuandkonsome.site%2Fentry%2F2019%2F01%2F02%2F003749" title="2018年の振り返り  - 豆腐とコンソメ" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://www.tohuandkonsome.site/entry/2019/01/02/003749">www.tohuandkonsome.site</a></cite></p>

<h1>2019年できたこと</h1>

<h4>Reactを少し使えるようになった</h4>

<p>React を業務で使うことができて、なんとなくこんな感じで作ってけばよさそうだなという感覚が得られた。<br/>
2019年に書いた記事もReactに関係するようなものが多かった。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fwww.tohuandkonsome.site%2Fentry%2F2018%2F12%2F29%2F103133" title="年末だしReactに入門する(1) - 豆腐とコンソメ" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://www.tohuandkonsome.site/entry/2018/12/29/103133">www.tohuandkonsome.site</a></cite></p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fwww.tohuandkonsome.site%2Fentry%2F2019%2F01%2F01%2F234714" title="年始だしReactに入門する(2) - 豆腐とコンソメ" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://www.tohuandkonsome.site/entry/2019/01/01/234714">www.tohuandkonsome.site</a></cite></p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fwww.tohuandkonsome.site%2Fentry%2F2019%2F01%2F19%2F194408" title="React.jsのテストコードWorkshopの内容まとめ(1) - 豆腐とコンソメ" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://www.tohuandkonsome.site/entry/2019/01/19/194408">www.tohuandkonsome.site</a></cite></p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fwww.tohuandkonsome.site%2Fentry%2F2019%2F02%2F05%2F231503" title="redux-thunkを学ぶ - 豆腐とコンソメ" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://www.tohuandkonsome.site/entry/2019/02/05/231503">www.tohuandkonsome.site</a></cite></p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fwww.tohuandkonsome.site%2Fentry%2F2019%2F02%2F17%2F154800" title="react-reduxを学ぶ - 豆腐とコンソメ" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://www.tohuandkonsome.site/entry/2019/02/17/154800">www.tohuandkonsome.site</a></cite></p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fwww.tohuandkonsome.site%2Fentry%2F2019%2F03%2F13%2F214020" title="chrome-extensionをReactでさくっとつくる - 豆腐とコンソメ" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://www.tohuandkonsome.site/entry/2019/03/13/214020">www.tohuandkonsome.site</a></cite></p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fwww.tohuandkonsome.site%2Fentry%2F2019%2F09%2F15%2F214928" title="ジェネレーターと非同期処理があんまりわかってなかったのでメモ - 豆腐とコンソメ" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://www.tohuandkonsome.site/entry/2019/09/15/214928">www.tohuandkonsome.site</a></cite></p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fwww.tohuandkonsome.site%2Fentry%2F2019%2F10%2F24%2F210833" title="useEffectでrace conditionとdebounceに対応する - 豆腐とコンソメ" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://www.tohuandkonsome.site/entry/2019/10/24/210833">www.tohuandkonsome.site</a></cite></p>

<h4>jestを使ってテストコードを書きながら実装できるようになった</h4>

<p>こちらも業務でテストコードを実際に書きながら開発する経験ができた。<br/>
またjavascriptだけではなくってC言語で開発する際にもテストコードを書いて実行したときの開発のリズムみたいなのがよくって、この辺に関してはできてよかったなと思う。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fwww.tohuandkonsome.site%2Fentry%2F2019%2F01%2F28%2F205928" title="jestで特定のモジュールのみmockにする - 豆腐とコンソメ" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://www.tohuandkonsome.site/entry/2019/01/28/205928">www.tohuandkonsome.site</a></cite></p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fwww.tohuandkonsome.site%2Fentry%2F2019%2F08%2F26%2F224711" title=" jest + Vue.js でテストコード入門に至る道のり - 豆腐とコンソメ" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://www.tohuandkonsome.site/entry/2019/08/26/224711">www.tohuandkonsome.site</a></cite></p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fwww.tohuandkonsome.site%2Fentry%2F2019%2F11%2F20%2F205130" title="jestのmockを学ぶ - 豆腐とコンソメ" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://www.tohuandkonsome.site/entry/2019/11/20/205130">www.tohuandkonsome.site</a></cite></p>

<h4>フロントエンドの周りの知識がついた</h4>

<p>以前はwebpackが全然わからない状態だったのがすこしマシになった。<br/>
javascritpでモジュールって言葉がでてきたときに、いまだにうまく説明できないんだけど、Cコンパイラ作成に入門したことで、最終的にはアセンブラで変数のスコープをどう扱うのかとか考えたときに、javascriptでファイルをバンドルするあたりになんかこう親和性を覚えた。<br/>
webpackっぽいバンドルツールを作成しようって記事もあったりしたので、これもやってみたい。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fwww.tohuandkonsome.site%2Fentry%2F2019%2F08%2F07%2F234949" title="webpackの設定を行う対話ツールをつくる - 豆腐とコンソメ" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://www.tohuandkonsome.site/entry/2019/08/07/234949">www.tohuandkonsome.site</a></cite></p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fwww.tohuandkonsome.site%2Fentry%2F2019%2F10%2F10%2F215920" title="Typescriptのtargetについて調べてみた - 豆腐とコンソメ" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://www.tohuandkonsome.site/entry/2019/10/10/215920">www.tohuandkonsome.site</a></cite></p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fwww.tohuandkonsome.site%2Fentry%2F2019%2F11%2F17%2F150745" title="ES2015 より前のクラスについてのメモ - 豆腐とコンソメ" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://www.tohuandkonsome.site/entry/2019/11/17/150745">www.tohuandkonsome.site</a></cite></p>

<h4>Cコンパイラを作成しように入門することができた</h4>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fwww.sigbus.info%2Fcompilerbook" title="低レイヤを知りたい人のためのCコンパイラ作成入門" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://www.sigbus.info/compilerbook">www.sigbus.info</a></cite></p>

<p>上記の経典をもとにコンパイラを作成に入門することができた。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fwww.tohuandkonsome.site%2Fentry%2F2019%2F08%2F17%2F133457" title="Cコンパイラ作成に入門してみた - 豆腐とコンソメ" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://www.tohuandkonsome.site/entry/2019/08/17/133457">www.tohuandkonsome.site</a></cite></p>

<p>といっても、自分で作った関数を呼び出せるところまでしかできてないので、どこかで作業を再開したい。
C言語の知識が以前より少しだけついたので、もう一回最初からやり直してもいいななんて思ってる。<br/>
気になるのがC言語で書いてると、すごい手続き型で書くことになる。クラスが使えないからなんだろうけど、何がどうやりにくいのか、みたいなものを自分の理解として落とし込めるようになりたい。<br/>
リファクタリングの本とか読んでいると、考えさせられる。</p>

<p>他には、リンカだったり、ローダーだったり気になる点もあるので周期的に低レイヤに触れていければと思う。</p>

<h4>Webサーバーをつくってみように入門することができた</h4>

<p>ふつうのLinuxプログラムに記載されているWebサーバー作成に入門することはできた。<br/>
といってもほぼ写経しただけなので、Apacheのprefork型だったり、Nginxのevent型だったり気になることがまだまだ残ってる。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fwww.tohuandkonsome.site%2Fentry%2F2020%2F01%2F04%2F172537" title="ApacheでCGIを実行する仕組みをのぞいてみる - 豆腐とコンソメ" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://www.tohuandkonsome.site/entry/2020/01/04/172537">www.tohuandkonsome.site</a></cite></p>

<h1>その他できなかったこと・やりたいこと</h1>

<h4>ネイティブアプリを作成する</h4>

<p>ReactNativeかFlutter or SwiftでiOSアプリを一回つくってみたい。</p>

<h4>個人で案件を請け負う</h4>

<p>クラウドワークスとかで案件の提案とかだけはしてみたんだけど、案件が全然とれない。
いい感じの工数のものがあれば引き続き提案をしていきたいと思う。</p>

<h4>英語を勉強する</h4>

<p>エンジニアは英語必要だよねーといことなんだけど、読む以上に人とコミニュケーションを取ってみたくって、瞬間英作文を以前からやってる。中学英文法ぐらいのかんたんなやりとりはさくっとできるようにしたい。</p>

<h4>オブジェクト指向に踏み込む</h4>

<p>2019年はjavascrptをメインでやっていて、あんまりクラスを使った実装をすることがなかった。<br/>
ドメイン駆動の話とか全然ついていけてないので、勉強しなおしたい。</p>

-----
--------
AUTHOR: konoemario
TITLE: ApacheでCGIを実行する仕組みをのぞいてみる
BASENAME: 2020/01/04/172537
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 01/04/2020 17:25:37
CATEGORY: C
CATEGORY: プログラム
CATEGORY: Apache
IMAGE: https://images-fe.ssl-images-amazon.com/images/I/51P7Lxl0cKL._SL160_.jpg
-----
BODY:
<p>過去にPHPで以下のコードを実行した場合、この<code>print</code>の結果はどこに吐かれるんだろう、と混乱したことがあった。</p>

<pre class="code lang-php" data-lang="php" data-unlink><span class="synSpecial">&lt;?php</span>
<span class="synPreProc">print</span><span class="synSpecial">(</span><span class="synConstant">&quot;Hello World&quot;</span><span class="synSpecial">)</span>;
</pre>


<p>CLIで実行すれば、制御端末のコンソールに表示されるんだろうけど、NginxやApacheのようにWebサーバー越しで実行している場合、あれーとわからなくなったのだ。
実際のところ記憶が曖昧だけど、HTMLとして出力されていたり、どっかのログに吐かれていたような気がする。</p>

<p>この疑問を解消しようと思ったとき、そもそもC言語で実装されているNginxやApacheでどうやってPHPを動かしているんだろうという部分に行き当たることになった。</p>

<p>ちょうど年末からLinuxでWebサーバーをお試しでつくってみようということをやっていたので、実装の参考にするべくApacheのソースコードを眺めつつ、まずはApacheから任意のプログラムを実行するCGIの仕組みについて調べることにした。</p>

<p>Linuxの基本調べるにあたっては、以下の書籍を参考にしています。<br/>
<div class="hatena-asin-detail"><a href="https://www.amazon.co.jp/exec/obidos/ASIN/4797386479/hatena-blog-22/"><img src="https://images-fe.ssl-images-amazon.com/images/I/51P7Lxl0cKL._SL160_.jpg" class="hatena-asin-detail-image" alt="ふつうのLinuxプログラミング 第2版 Linuxの仕組みから学べるgccプログラミングの王道" title="ふつうのLinuxプログラミング 第2版 Linuxの仕組みから学べるgccプログラミングの王道"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="https://www.amazon.co.jp/exec/obidos/ASIN/4797386479/hatena-blog-22/">ふつうのLinuxプログラミング 第2版 Linuxの仕組みから学べるgccプログラミングの王道</a></p><ul><li><span class="hatena-asin-detail-label">作者:</span><a href="http://d.hatena.ne.jp/keyword/%C0%C4%CC%DA%20%CA%F6%CF%BA" class="keyword">青木 峰郎</a></li><li><span class="hatena-asin-detail-label">出版社/メーカー:</span> SBクリエイティブ</li><li><span class="hatena-asin-detail-label">発売日:</span> 2017/09/22</li><li><span class="hatena-asin-detail-label">メディア:</span> 単行本</li></ul></div><div class="hatena-asin-detail-foot"></div></div></p>

<ul class="table-of-contents">
    <li><a href="#まずは結論">まずは結論</a></li>
    <li><a href="#C言語からNodejsを実行する">C言語からNode.jsを実行する</a><ul>
            <li><a href="#基本">基本</a></li>
            <li><a href="#forkと組み合わせる">forkと組み合わせる</a></li>
            <li><a href="#子プロセスの結果を親プロセスで受け取る">子プロセスの結果を親プロセスで受け取る</a><ul>
                    <li><a href="#パイプ">パイプ</a></li>
                </ul>
            </li>
            <li><a href="#FastCGI">FastCGI</a></li>
        </ul>
    </li>
</ul>

<h1 id="まずは結論">まずは結論</h1>

<ul>
<li>自プロセスを新しいプログラムで上書きして実行するAPIである<code>exec</code>を使う。</li>
</ul>


<p>以下はApacheの該当部分のソースコード。</p>

<pre class="code lang-c" data-lang="c" data-unlink>        <span class="synStatement">else</span> <span class="synStatement">if</span> (attr-&gt;cmdtype == APR_PROGRAM) {
            <span class="synStatement">if</span> (attr-&gt;detached) {
                apr_proc_detach(APR_PROC_DETACH_DAEMONIZE);
            }

            execve(progname, (<span class="synType">char</span> * <span class="synType">const</span> *)args, (<span class="synType">char</span> * <span class="synType">const</span> *)env);
        }
</pre>


<ul>
<li>上記のexecはfork &amp; execで実行されるので、毎回プロセスを生成する必要があり、その分のオーバーヘッドが大きい。</li>
</ul>


<h1 id="C言語からNodejsを実行する">C言語からNode.jsを実行する</h1>

<p>あれ？PHPは？と思ったけど、ひとまずC言語以外ならなんでもいいかと思い、気づいたらNode.jsをインストールしていた。
ということでC言語からNode.jsを実行してみる。</p>

<h2 id="基本">基本</h2>

<p>実行するjsは以下のように文字列を標準出力に吐くだけのプログラム。</p>

<p><b>sample.js</b></p>

<pre class="code js" data-lang="js" data-unlink>console.log(&#34;hello&#34;);</pre>


<p>これをC言語から呼ぶには、<code>exec</code>族と呼ばれる関数を使う。
<code>exec</code>族にはいろんな種類があるんだけど、ここでは<code>execve</code>を使うことにする。
<code>execve</code>は引数で指定したプログラムを自プロセスに上書きしてくれるLinuxのシステムコールで、他のexec族の関数は<code>execve</code>をラップしているライブラリ関数とのこと。</p>

<p>以下のように使うことができる。</p>

<p><b>main.c</b></p>

<pre class="code lang-c" data-lang="c" data-unlink><span class="synType">void</span> main() {
  <span class="synType">char</span> *argv[<span class="synConstant">3</span>] = {<span class="synConstant">&quot;node&quot;</span>, <span class="synConstant">&quot;sample.js&quot;</span>, <span class="synConstant">NULL</span>};

  <span class="synComment">// `execve`の第1引数には、実行するプログラムのパスを書いて、第2引数にはプログラムに渡す引数を文字列の配列として渡す。</span>
  <span class="synComment">//  文字列の配列の最初の要素はプログラムの名前をセットする慣習があるので、`node`という文字列をセットした。</span>
  <span class="synComment">//  第3引数は、プログラムを実行する際の環境変数を設定する。NULL の場合、現在の環境変数をそのまま使う。</span>
  execve(<span class="synConstant">&quot;/usr/bin/node&quot;</span>, argv, <span class="synConstant">NULL</span>);

  printf(<span class="synConstant">&quot;execveが成功しているのであれば、このコードは実行されない</span><span class="synSpecial">\n</span><span class="synConstant">&quot;</span>);
  exit(<span class="synConstant">1</span>);
}
</pre>


<p>前述の通り、<code>execve</code>は引数で指定したプログラムを自プロセスに上書きするので、<code>execve</code>以降の処理は実行されることがない。</p>

<p>これを実行すると、以下のように<code>sample.js</code>の実行結果が標準出力に表示された。すごい。</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ ./<span class="synStatement">exec</span>
hello
</pre>


<h2 id="forkと組み合わせる">forkと組み合わせる</h2>

<p>これで目的の8割ぐらいは達成できたんだけれども、WebサーバーのCGIとして使う場合、Node.jsで処理した結果をHTTPのレスポンスとして返す必要がでてくる。</p>

<p>今のままだと、Node.jsの処理の実行が終わるとそのままプログラムが終了してしまうため、これに対応するために<code>fork</code>を使うことにする。</p>

<p><code>fork</code>は自身のプロセスをコピーして新しいプロセスをつくるLinuxのシステムコール。
<code>execve</code>は任意のプログラムをプロセスに上書きするので、forkしてそれ用にプロセス一個つくっとこうという感じでしょうかね。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fwww.tohuandkonsome.site%2Fentry%2F2018%2F06%2F14%2F204835" title="プロセスをforkしてみる - 豆腐とコンソメ" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://www.tohuandkonsome.site/entry/2018/06/14/204835">www.tohuandkonsome.site</a></cite></p>

<p>forkと組み合わせると以下の通りになります。</p>

<pre class="code lang-c" data-lang="c" data-unlink><span class="synType">void</span> main() {
  pid_t pid;
  pid = fork();

  <span class="synStatement">if</span>(pid &lt; <span class="synConstant">0</span>) {
    fprintf(<span class="synConstant">stderr</span>, <span class="synConstant">&quot;fork(2) failed</span><span class="synSpecial">\n</span><span class="synConstant">&quot;</span>);
    exit(<span class="synConstant">1</span>);
  }

  <span class="synStatement">if</span>(pid == <span class="synConstant">0</span>) {
    <span class="synComment">// 子プロセス</span>
    <span class="synType">char</span> *argv[<span class="synConstant">3</span>] = {<span class="synConstant">&quot;hoge&quot;</span>, <span class="synConstant">&quot;sample.js&quot;</span>, <span class="synConstant">NULL</span>};
    execve(<span class="synConstant">&quot;/usr/bin/node&quot;</span>, argv, <span class="synConstant">NULL</span>);

    printf(<span class="synConstant">&quot;execveが成功しているのであれば、このコードは実行されない</span><span class="synSpecial">\n</span><span class="synConstant">&quot;</span>);
   exit(<span class="synConstant">1</span>);
  } <span class="synStatement">else</span> {
    <span class="synComment">// 親プロセス</span>

    <span class="synComment">//ここに子プロセスの終了をまって、結果を受け取るコードを書く</span>
    <span class="synType">int</span> status;
    wait(&amp;status);
  }
  exit(<span class="synConstant">0</span>);
}
</pre>


<h2 id="子プロセスの結果を親プロセスで受け取る">子プロセスの結果を親プロセスで受け取る</h2>

<p>最後に子プロセスで実行したNode.jsの結果を親プロセスで取得する。
ここでいうNode.jsの結果とは、<code>console.log()</code>で標準出力に出力している文字列<code>hello</code>を指している。</p>

<p>まずは、Node.jsで使う標準出力の出力先を任意のファイルに変更してみることにする。
これは<code>dup</code>関数を使用することで実現できる。</p>

<pre class="code lang-c" data-lang="c" data-unlink><span class="synType">void</span> main() {
  pid_t pid;
  <span class="synType">int</span> fd;

  <span class="synComment">// 子プロセスが標準出力に吐く結果を保持するファイル</span>
  fd = open(<span class="synConstant">&quot;sample.txt&quot;</span>, O_RDWR);
  <span class="synStatement">if</span>(fd &lt; <span class="synConstant">0</span>) {
    fprintf(<span class="synConstant">stderr</span>, <span class="synConstant">&quot;open(2) failed</span><span class="synSpecial">\n</span><span class="synConstant">&quot;</span>);
    exit(<span class="synConstant">1</span>);
  }

  pid = fork();

  <span class="synStatement">if</span>(pid &lt; <span class="synConstant">0</span>) {
    fprintf(<span class="synConstant">stderr</span>, <span class="synConstant">&quot;fork(2) failed</span><span class="synSpecial">\n</span><span class="synConstant">&quot;</span>);
    exit(<span class="synConstant">1</span>);
  }

  <span class="synStatement">if</span>(pid == <span class="synConstant">0</span>) {
    <span class="synComment">// 子プロセス</span>

    <span class="synComment">// もともとの標準出力はクローズして</span>
    close(STDOUT_FILENO);
    <span class="synComment">// sample.txtにつながっているファイルディスクリプタfdを、子プロセスの標準出力に割り当てる</span>
    dup2(fd, STDOUT_FILENO);
    <span class="synType">char</span> *argv[<span class="synConstant">3</span>] = {<span class="synConstant">&quot;hoge&quot;</span>, <span class="synConstant">&quot;sample.js&quot;</span>, <span class="synConstant">NULL</span>};
    execve(<span class="synConstant">&quot;/usr/bin/node&quot;</span>, argv, <span class="synConstant">NULL</span>);

    printf(<span class="synConstant">&quot;execveが成功しているのであれば、このコードは実行されない</span><span class="synSpecial">\n</span><span class="synConstant">&quot;</span>);
    exit(<span class="synConstant">1</span>);
  } <span class="synStatement">else</span> {
    <span class="synComment">// 親プロセス</span>
    <span class="synType">int</span> status;
    wait(&amp;status);
  }
  exit(<span class="synConstant">0</span>);
}
</pre>


<p>この状態で実行すると、<code>sample.txt</code>には文字列<code>hello</code>が書き込まれることが確認できた。<br/>
これによって、子プロセスでファイルに書き込んだ文字列を親プロセスでオープンしで読むことができそうな気がする。</p>

<p>とはいえ、ファイルのオープン・クローズだったりはオーバーヘッドが高いと聞くので普通はこんなやり方をせずに、プロセス同士でやり取りできるパイプを使う。</p>

<h3 id="パイプ">パイプ</h3>

<p>パイプを使うと、ファイルを用意することなく、プロセス間でデータのやりとりが行える。</p>

<pre class="code lang-c" data-lang="c" data-unlink><span class="synType">int</span> main() {
  pid_t pid;
  <span class="synType">char</span> *argv[<span class="synConstant">3</span>] = {<span class="synConstant">&quot;node&quot;</span>, <span class="synConstant">&quot;sample.js&quot;</span>, <span class="synConstant">NULL</span>};
  <span class="synType">int</span> fds[<span class="synConstant">2</span>];
  <span class="synType">char</span> buf[<span class="synConstant">100</span>];

  <span class="synComment">// pipeは、自分のプロセスへの読み取りと書き込み用のファイルディスクリプタを返してくれる。</span>
  <span class="synComment">// fds[0]はread fds[1]はwrite</span>
  pipe(fds);
  pid = fork();

  <span class="synStatement">if</span>(pid &lt; <span class="synConstant">0</span>) {
    fprintf(<span class="synConstant">stderr</span>, <span class="synConstant">&quot;fork(2) failed</span><span class="synSpecial">\n</span><span class="synConstant">&quot;</span>);
    exit(<span class="synConstant">1</span>);
  }

  <span class="synStatement">if</span>(pid == <span class="synConstant">0</span>) {
    <span class="synComment">// 子プロセスの場合</span>

    <span class="synComment">// pipeで作成したファイルディスクリプタはforkした場合、そのまま子プロセスに複製される。</span>
    <span class="synComment">// これにより、子プロセスで書き込み用ファイルディスクリプタに書いて、親プロセスで読み取り用のファイルディスクリプタを読むことでやりとりが可能。</span>

    <span class="synComment">// 子プロセスではread用のファイルディスクリプタは使わないのでクローズする。</span>
    close(fds[<span class="synConstant">0</span>]);
    <span class="synComment">// もともとの標準出力は使わないのでクローズ。</span>
    close(STDOUT_FILENO);
    <span class="synComment">// 標準出力にpipeで作った書き込み用ファイルディスクリプタを割り当てる</span>
    dup2(fds[<span class="synConstant">1</span>], STDOUT_FILENO);

    execve(<span class="synConstant">&quot;/usr/bin/node&quot;</span>, argv, <span class="synConstant">NULL</span>);

    printf(<span class="synConstant">&quot;execveが成功しているのであれば、このコードは実行されない</span><span class="synSpecial">\n</span><span class="synConstant">&quot;</span>);
    exit(<span class="synConstant">1</span>);
  } <span class="synStatement">else</span> {
    <span class="synComment">// 親プロセス</span>
    <span class="synType">int</span> status;
    <span class="synComment">// 親プロセスは、write用のファイルディスクリプタは使わないのでクローズする。</span>
    close(fds[<span class="synConstant">1</span>]);
    <span class="synComment">// 子プロセスの終了を待つ</span>
    wait(&amp;status);
    <span class="synComment">// 子プロセスが書き出した結果を読み込む</span>
    read(fds[<span class="synConstant">0</span>], buf, <span class="synConstant">100</span>);

    printf(<span class="synConstant">&quot;parent fds[1]: </span><span class="synSpecial">%s\n</span><span class="synConstant">&quot;</span>, buf);
  }

  <span class="synStatement">return</span> <span class="synConstant">0</span>;
}
</pre>


<p>実際のApacheのコードを読んでも、dupを使ってることが確認できた。</p>

<h2 id="FastCGI">FastCGI</h2>

<p>FastCGIは既存のCGIがリクエストの度にプロセスを生成するオーバーヘッドを解消するための規格。
プロトコルの詳細はこのへんに書いてある。
<a href="https://fastcgi-archives.github.io/FastCGI_A_High-Performance_Web_Server_Interface_FastCGI.html">https://fastcgi-archives.github.io/FastCGI_A_High-Performance_Web_Server_Interface_FastCGI.html</a></p>

<p>ApacheでFastCGIをやる場合、mod_fcgidとmod_fastcgiがある。
前者はApacheが提供していて、後者はFastCGIの規格を作った？会社が提供している。</p>

<p>後者は公式でメンテされることがないので、もし使うのであれば前者がよいかも。
mod_fcgidを使ってみたところ、以下の3つのプロセスが起動することが確認できる。</p>

<p>・Apache本体<br/>
・CGI処理用デーモン <br/>
・CGI本体</p>

<p> 大事なのは、FastCGIの規格は、CGI処理用デーモンだけじゃなくって、CGI本体にも適用させる必要がある。
C言語でサンプルのFastCGIをつくるのであれば、以下のtiny-fcgi.cが参考になる。
<a href="https://fastcgi-archives.github.io/FastCGI_Developers_Kit_FastCGI.html">https://fastcgi-archives.github.io/FastCGI_Developers_Kit_FastCGI.html</a>
実装を見ると、CGI側でLoopしてリクエストを待ち続けていることがわかる。
Perl・Cとかのライブラリは提供されているけど、仮にNode.jsでFastCGIをやりたいとなると、自分でFastCGIの規格を読んで実装する必要がある。
 ※それっぽいパッケージはいくつかありそうだった。
 とはいえ、Node.jsはhttpモジュールでWebサーバーとしての機能がデフォルトで用意されていて、かつノンブロッキングI/O(あんまわかってない)の考え方のもと作られているから、わざわざApache + FastCGIでNode.jsみたいな構成でやる意味はない。
<a href="https://groups.google.com/forum/#!topic/nodejs_jp/-BytMnNPshM">https://groups.google.com/forum/#!topic/nodejs_jp/-BytMnNPshM</a></p>

-----
--------
AUTHOR: konoemario
TITLE: jestのmockを学ぶ
BASENAME: 2019/11/20/205130
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 11/20/2019 20:51:30
CATEGORY: jest
CATEGORY: javascript
CATEGORY: typescript
CATEGORY: プログラム
-----
BODY:
<h1>モックを学ぶ</h1>

<p><code>jest</code>を使っていてモックで毎回あれ？ってなるので備忘録</p>

<p>関連
<iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fwww.tohuandkonsome.site%2Fentry%2F2019%2F01%2F28%2F205928" title="jestで特定のモジュールのみmockにする - 豆腐とコンソメ" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://www.tohuandkonsome.site/entry/2019/01/28/205928">www.tohuandkonsome.site</a></cite></p>

<h2>前提</h2>

<p><b>テスト対象のtarget.js</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">import</span> getName, <span class="synIdentifier">{</span> getAge <span class="synIdentifier">}</span> from <span class="synConstant">&quot;./service&quot;</span>;

<span class="synComment">// 関数の場合</span>
<span class="synStatement">export</span> <span class="synStatement">default</span> (id: string) =&gt; <span class="synIdentifier">{</span>
  <span class="synStatement">const</span> <span class="synIdentifier">{</span> name <span class="synIdentifier">}</span> = getName(id);
  <span class="synStatement">const</span> <span class="synIdentifier">{</span> age <span class="synIdentifier">}</span> = getAge(id);
  <span class="synStatement">return</span> <span class="synIdentifier">{</span> name, age <span class="synIdentifier">}</span>;
<span class="synIdentifier">}</span>;

<span class="synComment">// クラスの場合</span>
<span class="synStatement">export</span> <span class="synStatement">const</span> verClass = (id: string) =&gt; <span class="synIdentifier">{</span>
  <span class="synStatement">const</span> member = <span class="synStatement">new</span> Member(id);
  <span class="synStatement">const</span> <span class="synIdentifier">{</span> name <span class="synIdentifier">}</span> = member.getName();
  <span class="synStatement">const</span> <span class="synIdentifier">{</span> age <span class="synIdentifier">}</span> = member.getAge();
  <span class="synStatement">return</span> <span class="synIdentifier">{</span> name, age <span class="synIdentifier">}</span>;
<span class="synIdentifier">}</span>;
</pre>


<p><b>モック対象のservice.js</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">const</span> getName = (id: string) =&gt; <span class="synIdentifier">{</span>
  <span class="synStatement">return</span> <span class="synIdentifier">{</span> name: `$<span class="synIdentifier">{</span>id<span class="synIdentifier">}</span>_tarou` <span class="synIdentifier">}</span>;
<span class="synIdentifier">}</span>;

<span class="synStatement">export</span> <span class="synStatement">default</span> getName;

<span class="synStatement">export</span> <span class="synStatement">const</span> getAge = (id: string) =&gt; <span class="synIdentifier">{</span>
  <span class="synStatement">return</span> <span class="synIdentifier">{</span> age: `$<span class="synIdentifier">{</span>id<span class="synIdentifier">}</span>_21` <span class="synIdentifier">}</span>;
<span class="synIdentifier">}</span>;

<span class="synStatement">export</span> <span class="synStatement">class</span> Member <span class="synIdentifier">{</span>
  id: string;
  constructor(id: string) <span class="synIdentifier">{</span>
    <span class="synIdentifier">this</span>.id = id;
  <span class="synIdentifier">}</span>
  getName() <span class="synIdentifier">{</span>
    <span class="synStatement">return</span> <span class="synIdentifier">{</span> name: `$<span class="synIdentifier">{this</span>.id<span class="synIdentifier">}</span>_tarou` <span class="synIdentifier">}</span>;
  <span class="synIdentifier">}</span>
  getAge() <span class="synIdentifier">{</span>
    <span class="synStatement">return</span> <span class="synIdentifier">{</span> age: `$<span class="synIdentifier">{this</span>.id<span class="synIdentifier">}</span>_21` <span class="synIdentifier">}</span>;
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>
</pre>


<h3>基本のテスト</h3>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">import</span> target from <span class="synConstant">&quot;../../target&quot;</span>;

it(<span class="synConstant">&quot;targetにtarouを設定して実行すると{result: 'tarou'}}が返却されること&quot;</span>, () =&gt; <span class="synIdentifier">{</span>
  <span class="synComment">// 関数ver</span>
  expect(target(<span class="synConstant">&quot;01&quot;</span>)).toEqual(<span class="synIdentifier">{</span> name: <span class="synConstant">&quot;01_tarou&quot;</span>, age: <span class="synConstant">&quot;01_21&quot;</span> <span class="synIdentifier">}</span>);
  <span class="synComment">// クラスver</span>
  expect(verClass(<span class="synConstant">&quot;01&quot;</span>)).toEqual(<span class="synIdentifier">{</span> name: <span class="synConstant">&quot;01_tarou&quot;</span>, age: <span class="synConstant">&quot;01_21&quot;</span> <span class="synIdentifier">}</span>);
<span class="synIdentifier">}</span>);
</pre>


<h3>最初のモック</h3>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">import</span> target from <span class="synConstant">&quot;../../target&quot;</span>;

<span class="synComment">// serviceをモックする</span>
jest.mock(<span class="synConstant">&quot;../../service&quot;</span>);

it(<span class="synConstant">&quot;省略&quot;</span>);
</pre>


<p><code>jest.mock</code>でモックしたいモジュールを指定する。ここでは、パスは、<code>sample.test.ts</code>からの相対パスを指定している。</p>

<p><code>jest.mock</code>の第 2 引数にモックしたモジュールの実装を書くことができる。
何も書かないと、<code>undefined</code>を返す関数が設定される。</p>

<p>イメージとしてはモックされた<code>service.ts</code>はこんな感じのコードに置き換えられる。</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">const</span> getName = () =&gt; <span class="synIdentifier">{}</span>;
<span class="synStatement">export</span> <span class="synStatement">const</span> getAge = () =&gt; <span class="synIdentifier">{}</span>;
<span class="synStatement">export</span> <span class="synStatement">const</span> Member = () =&gt; <span class="synIdentifier">{}</span>;
<span class="synStatement">export</span> <span class="synStatement">default</span> getName;
</pre>


<p>この状態でテストを実行すると、テストが失敗することが確認できる。</p>

<h3>　モックの実装を書く</h3>

<p><code>default export</code>だけのモックを書くだけであれば、以下のようにシンプルに書ける。</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>jest.mock(<span class="synConstant">'../../service'</span>, () =&gt; <span class="synIdentifier">{</span>
  <span class="synStatement">return</span> (id:string) =&gt; <span class="synIdentifier">{</span>
    <span class="synStatement">return</span> <span class="synIdentifier">{</span> name: `$<span class="synIdentifier">{</span>id<span class="synIdentifier">}</span>_tarou` <span class="synIdentifier">}</span>;
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>
</pre>


<p>アロー関数なので<code>return</code>すればよりシンプルになるけど、ひとまずそのまま。</p>

<p>上記の状態だと、モックされた<code>service.ts</code>は以下のように置き換えられる。</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synComment">// default export だけ置き換わる</span>
<span class="synStatement">const</span> getName = (id: string) =&gt; <span class="synIdentifier">{</span>
  <span class="synStatement">return</span> <span class="synIdentifier">{</span> name: `$<span class="synIdentifier">{</span>id<span class="synIdentifier">}</span>_tarou` <span class="synIdentifier">}</span>;
<span class="synIdentifier">}</span>;
<span class="synStatement">export</span> <span class="synStatement">const</span> getAge = () =&gt; <span class="synIdentifier">{}</span>;
<span class="synStatement">export</span> <span class="synStatement">const</span> Member = () =&gt; <span class="synIdentifier">{}</span>;
<span class="synStatement">export</span> <span class="synStatement">default</span> getName;
</pre>


<p>あんまり使う局面はないかもしれないけど、<code>default export</code> だけじゃなくって<code>named export</code>もモックする場合は、<code>__esModule</code>オプションの設定すれば対応できる。</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>jest.mock(<span class="synConstant">'../../service'</span>, () =&gt; <span class="synIdentifier">{</span>
  <span class="synStatement">return</span> <span class="synIdentifier">{</span>
    __esModule:<span class="synConstant">true</span>,
    <span class="synComment">// defualt export</span>
    <span class="synStatement">default</span>: (id:string) =&gt; <span class="synIdentifier">{</span> <span class="synStatement">return</span> <span class="synIdentifier">{</span> name:`$<span class="synIdentifier">{</span>id<span class="synIdentifier">}</span>_tarou` <span class="synIdentifier">}}</span>,
    <span class="synComment">// named export</span>
    getAge: (id:string) =&gt; <span class="synIdentifier">{</span> <span class="synStatement">return</span> <span class="synIdentifier">{</span> age: `$<span class="synIdentifier">{</span>id<span class="synIdentifier">}</span>_21` <span class="synIdentifier">}}</span>,
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>
</pre>


<p>上記に加え、named export されている<code>Member</code>クラスのモックも追加する。</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>jest.mock(<span class="synConstant">'../../service'</span>, () =&gt; <span class="synIdentifier">{</span>
  <span class="synComment">// ES2015より前のクラス構文をちょうど学んだので、こっちで書いてみる</span>
  <span class="synComment">// 特に意味はない</span>
  <span class="synStatement">const</span> Member = <span class="synIdentifier">function</span>(<span class="synIdentifier">this</span>: any, id:string) <span class="synIdentifier">{</span>
    <span class="synIdentifier">this</span>.id = id
  <span class="synIdentifier">}</span>
  Member.prototype = <span class="synIdentifier">{</span>
    getName: <span class="synIdentifier">function</span>() <span class="synIdentifier">{</span>
      <span class="synStatement">return</span> <span class="synIdentifier">{</span> name: `$<span class="synIdentifier">{this</span>.id<span class="synIdentifier">}</span>_tarou` <span class="synIdentifier">}</span>
    <span class="synIdentifier">}</span>,
    getAge: <span class="synIdentifier">function</span>() <span class="synIdentifier">{</span>
      <span class="synStatement">return</span> <span class="synIdentifier">{</span> age: `$<span class="synIdentifier">{this</span>.id<span class="synIdentifier">}</span>_21` <span class="synIdentifier">}</span>
    <span class="synIdentifier">}</span>
  <span class="synIdentifier">}</span>

  <span class="synComment">// 通常は、実際の実装と同じようににクラス構文を使えばいい</span>
  <span class="synComment">//class Member {</span>
  <span class="synComment">//  id:string</span>
  <span class="synComment">//  constructor(id:string) {</span>
  <span class="synComment">//    this.id = id</span>
  <span class="synComment">//  }</span>
  <span class="synComment">//  getName() {</span>
  <span class="synComment">//    return { name: `${this.id}_tarou` }</span>
  <span class="synComment">//  }</span>
  <span class="synComment">//  getAge() {</span>
  <span class="synComment">//    return { age: `${this.id}_21` }</span>
  <span class="synComment">//  }</span>
  <span class="synComment">//}</span>

  <span class="synStatement">return</span> <span class="synIdentifier">{</span>
    __esModule:<span class="synConstant">true</span>,
    <span class="synStatement">default</span>: (id:string) =&gt; <span class="synIdentifier">{</span> <span class="synStatement">return</span> <span class="synIdentifier">{</span> name:`$<span class="synIdentifier">{</span>id<span class="synIdentifier">}</span>_tarou` <span class="synIdentifier">}}</span>,
    getAge: (id:string) =&gt; <span class="synIdentifier">{</span> <span class="synStatement">return</span> <span class="synIdentifier">{</span> age: `$<span class="synIdentifier">{</span>id<span class="synIdentifier">}</span>_21` <span class="synIdentifier">}}</span>,
    Member
  <span class="synIdentifier">}</span>
</pre>


<h3>jest.mock のハマりどころ</h3>

<p>さきほどまでは、<code>jest.mock</code>配下に<code>Member</code>クラスの実装を書いていた。</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>jest.mock(<span class="synConstant">&quot;../../service&quot;</span>, () =&gt; <span class="synIdentifier">{</span>
  <span class="synComment">// 内容は省略</span>
  <span class="synStatement">class</span> Member <span class="synIdentifier">{}</span>

  <span class="synStatement">return</span> <span class="synIdentifier">{</span>
    __esModule: <span class="synConstant">true</span>,
    <span class="synStatement">default</span>: (id: string) =&gt; <span class="synIdentifier">{</span>
      <span class="synStatement">return</span> <span class="synIdentifier">{</span> name: `$<span class="synIdentifier">{</span>id<span class="synIdentifier">}</span>_tarou` <span class="synIdentifier">}</span>;
    <span class="synIdentifier">}</span>,
    getAge: (id: string) =&gt; <span class="synIdentifier">{</span>
      <span class="synStatement">return</span> <span class="synIdentifier">{</span> age: `$<span class="synIdentifier">{</span>id<span class="synIdentifier">}</span>_21` <span class="synIdentifier">}</span>;
    <span class="synIdentifier">}</span>,
    Member
  <span class="synIdentifier">}</span>;
<span class="synIdentifier">}</span>);
</pre>


<p><code>jest.mock</code>に設定する関数が長くなるので、見通しがわるくるなるので、以下のように<code>Member</code>を<code>jest.mock</code>の外に出してみる。</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synComment">// 外に出してみた</span>
<span class="synComment">// 内容は省略</span>
<span class="synStatement">class</span> Member <span class="synIdentifier">{}</span>

jest.mock(<span class="synConstant">&quot;../../service&quot;</span>, () =&gt; <span class="synIdentifier">{</span>
  <span class="synStatement">return</span> <span class="synIdentifier">{</span>
    __esModule: <span class="synConstant">true</span>,
    <span class="synStatement">default</span>: (id: string) =&gt; <span class="synIdentifier">{</span>
      <span class="synStatement">return</span> <span class="synIdentifier">{</span> name: `$<span class="synIdentifier">{</span>id<span class="synIdentifier">}</span>_tarou` <span class="synIdentifier">}</span>;
    <span class="synIdentifier">}</span>,
    getAge: (id: string) =&gt; <span class="synIdentifier">{</span>
      <span class="synStatement">return</span> <span class="synIdentifier">{</span> age: `$<span class="synIdentifier">{</span>id<span class="synIdentifier">}</span>_21` <span class="synIdentifier">}</span>;
    <span class="synIdentifier">}</span>,
    Member
  <span class="synIdentifier">}</span>;
<span class="synIdentifier">}</span>);
</pre>


<p>この場合エラーになる。
なぜなら<code>jest.mock</code>で設定した内容は、jest 実行時にコードの先頭箇所へと hoisting される。
具体的には以下のような実行順序になる。</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>jest.mock(<span class="synConstant">&quot;../../service&quot;</span>, () =&gt; <span class="synIdentifier">{</span>
  <span class="synStatement">return</span> <span class="synIdentifier">{</span>
    __esModule: <span class="synConstant">true</span>,
    <span class="synStatement">default</span>: (id: string) =&gt; <span class="synIdentifier">{</span>
      <span class="synStatement">return</span> <span class="synIdentifier">{</span> name: `$<span class="synIdentifier">{</span>id<span class="synIdentifier">}</span>_tarou` <span class="synIdentifier">}</span>;
    <span class="synIdentifier">}</span>,
    getAge: (id: string) =&gt; <span class="synIdentifier">{</span>
      <span class="synStatement">return</span> <span class="synIdentifier">{</span> age: `$<span class="synIdentifier">{</span>id<span class="synIdentifier">}</span>_21` <span class="synIdentifier">}</span>;
    <span class="synIdentifier">}</span>,
    Member <span class="synComment">// undefined</span>
  <span class="synIdentifier">}</span>;
<span class="synIdentifier">}</span>);

<span class="synStatement">class</span> Member <span class="synIdentifier">{}</span>
</pre>


<p>※ function から始まる関数宣言であれば、気にしなくてもよさそうだけど、あんまり使わない方がよいかな。
<a href="https://qiita.com/jkr_2255/items/9f9a25987dfaa81472fa">https://qiita.com/jkr_2255/items/9f9a25987dfaa81472fa</a></p>

<h3>mockfn.mockImplementation で回避する</h3>

<p>ここまでは、<code>jest.mock</code>にモックするモジュールの実装を直接書いてきたが、モック関数を使うとより便利になる。<br/>
モック関数は<code>jest.fn</code>で作成できて、そのモックがどんな引数で呼ばれたのか？何回呼ばれたの？とかをアサートすることができる。</p>

<p>ここでは、モック関数の実装を書くことができる<code>mockImplementation</code>を使うことで、<code>jest.mock</code>では hosting されることでできなかったことを対応してみる。</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synComment">// 2:ここで読み込むserviceモジュールは、既にモックが適用されている状態になる</span>
<span class="synComment">// つまり、MockedMember = jest.fn()</span>
<span class="synStatement">import</span> <span class="synIdentifier">{</span> Member as MockedMember<span class="synIdentifier">}</span>  from <span class="synConstant">'../../service'</span>

<span class="synComment">// モックするMemberの実装</span>
<span class="synStatement">class</span> Member <span class="synIdentifier">{}</span>

<span class="synComment">// 1:serviceのモックの設定</span>
jest.mock(<span class="synConstant">&quot;../../service&quot;</span>, () =&gt; <span class="synIdentifier">{</span>
  <span class="synStatement">return</span> <span class="synIdentifier">{</span>
    __esModule: <span class="synConstant">true</span>,
    <span class="synStatement">default</span>: (id: string) =&gt; <span class="synIdentifier">{</span>
      <span class="synStatement">return</span> <span class="synIdentifier">{</span> name: `$<span class="synIdentifier">{</span>id<span class="synIdentifier">}</span>_tarou` <span class="synIdentifier">}</span>;
    <span class="synIdentifier">}</span>,
    getAge: (id: string) =&gt; <span class="synIdentifier">{</span>
      <span class="synStatement">return</span> <span class="synIdentifier">{</span> age: `$<span class="synIdentifier">{</span>id<span class="synIdentifier">}</span>_21` <span class="synIdentifier">}</span>;
    <span class="synIdentifier">}</span>,
    <span class="synComment">// Memberにはクラスではなくモック関数をセットしておく。</span>
    Member: jest.fn()
  <span class="synIdentifier">}</span>;
<span class="synIdentifier">}</span>);

<span class="synComment">// 3: Typescriptをつかっている場合、モック状態のクラスにモック関数のメソッドがあることを教えてあげるのでキャストする必要がある</span>
<span class="synComment">// jest.Mocked, jest.MockedClass　とかあるけど違いがよくわかってない</span>
<span class="synStatement">const</span> mockedMember = MockedMember as jest.Mock
<span class="synComment">// mockImplementationに実装を書く</span>
mockedMember.mockImplementation((id:string)=&gt;<span class="synIdentifier">{</span>
  <span class="synStatement">return</span> <span class="synStatement">new</span> Member(id)
<span class="synIdentifier">}</span>)
</pre>


<p>項番 1 のモックの設定は hoisting されるので、最初に設定される。
なので項番 2 の状態ではモックされているモジュールになっている。
モックされているモジュールに対して、さらにモックの変更を加えることで、以降
別の箇所で<code>service</code>モジュールを使用している箇所でその変更が反映される。</p>

<h4>補足</h4>

<p>あんまりわかってないのが、<code>jest.mock</code>のときはクラスを渡していて、<code>mockImplementation</code>のときはインスタンスを返さないとうまくいかない点。</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">class</span> Member <span class="synIdentifier">{}</span>

<span class="synComment">// jest.mockで設定するとき</span>
jest.mock(<span class="synConstant">&quot;../../service&quot;</span>, () =&gt; <span class="synIdentifier">{</span>
  <span class="synStatement">return</span> <span class="synIdentifier">{</span>
    Member: Member
  <span class="synIdentifier">}</span>;
<span class="synIdentifier">}</span>);

<span class="synComment">// mockImplementationで設定するとき</span>
mockedMember.mockImplementation((id: string) =&gt; <span class="synIdentifier">{</span>
  <span class="synComment">// インスタンスを返却する</span>
  <span class="synStatement">return</span> <span class="synStatement">new</span> Member(id);
<span class="synIdentifier">}</span>);
</pre>


<p><a href="https://jestjs.io/docs/ja/es6-class-mocks#%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB%E3%83%95%E3%82%A1%E3%82%AF%E3%83%88%E3%83%AA%E9%96%A2%E6%95%B0%E3%81%AF%E9%96%A2%E6%95%B0%E3%82%92%E8%BF%94%E3%81%95%E3%81%AA%E3%81%91%E3%82%8C%E3%81%B0%E3%81%AA%E3%82%89%E3%81%AA%E3%81%84">公式</a>を見る限り、<code>jest.mock</code>のモジュールファクトリは、コンストラクタ関数を返せっていってるので、クラス定義(ただん関数)でよくって、<code>mockImplementation</code>のときは、オブジェクトを返すっぽいのかな。</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synComment">// jest.mockでモックしたMemberクラスをnewしたときの挙動を想定</span>
<span class="synComment">// 以下の記事が大変わかりやすかった</span>
<span class="synComment">// https://qiita.com/takeharu/items/010752b1427773558f7c</span>
<span class="synIdentifier">function</span> Member() <span class="synIdentifier">{</span>
  <span class="synIdentifier">this</span> = <span class="synIdentifier">{}</span>
  <span class="synComment">// プロトタイプの設定とか</span>
  <span class="synStatement">return</span> <span class="synIdentifier">this</span>
  <span class="synIdentifier">}</span>

<span class="synComment">// mockImplementionでモックしたMemberクラスをnewしたときの挙動</span>
<span class="synIdentifier">function</span>() <span class="synIdentifier">{</span>
  <span class="synComment">//Objectは new Memberした結果のインスタンス</span>
  <span class="synStatement">return</span> <span class="synType">Object</span>
<span class="synIdentifier">}</span>
</pre>


<h3>jest.fn</h3>

<p><code>mockImplementation</code>ででてきた<code>jest.fn</code>について。</p>

<p>以下のように<code>jest.fn</code>でラップすると、モックされた関数は、<code>jest.fn</code>の機能をもつ関数として使うことができる。</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>jest.mock(<span class="synConstant">&quot;../../service&quot;</span>, () =&gt; <span class="synIdentifier">{</span>
  <span class="synStatement">return</span> <span class="synIdentifier">{</span>
    __esModule: <span class="synConstant">true</span>,
    <span class="synComment">//jest.fnでラップ</span>
    <span class="synStatement">default</span>: jest.fn((id: string) =&gt; <span class="synIdentifier">{</span>
      <span class="synStatement">return</span> <span class="synIdentifier">{</span> name: `$<span class="synIdentifier">{</span>id<span class="synIdentifier">}</span>_tarou` <span class="synIdentifier">}</span>;
    <span class="synIdentifier">}</span>),
    <span class="synComment">//jest.fnでラップ</span>
    getAge: jest.fn((id: string) =&gt; <span class="synIdentifier">{</span>
      <span class="synStatement">return</span> <span class="synIdentifier">{</span> age: `$<span class="synIdentifier">{</span>id<span class="synIdentifier">}</span>_21` <span class="synIdentifier">}</span>;
    <span class="synIdentifier">}</span>),
    <span class="synComment">// mockImplementationパターン</span>
    Member: jest.fn()
  <span class="synIdentifier">}</span>;
<span class="synIdentifier">}</span>);
</pre>


<p>上記モックをした状態で、モックされた関数を import してテスト内でアサーションすることができる。
できることはいっぱいあるので、公式を確認する。</p>

<p>API 呼び出しとかは、API に渡すリクエストの値をテストしたり、とある条件のときは API を呼び出さないとかあるので、そういった場合に<code>jest.fn</code>を使うと便利。
その場合、beforeEach とかで、モック関数の設定を毎回リセットすることを忘れないようにする。</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">import</span> getName, <span class="synIdentifier">{</span> getAge, Member as MockedMember <span class="synIdentifier">}</span> from <span class="synConstant">&quot;../../service&quot;</span>;

it(<span class="synConstant">&quot;targetにtarouを設定して実行すると{result: 'tarou'}}が返却されること&quot;</span>, () =&gt; <span class="synIdentifier">{</span>
  expect(target(<span class="synConstant">&quot;01&quot;</span>)).toEqual(<span class="synIdentifier">{</span> name: <span class="synConstant">&quot;01_tarou&quot;</span>, age: <span class="synConstant">&quot;01_21&quot;</span> <span class="synIdentifier">}</span>);

  <span class="synComment">// モックされた関数が何回よばれたかをアサート</span>
  expect(getName).toHaveBeenCalledTimes(1);
  expect(getAge).toHaveBeenCalledTimes(1);

  expect(verClass(<span class="synConstant">&quot;01&quot;</span>)).toEqual(<span class="synIdentifier">{</span> name: <span class="synConstant">&quot;01_tarou&quot;</span>, age: <span class="synConstant">&quot;01_21&quot;</span> <span class="synIdentifier">}</span>);
<span class="synIdentifier">}</span>);
</pre>


<p><code>jest.spyon</code>についてはまた別途書くかも。</p>

-----
--------
AUTHOR: konoemario
TITLE: ES2015 より前のクラスについてのメモ
BASENAME: 2019/11/17/150745
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 11/17/2019 15:07:45
CATEGORY: プログラム
CATEGORY: javascript
-----
BODY:
<h1>ES2015 より前のクラスについてのメモ</h1>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2FRyomasao%2Flearn-class" title="Ryomasao/learn-class" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://github.com/Ryomasao/learn-class">github.com</a></cite></p>

<h2>基本</h2>

<p>ES2015 より前の構文。
ブラウザで実行する場合は、Babel を使わなくても、IE11 で実行することができる形。
もちろん Node.js でも実行することができる。</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synIdentifier">function</span> Member(firstName, lastName) <span class="synIdentifier">{</span>
  <span class="synIdentifier">this</span>.firstName = firstName;
  <span class="synIdentifier">this</span>.lastName = lastName;
  <span class="synIdentifier">this</span>.age = 23;

  <span class="synIdentifier">this</span>.getName = <span class="synIdentifier">function</span>() <span class="synIdentifier">{</span>
    <span class="synStatement">return</span> firstName + lastName;
  <span class="synIdentifier">}</span>;
<span class="synIdentifier">}</span>
</pre>


<p>js のクラスはクラスというより、ただの関数
new をつけて呼ぶことで、ただん関数をコンストラクタとして実行することができる
コンストラクタとして呼ぶと、空のオブジェクト(this)を作って、暗黙的に作成したオブジェクを返す。
※コンストラクタで return を定義することで、返却するオブジェクトをさわることもできるが、あんまりやらない。
また prototype の継承とかも行う。
<a href="https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Operators/new">https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Operators/new</a>
より噛み砕いた記事。
<a href="https://qiita.com/takeharu/items/809114f943208aaf55b3">https://qiita.com/takeharu/items/809114f943208aaf55b3</a></p>

<p>上記挙動から、this を固定するアロー関数をコンストラクタとして定義することはできない</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synIdentifier">var</span> Member = () =&gt; <span class="synIdentifier">{}</span>;
<span class="synIdentifier">var</span> member = <span class="synStatement">new</span> Member();
</pre>


<p>なるほどと思った。</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synIdentifier">var</span> member = <span class="synStatement">new</span> Member(<span class="synConstant">&quot;tarou&quot;</span>, <span class="synConstant">&quot;yamada&quot;</span>);
console.log(member.getName()); <span class="synComment">// tarou yamada</span>

<span class="synComment">// ただの関数なので、new 演算子をつけないで実行することもできる。</span>
<span class="synComment">// とはいえ、できるだけであって推奨はされない。</span>
<span class="synIdentifier">var</span> directCall = Member(<span class="synConstant">&quot;fail&quot;</span>, <span class="synConstant">&quot;fail&quot;</span>);

<span class="synComment">// この場合、コンストラクタとして実行した場合の暗黙的に新しいオブジェクトを返すということはしない。</span>
console.log(directCall); <span class="synComment">// undefined</span>
<span class="synComment">// また、関数として実行した場合、this のコンテキストがかわるのでグローバルオブジェクトとして、変数名がつかわれてしまう</span>
console.log(firstName);
</pre>


<h2>ちょっと横道、this のコンテキストの話</h2>

<p>this のコンテキストは、以下をおぼえとく！</p>

<ul>
<li>トップ:グローバル</li>
<li>関数:グローバル → なんとなく関数そのものをさすと思ってた。コンストラクタと違うから注意。</li>
<li>コンストラクタ:生成したインスタンス、</li>
<li>メソッド:レシーバ</li>
<li>イベントリスナー: イベントの発生元</li>
<li>bind・apply: 引数で指定したオブジェクト</li>
</ul>


<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synComment">// 以下、うろ覚えだった、オブジェクトの this</span>
<span class="synComment">// メソッドの場合、メソッドを呼び出している、オブジェクトが this になる</span>
<span class="synComment">// 以下の記事がわかりやすい</span>
<span class="synComment">// https://qiita.com/takkyun/items/c6e2f2cf25327299cf03</span>
<span class="synIdentifier">var</span> obj = <span class="synIdentifier">{</span>
  a: 1,
  b: <span class="synIdentifier">function</span>() <span class="synIdentifier">{</span>
    console.log(<span class="synIdentifier">this</span>);
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>;
console.log(obj.b()); <span class="synComment">// {a: 1, b: [Function: b]}</span>
</pre>


<h3>prototype の話</h3>

<p>javascritp のクラスはただの関数
関数のプロパティの値が関数であればそれが、メソッドになる
new 演算子をつけると、新しいオブジェクトを返してくれる
新しいオブジェクトをつくると、オブジェクトのプロパティにセットされる関数も毎回生成されることになる
メモリがもったいない。javascript は prototype というものを用意してくれている。</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synComment">// 以下のように protyotype として定義すると、クラスから生成されたインスタンスは、インスタンスのプロパティに</span>
<span class="synComment">// 同名がなければ、prototype を参照するようになる。</span>
<span class="synComment">// 同名があると、インスタンスプロパティを参照するようになる。</span>
Member.prototype.getAge = <span class="synIdentifier">function</span>() <span class="synIdentifier">{</span>
  <span class="synStatement">return</span> <span class="synIdentifier">this</span>.age;
<span class="synIdentifier">}</span>;
console.log(<span class="synConstant">&quot;age:&quot;</span>, member.getAge()); <span class="synComment">// 23</span>

<span class="synComment">// static</span>
<span class="synComment">// クラスにプロパティを持たせることは可能。ただし、インスタンスには引き継がれない。</span>
Member.address = <span class="synConstant">&quot;shizuoka&quot;</span>;
console.log(<span class="synConstant">&quot;from Class&quot;</span>, Member.address); <span class="synComment">// shizuoka</span>
console.log(<span class="synConstant">&quot;from instance&quot;</span>, member.address); <span class="synComment">// undefind</span>

<span class="synComment">// プロパティに関数を渡して、static method っぽいこともできる</span>
Member.getAddress = <span class="synIdentifier">function</span>() <span class="synIdentifier">{</span>
  <span class="synComment">// 当然、コンストラクタで設定するプロパティは参照できない</span>
  <span class="synComment">// console.log(this.firstName) // undefinde</span>
  <span class="synStatement">return</span> <span class="synIdentifier">this</span>.address;
<span class="synIdentifier">}</span>;
console.log(Member.getAddress()); <span class="synComment">// shizuoka</span>
</pre>


<p>prototype を定義する際には、オブジェクトリテラルで一括で設定する方がわかりやすい</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synIdentifier">var</span> Bot = <span class="synIdentifier">function</span>() <span class="synIdentifier">{}</span>;
Bot.prototype = <span class="synIdentifier">{</span>
  sayHello: <span class="synIdentifier">function</span>() <span class="synIdentifier">{</span>
    console.log(<span class="synConstant">&quot;Hello&quot;</span>);
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>;
<span class="synIdentifier">var</span> bot = <span class="synStatement">new</span> Bot();
bot.sayHello();
</pre>


<h3>継承の話</h3>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synIdentifier">var</span> Animal = <span class="synIdentifier">function</span>(name) <span class="synIdentifier">{</span>
  <span class="synIdentifier">this</span>.name = name;
<span class="synIdentifier">}</span>;

Animal.prototype = <span class="synIdentifier">{</span>
  walk: <span class="synIdentifier">function</span>() <span class="synIdentifier">{</span>
    console.log(<span class="synIdentifier">this</span>.name, <span class="synConstant">&quot;is waking....&quot;</span>);
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>;

<span class="synComment">// Animal を継承する</span>
<span class="synIdentifier">var</span> Cat = <span class="synIdentifier">function</span>(name) <span class="synIdentifier">{</span>
  <span class="synComment">// この発想がすごい！</span>
  <span class="synComment">// Animal で call すると、関数 Animal が実行される</span>
  <span class="synComment">// コンストラクタしてではなく、関数として実行されるんだ</span>
  <span class="synComment">// 関数として実行されると、this はグローバルスコープになっちゃんだけど、call を使うことで this を変更している</span>
  <span class="synComment">// この this は、Car がコンストラクタとして実行されることで生成されるオブジェクトを指すようになる</span>
  Animal.call(<span class="synIdentifier">this</span>, name);
<span class="synIdentifier">}</span>;

<span class="synComment">// メソッドを継承するために、子の prototype に親のインスタンスをセットする</span>
<span class="synComment">// これにより、Cat.method を実行したときに、自身のインスタンス → 自身の prototype→ 親の prototype と検索することができる</span>
<span class="synComment">// ふと、Cat.prototype = Animal.prototype でもいいんじゃない？って思ったけど、その場合、Cat と Animal が同じ prototype を参照してしまう。</span>
<span class="synComment">// Cat.prototype.hoge で追加したものが、Animal でも使えちゃうことになるので、避けるべき。</span>
Cat.prototype = <span class="synStatement">new</span> Animal();
Cat.prototype.bark = <span class="synIdentifier">function</span>() <span class="synIdentifier">{</span>
  console.log(<span class="synIdentifier">this</span>.name, <span class="synConstant">&quot;&gt; nyaan&quot;</span>);
<span class="synIdentifier">}</span>;

<span class="synIdentifier">var</span> mycat = <span class="synStatement">new</span> Cat(<span class="synConstant">&quot;mike&quot;</span>);
mycat.walk(); <span class="synComment">// mike is waking...</span>
mycat.bark(); <span class="synComment">// mike &gt; nyaan</span>
</pre>


-----
--------
AUTHOR: konoemario
TITLE: useEffectでrace conditionとdebounceに対応する
BASENAME: 2019/10/24/210833
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 10/24/2019 21:08:33
CATEGORY: プログラム
CATEGORY: React
IMAGE: https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20191024/20191024210614.gif
-----
BODY:
<h1>useEffectでrace conditionとdebounceに対応する</h1>

<p>ReactのHooksに入門した。
useEffectのクリーンアップは再レンダー時に毎回行われるんだよ！という公式ドキュメントをみて、ほーんという感じだったけど
<code>race condition</code>と<code>debounce</code>をhooksを使ってシンプルに対応するサンプルを見て、なんだか凄さを感じた。</p>

<h2>やりたいこと</h2>

<p>以下のように、入力内容の変更がある度にAPIリクエストをして、結果を反映させるということをしてみたい。
<figure class="figure-image figure-image-fotolife" title="やりたいこと"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20191024/20191024210614.gif" alt="f:id:konoemario:20191024210614g:plain" title="" class="hatena-fotolife" itemprop="image"></span><figcaption>やりたいこと</figcaption></figure></p>

<h3>やってみる</h3>

<p>これをuseEffectを使って書くと、以下のようになる。</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>  <span class="synStatement">const</span> <span class="synIdentifier">[</span>name, setName<span class="synIdentifier">]</span> = useState(<span class="synConstant">&quot;taro&quot;</span>);
  <span class="synStatement">const</span> <span class="synIdentifier">[</span>age, setAge<span class="synIdentifier">]</span> = useState(0)

  <span class="synComment">// この副作用は、nameが変わる度に実行される</span>
  useEffect(() =&gt; <span class="synIdentifier">{</span>
    <span class="synComment">// loading中にして</span>
    setLoading(<span class="synConstant">true</span>);

    <span class="synComment">// apiを実行</span>
    getUserData(name).then(age =&gt; <span class="synIdentifier">{</span>
        <span class="synComment">// 結果をステートに反映</span>
        setAge(age);
        <span class="synComment">// loading終了</span>
        setLoading(<span class="synConstant">false</span>);
      <span class="synIdentifier">}</span>
    <span class="synIdentifier">}</span>);
  <span class="synIdentifier">}</span>, <span class="synIdentifier">[</span>name<span class="synIdentifier">]</span>)
</pre>


<p>このコードにはいろいろ問題があるのだけど、最大の問題は最終的にレンダリングされるAPIの結果が、想定と異なる可能性がある点。
というのも、APIは呼び出した順に結果が返ってくるという保障もないので、最後に返ってきたAPIの結果が最後に呼び出したAPIの結果とは限らないから。</p>

<p>これを解決するためには、入力途中に呼び出されたAPIの結果は無視する必要がある。</p>

<p>この文章だけみると、やけに難しく感じるのだけど、あら不思議。
Hooksの公式ドキュメントの記載に則り、副作用のクリーンアップを利用すると簡単に対応できる。</p>

<p><strong>新しい副作用を適用する前に、ひとつ前の副作用をクリーンアップします。</strong></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>  <span class="synStatement">const</span> <span class="synIdentifier">[</span>name, setName<span class="synIdentifier">]</span> = useState(<span class="synConstant">&quot;taro&quot;</span>);
  <span class="synStatement">const</span> <span class="synIdentifier">[</span>age, setAge<span class="synIdentifier">]</span> = useState(0)

  <span class="synComment">// この副作用は、nameが変わる度に実行される</span>
  useEffect(() =&gt; <span class="synIdentifier">{</span>
    <span class="synIdentifier">let</span> cancel = <span class="synConstant">false</span>

    <span class="synComment">// loading中にして</span>
    setLoading(<span class="synConstant">true</span>);

    <span class="synComment">// apiを実行</span>
    getUserData(name).then(age =&gt; <span class="synIdentifier">{</span>
        <span class="synStatement">if</span>(!cancel) <span class="synIdentifier">{</span>
          <span class="synComment">// 結果をステートに反映</span>
          setAge(age);
          <span class="synComment">// loading終了</span>
          setLoading(<span class="synConstant">false</span>);
        <span class="synIdentifier">}</span>
      <span class="synIdentifier">}</span>

    <span class="synComment">// 副作用のクリーンアップ</span>
    <span class="synStatement">return</span> () =&gt; <span class="synIdentifier">{</span>
      <span class="synComment">// このcancelのスコープが、あああ！となった。</span>
      cancel = <span class="synConstant">true</span>
    <span class="synIdentifier">}</span>
    <span class="synIdentifier">}</span>);
  <span class="synIdentifier">}</span>, <span class="synIdentifier">[</span>name<span class="synIdentifier">]</span>)
</pre>


<p>これを利用すると、debounce処理もさくっと実装できそう。</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>  useEffect(() =&gt; <span class="synIdentifier">{</span>
    setLoading(<span class="synConstant">true</span>);

    <span class="synStatement">const</span> timeOutId = setTimeout(() =&gt; <span class="synIdentifier">{</span>
      getUserData(name).then(age =&gt; <span class="synIdentifier">{</span>
        setAge(age);
        setLoading(<span class="synConstant">false</span>);
      <span class="synIdentifier">}</span>);
    <span class="synIdentifier">}</span>, 1000);

    <span class="synStatement">return</span> () =&gt; <span class="synIdentifier">{</span>
      clearTimeout(timeOutId);
    <span class="synIdentifier">}</span>;
  <span class="synIdentifier">}</span>, <span class="synIdentifier">[</span>name<span class="synIdentifier">]</span>);
</pre>


<p>実際には、以下のようなuseDebounceのようなカスタムHookも作ると汎用的になる。<br />
<a href="https://github.com/xnimorz/use-debounce">https://github.com/xnimorz/use-debounce</a></p>

-----
--------
AUTHOR: konoemario
TITLE: Typescriptのtargetについて調べてみた
BASENAME: 2019/10/10/215920
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 10/10/2019 21:59:20
CATEGORY: typescript
CATEGORY: プログラム
-----
BODY:
<p>Typescriptでは、<code>tsconfig.json</code>で<code>target</code>を指定できる。<br/>
<code>target</code>には、ES5だったり、ES6、ES2016と、ECMAScriptのバージョンを指定できる。</p>

<p>これは、TypescriptをコンパイルしてJavascriptに変換したときに、どのECMSScriptのバージョンにするかを指定できるオプション。</p>

<p>普段は、<code>babel</code>を使ってトランスパイルをしているんだけど、Typescriptであれば、<code>babel</code>を使う必要はなくなるんだと思う。</p>

<p>※とはいえ、既存の<code>babel</code>を使ったプロジェクトにTypescriptを導入する際など、共存する方法はあるみたいだけれども。</p>

<p>さて、この素晴らしい<code>target</code>の機能だが試しに使ってみると、Typescriptに書くECMAScriptはどのバージョンでもいいんだっけ？とか、<code>target</code>にES5を指定したら、Promiseでもなんでもどんとこいなの？とかいろんな疑問がでてくる。</p>

<p>ということで調べてみることにした。</p>

<h2>結論</h2>

<ul>
<li>Typescriptは<code>target</code>に指定されたバージョンにあわせて、コードをトランスパイルしてくれる。</li>
<li>トランスパイルしてくれるのは、アロー関数だったり、クラス構文といった言語機能が対象となる。</li>
<li>Promiseなどの新しく定義されたオブジェクトや、既存のオブジェクトにメソッドが追加される場合の新しい機能(ランタイム機能)などはpolyfillを自分で追加する必要がある。</li>
<li>とはいえ、Typescriptに使いたいpolyfillを教えてあげないと、そんなオブジェクトorメソッドなんて知らねえと、コンパイル時に怒られるので、<code>lib</code>オプションに使いたいpolyfillを教えてあげることが必要。</li>
<li>Promiseはちょっとややこしい。</li>
</ul>


<p>※以下のstackoverflowの回答から言語系機能と、ランタイム機能という表現を引用しました。<br/>
<a href="https://stackoverflow.com/questions/51043439/using-latest-javascript-features-in-typescript-such-as-es2018">https://stackoverflow.com/questions/51043439/using-latest-javascript-features-in-typescript-such-as-es2018</a></p>

<p>言語系機能とランタイム機能って具体的にどういうことよ、と思ったのですが、試しにコードをトランスパイルする機能を自分で作成することを想像するとちょっと腑に落ちた気がした。<br/>
Classだったり、アロー関数とかは構文解析することで、ES5の文法規則に乗っ取ってないからトランスパイルしなきゃ！ということはできそうな気がする。これが言語機能。<br/>
一方、オブジェクトにメソッドが存在しているかどうかは、実行される環境がそもそもそのオブジェクトが用意されているか等は実行時じゃないと判別がつかない。これがランタイム機能。<br/>
だから実行する環境を知っている作者が、個別にpolyfillを設定してねってことだと思う。</p>

<h3>polyfillを試してみる</h3>

<p>環境は以下の通り、Node.jsを使うことにする。</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ node <span class="synSpecial">-v</span>
v10.<span class="synConstant">15</span>.<span class="synConstant">0</span>
</pre>




<pre class="code" data-lang="" data-unlink>$ yarn tsc --version
Version 3.6.3</pre>


<p>ここでは、ES2019で追加された<code>Array.flat</code>をTypescriptで使ってみるとどうなるかを見てみる。</p>

<p>ちなみに、<code>Array.flat</code>は自分の環境の<code>v10.15.0</code>では、そのまま使えない。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fnode.green%2F" title="Node.js ES2015/ES6, ES2016 and ES2017 support" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://node.green/">node.green</a></cite></p>

<h4>ES2019</h4>

<p>まずは素直に<code>target</code>にES2019を指定する。</p>

<p><b>tsconfig.json</b></p>

<pre class="code lang-json" data-lang="json" data-unlink><span class="synSpecial">{</span>
  &quot;<span class="synStatement">compilerOptions</span>&quot;: <span class="synSpecial">{</span>
    <span class="synError">// 使うJSのバージョン</span>
    &quot;<span class="synStatement">target</span>&quot;: &quot;<span class="synConstant">ES2019</span>&quot; <span class="synError">,</span>
<span class="synError">  },</span>
<span class="synError">}</span>
</pre>


<p>この状態で以下のコードをコンパイルしてみる。</p>

<p><b>index.ts</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synIdentifier">[[</span>1, 2<span class="synIdentifier">]</span>, 3, 4<span class="synIdentifier">]</span>.flat()
</pre>


<p>コンパイルすると、以下のコードが生成される。</p>

<p><b>コンパイル後</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synComment">// なにもかわってない</span>
<span class="synIdentifier">[[</span>1, 2<span class="synIdentifier">]</span>, 3, 4<span class="synIdentifier">]</span>.flat()
</pre>


<p>このコードをNode.jsで実行すると</p>

<pre class="code lang-sh" data-lang="sh" data-unlink><span class="synSpecial">[[</span><span class="synConstant">1,</span> <span class="synConstant">2],</span> <span class="synConstant">3,</span> <span class="synConstant">4].flat();</span>
               <span class="synConstant">^</span>
<span class="synConstant">TypeError:</span> <span class="synConstant">[[1,2],3,4].flat</span> <span class="synConstant">is</span> <span class="synConstant">not</span> <span class="synConstant">a</span> <span class="synConstant">function</span>
</pre>


<p><code>flat</code>というメソッドは存在していないので、そんな関数はないよと実行エラーになる。</p>

<h4>ES2018</h4>

<p>次に、<code>flat</code>が存在しないES2018を指定してコンパイルをしてみる。</p>

<p><b>tsconfig.json</b></p>

<pre class="code lang-json" data-lang="json" data-unlink><span class="synSpecial">{</span>
  &quot;<span class="synStatement">compilerOptions</span>&quot;: <span class="synSpecial">{</span>
    <span class="synError">// 使うJSのバージョン</span>
    &quot;<span class="synStatement">target</span>&quot;: &quot;<span class="synConstant">ES2018</span>&quot; <span class="synError">,</span>
<span class="synError">  },</span>
<span class="synError">}</span>
</pre>


<p>こうすると、Arrayに<code>flat</code>なんてメソッドはないよってコンパイルエラーになる。</p>

<p>ここで試しに、<code>lib</code>に設定を加えArrayに<code>flat</code>があるんだよとTSに教えあげることにする。</p>

<p><b>tsconfig.json</b></p>

<pre class="code lang-json" data-lang="json" data-unlink><span class="synSpecial">{</span>
  &quot;<span class="synStatement">compilerOptions</span>&quot;: <span class="synSpecial">{</span>
    <span class="synError">// 使うJSのバージョン</span>
    &quot;<span class="synStatement">target</span>&quot;: &quot;<span class="synConstant">ES2018</span>&quot; ,
    <span class="synError">// flatの定義があるライブラリを指定</span>
     &quot;<span class="synStatement">lib</span>&quot;: <span class="synSpecial">[</span>&quot;<span class="synConstant">es2019.array</span>&quot;<span class="synSpecial">]</span><span class="synError">,</span>
<span class="synError">  },</span>
<span class="synError">}</span>
</pre>


<p>指定できる<code>lib</code>は、追加したtypescriptのディレクトリ<code>lib</code>配下で直接確認できる。</p>

<p>ちなみに<code>lib</code>のデフォルト値は、<code>target</code>によってかわるみたい。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fwww.typescriptlang.org%2Fdocs%2Fhandbook%2Fcompiler-options.html" title="Compiler Options · TypeScript" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://www.typescriptlang.org/docs/handbook/compiler-options.html">www.typescriptlang.org</a></cite></p>

<blockquote><p>For --target ES5: DOM,ES5,ScriptHost</p></blockquote>

<p><code>lib</code>の設定をした後コンパイルを行うと、コンパイルが通った。<br/>
とはいえ、これはTypescriptに<code>flat</code>っていうメソッドがあるんだよと教えただけなので、コンパイル後のコードは以下の通りなんの変化もなくNode.jsで実行すると実行時エラーになる。</p>

<p><b>コンパイル後</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synComment">// コードはそのまま</span>
<span class="synIdentifier">[[</span>1, 2<span class="synIdentifier">]</span>, 3, 4<span class="synIdentifier">]</span>.flat()
</pre>


<h4>polyfillを使う</h4>

<p>ということで、polyfillを設定を行う。</p>

<p>pollyfillを提供してくれる<code>core-js</code>を追加して読み込む。</p>

<pre class="code" data-lang="" data-unlink>$ yarn add --dev core-js@3</pre>


<p><b>index.ts</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">import</span> <span class="synConstant">&quot;core-js&quot;</span>
<span class="synIdentifier">[[</span>1, 2<span class="synIdentifier">]</span>, 3, 4<span class="synIdentifier">]</span>.flat()
</pre>


<p>これをコンパイルすると、polyfillの定義が追加され、<code>flat</code>を使うことができた。<br/>
<b>コンパイル後</b></p>

<pre class="code" data-lang="" data-unlink>&#34;use strict&#34;;
Object.defineProperty(exports, &#34;__esModule&#34;, { value: true });
require(&#34;core-js&#34;);
[[1, 2], 3, 4].flat();</pre>


<h4>不思議なPromise</h4>

<p>当初は<code>flat</code>ではなくPromiseを使って<code>target</code>をes5にして試していたんだけど、不思議とこれはコンパイルエラーにならない。</p>

<p>targetがes5だから、libには<code>DOM,ES5,ScriptHost</code>が指定されているはず。<br/>
ES5の仕様にPromiseはないはずなのに、なぜ、、、
と混乱を極めていたのですが、<code>lib.es5.d.ts</code>を覗いてみると、なんと、Promiseが定義されているじゃありませんか。</p>

<p>なぜ、<code>lib.es5.d.ts</code>にPromiseがあるんだろうかは、こちらのissueが上がっていました。<br/>
<a href="https://github.com/microsoft/TypeScript/issues/16132">https://github.com/microsoft/TypeScript/issues/16132</a></p>

<p>が、明確な理由がわからず。誰か教えてください。</p>

-----
--------
AUTHOR: konoemario
TITLE: ジェネレーターと非同期処理があんまりわかってなかったのでメモ
BASENAME: 2019/09/15/214928
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 09/15/2019 21:49:28
CATEGORY: プログラム
CATEGORY: javascript
-----
BODY:
<h1>redux-saga に入る前に</h1>

<p><code>redux-saga</code>のサンプルを見ていて、<code>function*</code>をみた瞬間、これなんぞ！となったのでメモ。</p>

<h2>ジェネレーター</h2>

<p><code>function*</code>はジェネレータ関数。</p>

<p>他の言語でも、見たことはあったけど、ちゃんと使ったことがなかった。</p>

<p>こんな感じに使える。</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synComment">// ジェネレータ関数</span>
<span class="synIdentifier">function</span>* basic() <span class="synIdentifier">{</span>
  yield 1;
  yield 2;
  yield 3;
<span class="synIdentifier">}</span>

<span class="synComment">// ジェネレータ関数を実行すると、コードの内容が実行されるのではなく、イテレータオブジェクトが返却される</span>
<span class="synStatement">const</span> basicGenerator = basic();

<span class="synComment">// イテレータオブジェクトに対してnext()を実行すると、yieldが見つかるところまで実行する</span>
console.log(basicGenerator.next()); <span class="synComment">// Object {value: 1, done: false}</span>

<span class="synComment">// 再度実行すると、前回のyield以降から再度実行される</span>
console.log(basicGenerator.next()); <span class="synComment">// Object {value: 2, done: false}</span>

console.log(basicGenerator.next()); <span class="synComment">// Object {value: 3, done: false}</span>
</pre>


<p>関数を途中で止めて、再開みたいな感じで、初めてみたときは衝撃的だった。</p>

<p>このジェネレータの機能を使うと、非同期処理をわかりやすく書けるとのこと。
とはいえ初めて見たとき、全然わかりやすくなかったので、順を追って書く。</p>

<p>まずは、非同期処理を順に追って実行したいけど、できていない処理</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synComment">// messageをms後にコンソールに出力するtimer関数</span>
<span class="synIdentifier">function</span> timer(message, ms) <span class="synIdentifier">{</span>
  setTimeout(() =&gt; <span class="synIdentifier">{</span>
    console.log(message);
  <span class="synIdentifier">}</span>, ms);
<span class="synIdentifier">}</span>

<span class="synComment">// timer関数を順を追って実行したい</span>
<span class="synIdentifier">function</span> execTimer() <span class="synIdentifier">{</span>
  timer(<span class="synConstant">'first'</span>, 3000);
  timer(<span class="synConstant">'second'</span>, 1000);
<span class="synIdentifier">}</span>

execTimer();
<span class="synComment">// 以下の順で出力したいけど</span>
<span class="synComment">// first</span>
<span class="synComment">// second</span>
<span class="synComment">//</span>
<span class="synComment">// 実際は以下の順で表示される</span>
<span class="synComment">// seconde</span>
<span class="synComment">// first</span>
</pre>


<p>コールバック地獄 →Promise→aysnc await と学んできたけど、ジェネレータを使うという選択肢があった。</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synComment">//変更箇所のみ抜粋</span>

<span class="synComment">// generatorに変更する</span>
<span class="synIdentifier">function</span>* execTimer() <span class="synIdentifier">{</span>
  yield timer(<span class="synConstant">'first'</span>, 3000);
  yield timer(<span class="synConstant">'second'</span>, 1000);
<span class="synIdentifier">}</span>

<span class="synComment">// イテレータオブジェクトをもらって</span>
<span class="synStatement">const</span> timerGenerator = execTimer();
<span class="synComment">// 実行すると</span>
timerGenerator.next();

<span class="synComment">// 以下のみ出力される</span>
<span class="synComment">// first</span>
</pre>


<p><code>timerGenerator.next()</code>を一回だけ実行すると、<code>execTimer</code>の最初の yield の処理が実行される。
今のままだと、<code>first</code>だけ出力されて終わってしまうので、<code>first</code>が終わった後に、再度<code>timerGenerator.next()</code>を実行すればいいはず。</p>

<p>ということでこんな感じに<code>timerGenerator.next()</code>を実行する関数を渡します。</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synComment">// next()を実行する関数を渡す！</span>
<span class="synComment">// あれー、変数timerGeneratorにexecTimerの返り値をセットするたけど、</span>
<span class="synComment">// その引数にtimerGeneratorを使うって、あれ？おや？と混乱するね！</span>
<span class="synComment">// 関数だから、`() =&gt; timerGenerator.next()`はこの時点では実行されないんだよね</span>
<span class="synStatement">const</span> timerGenerator = execTimer(() =&gt; timerGenerator.next());
timerGenerator.next();
</pre>


<p>受け取った関数を<code>timer</code>で実行するようにする。</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synIdentifier">function</span> timer(message, ms, next) <span class="synIdentifier">{</span>
  setTimeout(() =&gt; <span class="synIdentifier">{</span>
    console.log(message);
    next();
  <span class="synIdentifier">}</span>, ms);
<span class="synIdentifier">}</span>

<span class="synIdentifier">function</span>* execTimer(next) <span class="synIdentifier">{</span>
  yield timer(<span class="synConstant">'first'</span>, 3000, next);
  yield timer(<span class="synConstant">'second'</span>, 1000, next);
<span class="synIdentifier">}</span>
</pre>


<p>これで、ジェネレータを使って非同期処理を順列に書くことができるようになった。
最初わかりにくかったけど、こう書いてみるとわかりやすいと思うようになってきた。不思議。</p>

<h2>ジェネレータ + Promise + co</h2>

<p><code>co</code>というライブラリを使うと、上記のジェネレーターの非同期処理を<code>next</code>を渡さなくともできるようになるとのこと。
<a href="https://github.com/tj/co">https://github.com/tj/co</a></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">import</span> co from <span class="synConstant">'co'</span>;

<span class="synComment">// Promiseを返すようにする</span>
<span class="synIdentifier">function</span> timer(message, ms) <span class="synIdentifier">{</span>
  <span class="synStatement">return</span> <span class="synStatement">new</span> Promise((resolve, reject) =&gt; <span class="synIdentifier">{</span>
    setTimeout(() =&gt; <span class="synIdentifier">{</span>
      console.log(message);
      resolve();
    <span class="synIdentifier">}</span>, ms);
  <span class="synIdentifier">}</span>);
<span class="synIdentifier">}</span>

<span class="synComment">// generatorに変更する</span>
<span class="synIdentifier">function</span>* execTimer() <span class="synIdentifier">{</span>
  yield timer(<span class="synConstant">'first'</span>, 3000);
  yield timer(<span class="synConstant">'second'</span>, 1000);
<span class="synIdentifier">}</span>

co(execTimer);
</pre>


<p><code>next</code>を渡してないけど、想定通りの挙動になる。</p>

<p><code>co</code>のコードをなんとなく読んでみると、ものすごく機能を抜粋するとこんな感じになっているのだと思う。<br/>
本家だと<code>apply</code>とか<code>call</code>とか使っているけど、なぜそれが必要なのかわかってない。</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">const</span> myCo = generator =&gt; <span class="synIdentifier">{</span>
  <span class="synComment">// ジェネレーター関数を引数にとって、イテレータをつくる</span>
  <span class="synStatement">const</span> iterator = generator();
  <span class="synComment">// イテレータを実行していく関数</span>
  consumePromise(iterator);

  <span class="synIdentifier">function</span> consumePromise(iterator) <span class="synIdentifier">{</span>
    <span class="synComment">// yieldが返すのはPromsie前提で書いてる</span>
    <span class="synIdentifier">let</span> promise = iterator.next();
    <span class="synStatement">if</span> (promise.done) <span class="synStatement">return</span>;
    <span class="synComment">// Promiseが解決したら、次のyieldを処理する</span>
    promise.value.then(() =&gt; consumePromise(iterator));
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>;
</pre>


-----
--------
AUTHOR: konoemario
TITLE:  jest + Vue.js でテストコード入門に至る道のり
BASENAME: 2019/08/26/224711
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 08/26/2019 22:47:11
CATEGORY: jest
CATEGORY: Vue.js
CATEGORY: プログラム
CATEGORY: javascript
-----
BODY:
<h1 id="jest--Vuejs-でテストコード入門に至る道のり">jest + Vue.js でテストコード入門に至る道のり</h1>

<p>フロントエンドでもテストコード書いてったほうがよさそうだから、Vue.jsでもテストコード書いてみるか！ということでいざ始めてみると、書けはするんだけどなにやら設定やら必要なモジュールが多くってねぇ、、、と思ったので、そこに至る道のりを書いてみようと思います！</p>

<p>まずは、シンプルに<code>jest</code>を使って、ただのjsのテストコードから始めて、そっからフレームワークを使わないDOMレンダリングのテスト、Vue.jsに移っていき、必要なモジュールは都度導入していこうと思います。</p>

<p>とはいえ、各モジュールの使い方や、具体的パターンに応じたなテストの書き方にはあんま触れてなかったりするのでご注意ください。</p>

<p>書いてる人はテストコードを書くことに多少慣れた程度なので、なにかあれば突っ込んでくれるとうれしいです。</p>

<p>ではさっそく初めてみよう！</p>

<ul class="table-of-contents">
    <li><a href="#jest--Vuejs-でテストコード入門に至る道のり">jest + Vue.js でテストコード入門に至る道のり</a><ul>
            <li><a href="#なにはともあれ準備">なにはともあれ、準備</a><ul>
                    <li><a href="#jestを導入">jestを導入</a></li>
                    <li><a href="#Babelを導入">Babelを導入</a><ul>
                            <li><a href="#余談-babelpreset-env-をもうすこしだけみる">余談 @babel/preset-env をもうすこしだけみる</a></li>
                        </ul>
                    </li>
                    <li><a href="#jestを再実行">jestを再実行</a></li>
                </ul>
            </li>
            <li><a href="#DOMがからむテストを書く">DOMがからむテストを書く</a><ul>
                    <li><a href="#jest-domを使う">jest-domを使う</a></li>
                    <li><a href="#dom-testing-libraryを使う">dom-testing-libraryを使う</a></li>
                </ul>
            </li>
            <li><a href="#Vuejsのテストコードを書く">Vue.jsのテストコードを書く</a><ul>
                    <li><a href="#vue-test-utilsを使う">vue-test-utilsを使う</a><ul>
                            <li><a href="#babel-coreがないよでテストが失敗する場合">babel-coreがないよでテストが失敗する場合</a></li>
                        </ul>
                    </li>
                    <li><a href="#vue-testing-libraryを使う">vue-testing-libraryを使う</a></li>
                </ul>
            </li>
            <li><a href="#まとめ">まとめ</a></li>
            <li><a href="#そのほか">そのほか</a></li>
        </ul>
    </li>
</ul>

<h2 id="なにはともあれ準備">なにはともあれ、準備</h2>

<p>今回のお試し用のプロジェクトを作っていきます。<br/>
<code>yarn</code>をつかっていますが、<code>npm</code>であれば適宜置き換えてください。</p>

<p><b>プロジェクト作成</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ <span class="synStatement">mkdir</span> hellojest
$ <span class="synStatement">cd</span> hellojest
$ yarn init <span class="synSpecial">-y</span>
$ <span class="synStatement">mkdir</span> src
</pre>


<h3 id="jestを導入">jestを導入</h3>

<p>テスト対象のコードまだ何もありませんが、ひとまず<code>jest</code>を追加します。</p>

<p><b>jestを導入</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ yarn add <span class="synSpecial">--dev</span> jest
</pre>


<p><code>jest</code>は、javascriptのテスト用のフレームワークで、facebookが開発を進めているOSS。<br/>
テストには、大きくテストを実行するテストランナーと、テストの結果を検証するアサーションとがあって、<code>jest</code>はテストランナーもアサーションの機能も含んでいるフレームワークとのこと。</p>

<p>過去に<code>webpack + mocha</code>を一瞬試したことがあったんだけれども、こちらは、テストランナー部分だけが<code>webpack + mocha</code>でアサーションは別の機能をつかったりとしていたから、ものによっては、オールインワンではなく好みのものを組み合わせるという方法もあるみたいだね！</p>

<p><code>jest</code>の追加ができたら、テスト対象となるコード<code>/src/sum.js</code>をこんな感じにつくってみます。</p>

<p><b>sum.js</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">const</span> sum = (a, b) =&gt; <span class="synIdentifier">{</span>
  <span class="synStatement">return</span> a + b
<span class="synIdentifier">}</span>

<span class="synStatement">export</span> <span class="synStatement">default</span> sum
</pre>


<p>引数を足した結果を返すだけのシンプルな関数ですね。</p>

<p>これをテストコードとして書くと以下のようになります。</p>

<p><b>sum.test.js</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">import</span> sum from <span class="synConstant">'./sum'</span>

it(<span class="synConstant">'関数sumに1と2を渡すと3が返ってくる'</span>, () =&gt; <span class="synIdentifier">{</span>
  <span class="synComment">// 関数sumの結果を格納</span>
  <span class="synStatement">const</span> result = sum(1, 2)
  <span class="synComment">// sumの結果は3だよね！</span>
  expect(result).toBe(3)
<span class="synIdentifier">}</span>)
</pre>


<p>上記のようにテストコードは、テスト対象の関数だったり、コンポーネントだったりを準備して、その結果を<code>expect</code>で検証(アサーション)する構成になっているかと思います。
上記のテストコードを<code>sum.js</code>と同じディレクトリにおいて実行してみましょう。</p>

<p><b>実行してみる</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ yarn jest
</pre>


<p><code>jest</code>はファイル名に<code>.test.js</code>、<code>.spec.js</code>が含まれている、もしくは、<code>__tests__</code>ディレクトリ配下にあるコードをテストコードと判断し、実行してくれます。</p>

<p>よっしゃ！実行と思ったら、<code>SyntaxError: Unexpected identifier</code>でこけちゃいます。</p>

<p>というのも、<code>sum.test.js</code>では、<code>import</code>文をつかっていますが、これはES6の記法になります。</p>

<p>普段ES6のものをブラウザで実行させるときは<code>webpack</code>でバンドルして依存解決したものを実行していますよね。</p>

<p>ですが、<code>jest</code>はブラウザではなくNode.jsの環境で実行されます。
なので、ES6の記法で書かれたコードをNode.jsが実行できるCommonJSの形にトランスパイルする必要があります。</p>

<h3 id="Babelを導入">Babelを導入</h3>

<p>トランスパイルには<code>Babel</code>を使います。<br/>
<code>Babel</code>はES6記法だったり、日々進化しているjavascriptの新しい文法で書かれているものを、それに対応していないブラウザが使えるように変換するものです。<br/>
というのがなんとなくの認識だったのですが、CommonJSにもトランスパイルができるみたいです。</p>

<p>※ 他にもAMD、UMDにトランスパイルできるみたいなんだけどあんまりよくわかっていない。</p>

<p>ためしに、トランスパイルしてみることにしましょう。
以下のパッケージを追加します。</p>

<p><b>babelを導入</b></p>

<pre class="code" data-lang="" data-unlink>$ yarn add --dev @babel/core @babel/cli</pre>


<p><code>@babel/cli</code>は、CLIからトランスパイルを実行するために追加しています。</p>

<p>以下のように、トランスパイルしたいファイルを指定して、実行してみると、トランスパイル後のソースコードがコンソールに表示されます。</p>

<p><b>Babelを実行</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ yarn babel ./src/sum.js
// ↓トランスパイル後のコード
const sum <span class="synStatement">=</span> <span class="synPreProc">(</span><span class="synSpecial">a, b</span><span class="synPreProc">)</span> <span class="synStatement">=&gt;</span> <span class="synSpecial">{</span>
  <span class="synStatement">return</span> a + b<span class="synStatement">;</span>
<span class="synSpecial">}</span>;

<span class="synStatement">export</span><span class="synIdentifier"> default sum</span>;

✨  Done <span class="synError">in</span> <span class="synConstant">1</span>.72s.
</pre>


<p>Yes！とおもいきや、なんもかわってないですね。
というのも、<code>Babel</code>の設定でソースコードをCommonJSにしてね！という設定をしていないからです。</p>

<p>なので設定をしていきます。</p>

<p>プロジェクトのルートディレクトリ(<code>package.json</code>と同じところ)に<code>.babelrc</code>を作ります。ここに設定を書くと、<code>Babel</code>実行時にこちらを参照してくれるみたいです。</p>

<p>ちなみに<code>.babelrc</code>以外にも<code>babel.config.js</code>だったり<code>package.json</code>に書いたりと、いろいろな<code>Babel</code>の設定方法があるみたいですね。</p>

<p>さて、肝心の設定ですが、以前は大変だったみたいなのですが、今は環境に合わせていい感じに設定してくれる機能してくれる<code>@babel/preset-env</code>があるのでこちらを利用することにします。</p>

<p><b>presetを導入</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ yarn add <span class="synSpecial">--dev</span> @babel/preset-env
</pre>


<p>パッケージを追加したら先ほど作成した<code>.babelrc</code>を以下のように編集します。</p>

<p><b>.babelrc</b></p>

<pre class="code lang-json" data-lang="json" data-unlink><span class="synSpecial">{</span>
  &quot;<span class="synStatement">presets</span>&quot;: <span class="synSpecial">[</span>&quot;<span class="synConstant">@babel/preset-env</span>&quot;<span class="synSpecial">]</span><span class="synError">,</span>
<span class="synError">}</span>
</pre>


<p>さきほど同様に<code>Babel</code>を実行してみると、</p>

<p><b>Babel実行</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ yarn babel ./src/sum.js
<span class="synStatement">&quot;</span><span class="synConstant">use strict</span><span class="synStatement">&quot;</span>;

Object.defineProperty<span class="synPreProc">(</span><span class="synSpecial">exports, </span><span class="synStatement">&quot;</span><span class="synConstant">__esModule</span><span class="synStatement">&quot;</span><span class="synSpecial">, {</span>
<span class="synSpecial">  value: </span><span class="synStatement">true</span>
<span class="synSpecial">}</span><span class="synPreProc">)</span>;
exports<span class="synStatement">[&quot;</span><span class="synConstant">default</span><span class="synStatement">&quot;]</span> <span class="synStatement">=</span> void <span class="synConstant">0</span>;

var sum <span class="synStatement">=</span> <span class="synIdentifier">function</span> sum<span class="synPreProc">(</span><span class="synSpecial">a, b</span><span class="synPreProc">)</span> <span class="synSpecial">{</span>
  <span class="synStatement">return</span> a + b<span class="synStatement">;</span>
<span class="synSpecial">}</span>;

var _default <span class="synStatement">=</span> sum;
exports<span class="synStatement">[&quot;</span><span class="synConstant">default</span><span class="synStatement">&quot;]</span> <span class="synStatement">=</span> _default;

✨  Done <span class="synError">in</span> <span class="synConstant">2</span>.56s.
</pre>


<p>ES6の<code>export</code>が<code>exports["default"]</code>にかわりました！
これで無事、CommonJSに変換されました！
(といいたいのですが、CommonJSに自信がないのでちょっと不安。)</p>

<h4 id="余談-babelpreset-env-をもうすこしだけみる">余談 @babel/preset-env をもうすこしだけみる</h4>

<p><code>@babel/preset-env</code>って何をやっているのだろうと思い、もう少し調べて見ることにする。</p>

<p>以下の公式ドキュメントに書かれている通り、そもそも<code>Babel</code>はコンパイラのように、コードをパースして、変換して、結果を出力するということをしてくれるもの。
<a href="https://babeljs.io/docs/en/plugins/">https://babeljs.io/docs/en/plugins/</a></p>

<p>コードを変換する処理は、プラグインという形で<code>Babel</code>本体からは切り出されているんだと思う。なのでプラグインを指定しない場合、<code>Babel</code>はコードをパースして、そのまま出力するだけになる。</p>

<p>そこで、以下のようにプラグインを指定して、<code>Babel</code>を実行すると、CommonJSの形式になることがわかった。</p>

<p><b>.babelrc</b></p>

<pre class="code lang-json" data-lang="json" data-unlink><span class="synSpecial">{</span>
  &quot;<span class="synStatement">plugins</span>&quot;: <span class="synSpecial">[</span>&quot;<span class="synConstant">@babel/plugin-transform-modules-commonjs</span>&quot;<span class="synSpecial">]</span>
<span class="synSpecial">}</span>
</pre>


<p>なので、<code>@babel/preset-env</code>を使わない場合、必要な環境に応じて、プラグインを記載していく必要があるんだけれども、これがたぶん面倒。</p>

<p>つまり<code>@babel/preset-env</code>を使うと環境に応じて必要なプラグインを追加してくれているんだと思う。</p>

<p><code>@babel/preset-env</code>に<code>debug</code>オプションがあったので、さきほどの<code>.babelrc</code>に追加して、<code>Babel</code>を実行してみたところ、以下のようにプラグイン<code>transform-xxx</code>がいっぱいで表示されることが確認でき、想定通りプラグインを追加していることが確認できる。</p>

<pre class="code" data-lang="" data-unlink>@babel/preset-env: `DEBUG` option

Using targets:
{}

Using modules transform: auto

Using plugins:
  transform-template-literals {}
  transform-literals {}
  transform-function-name {}
  transform-arrow-functions {}
  ・・・省略</pre>


<p>ちなみに、肝心のCommonJSに変換するであろう<code>@babel/plugin-transform-modules-commonjs</code>が、上記のプラグインのリストには見当たらなかった。</p>

<p>あれ？と思い、さきほどのログを見返すと<code>modules</code>が<code>auto</code>になっており、ググって見ると、以下のissueがみつかる。
<a href="https://github.com/babel/babel/pull/8485">https://github.com/babel/babel/pull/8485</a></p>

<p>ものすごくざっくりとした理解だと、<code>auto</code>にしとくと<code>Babel</code>がどのように実行されたかによって、どのモジュールタイプに変換するかを制御してくれているってことかな。
webpackで<code>babel-loader</code>を使って<code>Babel</code>を実行した場合は、モジュール変換用のプラグインは使わなくって、それ以外は<code>transform-modules-commonjs</code>をプラグインに追加してるっぽい。</p>

<h3 id="jestを再実行">jestを再実行</h3>

<p>だいぶ話がそれましたが、無事CommonJSに変換できることが確認できたので、<code>jest</code>を再実行してみます。</p>

<p><b>Babelを再実行</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ yarn jest
  ✓ 関数sumに<span class="synConstant">1</span>と<span class="synConstant">2</span>を渡すと<span class="synConstant">3</span>が返ってくる <span class="synPreProc">(</span><span class="synSpecial">3ms</span><span class="synPreProc">)</span>

Test Suites: <span class="synConstant">1</span> passed, <span class="synConstant">1</span> total
Tests:       <span class="synConstant">1</span> passed, <span class="synConstant">1</span> total
Snapshots:   <span class="synConstant">0</span> total
Time:        <span class="synConstant">5</span>.886s
Ran all <span class="synStatement">test</span> suites.
✨  Done <span class="synError">in</span> <span class="synConstant">8</span>.12s.
</pre>


<p>ほんのり遅いのですが無事テストがpassさせることに成功しました！</p>

<p>特段、<code>jest</code>向けに<code>Babel</code>の設定はしていないのですが、テスト実行時に<code>.babelrc</code>を見てくれているみたいですね。</p>

<p>ちなみに<code>yarn jest --watch</code>でwatchオプション付きで実行すると、テスト対象のコード、テストコードを監視してくれて、変更が入るたびにテストコードが走ります。 これぞTDDだ！という体験ができるのでおすすめです。</p>

<h2 id="DOMがからむテストを書く">DOMがからむテストを書く</h2>

<p>次にDOMをレンダリングするアプリケーションのテストを書いてみようと思います。</p>

<p>以下のようにボタンを押すと、カウントアップするDOMをつくってbodyにつっこむ、<code>counterPage.js</code>をつくってみました。</p>

<p>フレームワークもライブラリも使っていないので、単純に<code>document.createElement</code>でDOMノードをつくっています。</p>

<p><b>/src/counterPage.js</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">import</span> <span class="synIdentifier">{</span> increment, getCount <span class="synIdentifier">}</span> from <span class="synConstant">'./counter'</span>

 <span class="synComment">// ボタンを押した分だけその回数をラベルに表示する</span>
<span class="synStatement">const</span> counterPage = () =&gt; <span class="synIdentifier">{</span>
  <span class="synStatement">const</span> div = <span class="synStatement">document</span>.createElement(<span class="synConstant">'div'</span>);

  <span class="synComment">// 回数を表すラベル</span>
  <span class="synStatement">const</span> label = <span class="synStatement">document</span>.createElement(<span class="synConstant">'label'</span>);
  label.textContent = <span class="synConstant">'0'</span>

  <span class="synComment">// カウントアップボタン</span>
  <span class="synStatement">const</span> button = <span class="synStatement">document</span>.createElement(<span class="synConstant">'button'</span>);
  button.textContent = <span class="synConstant">'count up'</span>
  button.addEventListener(<span class="synConstant">'click'</span>, () =&gt; <span class="synIdentifier">{</span>
    increment()
    label.textContent = getCount()
  <span class="synIdentifier">}</span>)

  div.appendChild(button)
  div.appendChild(label)

  <span class="synComment">// つくったdivをbodyにつっこんじゃう</span>
  <span class="synStatement">document</span>.body.appendChild(div)
<span class="synIdentifier">}</span>

<span class="synStatement">export</span> <span class="synStatement">default</span> counterPage
</pre>


<p>また、あんまり意味がないのですが、カウンターを管理する機能を<code>counter.js</code>として、別のファイルに切り出しています。</p>

<p><b>/src/counter.js</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synIdentifier">let</span> counter = 0

<span class="synStatement">export</span> <span class="synStatement">const</span> increment = () =&gt; <span class="synIdentifier">{</span>
 <span class="synStatement">return</span> counter++
<span class="synIdentifier">}</span>

<span class="synStatement">export</span> <span class="synStatement">const</span> getCount = () =&gt; <span class="synIdentifier">{</span>
 <span class="synStatement">return</span> counter
</pre>


<p>では早速<code>counterPage.js</code>をテストしていきます。
テストコードは、<code>counterPage.test.js</code>としてつくります。</p>

<p>こんな感じに書いてみました。</p>

<p><b>/src/counterPage.test.js</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">import</span> counterPage from <span class="synConstant">'./counterPage'</span>

it(<span class="synConstant">'count upボタンをおすと、ラベルのテキストがカウントアップすること'</span>, () =&gt; <span class="synIdentifier">{</span>
  <span class="synComment">// 初期レンダリング</span>
  counterPage()

  <span class="synComment">//ボタンとラベルの要素を取得取得する</span>
  <span class="synStatement">const</span> button = <span class="synStatement">document</span>.querySelector(<span class="synConstant">'button'</span>)
  <span class="synStatement">const</span> label = <span class="synStatement">document</span>.querySelector(<span class="synConstant">'label'</span>)

  <span class="synComment">// 最初は0で</span>
  expect(label.textContent).toBe(<span class="synConstant">'0'</span>)
  <span class="synComment">// ボタンをクリックすると</span>
  button.click()
  <span class="synComment">// 1になる</span>
  expect(label.textContent).toBe(<span class="synConstant">'1'</span>)
<span class="synIdentifier">}</span>)
</pre>


<p>普段javascriptでDOM要素を扱っている方なら、すらすら書けるのではないでしょうか。
<code>button</code>タグで要素をとってきたりとちょっと乱暴ですが、実際はクラス名だったりIDだったりをつけて取得するイメージでしょうか。</p>

<p>ちなみに自分は「あれ<code>jest</code>ってNode.js環境なのに<code>document.createElement()</code>とか使っているコードを問題なく実行しているんだろう」と混乱しました。</p>

<p>これは、<code>jsdom</code>というパッケージがNode.js環境でもDOMを扱えるようしてくれているみたいです！すごい！<br/>
<a href="https://github.com/jsdom/jsdom">https://github.com/jsdom/jsdom</a></p>

<p>そして<code>jest</code>を追加すると<code>jsdom</code>も追加されるので、個別で追加する必要はなさそうです。</p>

<h3 id="jest-domを使う">jest-domを使う</h3>

<p>とはいえアサーションする度に、<code>label.textContent</code>のように書いていくのは、DOMの構造を意識する必要があり、めんどうです。</p>

<p>例えば以下のようにDOMの構造がかわった場合、<code>label.textContent</code>ではなく、<code>span.textContent</code>にテストコードを修正する必要があります。</p>

<p><b>変更前</b></p>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span><span class="synStatement">label</span><span class="synIdentifier">&gt;</span>0<span class="synIdentifier">&lt;/</span><span class="synStatement">label</span><span class="synIdentifier">&gt;</span>
</pre>


<p><b>変更後</b></p>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span><span class="synStatement">label</span><span class="synIdentifier">&gt;</span>
  カウント：
  <span class="synIdentifier">&lt;</span><span class="synStatement">span</span><span class="synIdentifier">&gt;</span>0<span class="synIdentifier">&lt;/</span><span class="synStatement">span</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">label</span><span class="synIdentifier">&gt;</span>
</pre>


<p>テスト観点としては「count upボタンを押したら、ラベルのテキストがカウントアップすること」という点はかわっていないのですが、DOMの構造がかわってしまったために、テストコードの修正が発生してしまいました。</p>

<p>これを回避するために、<code>jest-dom</code>を使うことにします。</p>

<p><a href="https://github.com/testing-library/jest-dom">https://github.com/testing-library/jest-dom</a></p>

<p><code>jest-dom</code>は、以下の<code>toBe</code>の部分(Matcherと呼ぶみたい)をDOM用に便利に拡張したものを用意してくれます。</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>expect(button.textContent).toBe(<span class="synConstant">'1'</span>)
                          <span class="synComment">// ↑Matcher</span>
</pre>


<p>さっそくつかってみます。</p>

<p><b>パッケージを追加</b></p>

<pre class="code" data-lang="" data-unlink>$ yarn add --dev @testing-library/jest-dom</pre>


<p><code>counterPage.js</code>にさきほどの例のように<code>span</code>を追加することにします。</p>

<p><b>/src/counterPage.js</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">import</span> <span class="synIdentifier">{</span> increment, getCount <span class="synIdentifier">}</span> from <span class="synConstant">'./counter'</span>

<span class="synStatement">const</span> counterPage = () =&gt; <span class="synIdentifier">{</span>
  <span class="synStatement">const</span> div = <span class="synStatement">document</span>.createElement(<span class="synConstant">'div'</span>);

  <span class="synStatement">const</span> label = <span class="synStatement">document</span>.createElement(<span class="synConstant">'label'</span>);
  <span class="synComment">// spanを追加</span>
  <span class="synStatement">const</span> span = <span class="synStatement">document</span>.createElement(<span class="synConstant">'span'</span>);
  span.textContent = 0

  label.textContent = <span class="synConstant">'カウント：'</span>
  label.appendChild(span)

  <span class="synStatement">const</span> button = <span class="synStatement">document</span>.createElement(<span class="synConstant">'button'</span>);
  button.textContent = <span class="synConstant">'count up'</span>
  button.addEventListener(<span class="synConstant">'click'</span>, () =&gt; <span class="synIdentifier">{</span>
    increment()
    <span class="synComment">// spanにカウント回数を設定する</span>
    span.textContent = getCount()
  <span class="synIdentifier">}</span>)

  div.appendChild(button)
  div.appendChild(label)

  <span class="synStatement">document</span>.body.appendChild(div);
<span class="synIdentifier">}</span>

<span class="synStatement">export</span> <span class="synStatement">default</span> counterPage
</pre>


<p>この状態でテストを実行すると、テストが失敗するかと思います。</p>

<p>これを、<code>jest-dom</code>のカスタムマッチャーを使って置き換えてみるとこんな感じになります。</p>

<p><b>/src/counterPage.test.js</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">import</span> <span class="synConstant">'@testing-library/jest-dom/extend-expect'</span>
<span class="synStatement">import</span> counterPage from <span class="synConstant">'./counterPage'</span>

it(<span class="synConstant">'count upボタンをおすと、カウントラベルがカウントアップすること'</span>, () =&gt; <span class="synIdentifier">{</span>
  <span class="synComment">// 初期レンダリング</span>
  counterPage()

  <span class="synComment">//ボタンとラベルの要素を取得取得する</span>
  <span class="synStatement">const</span> button = <span class="synStatement">document</span>.querySelector(<span class="synConstant">'button'</span>)
  <span class="synStatement">const</span> label = <span class="synStatement">document</span>.querySelector(<span class="synConstant">'label'</span>)

  <span class="synComment">// 最初は0で</span>
  expect(label).toHaveTextContent(<span class="synConstant">'0'</span>)

  <span class="synComment">// もしくは、以下のようにしてもいい！</span>
  <span class="synComment">// expect(label).toHaveTextContent('カウント：0')</span>
  <span class="synComment">// ボタンをクリックすると</span>
  button.click()
  <span class="synComment">// 1になる</span>
  expect(label).toHaveTextContent(<span class="synConstant">'1'</span>)

<span class="synIdentifier">}</span>)
</pre>


<p>上記で使用した<code>toHaveTextContent</code>は、対象のDOMノード配下に、期待するテキストがあるかをちゃんと判断してくれます。
そのため、DOMの構造がかわったとしてもテストコードの修正が不要になるという優れもの。</p>

<p>これは大したことではないように感じるかもしれませんが、テストコードを書くにあたっては、結構大事なことなんじゃないかなと思います。</p>

<p>テストコードを書き始めていって量が増えてくると、ちょっとしたリファクタリングの度にテストコードもセットで直さないといけない、という状況はなかなか厳しいものです。</p>

<p>最後には、テストをskipしていくという悲しい結末にならないように、DOMに関係するテストコードはできるだけ<strong>内部実装に依存させない</strong>ことが大事かもしれませんね。</p>

<p><code>jest-dom</code>には他にも便利なマッチャーがあるので公式を参照してください。<br/>
個人的にはボタンが非活性になっているかどうか判断する<code>toBeDisabled</code>や、フォーカスがあっているかどうかを判断する<code>toHaveFocus</code>、要素が存在しているかを確認する<code>toBeInTheDocument</code>をよくつかったりします。</p>

<h3 id="dom-testing-libraryを使う">dom-testing-libraryを使う</h3>

<p>内部実装に依存させないという点から、さらにもう一歩進んで、よりユーザーの操作を意識したテストにかえていきます。</p>

<p>なんのこっちゃという感じなのですが、まずは以下のパッケージを追加してみます。</p>

<p><b>パッケージを追加</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ yarn add <span class="synSpecial">--dev</span> @testing-library/dom
</pre>


<p>パッケージを追加したら以下のように使うことができます。</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">import</span> <span class="synConstant">'@testing-library/jest-dom/extend-expect'</span>
<span class="synStatement">import</span> <span class="synIdentifier">{</span> getByText <span class="synIdentifier">}</span> from <span class="synConstant">'@testing-library/dom'</span>
<span class="synStatement">import</span> counterPage from <span class="synConstant">'./counterPage'</span>

it(<span class="synConstant">'count upボタンをおすと、カウントラベルがカウントアップすること'</span>, () =&gt; <span class="synIdentifier">{</span>
  <span class="synComment">// 初期レンダリング</span>
  counterPage()
  <span class="synStatement">const</span> body = <span class="synStatement">document</span>.querySelector(<span class="synConstant">'body'</span>)

  <span class="synStatement">const</span> button = getByText(body, <span class="synConstant">'count up'</span>)
  <span class="synStatement">const</span> label = getByText(body, <span class="synConstant">'カウント:'</span>)

  <span class="synComment">// 最初は0で</span>
  expect(label).toHaveTextContent(<span class="synConstant">'0'</span>)
  <span class="synComment">// ボタンをクリックすると</span>
  button.click()
  <span class="synComment">// 1になる</span>
  expect(label).toHaveTextContent(<span class="synConstant">'1'</span>)
<span class="synIdentifier">}</span>)
</pre>


<p><code>getByText</code>は第一引数に与えられたHTMLElementから、第2引数の文字列を持つDOMを取得して返してくれるメソッドです。</p>

<p>これにより、ボタンやカウントの回数を表示するラベルを取得する際に、ユーザーが画面上に見える言葉をつかってテストを書いていくことができます。
これにより、見た目を変更する為にクラス名をかえたり、DOMの構造をかえても、テストが壊れる頻度がぐっと減ります。</p>

<p><code>getByText</code>以外にも、ラベルに紐づく要素を取得する<code>getByLabelText</code>や、以下のように<code>data-testid</code>を定義して、それを取得する<code>data-testid</code>等あるので、こちらも公式を参照してみてください。</p>

<pre class="code lang-html" data-lang="html" data-unlink>  <span class="synComment">&lt;!--data-testidはlabelもtextもなにもなく、どうしようもないときに使うというスタンスっぽい --&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">data</span><span class="synIdentifier">-testid=</span><span class="synConstant">&quot;wrapper&quot;</span><span class="synIdentifier">&gt;&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
</pre>


<h2 id="Vuejsのテストコードを書く">Vue.jsのテストコードを書く</h2>

<p>ようやく目標のVue.jsのテストコードを書いていきます！</p>

<p>まずはVue.jsをいれましょう。</p>

<p><b>パッケージを追加</b></p>

<pre class="code" data-lang="" data-unlink>$ yarn add vue </pre>


<p>また、後ほどでてくる<code>vue-jest</code>で<code>vue-template-compiler</code>が必要になるので、こちらも追加しておきます。</p>

<p><b>パッケージを追加</b></p>

<pre class="code" data-lang="" data-unlink>$ yarn add --dev vue-template-compiler</pre>


<p>次に、単一ファイルコンポーネントである<code>App.vue</code>を作成します。
ひとまず、機能はおいておいて、<code>Hello Jest!</code>を表示するだけのコンポーネントです。</p>

<p><b>App.vue</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>&lt;template&gt;
  &lt;h1&gt;Hello Jest!&lt;/h1&gt;
&lt;/template&gt;
</pre>


<p>準備ができたらテストコードに移りましょう！</p>

<h3 id="vue-test-utilsを使う">vue-test-utilsを使う</h3>

<p>単一ファイルコンポーネントのテストは、まずはVue.js公式の単体テストライブラリである、<code>vue-test-utils</code>を使ってみます。
<a href="https://vue-test-utils.vuejs.org/ja/">https://vue-test-utils.vuejs.org/ja/</a></p>

<p><b>パッケージを追加</b></p>

<pre class="code" data-lang="" data-unlink>$ yarn add --dev vue-test-utils</pre>


<p>また、こちらも公式に記載されている通り、<code>jest</code>の設定を追加します。
<a href="https://vue-test-utils.vuejs.org/ja/guides/testing-single-file-components-with-jest.html">https://vue-test-utils.vuejs.org/ja/guides/testing-single-file-components-with-jest.html</a></p>

<p><code>package.json</code>に追加しようとありますが、今回は<code>jest</code>用の設定ファイルを作成することにしました。</p>

<p>プロジェクトのドキュメントルートに<code>jest.config.js</code>をつくり、公式の設置を追加します。</p>

<p><b>jest.config.js</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>module.exports = <span class="synIdentifier">{</span>
  <span class="synConstant">&quot;moduleFileExtensions&quot;</span>: <span class="synIdentifier">[</span>
    <span class="synConstant">&quot;js&quot;</span>,
    <span class="synConstant">&quot;json&quot;</span>,
    <span class="synComment">// *.vue ファイルを処理するように Jest に指示する</span>
    <span class="synConstant">&quot;vue&quot;</span>
  <span class="synIdentifier">]</span>,
  <span class="synConstant">&quot;transform&quot;</span>: <span class="synIdentifier">{</span>
    <span class="synComment">// transformの定義を追加すると、デフォルトでjestがやってくれていた</span>
    <span class="synComment">// babelのトランスパイルが上書きされてしまうとのことなので</span>
    <span class="synComment">// 以下も書いておく</span>
    <span class="synConstant">'^.+</span><span class="synSpecial">\\</span><span class="synConstant">.js$'</span>: <span class="synConstant">'&lt;rootDir&gt;/node_modules/babel-jest'</span>,
    <span class="synComment">// vue-jest で *.vue ファイルを処理する</span>
    <span class="synConstant">&quot;.*</span><span class="synSpecial">\\</span><span class="synConstant">.(vue)$&quot;</span>: <span class="synConstant">&quot;vue-jest&quot;</span>
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>
</pre>


<p><code>vue-jest</code>が必要とのことなので追加します。</p>

<p><b>パッケージを追加</b></p>

<pre class="code" data-lang="" data-unlink>$ yarn add --dev vue-jest</pre>


<p><code>vue-jest</code>ですが、冒頭のES6記法のファイルをNode.js環境で実行できるようにBabelの設定を行ったのと同じ様な話ですね！<br/>
Vue.jsを使う際はwebpackで<code>vue-loader</code>を使ってトランスパイルしていますが、<code>jest</code>は<code>vue-jest</code>を使ってトランスパイルしてくれているということかと思います。
なお、公式に書いてありますが、<code>vue-jest</code>は<code>vue-loader</code>のすべての機能を担保していないですよっていうのだけ、ちょっと気になりますが、ひとまず進めます。</p>

<p>テストコードは以下のようにしました。</p>

<p><b>App.test.js</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">import</span> <span class="synIdentifier">{</span> mount <span class="synIdentifier">}</span> from <span class="synConstant">'@vue/test-utils'</span>
<span class="synStatement">import</span> App from <span class="synConstant">'./App.vue'</span>

it(<span class="synConstant">'初期表示時にHello Jest!が表示されていること'</span>, () =&gt; <span class="synIdentifier">{</span>
  <span class="synStatement">const</span> wrapper = mount(App)
  expect(wrapper.html()).toBe(<span class="synConstant">'&lt;h1&gt;Hello Jest!&lt;/h1&gt;'</span>)
<span class="synIdentifier">}</span>)
</pre>


<p><code>mount</code>を使うことでコンポーネントをマウント(そのまんま)した状態のオブジェクト<code>Wrapper</code>を返してくれるとのこと。</p>

<p>この<code>Wrapper</code>からそのコンポーネントのプロパティだったり、レンダリングされている要素に取得できるみたいで
今回は<code>html</code>を使って、描画されるHTMLが想定通りであることを確認しています。</p>

<p><code>jest</code>を実行すると、テストが無事passしました！</p>

<p>ですが、Vue.jsを使わないでDOMに関わるテストコードのときにもあったのですが、このテストの仕方だと、Vueのテンプレートの構造がかわると、テストが失敗していまいます。<br/>
あくまで、このテストは<code>Hello Jest!</code>が表示されることを確認したいのであって、HTMLの構造が<code>&lt;h1&gt;Hello Jest!&lt;/h1&gt;</code>を確認したいわけではないです。</p>

<p><code>jest-dom</code>、<code>dom-testing-library</code>を使っていったように、Vue.jsでも同じことがしたい！というのを解決するのが<code>vue-testing-library</code>になります。</p>

<h4 id="babel-coreがないよでテストが失敗する場合">babel-coreがないよでテストが失敗する場合</h4>

<p><code>jest</code>を実行してみると、悲しいことに<code>babel-core</code>が見つからないよというエラーで落ちたので対応方法を記載します。</p>

<p>この記事を書いていた時点だと<code>vue-jest</code>のv3.0.4でした。
※v4系からはなおっていそうです。</p>

<p>こちらですが、<code>vue-jest</code>のpeerDependeciesに<code>babel-core": "^6.25.0 || ^7.0.0-0</code>,と書いているのですが、Babelはパッケージ名がv7から<code>@babel/core</code>にかわっています。</p>

<p>冒頭で<code>@babel/core</code>をインストールしていたので、<code>babel-core</code>がねえよといわれてしまっています。</p>

<p>こちらですが、<code>babel-bridge</code>を使うことで、<code>babel-core</code>の名前で<code>@babel/core</code>を参照してくれるようになるみたいです。
<a href="https://github.com/babel/babel-bridge">https://github.com/babel/babel-bridge</a></p>

<p>なのでこちらも追加します。</p>

<p><b>パッケージを追加</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ yarn add <span class="synSpecial">--dev</span> babel-core@^<span class="synConstant">7</span>.<span class="synConstant">0</span>.0-bridge.<span class="synConstant">0</span> 
</pre>


<h3 id="vue-testing-libraryを使う">vue-testing-libraryを使う</h3>

<p><a href="https://github.com/testing-library/vue-testing-library">https://github.com/testing-library/vue-testing-library</a></p>

<p><code>vue-testing-library</code>は<code>dom-testing-library</code>をVue用にラップしたものになります。内部では、<code>vue-test-utils</code>を使ってコンポーネントをマウントしてるみたいです。</p>

<p>では、さきほどのテストコードを<code>vue-testing-library</code>を使って置き換えてみたいと思います。</p>

<p><b>App.test.js</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">import</span> <span class="synConstant">'@testing-library/jest-dom/extend-expect'</span>
<span class="synStatement">import</span> <span class="synIdentifier">{</span> render<span class="synIdentifier">}</span> from <span class="synConstant">'vue-testing-library'</span>
<span class="synStatement">import</span> App from <span class="synConstant">'./App.vue'</span>

it(<span class="synConstant">'render App'</span>, () =&gt; <span class="synIdentifier">{</span>
  <span class="synStatement">const</span> <span class="synIdentifier">{</span> getByText <span class="synIdentifier">}</span> = render(App)
  expect(getByText(<span class="synConstant">'Hello Jest!'</span>)).toBeInTheDocument()
<span class="synIdentifier">}</span>)
</pre>


<p><code>dom-testing-libary</code>を使ったときは、<code>getByText</code>に検索対象のDOMノードを渡していましたが、<code>vue-testing-library</code>だとrenderメソッドの返り値として、検索対象のDOMノードが指定された状態の関数を受け取ることができます。</p>

<p>これで、DOMの構造を意識することなくテストを行うことができるようになりました！</p>

<p>この他にもボタンを押下したり、非同期処理だったり、モックを使ったテスト等、いろいろとあるのですが、とりあえず目標であるVue.js用のテストコードを書くことができました。</p>

<h2 id="まとめ">まとめ</h2>

<p>長くなりましたが、書きたかったことはこれだけでした。</p>

<ul>
<li><p>フロントのテストは、内部実装にできるだけ依存せず、ユーザーの観点でテストできると、テストコードで消耗する機会は減ると思うよ！</p></li>
<li><p>それには<code>vue-testing-library</code>が便利だよ！でもそれに至るまでにでてくる登場人物がちょっと多くって混乱するよ！</p></li>
<li><p>とはいえ、複雑な機能だったりは、共通コンポーネントだけをテストしたい等の場合は<code>vue-test-utils</code>を使う等、使い分けをするといいかもね！</p></li>
</ul>


<h2 id="そのほか">そのほか</h2>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fwww.tohuandkonsome.site%2Fentry%2F2019%2F11%2F20%2F205130" title="jestのmockを学ぶ - 豆腐とコンソメ" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://www.tohuandkonsome.site/entry/2019/11/20/205130">www.tohuandkonsome.site</a></cite></p>

-----
--------
AUTHOR: konoemario
TITLE: Cコンパイラ作成に入門してみた
BASENAME: 2019/08/17/133457
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 08/17/2019 13:34:57
CATEGORY: C
CATEGORY: プログラム
-----
BODY:
<p>C言語のコンパイラを作成する以下の記事に入門してみたのだけれども、それがとてもよかったので夏休みの宿題のごとく感想文を書くことにするよ！</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fwww.sigbus.info%2Fcompilerbook%23" title="低レイヤを知りたい人のためのCコンパイラ作成入門" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://www.sigbus.info/compilerbook#">www.sigbus.info</a></cite></p>

<p>内容としては、C言語を使って、少しずつC言語のコンパイラを実装していく、というもの。<br/>
アセンブリの説明から、コードをトークン化して、パースする方法、実装の進め方等とても丁寧に書かれていて、C言語にあんまり慣れてにない自分でも、ものすごくわかりやすい！</p>

<p>特に構文をパースしていく再帰下降構文解析は、再帰処理になれていない自分にとっては、神の所業としか思えない。
ただ、実装を進めていくと徐々に理解が進んできて、if文を実装するときは、ノードをこうしたほうがいいのかしら、とか考えることもできるようなったりと、成長も実感することができます。<br/>
また、シェルスクリプトでシンプルなテストコードを用意して、確認していく過程も、テストコードっていいなぁと思えたり。</p>

<p>ひとまず以下のようなCっぽい言語をコンパイルして、実行することができるようになりました!</p>

<p><b>Cっぽい言語</b></p>

<pre class="code lang-c" data-lang="c" data-unlink>main() {
  number = <span class="synConstant">5</span>
  <span class="synStatement">return</span> fibonacci(number);
}

fibonacci(n) {
  <span class="synStatement">if</span>(n == <span class="synConstant">1</span>) <span class="synStatement">return</span> <span class="synConstant">1</span>;
  <span class="synStatement">if</span>(n == <span class="synConstant">2</span>) <span class="synStatement">return</span> <span class="synConstant">1</span>;
  <span class="synStatement">return</span> fibonacci(n - <span class="synConstant">1</span>) + fibonacci(n - <span class="synConstant">2</span>);
}
</pre>


<p>Dockerで環境をつくったので、参考までに貼っておきます！
<iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2FRyomasao%2F9cc" title="Ryomasao/9cc" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://github.com/Ryomasao/9cc">github.com</a></cite></p>

<p>そしてセルフホストの意味が今回のコンパイラ作成を通してどんだけ大変なのかを理解することができました。</p>

-----
--------
AUTHOR: konoemario
TITLE: webpackの設定を行う対話ツールをつくる
BASENAME: 2019/08/07/234949
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 08/07/2019 23:49:49
CATEGORY: javascript
CATEGORY: プログラム
-----
BODY:
<p>webpackの設定をちょっと変更して起動したいとき、<code>webpack.config.js</code>を直接書き換えるか、それ用の<code>webpack.config.hoge.js</code>とかを用意したりすればいいよね。<br/>
なんだけど、<code>yarn hogehoge</code>ってしたらCLIツールが立ち上がって、対話形式で設定を変更できたらすこしおしゃれじゃないですか。</p>

<p>ということで、試してみた。</p>

<p>参考にさせていただいた記事は以下の通り。</p>

<p><a href="https://codeburst.io/building-a-node-js-interactive-cli-3cb80ed76c86">https://codeburst.io/building-a-node-js-interactive-cli-3cb80ed76c86</a></p>

<h2>まずは下準備</h2>

<p>おもむろに<code>index.js</code>を作成しよう。</p>

<p><b>index.js</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">const</span> init = () =&gt; <span class="synIdentifier">{</span>
  console.log(<span class="synConstant">'Ohanky'</span>);
<span class="synIdentifier">}</span>;

<span class="synStatement">const</span> run = async () =&gt; <span class="synIdentifier">{</span>
  init();
<span class="synIdentifier">}</span>;

run()
</pre>


<p>早速実行してみよう。コンソールに<code>Ohanky</code>がでるはずだ。</p>

<p><b>実行</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ node index.js
Ohanky
</pre>


<p><br/></p>

<h2>かっこよくする</h2>

<p>このままだと味気ないで、コンソールに表示される文字に色をつけよう。</p>

<p><code>chalk</code>というパッケージを使うみたい。<br/>
githubのページもカラフルで綺麗な感じになってる。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2Fchalk%2Fchalk" title="chalk/chalk" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://github.com/chalk/chalk">github.com</a></cite></p>

<pre class="code" data-lang="" data-unlink>$ yarn add --dev chalk</pre>


<p>使い方は、ものすごくシンプルで、以下にように<code>console.log()</code>内に<code>chalk</code>の関数を実行しているだけ。</p>

<p><b>index.js</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synComment">// パッケージを読み込んで</span>
<span class="synStatement">const</span> chalk = require(<span class="synConstant">'chalk'</span>);

<span class="synStatement">const</span> init = () =&gt; <span class="synIdentifier">{</span>
  <span class="synComment">//ここで使うだけ</span>
  console.log(chalk.blue(<span class="synConstant">'Ohanky'</span>));
<span class="synIdentifier">}</span>;

<span class="synStatement">const</span> run = async () =&gt; <span class="synIdentifier">{</span>
  init();
<span class="synIdentifier">}</span>;

run();
</pre>


<p>さきほどと同様に実行してみれば、青色の<code>Ohanky</code>がコンソールに表示されたはず。</p>

<p><br/></p>

<h2>もっとかっこよくする</h2>

<p>いけてるCLIツールはかっこいいアスキーアートが起動すると表示されているよね。<br/>
自分でつくるのは大変だけど、<code>figlet</code>というパッケージをつかうと簡単にできるみたい。</p>

<pre class="code" data-lang="" data-unlink>$ yarn add --dev figlet</pre>


<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2Fpatorjk%2Ffiglet.js%23readme" title="patorjk/figlet.js" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://github.com/patorjk/figlet.js#readme">github.com</a></cite></p>

<p>いろんなオプションがあるけと、アスキーアートを作成はデフォルト非同期とのことなので、同期的に実行できる<code>textSync</code>だけを使うことにしてみる。</p>

<p><b>index.js</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">const</span> chalk = require(<span class="synConstant">'chalk'</span>);
<span class="synComment">// 同じようにパッケージを読み込んで</span>
<span class="synStatement">const</span> figlet = require(<span class="synConstant">'figlet'</span>);

<span class="synStatement">const</span> init = () =&gt; <span class="synIdentifier">{</span>
  <span class="synComment">// ちょっとみにくいけど、chakl()の中で実行するだけ</span>
  console.log(chalk.blue(figlet.textSync(<span class="synConstant">'Ohanky'</span>)));
<span class="synIdentifier">}</span>;

<span class="synStatement">const</span> run = async () =&gt; <span class="synIdentifier">{</span>
  init();
<span class="synIdentifier">}</span>;

run();
</pre>


<p>実行してみると、もうかっこいい！
※ブラウザでみるとフォントの違いか、とても見にくい😇</p>

<pre class="code" data-lang="" data-unlink> $ node index.js 
   ___  _                 _          
  / _ \| |__   __ _ _ __ | | ___   _ 
 | | | | &#39;_ \ / _` | &#39;_ \| |/ / | | |
 | |_| | | | | (_| | | | |   &lt;| |_| |
  \___/|_| |_|\__,_|_| |_|_|\_\\__, |
                               |___/ </pre>


<p><br/></p>

<h2>対話できるようにする</h2>

<p>ようやく本題。</p>

<p>といってもパッケージ、<code>inquirer</code>を使うだけでシンプルに作ることができるとのこと。</p>

<pre class="code" data-lang="" data-unlink>$ yarn add --dev inquirer</pre>


<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2FSBoudrias%2FInquirer.js%2F" title="SBoudrias/Inquirer.js" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://github.com/SBoudrias/Inquirer.js/">github.com</a></cite></p>

<p>ひとまず、webpackの設定という方針は忘れて、適当に選択肢を作って選ぶことにしてみる。</p>

<p><b>index.js</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">const</span> chalk = require(<span class="synConstant">'chalk'</span>);
<span class="synStatement">const</span> figlet = require(<span class="synConstant">'figlet'</span>);
<span class="synComment">// 同じようにパッケージを読み込んで</span>
<span class="synStatement">const</span> inquirer = require(<span class="synConstant">'inquirer'</span>);

<span class="synStatement">const</span> askQuestions = () =&gt; <span class="synIdentifier">{</span>
  <span class="synComment">// 設定を書く</span>
  <span class="synStatement">const</span> questions = <span class="synIdentifier">[</span>
    <span class="synIdentifier">{</span>
      <span class="synComment">// 今回は選択肢の中から選ぶようにlistを指定</span>
      type: <span class="synConstant">'list'</span>,
      <span class="synComment">// 選択肢から選んだ結果を保持する際のキー名</span>
      name: <span class="synConstant">'member'</span>,
      <span class="synComment">// 質問文 </span>
      message: <span class="synConstant">&quot;Please choose which one you like from&quot;</span>,
      <span class="synComment">// 選択肢</span>
      choices: <span class="synIdentifier">[</span><span class="synConstant">'ayane'</span>, <span class="synConstant">'mirin'</span><span class="synIdentifier">]</span>
    <span class="synIdentifier">}</span>
  <span class="synIdentifier">]</span>;
  <span class="synComment">// この関数はPromiseを返すので、受け取る方でPromise.resolveしたときの処理を書く</span>
  <span class="synStatement">return</span> inquirer.<span class="synStatement">prompt</span>(questions);
<span class="synIdentifier">}</span>;

<span class="synStatement">const</span> init = async () =&gt; <span class="synIdentifier">{</span>
  console.log(chalk.blue(figlet.textSync(<span class="synConstant">'Ohanky'</span>)));
  <span class="synComment">// async await構文でPromise.resolveしたときの処理を書く</span>
  <span class="synStatement">const</span> result = await askQuestions();
  console.log(result);
<span class="synIdentifier">}</span>;

<span class="synStatement">const</span> run = async () =&gt; <span class="synIdentifier">{</span>
  init();
<span class="synIdentifier">}</span>;

run();
</pre>


<p>これを実行すると、以下ように選択肢に設定した項目が選べるようになる！</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>   ___  _                 _          
  / _ \| |__   __ _ _ __ | | ___   _ 
 | | | | <span class="synStatement">'</span><span class="synConstant">_ \ / _` | </span><span class="synStatement">'</span>_ \| |/ / | | |
 | |_| | | | | <span class="synPreProc">(</span><span class="synSpecial">_</span><span class="synStatement">|</span><span class="synSpecial"> </span><span class="synStatement">|</span><span class="synSpecial"> </span><span class="synStatement">|</span><span class="synSpecial"> </span><span class="synStatement">|</span><span class="synSpecial"> </span><span class="synStatement">|</span><span class="synSpecial">   </span><span class="synStatement">&lt;|</span><span class="synSpecial"> </span><span class="synStatement">|</span><span class="synSpecial">_</span><span class="synStatement">|</span><span class="synSpecial"> </span><span class="synStatement">|</span>
<span class="synSpecial">  \___/</span><span class="synStatement">|</span><span class="synSpecial">_</span><span class="synStatement">|</span><span class="synSpecial"> </span><span class="synStatement">|</span><span class="synSpecial">_</span><span class="synStatement">|</span><span class="synSpecial">\__,_</span><span class="synStatement">|</span><span class="synSpecial">_</span><span class="synStatement">|</span><span class="synSpecial"> </span><span class="synStatement">|</span><span class="synSpecial">_</span><span class="synStatement">|</span><span class="synSpecial">_</span><span class="synStatement">|</span><span class="synSpecial">\_\\__, </span><span class="synStatement">|</span>
<span class="synSpecial">                               </span><span class="synStatement">|</span><span class="synSpecial">___/ </span>
<span class="synSpecial">? Please choose which one you like from </span><span class="synPreProc">(</span><span class="synSpecial">Use arrow keys</span><span class="synPreProc">)</span>
<span class="synSpecial">❯ ayane </span>
<span class="synSpecial">  mirin </span>

<span class="synSpecial">// 選んでEnterを押下すると以下のオブジェクトが出力される</span>
<span class="synSpecial">{ member: </span><span class="synStatement">'</span><span class="synConstant">ayane</span><span class="synStatement">'</span><span class="synSpecial"> }</span>
</pre>


<p><br/></p>

<h2>もっと便利に対話できるようにする</h2>

<p>リストから選択肢を選ぶのもいいけれども、選択肢がたくさんあったら面倒だよね、ということで、ユーザー入力値を設けて、フィルターできる機能を追加することにする。</p>

<p>これは、さきほどの<code>inquirer</code>のプラグインという形ですでに用意されている。</p>

<pre class="code" data-lang="" data-unlink>$ yarn add --dev inquirer-autocomplete-prompt</pre>


<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2Fmokkabonna%2Finquirer-autocomplete-prompt" title="mokkabonna/inquirer-autocomplete-prompt" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://github.com/mokkabonna/inquirer-autocomplete-prompt">github.com</a></cite></p>

<p>こちらが<code>inquirer-autocomplete-prompt</code>を使ったサンプルは以下の通り。<br/>
githubをみると、絞り込みにはさらに<code>fuzzy</code>なるパッケージがおすすめというとでしたが、ひとまずシンプルにarray.filterを使うことにします。</p>

<p><b>index.js</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">const</span> chalk = require(<span class="synConstant">'chalk'</span>)
<span class="synStatement">const</span> figlet = require(<span class="synConstant">'figlet'</span>)
<span class="synStatement">const</span> inquirer = require(<span class="synConstant">'inquirer'</span>)

<span class="synComment">// 追加したプラグインはこんな感じに読み込めるみたい</span>
<span class="synComment">// autcompleteっていうプラグイン名なのかしら</span>
inquirer.registerPrompt(<span class="synConstant">'autocomplete'</span>, require(<span class="synConstant">'inquirer-autocomplete-prompt'</span>))

<span class="synComment">// 選択肢はわかりやすいように切り出しただけ</span>
<span class="synStatement">const</span> members = <span class="synIdentifier">[</span><span class="synConstant">'ayane'</span>, <span class="synConstant">'mirin'</span>, <span class="synConstant">'eitaso'</span>, <span class="synConstant">'risa'</span>, <span class="synConstant">'nemo'</span>, <span class="synConstant">'perorin'</span><span class="synIdentifier">]</span>

<span class="synComment">// ユーザが文字を入力するたびに、呼ばれる関数を実装する</span>
<span class="synComment">// inputはユーザー入力値、answerは前回のフィルターした結果が格納されるっぽいけど、今回は使ってない</span>
<span class="synStatement">const</span> getMember = (answer, input) =&gt; <span class="synIdentifier">{</span>
  <span class="synComment">// ユーザー入力値を含む値をフィルターで取得</span>
  <span class="synStatement">const</span> member = members.filter(item =&gt; item.indexOf(input) !== -1)
  <span class="synComment">// なにも該当しない場合は、リスト全体を返すようにした</span>
  <span class="synStatement">const</span> result = member.length &gt; 0 ? member : members
  <span class="synComment">// 結果はPromiseで返さなきゃいけないとのこと</span>
  <span class="synStatement">return</span> Promise.resolve(result)
<span class="synIdentifier">}</span>

<span class="synStatement">const</span> askQuestions = () =&gt; <span class="synIdentifier">{</span>
  <span class="synStatement">const</span> questions = <span class="synIdentifier">[</span>
    <span class="synIdentifier">{</span>
      <span class="synComment">// typeをlistからautocompleteに</span>
      type: <span class="synConstant">'autocomplete'</span>,
      name: <span class="synConstant">'member'</span>,
      message: <span class="synConstant">'Please choose which one you like from '</span>,
      <span class="synComment">// choicesではなく、ユーザー入力値が設定されるごとに実行される関数を設定</span>
      source: getMember,
    <span class="synIdentifier">}</span>,
  <span class="synIdentifier">]</span>
  <span class="synStatement">return</span> inquirer.<span class="synStatement">prompt</span>(questions)
<span class="synIdentifier">}</span>
</pre>


<p>こうすることでいい感じに絞り込みを行うことができた。</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>  / _ \| |__   __ _ _ __ | | ___   _ 
 | | | | <span class="synStatement">'</span><span class="synConstant">_ \ / _` | </span><span class="synStatement">'</span>_ \| |/ / | | |
 | |_| | | | | <span class="synPreProc">(</span><span class="synSpecial">_</span><span class="synStatement">|</span><span class="synSpecial"> </span><span class="synStatement">|</span><span class="synSpecial"> </span><span class="synStatement">|</span><span class="synSpecial"> </span><span class="synStatement">|</span><span class="synSpecial"> </span><span class="synStatement">|</span><span class="synSpecial">   </span><span class="synStatement">&lt;|</span><span class="synSpecial"> </span><span class="synStatement">|</span><span class="synSpecial">_</span><span class="synStatement">|</span><span class="synSpecial"> </span><span class="synStatement">|</span>
<span class="synSpecial">  \___/</span><span class="synStatement">|</span><span class="synSpecial">_</span><span class="synStatement">|</span><span class="synSpecial"> </span><span class="synStatement">|</span><span class="synSpecial">_</span><span class="synStatement">|</span><span class="synSpecial">\__,_</span><span class="synStatement">|</span><span class="synSpecial">_</span><span class="synStatement">|</span><span class="synSpecial"> </span><span class="synStatement">|</span><span class="synSpecial">_</span><span class="synStatement">|</span><span class="synSpecial">_</span><span class="synStatement">|</span><span class="synSpecial">\_\\__, </span><span class="synStatement">|</span>
<span class="synSpecial">                               </span><span class="synStatement">|</span><span class="synSpecial">___/ </span>
<span class="synSpecial">? Please choose which one you like from  ne</span>
<span class="synSpecial">❯ ayane </span>
<span class="synSpecial">  nemo </span>
</pre>


<h2>本題という名の蛇足</h2>

<p>あ、webpackの設定だったね、ということで、この対話ツールをwebpack起動時に呼び出すようにする。</p>

<p>試しにマルチページアプリケーションでエントリーポイントがページごとにあるという設定で考えてみる。</p>

<p>さきほど<code>index.js</code>でつくっていたファイルを<code>selectEntry.js</code>に変更して、<code>webpack.config.js</code>の設定を書いてみる。<br/>
対話ツールは、ユーザーが操作して値が決まるので、それを待ってからwebpackを起動する必要がある。</p>

<p>これについては、公式サイトをみるとPromiseを返す設定もできるとのこと。<br/>
<iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fwebpack.js.org%2Fconfiguration%2Fconfiguration-types%2F%23exporting-a-promise" title="Configuration Types | webpack" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://webpack.js.org/configuration/configuration-types/#exporting-a-promise">webpack.js.org</a></cite></p>

<p>なので、以下のように設定を行う。</p>

<p><b>webpack.config.js</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synComment">// つくった対話ツールを読み込んで</span>
<span class="synStatement">const</span> selectEntry = require(<span class="synConstant">'./selectEntry'</span>)

<span class="synComment">// Promsieを返すようにする</span>
module.exports = async () =&gt; <span class="synIdentifier">{</span>
  <span class="synComment">// 対話ツールの結果をawaitする</span>
  <span class="synStatement">const</span> entry = await selectEntry()

 <span class="synComment">// あとは、結果を設定したオブジェクトを返すだけ</span>
  <span class="synStatement">return</span> <span class="synIdentifier">{</span>
    <span class="synComment">// modeはwebpack4から必須なので書いとく</span>
    mode: <span class="synConstant">'development'</span>,
    entry
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>
</pre>


<p>ここまできたら、<code>selectEntry.js</code>を<code>wepback.config.js</code>から呼び出せるように修正を行うだけ。</p>

<p><b>index.js</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">const</span> chalk = require(<span class="synConstant">'chalk'</span>)
<span class="synStatement">const</span> figlet = require(<span class="synConstant">'figlet'</span>)
<span class="synStatement">const</span> inquirer = require(<span class="synConstant">'inquirer'</span>)
<span class="synComment">// パスからファイル名を取得するパッケージを追加</span>
<span class="synStatement">const</span> parsePath = require(<span class="synConstant">'parse-filepath'</span>)

inquirer.registerPrompt(<span class="synConstant">'autocomplete'</span>, require(<span class="synConstant">'inquirer-autocomplete-prompt'</span>))

<span class="synComment">// 選択肢はエントリーポイントっぽく変更した</span>
<span class="synStatement">const</span> entryPaths = <span class="synIdentifier">[</span><span class="synConstant">'./src/index.js'</span>, <span class="synConstant">'./src/other.js'</span><span class="synIdentifier">]</span>

<span class="synComment">// 関数名とかも少しかえた</span>
<span class="synStatement">const</span> getEntryPoint = (answer, input) =&gt; <span class="synIdentifier">{</span>
  <span class="synStatement">const</span> target = entryPaths.filter(item =&gt; item.indexOf(input) !== -1)
  <span class="synStatement">const</span> result = target.length &gt; 0 ? target : entryPaths
  <span class="synStatement">return</span> Promise.resolve(result)
<span class="synIdentifier">}</span>

<span class="synStatement">const</span> askQuestions = () =&gt; <span class="synIdentifier">{</span>
  <span class="synStatement">const</span> questions = <span class="synIdentifier">[</span>
    <span class="synIdentifier">{</span>
      type: <span class="synConstant">'autocomplete'</span>,
      name: <span class="synConstant">'ENTRY'</span>,
      message: <span class="synConstant">&quot;select webpack's entry point&quot;</span>,
      source: getEntryPoint,
    <span class="synIdentifier">}</span>,
  <span class="synIdentifier">]</span>
  <span class="synStatement">return</span> inquirer.<span class="synStatement">prompt</span>(questions)
<span class="synIdentifier">}</span>

<span class="synStatement">const</span> init = async () =&gt; <span class="synIdentifier">{</span>
  console.log(chalk.blue(figlet.textSync(<span class="synConstant">'Ohanky'</span>)))
  <span class="synStatement">return</span> await askQuestions()
<span class="synIdentifier">}</span>

<span class="synComment">// Promiseを返すようにasyncを指定</span>
<span class="synStatement">const</span> run = async () =&gt; <span class="synIdentifier">{</span>
  <span class="synStatement">const</span> answer = await init()

  <span class="synComment">// entryは{entyName: path }の形式で返したかったので、こんな感じにしてる</span>
  <span class="synStatement">const</span> name = parsePath(answer.ENTRY).name
  <span class="synStatement">return</span> <span class="synIdentifier">{</span>
    <span class="synIdentifier">[</span>name<span class="synIdentifier">]</span>: answer.ENTRY,
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>

<span class="synComment">// 最後にメインとなるrun関数をexportするだけ</span>
module.exports = run
</pre>


<p>これで、webpack起動時に、対話ツールが起動し、対話ツールで選択した結果がconfigに反映することができた。</p>

-----
--------
AUTHOR: konoemario
TITLE: 分割代入で少しハマった
BASENAME: 2019/08/06/232732
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 08/06/2019 23:27:32
CATEGORY: プログラム
CATEGORY: Vue.js
-----
BODY:
<p>しょうもない話。</p>

<p>Reactにだいぶ慣れて、最近はVueに戻ってVuexを久しぶりさわっていた。<br/>
Vuexの<code>mutations</code>で<code>name</code>ステートを更新したい場合は、こんな書き方をすると思う。</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>  state: <span class="synIdentifier">{</span>
    name: <span class="synConstant">&quot;&quot;</span>
  <span class="synIdentifier">}</span>,
  mutations: <span class="synIdentifier">{</span>
    changeName: (state, value) =&gt; <span class="synIdentifier">{</span>
      state.name = value;
    <span class="synIdentifier">}</span>
  <span class="synIdentifier">}</span>
</pre>


<p><br/></p>

<p>これを、ES6にもだいぶ慣れたぜ！という勢いで分割代入を使ったほうがいいっしー的なかんじで使ってみたら、更新されなくてハマったというのが今回の話。</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>  state: <span class="synIdentifier">{</span>
    name: <span class="synConstant">&quot;&quot;</span>
  <span class="synIdentifier">}</span>,
  mutations: <span class="synIdentifier">{</span>
    changeName: (<span class="synIdentifier">{</span> name <span class="synIdentifier">}</span>, value) =&gt; <span class="synIdentifier">{</span>
      <span class="synComment">// 更新されない</span>
      name = value;
    <span class="synIdentifier">}</span>
  <span class="synIdentifier">}</span>
</pre>


<p>分割代入は、以下のマーカー部分に書かれている通り、別個の変数に代入する式。</p>

<blockquote><p> 分割代入 (Destructuring assignment) 構文は、配列から値を取り出して、あるいはオブジェクトからプロパティを取り出して<strong>別個の変数に代入すること</strong>を可能にする JavaScript の式です。</p></blockquote>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fdeveloper.mozilla.org%2Fja%2Fdocs%2FWeb%2FJavaScript%2FReference%2FOperators%2FDestructuring_assignment" title="分割代入" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment">developer.mozilla.org</a></cite></p>

<p>なので、以下のことが言える。</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synComment">// こういうオブジェクトがあった場合</span>
<span class="synStatement">const</span> targetObj = <span class="synIdentifier">{</span>
  str: <span class="synConstant">&quot;&quot;</span>,
  array: <span class="synIdentifier">[]</span>,
  obj: <span class="synIdentifier">{</span> a: <span class="synConstant">&quot;&quot;</span> <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>;

<span class="synComment">//この分割代入は</span>
<span class="synStatement">const</span> <span class="synIdentifier">{</span> str, array, obj <span class="synIdentifier">}</span> = targetObj;
<span class="synComment">// これと同じ</span>
<span class="synStatement">const</span> str = targetObj.str;
<span class="synStatement">const</span> array = targetObj.array;
<span class="synStatement">const</span> obj = targetObj.obj;
</pre>


<p>冒頭の分割代入の<code>name</code>が更新されない！っていうのは<code>state</code>オブジェクトのnameを書き換えているのではなくって、<code>state.name</code>をコピーしたname変数の値を変えているから。</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>  state: <span class="synIdentifier">{</span>
    name: <span class="synConstant">&quot;&quot;</span>
  <span class="synIdentifier">}</span>,
  mutations: <span class="synIdentifier">{</span>
    changeName: (<span class="synIdentifier">{</span> name <span class="synIdentifier">}</span>, value) =&gt; <span class="synIdentifier">{</span>
      <span class="synComment">// 更新されない</span>
      name = value;
    <span class="synIdentifier">}</span>
  <span class="synIdentifier">}</span>
</pre>


<p>基礎を大事にしたいという教訓。</p>

-----
--------
AUTHOR: konoemario
TITLE: Gitで拡張子なしのファイルを対象外にする
BASENAME: 2019/06/08/154806
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 06/08/2019 15:48:06
CATEGORY: C
CATEGORY: プログラム
-----
BODY:
<p>最近、Reactばっかりなので、jsとは関係のないこちらの記事を写経している。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fwww.sigbus.info%2Fcompilerbook%23%25E3%2582%25B9%25E3%2583%2586%25E3%2583%2583%25E3%2583%25971%25E6%2595%25B4%25E6%2595%25B01%25E5%2580%258B%25E3%2582%2592%25E3%2582%25B3%25E3%2583%25B3%25E3%2583%2591%25E3%2582%25A4%25E3%2583%25AB%25E3%2581%2599%25E3%2582%258B%25E8%25A8%2580%25E8%25AA%259E%25E3%2581%25AE%25E4%25BD%259C%25E6%2588%2590" title="低レイヤを知りたい人のためのCコンパイラ作成入門" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://www.sigbus.info/compilerbook#%E3%82%B9%E3%83%86%E3%83%83%E3%83%971%E6%95%B4%E6%95%B01%E5%80%8B%E3%82%92%E3%82%B3%E3%83%B3%E3%83%91%E3%82%A4%E3%83%AB%E3%81%99%E3%82%8B%E8%A8%80%E8%AA%9E%E3%81%AE%E4%BD%9C%E6%88%90">www.sigbus.info</a></cite></p>

<p>コンパイル後のバイナリファイルをgitで管理するのもあれなので、<code>.gitignore</code>の設定をした。</p>

<p><b>.gitignore</b></p>

<pre class="code" data-lang="" data-unlink># 全部を一旦git管理対象外にしておいて
*
# !をつかって、.を含むファイルはgit管理対象にする
!*.*
# ディレクトリ管理対象にする
!*/
# 拡張子を含まないファイルとか
!Makefile</pre>


<p>これを設定したあとに思ったけれども、バイナリファイルの名前は<code>Makefile</code>でちゃんと書くから、個別に<code>.gitignore</code>に書いた方がいい気がする。</p>

-----
--------
AUTHOR: konoemario
TITLE: 
BASENAME: 2019/05/22/221539
STATUS: Draft
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 05/22/2019 22:15:39
-----
BODY:
<h2>実現したいこと</h2>

<p><code>react-router</code>を使ってページ切り替えの際にスライドアニメーションをしたい。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fmedium.com%2Fonfido-tech%2Fanimations-with-react-router-8e97222e25e1" title="Animations with React Router" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://medium.com/onfido-tech/animations-with-react-router-8e97222e25e1">medium.com</a></cite></p>

<h2>問題点</h2>

<p>ページをスライドさせたいときって、こんな感じの方法をとるとおもう。</p>

<p>普通に<code>react-router</code>を使うと、ページ切り替えの際に、古いコンポーネントが<code>unmount</code>され、</p>

-----
--------
AUTHOR: konoemario
TITLE: gitをコマンドラインで操作するときにブランチ名を補完できるようする
BASENAME: 2019/03/21/230335
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 03/21/2019 23:03:35
CATEGORY: git
CATEGORY: プログラム
-----
BODY:
<p>今までgitはGUIツールをメインで使ってきたけれども、もう少しちゃんと理解するためにコマンドで操作することにしている。<br/>
その中で、ブランチを切り替えたりする際に、ブランチ名が長いとコピペで面倒なので、補完できるように設定する。<br/>
設定に関しては、ググればでてくるのだけどハマったのでメモ。</p>

<p><br/></p>

<ul class="table-of-contents">
    <li><a href="#環境">環境</a></li>
    <li><a href="#Bashのバージョンをあげる">Bashのバージョンをあげる</a></li>
    <li><a href="#Gitのタグ名を補完する設定をする">Gitのタグ名を補完する設定をする</a></li>
    <li><a href="#おまけ-プロンプトにブランチ名を表示させる">おまけ プロンプトにブランチ名を表示させる。</a></li>
    <li><a href="#おまけ-VSCodeの統合ターミナルで新しいBashを使用する">おまけ VSCodeの統合ターミナルで新しいBashを使用する</a></li>
</ul>

<h2 id="環境">環境</h2>

<pre class="code" data-lang="" data-unlink>$ sw_vers
ProductName:    Mac OS X
ProductVersion: 10.13.6
BuildVersion:   17G65</pre>


<p><br/></p>

<h2 id="Bashのバージョンをあげる">Bashのバージョンをあげる</h2>

<p>これをやらなかったことでハマった。 <br/>
OSXにデフォルトで入ってるBashのバージョンはライセンスの関係？で古いものが入ってるみたい。<br/>
古いBashだと、ブランチを補完する設定をしても、うまくいかなかった。<br/>
なので、まずはBashのバージョンをあげる。</p>

<p>バージョンをあげるにあたってはこちらの記事を参考にさせていただいた。</p>

<p><a href="https://itnext.io/upgrading-bash-on-macos-7138bd1066ba">https://itnext.io/upgrading-bash-on-macos-7138bd1066ba</a></p>

<p><b>Bashのバージョンをチェックする</b></p>

<pre class="code" data-lang="" data-unlink>$ echo $BASH_VERSION
3.2.57(1)-release</pre>


<p><b>BashのPathを確認する</b></p>

<pre class="code" data-lang="" data-unlink>$ which -a bash
/bin/bash</pre>


<p><b>新しいBashをインストール</b></p>

<pre class="code" data-lang="" data-unlink>$ brew install bash</pre>


<p>HomebrewでインストールしたあとにPathを確認すると<code>/usr/local/bin/bash</code>に新しいBashがインストールされたことが確認できる。</p>

<p><b>Pathを再度確認する</b></p>

<pre class="code" data-lang="" data-unlink>$ which -a bash
/usr/local/bin/bash
/bin/bash</pre>


<p>次にターミナルを起動したときのBashが新しくインストールした<code>/usr/local/bin/bash</code>を参照するようにする。</p>

<p>ログインシェルとして指定する前に、このBashは大丈夫だぜみたいな情報を登録する必要があるみたい。</p>

<p><b>shellのwhitelist的なものに登録</b></p>

<pre class="code" data-lang="" data-unlink>$ sudo vim /etc/shells</pre>


<p><code>/usr/local/bin/bash</code>を追加する。</p>

<p><b>/etc/shells</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>/bin/bash
/bin/csh
/bin/ksh
/bin/sh
/bin/tcsh
/bin/zsh
<span class="synComment"># 追加</span>
/usr/<span class="synStatement">local</span>/bin/bash
</pre>


<p>追加したら、ログインシェルを新しいものにかえる。</p>

<p><b>ログインシェルを変更するコマンドを叩く</b></p>

<pre class="code" data-lang="" data-unlink>$ chsh -s /usr/local/bin/bash</pre>


<p>Bashのバーションを確認すると<code>5.0.3</code>になってることが確認できた！</p>

<pre class="code" data-lang="" data-unlink>$ echo $BASH_VERSION
5.0.3(1)-release</pre>


<p><br/></p>

<h2 id="Gitのタグ名を補完する設定をする">Gitのタグ名を補完する設定をする</h2>

<p>タグ補完をするには、<code>git-completion.bash</code>を<code>.bashrc</code>とかで読み込む設定を書けばいいだけみたい。<br/>
肝心の<code>git-completion.bash</code>は、gitをインストールするとデフォルトで入ってるとのことなので、検索してみるとたしかにありました。<br/>
※なければgithubとかに公式ソースを取得できるみたい。</p>

<p><b>git-completion.bashを探す</b></p>

<pre class="code" data-lang="" data-unlink>$ find / -name git-completion.bash 2&gt;/dev/null
/usr/local/git/contrib/completion/git-completion.bash</pre>


<p>上記のシェルスクリプトを<code>.bashrc</code>で読み込むようにする。</p>

<p><b>.bashrcに追加</b></p>

<pre class="code" data-lang="" data-unlink>$ vim ~/.bashrc</pre>


<p><b>.bashrcに追加</b></p>

<pre class="code" data-lang="" data-unlink>#gitのブランチ名補完
source /usr/local/git/contrib/completion/git-completion.bash</pre>


<p>これで<code>source ~/.bashrc</code>をするなりして、gitで管理しているディレクトリに移動すると無事ブランチ名が補完させることが確認できた。</p>

<p><br/></p>

<h2 id="おまけ-プロンプトにブランチ名を表示させる">おまけ プロンプトにブランチ名を表示させる。</h2>

<p>こちらの記事を参考にさせていただきました。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fcoderwall.com%2Fp%2Ffasnya%2Fadd-git-branch-name-to-bash-prompt" title="Add git branch name to bash prompt (Example)" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://coderwall.com/p/fasnya/add-git-branch-name-to-bash-prompt">coderwall.com</a></cite></p>

<p><b>.bash_profileに書いただけ</b></p>

<pre class="code" data-lang="" data-unlink>#ブランチ名を表示する
parse_git_branch() {
     git branch 2&gt; /dev/null | sed -e &#39;/^[^*]/d&#39; -e &#39;s/* \(.*\)/ (\1)/&#39;
}
export PS1=&#34;\u@\h \[\033[32m\]\w\[\033[33m\]\$(parse_git_branch)\[\033[00m\] $ &#34;</pre>


<p><br/></p>

<h2 id="おまけ-VSCodeの統合ターミナルで新しいBashを使用する">おまけ VSCodeの統合ターミナルで新しいBashを使用する</h2>

<p>VSCodeの統合ターミナルを使う場合も、デフォルトのBashを変更しておく。</p>

<pre class="code lang-json" data-lang="json" data-unlink> &quot;<span class="synStatement">terminal.integrated.shell.osx</span>&quot;: &quot;/<span class="synError">usr</span>/<span class="synError">local</span>/<span class="synError">bin</span>/<span class="synError">bash</span>&quot;
</pre>


-----
--------
AUTHOR: konoemario
TITLE: chrome-extensionをReactでさくっとつくる
BASENAME: 2019/03/13/214020
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 03/13/2019 21:40:20
CATEGORY: プログラム
CATEGORY: React
CATEGORY: javascript
IMAGE: https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20190313/20190313205601.png
-----
BODY:
<p>Reactの公式ドキュメントが日本語化されて改めて読み直してる。<br/>
英語で読んだ時によくわからなかったりしていた部分もちゃんとわかるようになって、翻訳をしてくださった方には感謝でいっぱい。</p>

<p>とはいえ、英語でドキュメントを読めた方がなにかと便利なのは間違いない。<br/>
読む際に、わからない単語とかは検索してたりしてたんだけど、同じ単語を検索してたりして、あんま覚えられないなと。</p>

<p>紙に書いたり、なんかのアプリをつかってももちろんいいんだけど、chorme-extensionが若干気になっていたので、chrome-extensionでつくってみることにした。</p>

<p><b>ものすごく味気ない英単語ノート</b>
<figure class="figure-image figure-image-fotolife" title="拡張機能のpopup"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20190313/20190313205601.png" alt="f:id:konoemario:20190313205601p:plain" title="f:id:konoemario:20190313205601p:plain" class="hatena-fotolife" itemprop="image"></span><figcaption>拡張機能のpopup</figcaption></figure></p>

<p>書いた内容をFirebaseに送るだけ。<br/>
肝心の書いた内容をTodoListっぽく参照するアプリはつくってない。<br/>
ReactNativeに入門したらつくるんだ！</p>

<h2>実装</h2>

<p><b>Reactのプロジェクトを作る</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ create-react-app
</pre>


<p>public配下に、chorme-extensionだとchromeに認識させるための<code>manifest.json</code>を作る。</p>

<p><b>manifest.json</b></p>

<pre class="code lang-json" data-lang="json" data-unlink><span class="synSpecial">{</span>
  &quot;<span class="synStatement">manifest_version</span>&quot;: <span class="synConstant">2</span>,
  &quot;<span class="synStatement">version</span>&quot;: &quot;<span class="synConstant">1.0</span>&quot;,
  &quot;<span class="synStatement">name</span>&quot;: &quot;<span class="synConstant">Note</span>&quot;,
  &quot;<span class="synStatement">description</span>&quot;: &quot;<span class="synConstant">simple note</span>&quot;,
  &quot;<span class="synStatement">browser_action</span>&quot;: <span class="synSpecial">{</span>
    &quot;<span class="synStatement">default_title</span>&quot;: &quot;<span class="synConstant">Note</span>&quot;,
    &quot;<span class="synStatement">default_popup</span>&quot;: &quot;<span class="synConstant">index.html</span>&quot;
  <span class="synSpecial">}</span>
<span class="synSpecial">}</span>
</pre>


<p>記載内容はchrome-extensionのチュートリアルを見るべし。
今回は、Chromeの右上のアイコンをクリックすると、popupで表示されるやつの設定。
popupにReactで書かれたjsを読み込む<code>index.html</code>を指定している。</p>

<p>最後に<code>.env</code>に以下を追加するだけ。</p>

<p><b>.env</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink><span class="synIdentifier">INLINE_RUNTIME_CHUNK</span>=<span class="synStatement">false</span>
</pre>


<p>これは、chrome-extensionが、HTMLにjsを直接書く<code>inline script</code>を許容していないので、こちらを出力しないように設定する<code>create-react-app</code>のオプション。</p>

<p>あとは好きなように、開発して、<code>build</code>してできた<code>dist</code>フォルダをchrome-extensionとして読み込ませるだけ。</p>

-----
--------
AUTHOR: konoemario
TITLE: 
BASENAME: 2019/03/12/230412
STATUS: Draft
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 03/12/2019 23:04:12
-----
BODY:
<p><b>react-reduxとreact-router</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>&lt;Provider store=<span class="synIdentifier">{</span>store<span class="synIdentifier">}</span>&gt;
  &lt;ParentComponent&gt;
    &lt;Router&gt;
      &lt;Route path=<span class="synConstant">&quot;/&quot;</span> render=<span class="synIdentifier">{</span>props =&gt; &lt;ChildComponent <span class="synIdentifier">{</span>...props<span class="synIdentifier">}</span>/&gt; <span class="synIdentifier">}</span>/&gt;
    &lt;/Router&gt;
  &lt;/ParentComponent&gt;
&lt;/Provider&gt;
</pre>


<p>こういう構成で、<code>ParentComponent</code>と<code>ChildComponent</code>がそれぞれが<code>react-redux</code>の<code>connect()</code>を使ってるとする。</p>

<p><br/></p>

<p><code>connect()</code>を可視化するとこんなかんじかしら。</p>

<p><b>ちょっとわかりやすく</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>&lt;Provider store=<span class="synIdentifier">{</span>store<span class="synIdentifier">}</span>&gt;
  &lt;connect&gt;
    &lt;ParentComponent&gt;
      &lt;Router&gt;
        &lt;Route path=<span class="synConstant">&quot;/&quot;</span> render=<span class="synIdentifier">{</span>(props) =&gt; 
          &lt;connect&gt; 
            &lt;ChildComponent&gt; 
          &lt;connect /&gt;
        <span class="synIdentifier">}</span>/&gt;
      &lt;/Router&gt;
    &lt;/ParentComponent&gt;
  &lt;connect&gt;

&lt;/Provider&gt;
</pre>


-----
--------
AUTHOR: konoemario
TITLE: react-reduxを学ぶ
BASENAME: 2019/02/17/154800
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 02/17/2019 15:48:00
CATEGORY: javascript
CATEGORY: Redux
CATEGORY: React
CATEGORY: プログラム
-----
BODY:
<p>ReduxをReactで使うときは、<code>react-redux</code>を使うんだよ！と講座で教わり、以降何も考えずに<code>react-redux</code>を使ってきた。<br/>
<code>connect()</code>の書き方がよくわかんねえよ！とか、Reduxの非同期処理がわかんないよ！とか、いろいろありつつも、今回はそもそも<code>react-redux</code>ってなんで必要なんだっけ？みたいなところを改めて整理しようと思う。</p>

<ul class="table-of-contents">
    <li><a href="#react-reduxがある世界">react-reduxがある世界</a></li>
    <li><a href="#react-reduxがない世界">react-reduxがない世界</a><ul>
            <li><a href="#storeを渡す">storeを渡す</a></li>
        </ul>
    </li>
</ul>

<p><br/></p>

<h2 id="react-reduxがある世界">react-reduxがある世界</h2>

<p>まずはいつも通り、<code>react-redux</code>を使ってTodoリストをつくってみる。</p>

<p>最低限の機能でこんなかんじに。</p>

<p><iframe width="1000" height="500" src="https://codesandbox.io/embed/w2mw69mpx5" style="width:1000px; height:500px; border:0; border-radius: 4px; overflow:hidden;" sandbox="allow-modals allow-forms allow-popups allow-scripts allow-same-origin"></iframe><cite class="hatena-citation"><a href="https://codesandbox.io/s/w2mw69mpx5">codesandbox.io</a></cite></p>

<p><br/></p>

<p>Todoリストは、Todoを追加する<code>AddTodo</code>とTodoの一覧を表示する<code>TodoList</code>のコンポーネントの二つのコンポーネントで構成されている。</p>

<p><b>index.js</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">const</span> store = createStore(todoReducer);

<span class="synStatement">const</span> App = () =&gt; (
  &lt;div&gt;
    &lt;AddTodo /&gt;
    &lt;TodoList /&gt;
  &lt;/div&gt;
);

ReactDOM.render(
  &lt;Provider store=<span class="synIdentifier">{</span>store<span class="synIdentifier">}</span>&gt;
    &lt;App /&gt;
  &lt;/Provider&gt;,
  <span class="synStatement">document</span>.getElementById(<span class="synConstant">&quot;root&quot;</span>)
);
</pre>


<p>いずれも、<code>react-redux</code>を用いて、コンポーネント内で、Reduxの<code>dispatch</code>や、Reduxの<code>state</code>を参照してる。</p>

<p><b>TodoList.js</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">import</span> React from <span class="synConstant">&quot;react&quot;</span>;
<span class="synStatement">import</span> <span class="synIdentifier">{</span> connect <span class="synIdentifier">}</span> from <span class="synConstant">&quot;react-redux&quot;</span>;

<span class="synStatement">const</span> TodoList = (<span class="synIdentifier">{</span> todos <span class="synIdentifier">}</span>) =&gt; (
  &lt;ul&gt;
    <span class="synIdentifier">{</span>todos.map((todo, index) =&gt; (
      &lt;li key=<span class="synIdentifier">{</span>index<span class="synIdentifier">}</span>&gt;<span class="synIdentifier">{</span>todo<span class="synIdentifier">}</span>&lt;/li&gt;
    ))<span class="synIdentifier">}</span>
  &lt;/ul&gt;
);

<span class="synStatement">export</span> <span class="synStatement">default</span> connect(state =&gt; (<span class="synIdentifier">{</span>
  todos: state
<span class="synIdentifier">}</span>))(TodoList);
</pre>


<p><br/></p>

<h2 id="react-reduxがない世界">react-reduxがない世界</h2>

<p>次に、<code>react-redux</code>を使わないで、Reduxをつかってみる。</p>

<p><br/></p>

<h3 id="storeを渡す">storeを渡す</h3>

<p><code>createStore</code>でstoreをつくったところで、早速手が止まります。<br/>
あれ、コンポーネントからstoreをどうやって参照すればいいのかな、と。</p>

<p><b>index.js</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synComment">// storeをつくったけど、コンポーネントからどうやって参照すればいいのかしら</span>
<span class="synStatement">const</span> store = createStore(todoReducer);

<span class="synStatement">const</span> App = () =&gt; (
  &lt;div&gt;
    &lt;AddTodo /&gt;
    &lt;TodoList /&gt;
  &lt;/div&gt;
);

ReactDOM.render(
    &lt;App /&gt;
  <span class="synStatement">document</span>.getElementById(<span class="synConstant">&quot;root&quot;</span>)
);
</pre>


<p><code>react-redux</code>のコードを眺めて見ると、ReactのContextの機能をつかっていることがわかりました。</p>

<p>なので、Contextを使ってコンポーネントにstoreを渡すことにします。<br/>
Contextはほとんどつかったことがないのであんまりよくわかってないので説明は割愛します。</p>

<p>まずは、コンテキスト作成します。</p>

<p><b>MyContext.js</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">import</span> React from <span class="synConstant">&quot;react&quot;</span>;
<span class="synStatement">export</span> <span class="synStatement">default</span> React.createContext();
</pre>


<p>作成したコンテキストを読み込み、<code>Provider</code>で配下のコンポーネントに渡すようにします。</p>

<p><b>index.js(抜粋)</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synComment">// つくったContextをImport</span>
<span class="synStatement">import</span> MyContext from <span class="synConstant">&quot;./context/MyContext&quot;</span>;


<span class="synStatement">const</span> store = createStore(todoReducer);

<span class="synComment">// Contextでstoreを渡す</span>
ReactDOM.render(
  &lt;MyContext.Provider value=<span class="synIdentifier">{</span>store<span class="synIdentifier">}</span>&gt;
    &lt;App /&gt;
  &lt;/MyContext.Provider&gt;,
  rootElement
);
</pre>


<p>そしたら、コンテキストを参照するコンポーネントから、コンテキスト経由でstoreを受け取ります。</p>

<p><b>index.js(抜粋)</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synComment">// つくったContextをImport</span>
<span class="synStatement">import</span> MyContext from <span class="synConstant">&quot;./context/MyContext&quot;</span>;

<span class="synStatement">class</span> App <span class="synStatement">extends</span> React.Component <span class="synIdentifier">{</span>
  <span class="synComment">// MyContext.Consumerでstoreを受け取る</span>
  render() <span class="synIdentifier">{</span>
    <span class="synStatement">return</span> (
      &lt;div&gt;
        &lt;MyContext.Consumer&gt;
          <span class="synIdentifier">{</span>store =&gt; (
            &lt;div&gt;
              &lt;AddTodo store=<span class="synIdentifier">{</span>store<span class="synIdentifier">}</span> /&gt;
              &lt;TodoList store=<span class="synIdentifier">{</span>store<span class="synIdentifier">}</span> /&gt;
            &lt;/div&gt;
          )<span class="synIdentifier">}</span>
        &lt;/MyContext.Consumer&gt;
      &lt;/div&gt;
    );
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>
</pre>


<p><code>AddTodo</code>、<code>TodoList</code>コンポーネントでは、プロパティ経由でstoreを渡すので、<code>store.dispatch</code>が使えます。</p>

<p><b>AddTodo.js</b></p>

<pre class="code" data-lang="" data-unlink>import React from &#34;react&#34;;
import { addTodo } from &#34;../actions&#34;;

const AddTodo = ({ store }) =&gt; {
  let input;
  return (
    &lt;form
      onSubmit={e =&gt; {
        e.preventDefault();
        store.dispatch(addTodo(input.value));
      }}
    &gt;
      &lt;input type=&#34;text&#34; ref={node =&gt; (input = node)} /&gt;
      &lt;button type=&#34;submit&#34;&gt;Add Todo&lt;/button&gt;
    &lt;/form&gt;
  );
};

export default AddTodo;</pre>


<p><br/></p>

<p><code>TodoList</code>のほうも、<code>store.getState()</code>でReduxのステートを取得することができますね。</p>

<p><b>TodoList.js</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">import</span> React from <span class="synConstant">&quot;react&quot;</span>;

<span class="synStatement">const</span> TodoList = (<span class="synIdentifier">{</span> store <span class="synIdentifier">}</span>) =&gt; <span class="synIdentifier">{</span>
  <span class="synStatement">const</span> todos = store.getState();
  <span class="synStatement">return</span> (
    &lt;ul&gt;
      <span class="synIdentifier">{</span>todos.map((todo, index) =&gt; (
        &lt;li key=<span class="synIdentifier">{</span>index<span class="synIdentifier">}</span>&gt;<span class="synIdentifier">{</span>todo<span class="synIdentifier">}</span>&lt;/li&gt;
      ))<span class="synIdentifier">}</span>
      &lt;button onClick=<span class="synIdentifier">{</span>() =&gt; debugState(store)<span class="synIdentifier">}</span>&gt;Debug&lt;/button&gt;
    &lt;/ul&gt;
  );
<span class="synIdentifier">}</span>;

<span class="synStatement">export</span> <span class="synStatement">default</span> TodoList;
</pre>


<p>ここまでのコードを参考までに貼っておきます。</p>

<p><iframe width="1000" height="500" src="https://codesandbox.io/embed/5kmj67mx8x" style="width:1000px; height:500px; border:0; border-radius: 4px; overflow:hidden;" sandbox="allow-modals allow-forms allow-popups allow-scripts allow-same-origin"></iframe><cite class="hatena-citation"><a href="https://codesandbox.io/s/5kmj67mx8x">codesandbox.io</a></cite></p>

<p><br/></p>

<p>が、このままではテキストボックスからTodoを追加しても、画面に表示されません。</p>

<p>というもの、Reactはstateかpropsの更新があった場合にコンポーネントが再レンダリングされます。<br/>
<code>store.dispatch</code>をすることで、ステートの状態がかわってはいるのですが、storeオブジェクトの中身がかわったかどうかをReactは検知することができません。<br/>
immutable原則ってやつですね。</p>

<p>なので、<code>dispatch</code>をしたら、Reactに再レンダリングをしてねという仕組みを実装する必要があります。</p>

<p>まずdispatchをしたら、という部分ですが、Reduxに標準で用意されている<code>store.subscribe</code>を利用することができます。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fredux.js.org%2Fapi%2Fstore%23subscribe" title="Store · Redux" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://redux.js.org/api/store#subscribe">redux.js.org</a></cite></p>

<p> 続いて、Reactに再レンダリングさせるために、propsやstateを用意して、更新させてもよさそうなのですが、ここでは明示的に再レンダリングさせる<code>forceUpdate</code>を使うことにします。　　</p>

<p><b>index.js(抜粋)</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synComment">// つくったContextをImport</span>
<span class="synStatement">import</span> MyContext from <span class="synConstant">&quot;./context/MyContext&quot;</span>;

<span class="synStatement">class</span> App <span class="synStatement">extends</span> React.Component <span class="synIdentifier">{</span>
  <span class="synComment">// MyContext.Consumerでstoreを受け取る</span>
  render() <span class="synIdentifier">{</span>
    <span class="synStatement">return</span> (
      &lt;div&gt;
        &lt;MyContext.Consumer&gt;
          <span class="synIdentifier">{</span>store =&gt; <span class="synIdentifier">{</span>
            <span class="synComment">// dispatchされたら</span>
            store.subscribe(() =&gt; <span class="synIdentifier">{</span>
              <span class="synComment">// Appコンポーネントを再レンダリングする</span>
             <span class="synComment">// ※ Appコンポーネントが再レンリングされると、配下のコンポーネントも再レンダリングされる</span>
              <span class="synIdentifier">this</span>.forceUpdate()
            <span class="synIdentifier">}</span>)
            <span class="synStatement">return</span> (
              &lt;div&gt;
                &lt;AddTodo store=<span class="synIdentifier">{</span>store<span class="synIdentifier">}</span> /&gt;
                &lt;TodoList store=<span class="synIdentifier">{</span>store<span class="synIdentifier">}</span> /&gt;
              &lt;/div&gt;
            )
          <span class="synIdentifier">}}</span>
        &lt;/MyContext.Consumer&gt;

      &lt;/div&gt;
    );
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>
</pre>


<p>これで、やりたいことができました。　　　</p>

<p>コンポーネントを受け取って<code>MyContext.Consumer</code>の部分をつけて返すような関数を使うと<code>react-redux</code>の<code>connect</code>のようなイメージになりそうですね。</p>

<p>実際の<code>react-redux</code>では、パフォーマンス等いろいろな点が考慮されているとのことなので、今回のような実装は行うことはないかと思いますが、すこしだけ<code>react-redux</code>がやっていることをイメージできるようになりました。</p>

-----
--------
AUTHOR: konoemario
TITLE: redux-thunkを学ぶ
BASENAME: 2019/02/05/231503
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 02/05/2019 23:15:03
CATEGORY: プログラム
CATEGORY: javascript
CATEGORY: Redux
-----
BODY:
<p>Reduxに慣れ始めたのであらためて<code>redux-thunk</code>をちゃんと理解しようと思う。</p>

<ul class="table-of-contents">
    <li><a href="#redux-thunk">redux-thunk</a></li>
    <li><a href="#まずは基本">まずは基本</a></li>
    <li><a href="#非同期処理">非同期処理</a></li>
    <li><a href="#middlewareを使う">middlewareを使う</a></li>
    <li><a href="#redux-thunk-1">redux-thunk</a></li>
</ul>

<p><br/></p>

<h2 id="redux-thunk">redux-thunk</h2>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2Freduxjs%2Fredux-thunk%2Fblob%2Fmaster%2Fsrc%2Findex.js" title="reduxjs/redux-thunk" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://github.com/reduxjs/redux-thunk/blob/master/src/index.js">github.com</a></cite></p>

<p><code>redux-thunk</code>は以下のように非常にシンプルなコードでつくられている。</p>

<p><b>魔法のようなredux-thunk</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synIdentifier">function</span> createThunkMiddleware(extraArgument) <span class="synIdentifier">{</span>
  <span class="synStatement">return</span> (<span class="synIdentifier">{</span> dispatch, getState <span class="synIdentifier">}</span>) =&gt; next =&gt; action =&gt; <span class="synIdentifier">{</span>
    <span class="synStatement">if</span> (<span class="synStatement">typeof</span> action === <span class="synConstant">'function'</span>) <span class="synIdentifier">{</span>
      <span class="synStatement">return</span> action(dispatch, getState, extraArgument)
    <span class="synIdentifier">}</span>

    <span class="synStatement">return</span> next(action)
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>

<span class="synStatement">const</span> thunk = createThunkMiddleware()
thunk.withExtraArgument = createThunkMiddleware

<span class="synStatement">export</span> <span class="synStatement">default</span> thunk
</pre>


<p>こちらがなぜ必要なのかを、順を追ってみていく。</p>

<p><br/></p>

<h2 id="まずは基本">まずは基本</h2>

<p>まずは、シンプルにアクションをつくってdispatchする基本パターン。</p>

<p><b>普通のアクションクリエイター</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">import</span> <span class="synIdentifier">{</span> createStore <span class="synIdentifier">}</span> from <span class="synConstant">&quot;redux&quot;</span>

<span class="synComment">// storeをつくって</span>
<span class="synStatement">const</span> store = createStore((state, action) =&gt; <span class="synIdentifier">{</span>
  console.log(<span class="synConstant">&quot;Action is...&quot;</span>, action)
  <span class="synStatement">return</span> state
<span class="synIdentifier">}</span>);

<span class="synComment">// 普通のアクションクリエイターを定義して</span>
<span class="synStatement">const</span> syncActionCreator = someValue =&gt; (<span class="synIdentifier">{</span>
  type: <span class="synConstant">&quot;SYNC&quot;</span>,
  payload: someValue
<span class="synIdentifier">}</span>);

<span class="synComment">// dispatchする</span>
store.dispatch(syncActionCreator(1))
</pre>


<p><br/></p>

<h2 id="非同期処理">非同期処理</h2>

<p>これがアクションクリエイターが非同期処理を含むとうまくいかなくなる。</p>

<p><b>非同期のアクションクリエイター</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">import</span> <span class="synIdentifier">{</span> createStore <span class="synIdentifier">}</span> from <span class="synConstant">&quot;redux&quot;</span>

<span class="synComment">// storeをつくって</span>
<span class="synStatement">const</span> store = createStore((state, action) =&gt; <span class="synIdentifier">{</span>
  console.log(<span class="synConstant">&quot;Action is...&quot;</span>, action)
  <span class="synStatement">return</span> state
<span class="synIdentifier">}</span>)


<span class="synComment">// 非同期処理を含むアクションクリエイターを定義して</span>
<span class="synStatement">const</span> asyncActionCreator = async () =&gt; <span class="synIdentifier">{</span>
  <span class="synComment">//  非同期処理</span>
  <span class="synStatement">const</span> res = await axios.get(<span class="synConstant">&quot;https://jsonplaceholder.typicode.com/todos/1&quot;</span>)
  
  <span class="synComment">// 非同期処理の結果をアクションとして設定したい</span>
  <span class="synStatement">return</span> <span class="synIdentifier">{</span>
    type: <span class="synConstant">&quot;ASYNC&quot;</span>,
    payload: res.data
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>

<span class="synComment">// dispatchする</span>
store.dispatch(syncActionCreator(1))
</pre>


<p>が、これは<code>Actions must be plain objects. Use custom middleware for async actions.</code>と怒られてしまう。</p>

<p>なぜなら<code>async/await</code>でreturnした場合は、Promiseオブジェクトを返すので、dispatch(PromiseObject)となり、PlainObjectではなくなってしまうから。</p>

<p>これを解決するためには、</p>

<ul>
<li>非同期処理の結果をアクションクリエイターに渡すようする</li>
<li>Reduxのmiddlewareの機能を使ってなんとかする</li>
</ul>


<p>の二択が考えられる。</p>

<p>未だに、アクションクリエイターの中で非同期処理を行わずに、前者の方法でいいんじゃねと思ったりもする。<br/>
ビジネスロジックをRedux側にまとめたいから、アクションクリエイターに書くのだろうか。</p>

<p>後者のmiddlewareのひとつとして、<code>redux-thunk</code>を使う。  <br/>
次に<code>redux-thunk</code>の理解をより深めるためにまずは、自前でmiddlewareを作成することにする。
<br/></p>

<h2 id="middlewareを使う">middlewareを使う</h2>

<p>middlewareは以下のように<code>createStore</code>に引数として渡す。<br/>
<b>Middleware</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">import</span> <span class="synIdentifier">{</span> createStore, applyMiddleware <span class="synIdentifier">}</span> from <span class="synConstant">&quot;redux&quot;</span>

<span class="synStatement">const</span> store = createStore((state, action) =&gt; <span class="synIdentifier">{</span>
  console.log(<span class="synConstant">&quot;Action is...&quot;</span>, action)
  <span class="synStatement">return</span> state
<span class="synIdentifier">}</span>, applyMiddleware(myMiddleware))
</pre>


<p>作成するmiddlewareは以下の公式ドキュメントに従った関数を作成しておく。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fredux.js.org%2Fapi%2Fapplymiddleware" title="applyMiddleware · Redux" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://redux.js.org/api/applymiddleware">redux.js.org</a></cite></p>

<blockquote><p>Each middleware receives Store's dispatch and getState functions as named arguments, and returns a function. That function will be given the next middleware's dispatch method, and is expected to return a function of action calling next(action)</p></blockquote>

<p>ものすごく適当に意訳すると、
「各ミドルウェアは、<code>dispatch</code>と<code>getState</code>を引数にとる、関数を返すよ。<br/>
その関数は、<code>next</code>を引数にもらって、さらに関数を返すよ。それで、その関数も<code>action</code>を引数にもらって<code>next(action)</code>を実行するような関数を返すよ。」<br/>
という内容。</p>

<p>コードに起こすとこんな感じ。</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">const</span> middlware = <span class="synIdentifier">function</span> (<span class="synIdentifier">{</span>getState, dispatch<span class="synIdentifier">}</span>) <span class="synIdentifier">{</span>
   <span class="synStatement">return</span> <span class="synIdentifier">function</span>(next) <span class="synIdentifier">{</span>
     <span class="synStatement">return</span> <span class="synIdentifier">function</span>(action) <span class="synIdentifier">{</span>
       next(action) 
    <span class="synIdentifier">}</span>
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span> 
</pre>


<p><br/></p>

<p>アロー関数を使うと、公式通りすっきりする。</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">const</span> myMiddlware = (<span class="synIdentifier">{</span> getState, dispatch <span class="synIdentifier">}</span>) =&gt; next =&gt; action =&gt; <span class="synIdentifier">{</span>
    next(action)
<span class="synIdentifier">}</span>;
</pre>


<p><br/></p>

<p>以下はPromiseオブジェクトが返却されることを考慮したmiddleware。<br/>
actionには、dispatch(action)のaciton。<br/>
nextには、本来のstoreのdispatchが設定されている。<br/>
尚、middlwareが複数ある場合は、次のmiddlwareになる。</p>

<p><b>Promiseに対応したミドルウェア</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">const</span> myMiddlware = (<span class="synIdentifier">{</span> getState, dispatch <span class="synIdentifier">}</span>) =&gt; next =&gt; action =&gt; <span class="synIdentifier">{</span>
 <span class="synComment">// actionのthenプロパティが関数だったら(つまりPromiseオブジェクト) </span>
 <span class="synStatement">if</span> (<span class="synStatement">typeof</span> action.then === <span class="synConstant">&quot;function&quot;</span>) <span class="synIdentifier">{</span>
     <span class="synComment">// thenでPromiseの値を取得して</span>
     action.then(res =&gt; <span class="synIdentifier">{</span>
    <span class="synComment">// 次のmiddlewareにresを渡す、またはdispatch(res) となる。   </span>
      next(res)
    <span class="synIdentifier">}</span>);
  <span class="synIdentifier">}</span> <span class="synStatement">else</span> <span class="synIdentifier">{</span>
    next(action)
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>;
</pre>


<p>これで、非同期処理に対応したmiddlewareを作成することができた。</p>

<p><br/></p>

<h2 id="redux-thunk-1">redux-thunk</h2>

<p>最後にようやく本題に入る。</p>

<p>これまでの流れを踏まえると、以下のコードが見慣れた感じになる。</p>

<p><b>魔法のようなredux-thunk</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synIdentifier">function</span> createThunkMiddleware(extraArgument) <span class="synIdentifier">{</span>
  <span class="synStatement">return</span> (<span class="synIdentifier">{</span> dispatch, getState <span class="synIdentifier">}</span>) =&gt; next =&gt; action =&gt; <span class="synIdentifier">{</span>
    <span class="synStatement">if</span> (<span class="synStatement">typeof</span> action === <span class="synConstant">'function'</span>) <span class="synIdentifier">{</span>
      <span class="synStatement">return</span> action(dispatch, getState, extraArgument)
    <span class="synIdentifier">}</span>

    <span class="synStatement">return</span> next(action)
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>
</pre>


<p><code>extraArgument</code>は、<code>redux-thunk</code>に引数を指定できる機能なので、それを使用しない場合の<code>redux-thunk</code>は以下になる。</p>

<p><b>魔法のようなredux-thunk</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>(<span class="synIdentifier">{</span> dispatch, getState <span class="synIdentifier">}</span>) =&gt; next =&gt; action =&gt; <span class="synIdentifier">{</span>
  <span class="synStatement">if</span> (<span class="synStatement">typeof</span> action === <span class="synConstant">'function'</span>) <span class="synIdentifier">{</span>
    <span class="synStatement">return</span> action(dispatch, getState)
  <span class="synIdentifier">}</span>

  <span class="synStatement">return</span> next(action)
<span class="synIdentifier">}</span>;
</pre>


<p>actionが関数だったら、その関数にdispatchと、getStateを渡して実行してる。</p>

<p>このことから、アクションクリエイターは、以下のようにかくことができる。</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">const</span> asyncActionCreator = () =&gt; <span class="synIdentifier">{</span>
  <span class="synComment">// actionは関数にしておく</span>
  <span class="synComment">// thunkはactionが関数だとdispatch、getStateを渡して実行してくれる</span>
  <span class="synComment">// なので、それをもとに非同期の結果をdispatchする関数を返す</span>
  <span class="synStatement">return</span> dispatch =&gt; <span class="synIdentifier">{</span>
    axios.get(<span class="synConstant">&quot;https://jsonplaceholder.typicode.com/todos/1&quot;</span>).then(res =&gt; <span class="synIdentifier">{</span>
      dispatch(<span class="synIdentifier">{</span>
        type: <span class="synConstant">&quot;ASYNC&quot;</span>,
        payload: res.data
      <span class="synIdentifier">}</span>)
    <span class="synIdentifier">}</span>)
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>
</pre>


<p>前者のmiddlwareは、middleware側でPromiseオブジェクトが解決したときの処理を書いて、取得した値をdispatch。<br/>
一方、redux-thunkは関数が渡されたらdispatchを渡して、関数を実行するだけ。<br/>
redux-thunkの方がより柔軟な処理を書くことができることがわかる。</p>

-----
--------
AUTHOR: konoemario
TITLE: jestで特定のモジュールのみmockにする
BASENAME: 2019/01/28/205928
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 01/28/2019 20:59:28
CATEGORY: javascript
CATEGORY: jest
-----
BODY:
<p>こっちでもmockの話を書いた。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fwww.tohuandkonsome.site%2Fentry%2F2019%2F11%2F20%2F205130" title="jestのmockを学ぶ - 豆腐とコンソメ" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://www.tohuandkonsome.site/entry/2019/11/20/205130">www.tohuandkonsome.site</a></cite></p>

<p>以下のように、1ファイル内に、複数の関数があり、<code>login</code>のみmockにしたい場合。</p>

<p><b>firebase.js</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">export</span> <span class="synStatement">const</span> login = () =&gt; <span class="synIdentifier">{</span>
  <span class="synComment">// login用の何かしらの処理</span>
<span class="synIdentifier">}</span>;

<span class="synStatement">export</span> <span class="synStatement">const</span> logout = () =&gt; <span class="synIdentifier">{</span>
  <span class="synComment">// logout用の何かしらの処理</span>
<span class="synIdentifier">}</span>;
</pre>


<p>以下のように<code>jest.requireActual</code>を使えばいける。</p>

<p><b>テストコード</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">import</span> <span class="synIdentifier">{</span> login as mockLogin <span class="synIdentifier">}</span>  from <span class="synConstant">'../../firebase'</span>;

<span class="synComment">// moduleの特定の関数のみmockにしたい</span>
jest.mock(<span class="synConstant">'../../firebase'</span>, () =&gt; (<span class="synIdentifier">{</span>
  ...jest.requireActual(<span class="synConstant">'../../firebase'</span>),
  login: jest.fn() 
<span class="synIdentifier">}</span>));

test(<span class="synConstant">'特定のmoduleのみmockにした'</span>,  () =&gt; <span class="synIdentifier">{</span>
  <span class="synComment">// component等は省略</span>
  fireEvent.click(LoginButton);
  expect(mockLogin).toHaveBeenCalled();
<span class="synIdentifier">}</span>)
</pre>


<p>テスト対象のコンポーネントが、上記<code>login</code>と<code>logout</code>を両方使っていて、片方だけmockにしない状況ってあんまなさそうだけど。</p>

<h2>2019/08/07 追記</h2>

<p>一部をモックしたいなら<code>jest.spyon</code>で対象の関数のみmockの実装をかけばいい。</p>

-----
--------
AUTHOR: konoemario
TITLE: React.jsのテストコードWorkshopの内容まとめ(1)
BASENAME: 2019/01/19/194408
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 01/19/2019 19:44:08
CATEGORY: プログラム
CATEGORY: javascript
CATEGORY: React
-----
BODY:
<p>UdemyのReact講座に学習が完了したので、この勢いでテストコードの書き方を学
ぶことにするよ。</p>

<p>今回は、こちらのReactテストコードのworkshopの視聴した内容から学んだことを書いていきます。</p>

<p><a href="https://www.udemy.com/react-redux/learn/v4/overview">https://www.udemy.com/react-redux/learn/v4/overview</a></p>

<p>workshopで使ったリポジトリは以下になります。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2Fkentcdodds%2Freact-testing-library-course" title="kentcdodds/react-testing-library-course" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://github.com/kentcdodds/react-testing-library-course">github.com</a></cite></p>

<ul class="table-of-contents">
    <li><a href="#テストコードを書く際に使うパッケージ">テストコードを書く際に使うパッケージ</a></li>
    <li><a href="#環境">環境</a></li>
    <li><a href="#準備">準備</a></li>
    <li><a href="#とりあえずテストを実行してみる">とりあえずテストを実行してみる</a></li>
    <li><a href="#テスト対象のコンポーネントを書くその前に">テスト対象のコンポーネントを書く、その前に</a></li>
    <li><a href="#コンポーネントをテストする">コンポーネントをテストする</a></li>
    <li><a href="#本格的なテストに入る前に">本格的なテストに入る前に</a><ul>
            <li><a href="#jest-dom">jest-dom</a></li>
            <li><a href="#dom-testing-library">dom-testing-library</a></li>
            <li><a href="#react-testing-library">react-testing-library</a></li>
        </ul>
    </li>
    <li><a href="#テストを行う-長くなったので次回">テストを行う 長くなったので次回</a></li>
</ul>

<p><br/></p>

<h2 id="テストコードを書く際に使うパッケージ">テストコードを書く際に使うパッケージ</h2>

<p>Vue.jsのときもそうだったんだけれども、テストコードを書くにあたっては、いろんな観点・手法が存在するみたい。</p>

<p>今回は、以下のパッケージをつかっていくよ！<br/>
説明はとてもてきとうなので、使用例だったり、公式ドキュメントだったり、動画をみてもらったほうがいいかも。  　</p>

<ul>
<li>jest： javascriptのテストを行うための、テストフレームワーク</li>
<li>jest-dom：jestのマッチャ関数をDOMの検証用に便利に拡張したもの</li>
<li>dom-testing-library：ユーザー目線でDOMを検索・取得できるライブラリ</li>
<li>react-testing-library：dom-testing-libraryをReact用に特化したライブラリ</li>
</ul>


<p>いろいろ調べると、Reactのテストでは、enzymeという子コンポーネントをモックっぽい感じで使えるツールがよく使われているみたいなんだけど、今回は使われていない。</p>

<p>講師のKent C. Doddsさんが以下の記事で理由を語ってくれているので、どこかでがんばってよんでみる。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fblog.kentcdodds.com%2Fwhy-i-never-use-shallow-rendering-c08851a68bb7" title="Why I Never Use Shallow Rendering – kentcdodds" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://blog.kentcdodds.com/why-i-never-use-shallow-rendering-c08851a68bb7">blog.kentcdodds.com</a></cite></p>

<p><br></p>

<h2 id="環境">環境</h2>

<p>さきほどのリポジトリをcloneして、そのままやるのが一番はやい。</p>

<p>なんだけど、自分の勉強もかねてテスト環境は、<code>create-react-app</code>でつくることにするよ。<br/>
とはいえ<code>create-react-app</code>でつくってもデフォルトで<code>jest</code>が使えるのでとくにすることはない。<br/>
<code>react-testing-library</code>と<code>jest-dom</code>のみあとから追加しよう。</p>

<p><b>かんきょうじゅんび</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ create-react-app sample-<span class="synStatement">test</span>
$ <span class="synStatement">cd</span> sample-<span class="synStatement">test</span>
$ yarn add react-testing-library jest-dom
</pre>


<p>こんな感じになりました。</p>

<p><b>package.json</b></p>

<pre class="code lang-json" data-lang="json" data-unlink>  &quot;<span class="synStatement">dependencies</span>&quot;: <span class="synSpecial">{</span>
    &quot;<span class="synStatement">jest-dom</span>&quot;: &quot;<span class="synConstant">^3.0.0</span>&quot;,
    &quot;<span class="synStatement">react</span>&quot;: &quot;<span class="synConstant">^16.7.0</span>&quot;,
    &quot;<span class="synStatement">react-dom</span>&quot;: &quot;<span class="synConstant">^16.7.0</span>&quot;,
    &quot;<span class="synStatement">react-scripts</span>&quot;: &quot;<span class="synConstant">2.1.3</span>&quot;,
    &quot;<span class="synStatement">react-testing-library</span>&quot;: &quot;<span class="synConstant">^5.4.4</span>&quot;
  <span class="synSpecial">}</span>,
</pre>


<p>※devDependenciesにいれればよかった。</p>

<p><br></p>

<h2 id="準備">準備</h2>

<p>src配下に<code>__tests__</code>ディレクトリを作成し、その配下に<code>simple-test.js</code>を作成する。<br/>
jestでは、<code>__tests__</code>ディレクトリ配下のファイルがテストコードと認識される。<br/>
※他にも条件はあるみたいなんだけど割愛するよ！</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>.
├── README.md
├── package.json
├── public
│   ├── favicon.ico
│   ├── index.html
│   └── manifest.json
├── src
│   └── __tests__
│       └── simple-test.js
└── yarn.lock
</pre>


<p>また、テストコードをどこにおくかについては、同じく以下の記事に言及されてました。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fblog.kentcdodds.com%2Fwhat-code-comments-can-teach-us-about-scaling-a-codebase-90bbfad8d70d" title="What code comments can teach us about scaling a codebase" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://blog.kentcdodds.com/what-code-comments-can-teach-us-about-scaling-a-codebase-90bbfad8d70d">blog.kentcdodds.com</a></cite></p>

<p><code>__tests__</code>よりコンポーネントと同じ階層で運用したほうががわかりやすいのかな？</p>

<p><br></p>

<h2 id="とりあえずテストを実行してみる">とりあえずテストを実行してみる</h2>

<p>テスト対象がそもそもないんだけど、jestがどんなものか確認するために、こんな感じのテストを書いてみます。</p>

<p><b>simple-tets.js</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>test(<span class="synConstant">'Basic javascript'</span>, () =&gt; <span class="synIdentifier">{</span>
  console.log(<span class="synConstant">'Hello Test'</span>)
  <span class="synStatement">const</span> sum = 1+ 1
  <span class="synComment">// 1 + 1 は2だよね</span>
  expect(sum).toBe(2)
<span class="synIdentifier">}</span>)
</pre>


<p><code>expect</code>だったりマッチャ関数である<code>toBe()</code>等については公式ドキュメントを読んでみよう。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fjestjs.io%2Fdocs%2Fja%2Fexpect" title="Expect · Jest" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://jestjs.io/docs/ja/expect">jestjs.io</a></cite></p>

<p><br/></p>

<p>テストを書いたら、実行してみます。</p>

<p><b>テストを実行</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ yarn run <span class="synStatement">test</span>
  ✓ Basic javascript <span class="synPreProc">(</span><span class="synSpecial">14ms</span><span class="synPreProc">)</span>

  console.log src/__tests__/simple-test.js:<span class="synConstant">2</span>
    Hello Test

Test Suites: <span class="synConstant">1</span> passed, <span class="synConstant">1</span> total
Tests:       <span class="synConstant">1</span> passed, <span class="synConstant">1</span> total
Snapshots:   <span class="synConstant">0</span> total
Time:        1.511s
Ran all <span class="synStatement">test</span> suites related to changed files.

Watch Usage
 › Press a to run all tests.
 › Press f to run only failed tests.
 › Press p to filter by a filename regex pattern.
 › Press t to filter by a <span class="synStatement">test</span> name regex pattern.
 › Press q to quit watch mode.
 › Press Enter to trigger a <span class="synStatement">test</span> run.
</pre>


<p><code>create-react-app</code>のテストスクリプトは、デフォルトwatchモードで起動するみたいです。<br/>
上記のように、一度テストが実行されたあとに、watchモードのコマンドを叩くことができます。</p>

<p>テスト対象だけをファイル名で絞ったり等できるのですが、テストファイルもひとつしかないので、そのまま使うことにします。</p>

<p>ためしに、テストコードを変更してみると再度テストが走りますね。</p>

<p><br/></p>

<h2 id="テスト対象のコンポーネントを書くその前に">テスト対象のコンポーネントを書く、その前に</h2>

<p>コンポーネントのテストを書く前に、どうやってテストをするのかを、Reactを使わないで、純粋にDOMを操作して確認してみます。</p>

<p>ということで、テストコードをこんな感じにしてみます。</p>

<p><b>simple-tets.js</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>test(<span class="synConstant">'Basic javascript'</span>, () =&gt; <span class="synIdentifier">{</span>
  <span class="synComment">// DOMをつくる</span>
  <span class="synStatement">const</span> div = <span class="synStatement">document</span>.createElement(<span class="synConstant">'div'</span>)
  <span class="synStatement">const</span> p = <span class="synStatement">document</span>.createElement(<span class="synConstant">'p'</span>)
  div.appendChild(p)
  <span class="synStatement">const</span> content = <span class="synStatement">document</span>.createTextNode(<span class="synConstant">'Hello'</span>)
  p.appendChild(content)
  <span class="synComment">// HTMLにしてみる</span>
  console.log(div.outerHTML)
<span class="synIdentifier">}</span>)
</pre>


<p>上記の<code>console.log</code>の結果は以下になります。</p>

<p><b>出力結果</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink><span class="synStatement">&lt;</span>div<span class="synStatement">&gt;&lt;</span>label<span class="synStatement">&gt;</span>Hello<span class="synStatement">&lt;</span>/label<span class="synStatement">&gt;&lt;</span>input <span class="synStatement">type=&quot;</span><span class="synConstant">number</span><span class="synStatement">&quot;&gt;&lt;</span>/div<span class="synStatement">&gt;</span>
</pre>


<p>みなれたHTMLが出力されてます。</p>

<p><br/></p>

<p>これに対して、<code>input</code>タグのtypeがnumberであること、<code>label</code>タグのテキストが<code>Hello</code>であることテストとして表現するとこんな感じになります。</p>

<p><b>simple-tets.js</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>test(<span class="synConstant">'Basic javascript'</span>, () =&gt; <span class="synIdentifier">{</span>
  <span class="synComment">// DOMをつくる</span>
  <span class="synStatement">const</span> div = <span class="synStatement">document</span>.createElement(<span class="synConstant">'div'</span>)
  <span class="synStatement">const</span> p = <span class="synStatement">document</span>.createElement(<span class="synConstant">'p'</span>)
  div.appendChild(p)
  <span class="synStatement">const</span> content = <span class="synStatement">document</span>.createTextNode(<span class="synConstant">'Hello'</span>)
  p.appendChild(content)

  <span class="synComment">// divノードからinutタグをとってきて、inputのタイプがnumberであること</span>
  expect(div.querySelector(<span class="synConstant">'input'</span>).type).toBe(<span class="synConstant">'number'</span>)
  <span class="synComment">// divノードからlabelタグをとってきて、中のテキストが'Hello'であること</span>
  expect(div.querySelector(<span class="synConstant">'label'</span>).textContent).toBe(<span class="synConstant">'Hello'</span>)
<span class="synIdentifier">}</span>)
</pre>


<p>当たり前ですが上記テストは無事パスします。<br/>
これだけだとシンプルすぎて、一体何をテストしたんだろう、と思ってしまいますが、少なくともDOMを通して、想定したHTMLがレンダリングされるだろうということが確認できたよう気がします。</p>

<p><br></p>

<h2 id="コンポーネントをテストする">コンポーネントをテストする</h2>

<p>早速、テスト対象のコンポーネントを書いていきます。
ろくに機能がありませんが、こんな感じにしました。</p>

<p><b>Form.js</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">import</span> React from <span class="synConstant">'react'</span>

<span class="synStatement">class</span> Form <span class="synStatement">extends</span> React.Component <span class="synIdentifier">{</span>
  render() <span class="synIdentifier">{</span>
    <span class="synStatement">return</span> (
      &lt;form&gt;
        &lt;label htmlFor=<span class="synConstant">&quot;name&quot;</span>&gt;Name&lt;/label&gt;
        &lt;input id=<span class="synConstant">&quot;name&quot;</span> type=<span class="synConstant">&quot;text&quot;</span> name=<span class="synConstant">&quot;name&quot;</span>/&gt;
        &lt;label htmlFor=<span class="synConstant">&quot;age&quot;</span>&gt;Age&lt;/label&gt;
        &lt;input id=<span class="synConstant">&quot;age&quot;</span> type=<span class="synConstant">&quot;number&quot;</span> name=<span class="synConstant">&quot;age&quot;</span>/&gt;
        &lt;button&gt;Submit&lt;/button&gt;
      &lt;/form&gt;
    )
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>

<span class="synStatement">export</span> <span class="synStatement">default</span> Form
</pre>


<p><br>
作ったコンポーネントを、テストコードでimportするようにします。<br/>
<code>expect</code>を書く前に、Reactにより出力されるDOMがどんな感じか見てみます。</p>

<p><b>simple-tets.js</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">import</span> React from <span class="synConstant">'react'</span>
<span class="synStatement">import</span> ReactDOM from <span class="synConstant">'react-dom'</span>
<span class="synStatement">import</span> Form from <span class="synConstant">'../components/Form'</span>

test(<span class="synConstant">'Form Test'</span>, () =&gt; <span class="synIdentifier">{</span>
  <span class="synStatement">const</span> div  = <span class="synStatement">document</span>.createElement(<span class="synConstant">'div'</span>)
  ReactDOM.render(&lt;Form /&gt;, div)
  console.log(div.outerHTML)
<span class="synIdentifier">}</span>)
</pre>


<p><br></p>

<p>上記の<code>console.log</code>の結果は以下になります。</p>

<p><b>出力結果</b></p>

<pre class="code" data-lang="" data-unlink>  console.log src/__tests__/simple-test.js:8
    &lt;div&gt;&lt;form&gt;&lt;label for=&#34;name&#34;&gt;Name&lt;/label&gt;&lt;input id=&#34;name&#34; type=&#34;text&#34; name=&#34;name&#34;&gt;&lt;label for=&#34;age&#34;&gt;Age&lt;/label&gt;&lt;input id=&#34;age&#34; type=&#34;number&#34; name=&#34;age&#34;&gt;&lt;button&gt;Submit&lt;/button&gt;&lt;/form&gt;&lt;/div&gt;</pre>


<p>わかってる方には当然と思われるかもしれませんが、個人的に衝撃でした。<br/>
DOMが！できている！</p>

<p>ということは、Reactを使わないでやったときとおなじようなことができてしまいます。</p>

<p><b>simple-tets.js</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">import</span> React from <span class="synConstant">'react'</span>
<span class="synStatement">import</span> ReactDOM from <span class="synConstant">'react-dom'</span>
<span class="synStatement">import</span> Form from <span class="synConstant">'../components/Form'</span>

test(<span class="synConstant">'Form Test'</span>, () =&gt; <span class="synIdentifier">{</span>
  <span class="synStatement">const</span> div  = <span class="synStatement">document</span>.createElement(<span class="synConstant">'div'</span>)
  ReactDOM.render(&lt;Form /&gt;, div)
  <span class="synComment">// さきほど同じのりで検証ができる！</span>
  expect(div.querySelector(<span class="synConstant">'label'</span>).textContent).toBe(<span class="synConstant">'Name'</span>)
  expect(div.querySelector(<span class="synConstant">'input'</span>).type).toBe(<span class="synConstant">'text'</span>)
<span class="synIdentifier">}</span>)
</pre>


<p>おおーんすげえ！</p>

<p><br></p>

<h2 id="本格的なテストに入る前に">本格的なテストに入る前に</h2>

<p>さて、ここからは冒頭で紹介した以下のライブラリを使ってみよう。</p>

<ul>
<li>jest-dom：jestのマッチャ関数をDOMの検証用に便利に拡張したもの</li>
<li>dom-testing-library：ユーザー目線でDOMを検索・取得できるライブラリ</li>
<li>react-testing-library：dom-testing-libraryをReact用に特化したライブラリ</li>
</ul>


<h3 id="jest-dom">jest-dom</h3>

<p>さきほどのテストコードをさくっとjest-domを使って置き換えて見ます。</p>

<p><b>simple-tets.js</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">import</span> React from <span class="synConstant">'react'</span>
<span class="synStatement">import</span> ReactDOM from <span class="synConstant">'react-dom'</span>
<span class="synStatement">import</span> <span class="synConstant">'jest-dom/extend-expect'</span>
<span class="synStatement">import</span> Form from <span class="synConstant">'../components/Form'</span>

test(<span class="synConstant">'Form Test'</span>, () =&gt; <span class="synIdentifier">{</span>
  <span class="synStatement">const</span> div  = <span class="synStatement">document</span>.createElement(<span class="synConstant">'div'</span>)
  ReactDOM.render(&lt;Form /&gt;, div)
  <span class="synComment">// jest-domのマッチャ関数を使う</span>
  expect(div.querySelector(<span class="synConstant">'label'</span>)).toHaveTextContent(<span class="synConstant">'Name'</span>)
  expect(div.querySelector(<span class="synConstant">'input'</span>)).toHaveAttribute(<span class="synConstant">'type'</span>, <span class="synConstant">'text'</span>)
<span class="synIdentifier">}</span>)
</pre>


<p>今までは、DOMに対象のテキストが存在かなどを確認する際は、DOMのプロパティを意識する必要がありましたが、置き換え後は、その必要がなくなりましたね。</p>

<p>上記以外にも便利そうなものがいっぱいあるので、公式を参照してみてください。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2Fgnapse%2Fjest-dom" title="gnapse/jest-dom" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://github.com/gnapse/jest-dom">github.com</a></cite></p>

<p><br></p>

<h3 id="dom-testing-library">dom-testing-library</h3>

<p>こちらも、まずは置き換え後のコードを先に貼ります。</p>

<p><b>simple-tets.js</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">import</span> React from <span class="synConstant">'react'</span>
<span class="synStatement">import</span> ReactDOM from <span class="synConstant">'react-dom'</span>
<span class="synStatement">import</span> <span class="synConstant">'jest-dom/extend-expect'</span>
<span class="synStatement">import</span> <span class="synIdentifier">{</span> getQueriesForElement <span class="synIdentifier">}</span> from <span class="synConstant">'dom-testing-library'</span>
<span class="synStatement">import</span> Form from <span class="synConstant">'../components/Form'</span>

test(<span class="synConstant">'Form Test'</span>, () =&gt; <span class="synIdentifier">{</span>
  <span class="synStatement">const</span> div  = <span class="synStatement">document</span>.createElement(<span class="synConstant">'div'</span>)
  ReactDOM.render(&lt;Form /&gt;, div)

  <span class="synComment">// querySelectorではなく、dom-tesiting-libraryのセレクタ(クエリ)を使う</span>
  <span class="synStatement">const</span> <span class="synIdentifier">{</span> getByLabelText <span class="synIdentifier">}</span> = getQueriesForElement(div)

  <span class="synComment">// テキストNameをもつラベルに紐づくコントロールを取得する</span>
  <span class="synStatement">const</span> input = getByLabelText(<span class="synConstant">'Name'</span>)
  expect(input).toHaveAttribute(<span class="synConstant">'type'</span>, <span class="synConstant">'text'</span>)

  <span class="synComment">// inputをlabelから取得できているのでこのテストはもういらない</span>
  <span class="synComment">//expect(div.querySelector('label')).toHaveTextContent('Name')</span>
<span class="synIdentifier">}</span>)
</pre>


<p>お？ってなりませんか。<br/>
<code>input</code>のノードを取得する際に、<code>input</code>そのものを指定するのではなく、それに紐づく<code>label</code>を指定してます。<br/>
さらにいえば、そのラベルを取得するのも、<code>label</code>のテキストを指定しています。</p>

<p>なぜこんな取得の仕方をしているんでしょうか。</p>

<p>こちらですが、今回の講師兼、開発者であるKent C. Doddsさんのフロントエンドのテストに対する考え方が反映されています。</p>

<p>ここで綺麗にまとめることができれば、いいのですが自分もまだすっきりとしていないのですが、以下の記事が大変参考になります。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fqiita.com%2Ftaneba%2Fitems%2F48db2ad9cf10ad644908" title="フロントエンドでTDDを実践する（理論編） - Qiita" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://qiita.com/taneba/items/48db2ad9cf10ad644908">qiita.com</a></cite></p>

<p>雑に書くと、</p>

<p> フロントエンドは単体テストよりも、統合テストのほうがコストパフォーマンスもいいよね。ユーザーが意識しない内部の修正を行ったことにより、テストが通らなくなるとか、テストコードをメンテして行くだけで疲弊しちゃうよ。<br/>
ユーザー目線のテストを多くしていこうよ。</p>

<p>みたいな感じでしょうか。</p>

<p><br></p>

<p>上記を受けてこちらの<code>input</code>ノードの取得の方法を見ると、なんとなくですが「ユーザーは<code>input</code>タグそのものを認識しているわけではなく、<code>input</code>に用意されている<code>label</code>を見てる」みたいなものが伝わってくる気がします。</p>

<p><b>simple-tets.js(抜粋)</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>  <span class="synComment">// テキストNameをもつラベルに紐づくコントロールを取得する</span>
  <span class="synStatement">const</span> input = getByLabelText(<span class="synConstant">'Name'</span>)
  expect(input).toHaveAttribute(<span class="synConstant">'type'</span>, <span class="synConstant">'text'</span>)
<span class="synIdentifier">}</span>)
</pre>


<p><br></p>

<p><code>label</code>から取得する以外にも、テキストから検索する<code>getByText</code>だったり、コンポーネントの要素に<code>data-testid</code>属性を付与しておいて、それをもとに取得する<code>getByTestId</code>だったりがあります。</p>

<p><code>data-testid</code>で取得と聞くと、もはやclassやid属性で取得すればいいのではと思ったりもしたのですが、クラス名を変えるとテストぶっこわれるでしょ！というところでしょうか。</p>

<p><br></p>

<h3 id="react-testing-library">react-testing-library</h3>

<p>最後に<code>react-testing-library</code>になります。<br/>
こちらは<code>dom-testing-library</code>をラップしてReact用に特化したものなので、importする際は、<code>react-testing-library</code>をimportするように切り替えます。</p>

<p>以下は、置き換えたあとのコードになります。</p>

<p><b>simple-tets.js</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">import</span> React from <span class="synConstant">'react'</span>
<span class="synStatement">import</span> <span class="synConstant">'jest-dom/extend-expect'</span>
<span class="synStatement">import</span> <span class="synIdentifier">{</span> render <span class="synIdentifier">}</span> from <span class="synConstant">'react-testing-library'</span>
<span class="synStatement">import</span> Form from <span class="synConstant">'../components/Form'</span>

test(<span class="synConstant">'Form Test'</span>, () =&gt; <span class="synIdentifier">{</span>
  <span class="synComment">// react-testing-libraryのrenderを使う</span>
  <span class="synStatement">const</span> <span class="synIdentifier">{</span> getByLabelText <span class="synIdentifier">}</span> = render(&lt;Form /&gt;)
  <span class="synComment">// テキストNameをもつラベルに紐づくコントロールを取得する</span>
  <span class="synStatement">const</span> input = getByLabelText(<span class="synConstant">'Name'</span>)
  expect(input).toHaveAttribute(<span class="synConstant">'type'</span>, <span class="synConstant">'text'</span>)
<span class="synIdentifier">}</span>)
</pre>


<p>上記では、<code>div</code>をつくって<code>ReactDOM.reder</code>をして〜の流れがなくなり、さきほどりも、すっきりしましたね。</p>

<p>上記では<code>render</code>のみ使っていますが、テスト後にコンポーネントをunmoutする<code>cleanup</code>だったり、debug用関数があったりします。</p>

<p><br></p>

<h2 id="テストを行う-長くなったので次回">テストを行う 長くなったので次回</h2>

<p>イベントのテストだったり、肝心な部分を書こうとおもったのですが、長くなったので次回にします。</p>

-----
--------
AUTHOR: konoemario
TITLE: 年始だしReactを学ぶ(3)
BASENAME: 2019/01/06/184538
STATUS: Draft
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 01/06/2019 15:48:07
-----
BODY:
<h3>SECTION11 復習がてらyoutubeっぽいサイトをつくる</h3>

<p>タイトルにテストってあったからテストコードを書くのかと思ったら違った。<br/>
youtubeAPIを使って遊ぶ内容。</p>

<p><br/></p>

<h3>SECTION12 Reudx</h3>

<p>ついに来た。Redux。<br/>
コードペンを使ってReduxのみを学ぶ。</p>

<p>一部しか写経してないけど、Codepenをはっとく。</p>

<p><a href="https://codepen.io/tohu/pen/bOvryp">https://codepen.io/tohu/pen/bOvryp</a></p>

<p>ざっくりとしたメモは以下の通り。
<br/></p>

<p>とりあえず以下の登場人物がいる。</p>

<p>Reduxパッケージから必要なオブジェクトをもらう。</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">const</span> <span class="synIdentifier">{</span> createStore, combineReducers <span class="synIdentifier">}</span> = Redux
</pre>


<p><br/></p>

<p><code>combineReducers</code>関数で作成したreducerを渡す。</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">const</span> ourDepartment = combineReducers(<span class="synIdentifier">{</span>
  policies: policies
<span class="synIdentifier">}</span>)
</pre>


<p><br/></p>

<p>reducerってなんぞって感じなんだけど、stateに対する操作と覚えておけばいいのかしら。Vuexだとmutationがそれにあたるのかな？<br/>
Vuexではstateを直接定義してたけど、Reduxだとreducerの第一引数の値がstateっぽく見える。</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synComment">// reducer</span>
<span class="synStatement">const</span> policies = (listOfPolicies = <span class="synIdentifier">[]</span>, action) =&gt; <span class="synIdentifier">{</span>
 <span class="synStatement">if</span>(action.type === <span class="synConstant">'CREATE_POLICY'</span>) <span class="synIdentifier">{</span>
  <span class="synStatement">return</span> <span class="synIdentifier">[</span>...listOfPolicies, action.payload.name<span class="synIdentifier">]</span> 
 <span class="synIdentifier">}</span>
 <span class="synStatement">return</span> listOfPolicies 
<span class="synIdentifier">}</span>
</pre>


<p><br/></p>

<p>話を戻して、作成したreducersをcombineしたら、storeをつくる。<br/>
storeはcombineReducerによってできたオブジェクトをもとに作成される。</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">const</span> store = createStore(ourDepartment)
</pre>


<p><br/></p>

<p>こんなかんじで、ステートの状態を取得できる</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>console.log(store.getState())
</pre>


<p><br/></p>

<p>ステートを更新するときは、dispatchでアクションを発行する。</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>store.dispatch(action)
</pre>


<p>アクションは、アクションクリエイターなる関数ごしにつくるみたい。</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synComment">// action creator</span>
<span class="synStatement">const</span> createPolicy = (name, amount) =&gt; <span class="synIdentifier">{</span>
  <span class="synComment">//action</span>
  <span class="synStatement">return</span> <span class="synIdentifier">{</span>
    type: <span class="synConstant">'CREATE_POLICY'</span>,
    payload: <span class="synIdentifier">{</span>
      name : name,
      amount : amount
    <span class="synIdentifier">}</span>
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>

<span class="synStatement">const</span> action = createPolicy(<span class="synConstant">'ayane'</span>, 200)
</pre>


<p>適当にかいてみたけど、あんまわかってない。</p>

<p><br/></p>

<h3>SECTION13 React-Redux</h3>

<p>SECTION12でさわったReduxをReactで使うためにはreact-reduxを使う必要がある。</p>

<p>なんで？みたいなのはさておき、書き方だけ覚える。</p>

-----
--------
AUTHOR: konoemario
TITLE: 2018年の振り返り 
BASENAME: 2019/01/02/003749
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 01/02/2019 00:37:49
CATEGORY: 雑談
-----
BODY:
<p>あけましておめでとうございます。</p>

<p>過去に2018年に以下の目標を掲げていたのを思い出したので、ふりかえり。 <br/>
<br/></p>

<p>時間が空いた時に、2019の目標をたてる。</p>

<h3>2018年のやることリスト</h3>

<p>こちらの記事に書いてありました。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fwww.tohuandkonsome.site%2Fentry%2F2018%2F01%2F11%2F231116" title="コールバック地獄を体験したいんじゃ~Promiseへの道~(1) - 豆腐とコンソメ" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://www.tohuandkonsome.site/entry/2018/01/11/231116">www.tohuandkonsome.site</a></cite></p>

<h4>目標 スキルセットにLaravel+Vue.jsと書けるようになる。</h4>

<p>どれくらいできれば書いていいのかわからないのですが。なんかそろそろ書いてもいいかなという自信を持てるようになりたいです。</p>

<h5>振り返り</h5>

<p>Laravelに関しては、基本的な機能みたいなところはそこまで問題なくって、テストコードも書いて、さわれるようになったとは思う。  <br/>
とはいえ、フレームワークのソースコードをちゃんと見たかっていうとそうでもなくって、突き詰めるとPHPのスキルがまだまだなんだと思う。<br/>
composerとかも当然のように使うんだけど、仕組みもよくわかってない。<br/>
これに関しては、軽量のフレームワークを使ってみるとか、生のPHPでなんかやってみるとかしたらいいのかしら。</p>

<p>Laravelは関係ないんだけど、Wordpressをまともにさわったのも2018年の思い出。<br/>
期間にして1ヵ月もさわってないんだけど、Wordpressやってると、Laravelのようなルーティングがあって、モデルがあって、Viewとビジネスロジックが分離されている素晴らしさを再認識した。  <br/>
Wordpressもちゃんと理解して適材適所的に使えればいいんだけど、なかなか乗り気がしない。</p>

<p>Vue.jsに関しては、Vueコンポーネント、VueRouter、Vuex等をさわったり、SSRを行うNuxt.jsでの開発も経験して、それなりに触れるような気がしてる。<br/>
ただこれもLaravelと同じで、Vue.jsのコアのソースコードなんて全然読んだことないし、javascriptに関しても不安がいっぱいある。  いまだにPromiseやasync awaitであれ？ってなったりすることが多い。</p>

<p>仮想DOMを体験できる自作フレームワークをつくってみるという素敵な記事があるので、これをやろうやろうとおもってまだなにもできてない。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fkuroeveryday.blogspot.com%2F2018%2F11%2Fhow-to-create-virtual-dom-framework.html" title="自作フレームワークをつくって学ぶ 仮想DOM実践入門 | Black Everyday Company" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://kuroeveryday.blogspot.com/2018/11/how-to-create-virtual-dom-framework.html">kuroeveryday.blogspot.com</a></cite></p>

<p>javascriptについては、以下の本をちょこちょこと読み直したりはしてるので、もうちょいさわってればいい感じにはなるような気がするんだけど、いかんせん移り変わりが激しく、伝統的にはこう書いていた〜とか、こういう背景があるから〜というのが多くってつらい。継続して触り続けてくことで解消したい。</p>

<p><div class="hatena-asin-detail"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/477418411X/hatena-blog-22/"><img src="https://images-fe.ssl-images-amazon.com/images/I/51AvRbVdAsL._SL160_.jpg" class="hatena-asin-detail-image" alt="改訂新版JavaScript本格入門 ~モダンスタイルによる基礎から現場での応用まで" title="改訂新版JavaScript本格入門 ~モダンスタイルによる基礎から現場での応用まで"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/477418411X/hatena-blog-22/">改訂新版JavaScript本格入門 ~モダンスタイルによる基礎から現場での応用まで</a></p><ul><li><span class="hatena-asin-detail-label">作者:</span> 山田祥寛</li><li><span class="hatena-asin-detail-label">出版社/メーカー:</span> 技術評論社</li><li><span class="hatena-asin-detail-label">発売日:</span> 2016/09/30</li><li><span class="hatena-asin-detail-label">メディア:</span> 大型本</li><li><a href="http://d.hatena.ne.jp/asin/477418411X/hatena-blog-22" target="_blank">この商品を含むブログを見る</a></li></ul></div><div class="hatena-asin-detail-foot"></div></div></p>

<p>その中でTypeScriptもやったほうが便利なのかーという悪魔のささやきもあったり。</p>

<p>総括すると、スキルセットに書いてもいいんじゃないかなは思うんだけど、まだまだだよねっていう感じの結果に。</p>

<p> <br/></p>

<h4>C言語で簡易Webサーバーを構築する</h4>

<p>ずっと前からやろうやろうと思って、なかなか手がつけられてないです。
NginxとApacheであげられるC10k問題とかに対してもう少しちゃんと理解できるようにしておきたいです。</p>

<h5>振り返り</h5>

<p>まったくできなかった。。。<br/>
以下の素晴らしい書籍の後半にWebサーバをつくるという題目が総合演習的な立ち位置で掲載されてる。</p>

<p><div class="hatena-asin-detail"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797386479/hatena-blog-22/"><img src="https://images-fe.ssl-images-amazon.com/images/I/51P7Lxl0cKL._SL160_.jpg" class="hatena-asin-detail-image" alt="ふつうのLinuxプログラミング 第2版 Linuxの仕組みから学べるgccプログラミングの王道" title="ふつうのLinuxプログラミング 第2版 Linuxの仕組みから学べるgccプログラミングの王道"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797386479/hatena-blog-22/">ふつうのLinuxプログラミング 第2版 Linuxの仕組みから学べるgccプログラミングの王道</a></p><ul><li><span class="hatena-asin-detail-label">作者:</span> 青木峰郎</li><li><span class="hatena-asin-detail-label">出版社/メーカー:</span> SBクリエイティブ</li><li><span class="hatena-asin-detail-label">発売日:</span> 2017/09/22</li><li><span class="hatena-asin-detail-label">メディア:</span> 単行本</li><li><a href="http://d.hatena.ne.jp/asin/4797386479/hatena-blog-22" target="_blank">この商品を含むブログを見る</a></li></ul></div><div class="hatena-asin-detail-foot"></div></div></p>

<p>総合に行く前に基本的なことからやるかーとやってたらプロセスをforkしてたのしーで終わってしまった記憶がある。</p>

<p>優先度は下げて継続目標とする。</p>

<p><br/></p>

<h4>SPAで簡単なサイトをつくる</h4>

<p>SPAである必要ってなんもないかもしれないんですが、ちょっとやってみたいです。</p>

<h5>振り返り</h5>

<p>Vue.jsやNuxt.jsでサイトを作成した。
また、奥さんに欲しいサイトを無理やりひねり出してもらい、お酒の画像をアップロードして、評価するというそれだけのサイトをNuxt.js + Firebaseで作成した。<br/>
誰も使わないけれども一般に公開したいなーと思いユーザー認証までやった。 <br/>
ただ、FirebaseのRealtimeDatabseはNoSQLデータベースでデータの保存のさせ方を工夫させなきゃ！CloudFuntionsを使って冗長化して持たせた方がいいのか、ほーんで終わってしまってる。</p>

<p>とりあえず目標は達成できた。</p>

<p><br/></p>

<h4>ChefやらDockerやらをちょっと使えるようにしておく。</h4>

<p>Vagrantで仮想環境構築が少しだけわかるようになったので、もう一歩先にいきたいところです。</p>

<h5>振り返り</h5>

<p>Chefはまったく触らなかったけど、ansibleで環境構築みたいなことはできるようになったと思う。<br/>
（若干記憶があやしい。)</p>

<p>Dockerに関しては、2018年かなりお世話になった。<br/>
Dockerfileを書いて見たり、docker-composeを使って見たりとそこそこ使えるようになった気がする。</p>

<p>なので、目標は達成できたと思う。</p>

<p><br/></p>

<h4>Go言語をさわってみる</h4>

<p>理由はあんまりない。パラダイムシフトみたいなものを感じられらたらいいな。</p>

<h5>振り返り</h5>

<p>一瞬だけ、さわった。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fwww.tohuandkonsome.site%2Fentry%2F2018%2F06%2F12%2F184341" title="Goに入門してみる - 豆腐とコンソメ" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://www.tohuandkonsome.site/entry/2018/06/12/184341">www.tohuandkonsome.site</a></cite></p>

<p>とはいえ、目標達成というにはちょっと無理め。<br/>
やっぱりさわる理由がないとだめだったかも。</p>

<p>これは一旦取り下げ。</p>

<p><br/></p>

<h4>ラズパイで2.4GHz帯のパケット解析</h4>

<p>ドローンも買ったんだけれども自律飛行を目指す企画が頓挫しちゃってる。<br/>
これも進めたい。</p>

<h5>振り返り</h5>

<p>ぜんぜんさわらなかった。<br/>
ラズパイ系って一回奥にしまっちゃうと、ださなくなるね。</p>

<p>優先度をかなり下げて継続とする。</p>

<h4>ブログのアクセス数を倍にしたい</h4>

<p> 1日あたり200アクセスのところを目指せ400アクセスじゃ！</p>

<h5>振り返り</h5>

<p>土日は400アクセスはいかないのだけれども、月でみると12000を超えるようになった。<br/>
とはいえ、アクセス数を増加するためのなにかをしているわけじゃないので、記事が増えて検索流入が増えたんだと思う。</p>

<p>ただ頭打ち感が否めない。</p>

<p>とりあえず達成した。</p>

<p><br/></p>

<h4>個人で案件を請け負ってみたい</h4>

<p>一度くらいやってみたい。</p>

<h5>振り返り</h5>

<p>なんもできてない。<br/>
将来を考えるということで継続目標にする。</p>

<p><br/></p>

<h4>LPICかAWSの資格あたりを一個とりたい</h4>

<h5>振り返り</h5>

<p>定期的にやる気が一瞬わくんだけど、テキストを買って終了というしょうもない結果に。<br/>
とりあえず継続目標で。</p>

<p><br/></p>

<h4>ピンキーと付き合いたい</h4>

<h5>振り返り</h5>

<p>継続目標で。</p>

-----
--------
AUTHOR: konoemario
TITLE: 年始だしReactに入門する(2)
BASENAME: 2019/01/01/234714
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 01/01/2019 23:47:14
CATEGORY: プログラム
CATEGORY: React
CATEGORY: javascript
-----
BODY:
<h1>日記</h1>

<p>2019年になったので、どこかで去年の目標を見返してみようと思う。</p>

<h1>本題</h1>

<p>横道にずれたり、なにかしながらやったりとあんまり進んでない。<br/>
正月休みのうちにReactの講座を終わらせたい。</p>

<p>前回からの続き</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fwww.tohuandkonsome.site%2Fentry%2F2018%2F12%2F29%2F103133" title="年末だしReactに入門する(1) - 豆腐とコンソメ" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://www.tohuandkonsome.site/entry/2018/12/29/103133">www.tohuandkonsome.site</a></cite></p>

<p><br/></p>

<h3>SECTION8 APIを呼び出す</h3>

<p>綺麗な画像を提供してくれるunsplashのAPIを使う。</p>

<p>fetctとaxiosどっちを使うのかという解説があった。<br/>
fetchって名前だけ聞いたことあって、なんだろうなーぐらいだったんだけど、ブラウザ標準のHTTPリクエストを行う機能なのね。 <br/>
ブラウザ標準というと<code>XMLHttpRequest</code>を使ってたんだけど、fetchはそれとりも新しい。 <br/>
とはいえ、axiosで大抵の機能はそろってるので、axiosじゃ対応できないエッジケースでなければfetchを使う理由はなさそう。  (パフォーマンスとか、jsのサイズをもっと小さくしたいとか？)  <br/>
もちろん、axiosがカバーしてくれているレイヤーをきちんと理解するという目的ではfetchを使ったほうがいい。</p>

<p>講座ではaxiosを使う。</p>

<p>axiosを使う際も関心が異なる箇所については、別ファイルに切り出して<code>axios.create</code>を使うという何気ないところがとても参考になる。</p>

<p><br/></p>

<h3>SECTION9 APIで取得した結果をレンダリングする</h3>

<p>リストレンダリングをやった。<br/>
注意事項は、Vue.jsとおなじで、リストの要素にユニークとなるidをふろうねってぐらい。</p>

<p>また、ちょっとしたときに不思議になるんだけど、<code>import react from 'React'</code>を書くだけで、以下のコードが通るようになるのは、babelががんばってくれているから。</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">const</span> func1 = () =&gt; &lt;div&gt;aaaa&lt;/div&gt;
</pre>


<p>あと、Vue.jsだとv-forでぶんまわせ！っていう箇所もReactはmap構文を使って、javascriptを書いている印象が強い。</p>

<p><br/></p>

<h3>SECION10 リストレンダリングの結果をきれいにする</h3>

<p>CSSのgrid機能とjavascriptで取得した結果をきれいにする。</p>

<p>gridについてはかんたんにさわったことわあるんだけど、今回の講座の内容で使われるプロパティがさっぱりなので、もっかいかんたんに理解することにした。  <br/>
Reactの学習という点からはずれるから、スルーしてもいいんだけど、講座のレイアウトが素敵だったので。<br/>
しかし、flexboxもそれとり前のfloatもなんとなくしか理解してないなかgridか、とcssがますます苦手になりそう。</p>

<p><br/></p>

<h4>grid をさくっとおさらい</h4>

<p>以下の記事を参考にさせていただき、今回の講座の内容を理解する。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fdeveloper.mozilla.org%2Fja%2Fdocs%2FWeb%2FCSS%2FCSS_Grid_Layout%2FBasic_Concepts_of_Grid_Layout" title="グリッドレイアウトの基本概念" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://developer.mozilla.org/ja/docs/Web/CSS/CSS_Grid_Layout/Basic_Concepts_of_Grid_Layout">developer.mozilla.org</a></cite></p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fqiita.com%2Fkura07%2Fitems%2F486c19045aab8090d6d9%23%25E8%2587%25AA%25E5%258B%2595%25E7%259A%2584%25E3%2581%25AB%25E9%2585%258D%25E7%25BD%25AEspan%25E4%25BD%25BF%25E7%2594%25A8" title="CSS Grid Layout を極める！（場面別編） - Qiita" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://qiita.com/kura07/items/486c19045aab8090d6d9#%E8%87%AA%E5%8B%95%E7%9A%84%E3%81%AB%E9%85%8D%E7%BD%AEspan%E4%BD%BF%E7%94%A8">qiita.com</a></cite></p>

<p>埋め込みにすると重いので、練習用Codepenを貼っておく。</p>

<p><a href="https://codepen.io/tohu/pen/WLXjYW">https://codepen.io/tohu/pen/WLXjYW</a></p>

<p>講座の内容を通して見ると、グリッドアイテムの中にひとつの画像をおくのではなくって、100x100みたいなグリッドアイテムをたくさん用意して、画像のサイズ分グリッドアイテムを用意するって手法だった。</p>

<p>結構べんりなので覚えておきたい。</p>

<p><br/></p>

<h4>DOMにアクセスする</h4>

<p>本題のReactに戻る。<br/>
グリッドアイテムを画像のサイズにあわせて用意するために、画像の高さを取得してから、高さに合わせたCSSをあてる必要がある。<br/>
※正確には、grid-row-endでgrid spanの数を指定している。grid spanでなんで余白になるんだろう。</p>

<p>CSSについてはさておき、DOM要素にアクセスするには<code>ref</code>属性を使う。
このへんはVue.jsと同じ。</p>

<p>ただ、コンスラクタでref用のプロパティをつくるんだと思った。</p>

<p>抜粋するとこんな感じ。</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">class</span> ImageCard <span class="synStatement">extends</span> React.Component <span class="synIdentifier">{</span>
  constructor(props) <span class="synIdentifier">{</span>
    <span class="synStatement">super</span>(props)

    <span class="synIdentifier">this</span>.state = <span class="synIdentifier">{</span> spans: 0 <span class="synIdentifier">}</span>
    <span class="synIdentifier">this</span>.imageRef = React.createRef()
  <span class="synIdentifier">}</span>


  render() <span class="synIdentifier">{</span>
    <span class="synStatement">const</span> <span class="synIdentifier">{</span> description,  urls<span class="synIdentifier">}</span> = <span class="synIdentifier">this</span>.props.image
    <span class="synStatement">return</span> (
      &lt;div style=<span class="synIdentifier">{{</span>gridRowEnd: `span $<span class="synIdentifier">{this</span>.state.spans<span class="synIdentifier">}</span>`<span class="synIdentifier">}}</span>&gt;
        &lt;img 
          ref=<span class="synIdentifier">{this</span>.imageRef<span class="synIdentifier">}</span> 
          src=<span class="synIdentifier">{</span>urls.regular<span class="synIdentifier">}</span> 
          alt=<span class="synIdentifier">{</span>description<span class="synIdentifier">}</span>
        /&gt;
      &lt;/div&gt;
    )
  <span class="synIdentifier">}</span>
</pre>


<p>また、画像の高さはレンダリングが終わってからわかるので、<code>componentDidMount</code>のタイミングで参照しても、高さがまだ取得できない。  <br/>
なので、リソースのロードが終わったことを表すイベント<code>load</code>にコールバック関数を渡すことで、画像の高さを取得した処理を行うことができる。</p>

<p>このへんからはアロー関数を当たり前のように渡すという感覚が必要になりそう。</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>  componentDidMount() <span class="synIdentifier">{</span>
    <span class="synIdentifier">this</span>.imageRef.current.addEventListener(<span class="synConstant">'load'</span>, <span class="synIdentifier">this</span>.setSpans)
  <span class="synIdentifier">}</span>

  setSpans = () =&gt; <span class="synIdentifier">{</span>
    <span class="synStatement">const</span> height = <span class="synIdentifier">this</span>.imageRef.current.clientHeight  
    <span class="synStatement">const</span> spans = Math.ceil(height / 10)
    <span class="synIdentifier">this</span>.setState(<span class="synIdentifier">{</span> spans <span class="synIdentifier">}</span>)
  <span class="synIdentifier">}</span>
</pre>


<p>次回からテストを書く内容に移るので楽しみ。</p>

-----
--------
AUTHOR: konoemario
TITLE: 年末だしReactに入門する(1)
BASENAME: 2018/12/29/103133
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 12/29/2018 10:31:33
CATEGORY: プログラム
CATEGORY: javascript
CATEGORY: React
-----
BODY:
<p>UdemyのReactの講座を受ける機会があったので、備忘録がてら感想をメモ。</p>

<p><a href="https://www.udemy.com/react-redux/">https://www.udemy.com/react-redux/</a></p>

<p>過去にも、UdemyのReact講習をやったんだけれども、せっかくなのでやってみる。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fwww.tohuandkonsome.site%2Fentry%2F2018%2F07%2F20%2F171437" title="Vue.jsから入りReactを触ったときの気づき - 豆腐とコンソメ" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://www.tohuandkonsome.site/entry/2018/07/20/171437">www.tohuandkonsome.site</a></cite></p>

<p>受けた人のレベル的に</p>

<ul>
<li>Web開発経験2年目</li>
<li>javascriptそのものに自信はない</li>
<li>Vue.jsはコンポーネントの使用、Vuex、VueRouterとある程度はさわったと思う</li>
</ul>


<p>ぐらい。</p>

<p>まだ半分もいってないけれども、今回の講習はかなり丁寧に勧めてくれる印象があるので、とっつきやすいと思う。</p>

<p><br/></p>

<ul class="table-of-contents">
    <li><a href="#SECTION1-こんなことができるよ">SECTION1 こんなことができるよ</a></li>
    <li><a href="#SECTION2-プロジェクトをつくってみる">SECTION2 プロジェクトをつくってみる</a></li>
    <li><a href="#SECTION3-コンポーネントをつかう">SECTION3 コンポーネントをつかう</a></li>
    <li><a href="#SECTION4-クラスコンポーネントを使う">SECTION4 クラスコンポーネントを使う</a></li>
    <li><a href="#SECTION5-ステートをつかう">SECTION5 ステートをつかう</a></li>
    <li><a href="#SECTION6-ライフサイクルについて">SECTION6 ライフサイクルについて</a></li>
    <li><a href="#SECTION7-イベントを学ぶ">SECTION7 イベントを学ぶ</a><ul>
            <li><a href="#thisについて">thisについて</a></li>
        </ul>
    </li>
</ul>

<h3 id="SECTION1-こんなことができるよ">SECTION1 こんなことができるよ</h3>

<p>CodePenを使って、Reactってこんなことができるんだよっていう説明が主に続く。</p>

<p><br/></p>

<h3 id="SECTION2-プロジェクトをつくってみる">SECTION2 プロジェクトをつくってみる</h3>

<p>create-react-appを使って、新規にプロジェクトを作成する。<br/>
HelloWorld的なことを主にやった。<br/>
JSXに触れて、HTMLに近いんだけれども、javascriptの予約語とかぶる部分は独自の記述だよ、的なことを学ぶ。<br/>
Babelの公式サイトを初めてみた。そこにreact用のプリセットがあり、jsxがpureなjavascriptの構文にどのように書き変わるのかって見えるが、とてもよかった。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fbabeljs.io%2Frepl" title="Babel · The compiler for next generation JavaScript" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://babeljs.io/repl">babeljs.io</a></cite></p>

<p><br/></p>

<h3 id="SECTION3-コンポーネントをつかう">SECTION3 コンポーネントをつかう</h3>

<p>ベタに書いていた部分をコンポーネントとして切り出す。<br/>
SemanticUIを初めて使った。 <br/>
あと、適当なデータを生成してくれるfakerも使った。PHPUnitの単体テストではお世話になってたけれども、フロントサイドでも当然あるのね。</p>

<p>コンポーネントで親コンポーネントから子コンポーネントはプロパティとして渡す。<br/>
プロパティの型チェックとかは別のライブラリで実装するのかな。</p>

<p>あと、Vue.jsでいうスロットみたいなものはjsxで以下のようにネストさせて</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">const</span> App = () =&gt; <span class="synIdentifier">{</span>
    <span class="synStatement">return</span> (
      &lt;div className=<span class="synConstant">&quot;ui container comments&quot;</span>&gt;
       &lt;ApprovalCard&gt;
          &lt;CommentDetail 
            author=<span class="synConstant">&quot;tarou&quot;</span> 
            content=<span class="synConstant">&quot;How articstic!&quot;</span> 
            avatar=<span class="synIdentifier">{</span> faker.image.avatar() <span class="synIdentifier">}</span> 
            timeAgo=<span class="synConstant">&quot;Today at 4:45PM&quot;</span>
          /&gt;
        &lt;/ApprovalCard&gt;
      &lt;/div&gt; 
    )
<span class="synIdentifier">}</span>
</pre>


<p><br/></p>

<p>ネストの外側である親コンポーネントの<code>props.children</code>で表示できる。</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">const</span> ApporovalCard = (props) =&gt; <span class="synIdentifier">{</span>
  <span class="synStatement">return</span> (
    &lt;div className=<span class="synConstant">&quot;ui card&quot;</span>&gt;
      &lt;div className=<span class="synConstant">&quot;content&quot;</span>&gt;<span class="synIdentifier">{</span> props.children <span class="synIdentifier">}</span>&lt;/div&gt;
      &lt;div className=<span class="synConstant">&quot;extra content&quot;</span>&gt;
        &lt;div className=<span class="synConstant">&quot;ui two buttons&quot;</span>&gt;
          &lt;div className=<span class="synConstant">&quot;ui basic green button&quot;</span>&gt;Approve&lt;/div&gt;
          &lt;div className=<span class="synConstant">&quot;ui basic red button&quot;</span>&gt;Decline&lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  )
<span class="synIdentifier">}</span>
</pre>


<p><br/></p>

<p>こんな感じに複数のコンポーネントが含まれてたらどうなるんだろうと思ったけれども、<code>props.children[0]</code>のような形で1個目のコンポーネントみたいに参照できる。</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">const</span> App = () =&gt; <span class="synIdentifier">{</span>
    <span class="synStatement">return</span> (
      &lt;div className=<span class="synConstant">&quot;ui container comments&quot;</span>&gt;
        &lt;ApprovalCard&gt;
          &lt;CommentDetail 
            author=<span class="synConstant">&quot;tarou&quot;</span> 
            content=<span class="synConstant">&quot;How articstic!&quot;</span> 
            avatar=<span class="synIdentifier">{</span> faker.image.avatar() <span class="synIdentifier">}</span> 
            timeAgo=<span class="synConstant">&quot;Today at 4:45PM&quot;</span>
          /&gt;
          &lt;Hoge/&gt;
        &lt;/ApprovalCard&gt;
      &lt;/div&gt; 
    )
<span class="synIdentifier">}</span>
</pre>


<p><br/></p>

<h3 id="SECTION4-クラスコンポーネントを使う">SECTION4 クラスコンポーネントを使う</h3>

<p>今まで使っていたコンポーネントは関数型コンポーネント。<br/>
コンポーネントにステートをもたないようなシンプルなものは関数側コンポーネントで書いた方がいい。<br/>
(可読性の点なのか、パフォーマンスの点なのかはよくわかってない)</p>

<p>ここでは、新たらにクラス型のコンポーネントを使用していく。</p>

<p>まずは比較しやすいように今まで通り、関数型コンポーネントを使う。<br/>
非同期で位置情報を取得するgeolocationAPIを使って、取得した位置情報を表示してみる。</p>

<p><b>サンプルコード</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">const</span> App = () =&gt; <span class="synIdentifier">{</span>
  <span class="synIdentifier">var</span> lat = 999

  <span class="synComment">// 非同期の処理</span>
  <span class="synStatement">window</span>.navigator.geolocation.getCurrentPosition(
    <span class="synComment">// callback</span>
    (pos) =&gt; <span class="synIdentifier">{</span>
      lat = pos.coords.latitude
    <span class="synIdentifier">}</span>,
    (err) =&gt; console.log(err),
  )

  <span class="synStatement">return</span> (
    &lt;div&gt;
      Lat: <span class="synIdentifier">{</span> lat <span class="synIdentifier">}</span>
    &lt;/div&gt; 
  )

<span class="synIdentifier">}</span>
</pre>


<p>ここで困ったことに。<br/>
非同期で取得した値って、jsxにどうやって表示するんだろうか。</p>

<p>上記のサンプルコードでは、Latの値は初期値の999になり、非同期処理が終わっても更新されることはない。<br/>
callback内ででjsxをreturnしたらどうだろうとおもったけど、だめだった。<br/>
うーむ。</p>

<p><strong>latの値が更新されたら、その値をもって再描画されればいいのになー</strong>という思いを抱えて、クラスを使った例にうつる。</p>

<p><br/></p>

<h3 id="SECTION5-ステートをつかう">SECTION5 ステートをつかう</h3>

<p>まずは、ステートの説明。<br/>
ステートの値が更新されたら、再描画されるのよ！素敵。</p>

<p>コンスラクタでステートの初期設定と非同期処理を呼ぶ。<br/>
更新をするときはsetStateでとか、コンスラクタで親のコンスラクタを呼び忘れないようにとかは省略。</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">class</span> App <span class="synStatement">extends</span> React.Component <span class="synIdentifier">{</span>
  constructor(props) <span class="synIdentifier">{</span>
    <span class="synStatement">super</span>(props)

    <span class="synIdentifier">this</span>.state = <span class="synIdentifier">{</span>
      lat: <span class="synStatement">null</span>,
      errorMessage: <span class="synConstant">''</span>
    <span class="synIdentifier">}</span>

    <span class="synStatement">window</span>.navigator.geolocation.getCurrentPosition(
      (pos) =&gt; <span class="synIdentifier">{</span>
        <span class="synIdentifier">this</span>.setState(<span class="synIdentifier">{</span> lat: pos.coords.latitude <span class="synIdentifier">}</span>)
      <span class="synIdentifier">}</span>,
      (err) =&gt; <span class="synIdentifier">{</span>
        <span class="synIdentifier">this</span>.setState(<span class="synIdentifier">{</span> errorMessage: err.message <span class="synIdentifier">}</span>)
      <span class="synIdentifier">}</span>,
    )
  <span class="synIdentifier">}</span>
</pre>


<p>これで、非同期処理のコールバックでステートの状態を変更することで、再描画され、値が表示される。</p>

<p><br/></p>

<p>ステートの状態によってレンダリング内容を切り替えたい場合、renderメソッド内に式をかけばいいだけ。<br/>
以下の例だと、レンダリング内容をまるっと分岐して定義してるんだけど、部分的に変える場合はどうしたらいいんだろう。</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>  render() <span class="synIdentifier">{</span>
    <span class="synStatement">if</span>(<span class="synIdentifier">this</span>.state.errorMessage &amp;&amp; !<span class="synIdentifier">this</span>.state.lat) <span class="synIdentifier">{</span>
      <span class="synStatement">return</span> (
        &lt;div&gt;
          error: <span class="synIdentifier">{</span> <span class="synIdentifier">this</span>.state.errorMessage<span class="synIdentifier">}</span>
        &lt;/div&gt; 
      )
    <span class="synIdentifier">}</span>

    <span class="synStatement">if</span>(!<span class="synIdentifier">this</span>.state.errorMessage &amp;&amp; <span class="synIdentifier">this</span>.state.lat) <span class="synIdentifier">{</span>
      <span class="synStatement">return</span> (
        &lt;div&gt;
          Lat: <span class="synIdentifier">{</span> <span class="synIdentifier">this</span>.state.lat <span class="synIdentifier">}</span>
        &lt;/div&gt; 
      )
    <span class="synIdentifier">}</span>

    <span class="synStatement">return</span> (
      &lt;div&gt;
        Loading
      &lt;/div&gt; 
    )
  <span class="synIdentifier">}</span>
</pre>


<p><br/></p>

<h3 id="SECTION6-ライフサイクルについて">SECTION6 ライフサイクルについて</h3>

<p>クラスコンポーネントのライフサイクについて。<br/>
Vue.jsでいう<code>created</code>とか<code>mounted</code>とかのやつ。</p>

<p>ライフサイクルメソッドとざっくり用途はこんなかんじ。</p>

<ul>
<li>constructor :ステートの初期設定</li>
<li>redner：jsxの記述</li>
<li>componentDidMount：データをとってきて設定するとか</li>
<li>componentDidUpdate：描画後にユーザーのアクションによってデータを取得するとか</li>
<li>componentWillUnmount：お片づけてきな</li>
</ul>


<p><code>constructor</code>でAPIを呼んでデータを呼ぶのは間違ってはないんだけど、お作法という点で、<code>componentDidMount</code>でやったほうがいいとのこと。</p>

<p>他にも、ライフサイクルメソッドがあるんだけど、使う機会はあまりないので、一旦置いておく。</p>

<p><br/></p>

<p>コンスタントでステートを定義する際には、こう書いてたけど</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>  constructor(props) <span class="synIdentifier">{</span>
    <span class="synStatement">super</span>(props)
    <span class="synIdentifier">this</span>.state = <span class="synIdentifier">{</span>
      lat: <span class="synStatement">null</span>,
      errorMessage: <span class="synConstant">''</span>
    <span class="synIdentifier">}</span>
  <span class="synIdentifier">}</span>
</pre>


<p><br/></p>

<p>実は、コンスラクタを切らなくても、クラス内にstateを書くだけでいいとのこと。</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>  state = <span class="synIdentifier">{</span> 
    lat: <span class="synStatement">null</span>,
    errorMessage: <span class="synConstant">''</span>
  <span class="synIdentifier">}</span>
</pre>


<p>Babel公式サイトで、簡単な書き方でコンパイル後のソースをみてみると、当初のコードと同様の結果になることがわかる。 おそろしい。</p>

<p>あと、以前のセクションでrednerの内容を一部だけ変更したい場合は、どうすればいいんだろうなんて思ってたけども、単純に関数として切り出せばいいだけだった。</p>

<pre class="code" data-lang="" data-unlink>  renderContent() {
    if(this.state.errorMessage &amp;&amp; !this.state.lat) {
      return (
        &lt;div&gt;
          error: { this.state.errorMessage}
        &lt;/div&gt; 
      )
    }

    if(!this.state.errorMessage &amp;&amp; this.state.lat) {
      return (
        &lt;SeasonDisplay lat={ this.state.lat } /&gt;
      )
    }

    return (
      &lt;Spinner message=&#34;Please accept location request&#34; /&gt;
    )
  }

  render() {
    return (
      &lt;div&gt;
        { this.renderContent() }
      &lt;/div&gt;
    )
  }</pre>


<p>Vue.jsをから入ると、<code>v-if</code>とかが用意されているので、思考停止してた。<br/>
このへんでようやくVue.jsはフレームワークで、Reactはライブラリだよという意味がなんとなくわかる。</p>

<p><br/></p>

<h3 id="SECTION7-イベントを学ぶ">SECTION7 イベントを学ぶ</h3>

<p>イベントを学ぶ。</p>

<p>inputタグにonChangeを書いてメソッド名を指定するだけ。</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">class</span> SearchBar <span class="synStatement">extends</span> React.Component <span class="synIdentifier">{</span>
  onInputChange(e) <span class="synIdentifier">{</span>
    console.log(<span class="synConstant">'Change'</span>)
  <span class="synIdentifier">}</span>

  render() <span class="synIdentifier">{</span>
    <span class="synStatement">return</span> (
      &lt;div className=<span class="synConstant">&quot;ui segment&quot;</span>&gt;
        &lt;form className=<span class="synConstant">&quot;ui form&quot;</span>&gt;
          &lt;div className=<span class="synConstant">&quot;field&quot;</span>&gt;
            &lt;label&gt;Image Search&lt;/label&gt;
            &lt;input type=<span class="synConstant">&quot;text&quot;</span> onChange=<span class="synIdentifier">{</span> <span class="synIdentifier">this</span>.onInputChange <span class="synIdentifier">}</span>/&gt;
          &lt;/div&gt;
        &lt;/form&gt;
      &lt;/div&gt;
    )
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>
</pre>


<p><br/></p>

<p>ふと、そもそもonChangeってなんだっけって思って、基本的なコードを書いた。</p>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span><span class="synStatement">input</span><span class="synIdentifier"> </span><span class="synType">type</span><span class="synIdentifier">=</span><span class="synConstant">&quot;text&quot;</span><span class="synIdentifier"> </span><span class="synSpecial">onChange=&quot;test</span>()<span class="synSpecial">&quot;</span><span class="synIdentifier"> /&gt;</span>

<span class="synIdentifier">&lt;</span><span class="synStatement">script</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">function</span><span class="synSpecial"> test</span>()<span class="synSpecial"> </span><span class="synIdentifier">{</span>
<span class="synSpecial">console.log</span>(<span class="synConstant">'hello'</span>)
<span class="synIdentifier">}</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">script</span><span class="synIdentifier">&gt;</span>
</pre>


<p>changeイベントは、ブラウザ標準のイベントだから、基本的に上記のように使える。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fdeveloper.mozilla.org%2Fja%2Fdocs%2FWeb%2FEvents" title="イベントリファレンス" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://developer.mozilla.org/ja/docs/Web/Events">developer.mozilla.org</a></cite></p>

<p>※話がそれるけど、ピュアなjavascriptを使うのであれば、<code>addEventLisener</code>やDOMを取得してjavascript側でイベント定義するほうがHTMLと分離できるので、あんまりタグに書くべきではない。</p>

<p>ReactでonChageって書くとブラウザがそのまま解釈しているように思ったんだけど、違うみたい。</p>

<p>通常のonChangeはフォーカスが外れないと発生しないんだけど、jsxに書いたものって入力があるたびに発火してる。</p>

<p>また、jsxのonChangeに渡すものはcallbackとして関数を渡してる。</p>

<p>あんまりすらすらHTMLをかけるもんだから、ついつい忘れてしまうけど、jsxはHTMLそのものではないってことだよね。</p>

<p><br/></p>

<p>また、イベントハンドラも、ステートに値を設定するだけのシンプルなものであれば、関数として切り出さなくても直接書いちゃう。</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>            &lt;input type=<span class="synConstant">&quot;text&quot;</span> 
     　   value=<span class="synIdentifier">{this</span>.state.term<span class="synIdentifier">}</span>
            onChange=<span class="synIdentifier">{</span>e =&gt; 
            <span class="synIdentifier">this</span>.setState(<span class="synIdentifier">{</span> term: e.target.value <span class="synIdentifier">}</span>)<span class="synIdentifier">}</span>/&gt;
</pre>


<p><br/></p>

<p>かつて、HTMLとjavascriptは分離したほうがいいよねーという流れから、コンポーネントという考え方がでてきて、コンポーネント単位で管理できるなら、直接書いちゃった方が便利だよねという流れなのかしら。</p>

<p>あってるのかはさておき、こういう変化っておもしろいよね。</p>

<p><br/></p>

<p>また、このセクションでは、DOMにデータを持たせるんじゃなくってjavascriptのオブジェクト（ステート）として持たせようということも言ってた。</p>

<p>前もどっかで思ったんだけれども、昔からあるサーバサイドから入力結果とかをHTMLでまるっと返してくるようなシステムだと、Reactのステートみたいな考え方と相性がわるいのかなーなんて思う。</p>

<p><br/></p>

<h4 id="thisについて">thisについて</h4>

<p>javascriptの基本的な話</p>

<p><code>onSubmit</code>イベントが実行される<code>onFormSubmit</code>メソッドの<code>this</code>がundefinedになる。</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>  render() <span class="synIdentifier">{</span>
    <span class="synStatement">return</span> (
      &lt;div className=<span class="synConstant">&quot;ui segment&quot;</span>&gt;
        &lt;form className=<span class="synConstant">&quot;ui form&quot;</span> onSubmit=<span class="synIdentifier">{this</span>.onFormSubmit<span class="synIdentifier">}</span>&gt;
          &lt;div className=<span class="synConstant">&quot;field&quot;</span>&gt;
            &lt;label&gt;Image Search&lt;/label&gt;
            &lt;input type=<span class="synConstant">&quot;text&quot;</span> 
            value=<span class="synIdentifier">{this</span>.state.term<span class="synIdentifier">}</span>
            onChange=<span class="synIdentifier">{</span>e =&gt; 
            <span class="synIdentifier">this</span>.setState(<span class="synIdentifier">{</span> term: e.target.value <span class="synIdentifier">}</span>)<span class="synIdentifier">}</span>/&gt;
          &lt;/div&gt;
        &lt;/form&gt;
      &lt;/div&gt;
    )
  <span class="synIdentifier">}</span>


  onFormSubmit(e) <span class="synIdentifier">{</span>
    e.preventDefault()
    console.log(<span class="synIdentifier">this</span>)
  <span class="synIdentifier">}</span>
</pre>


<p>これは、<code>this</code>のが指定するものが、実行される文脈(コンテキスト)によってかわるから。</p>

<p><br/></p>

<p>講座では以下のような例をだした。</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synComment">//てきとうなクラス</span>
<span class="synStatement">class</span> human <span class="synIdentifier">{</span>
 setAge (age) <span class="synIdentifier">{</span>
    <span class="synIdentifier">this</span>.age = age
 <span class="synIdentifier">}</span>
  
  getAge() <span class="synIdentifier">{</span>
    <span class="synStatement">return</span> <span class="synIdentifier">this</span>.age
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>

<span class="synStatement">const</span> ayane = <span class="synStatement">new</span> human()
ayane.setAge(24)

<span class="synComment">// 24を取得できる</span>
ayane.getAge()

<span class="synComment">// メソッドを格納する</span>
<span class="synStatement">const</span>  getAgeFunc = ayane.getAge
<span class="synComment">// undefinedになる</span>
getAgeFunc()
</pre>


<p><code>human</code>クラスの<code>getAge'メソッドで使用している</code>this`が呼び出し元のオブジェクトによってかわっている。</p>

<p><code>onSubmit</code>から呼ばれる<code>onFormSubmit</code>のthisがundefinedになるのは、
だから、<code>onFormSubmit</code>を定義しているクラスから生成されたオブジェクトではなく、イベントリスナーが<code>onFormSubmit</code>を実行していると考えていいのかしら。</p>

<p>コンテキストによって、thisの参照先がかわるのは、こまるということであればthisを固定させる。</p>

<p>方法は2つ。</p>

<p>ES5でも使える<code>bind</code>メソッド。</p>

<p>ちょっと不思議だけれども、以下のようにコンスラクタで、メソッドにbind構文をつかったオブジェクトを<code>getAge</code>としてセットする。</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">class</span> human <span class="synIdentifier">{</span>
 constructor() <span class="synIdentifier">{</span>
   <span class="synComment">//bindさせた関数をセット</span>
   <span class="synIdentifier">this</span>.getAge = <span class="synIdentifier">this</span>.getAge.bind(<span class="synIdentifier">this</span>)
 <span class="synIdentifier">}</span>
 setAge (age) <span class="synIdentifier">{</span>
    <span class="synIdentifier">this</span>.age = age
 <span class="synIdentifier">}</span>
  
  getAge() <span class="synIdentifier">{</span>
    <span class="synStatement">return</span> <span class="synIdentifier">this</span>.age
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>
</pre>


<p><br/></p>

<p>もうひとつはES6から使えるアロー関数を使う。<br/>
getAgeにアロー関数を使ってる。</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synComment">//てきとうなクラス</span>
<span class="synStatement">class</span> human <span class="synIdentifier">{</span>
 setAge (age) <span class="synIdentifier">{</span>
    <span class="synIdentifier">this</span>.age = age
 <span class="synIdentifier">}</span>
  
  getAge = () =&gt; <span class="synIdentifier">{</span>
    <span class="synStatement">return</span> <span class="synIdentifier">this</span>.age
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>
</pre>


<p>これも不思議な気がしたんだけど、そもそもこの構文は、</p>

<pre class="code" data-lang="" data-unlink>  getAge() {
      return this.age
  }</pre>


<p>以下構文のショートハンドだから、アロー関数に置き換えるというのもしっくりくるような気もする？</p>

<pre class="code" data-lang="" data-unlink>  getAge: function () {
      return this.age
  }</pre>


<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fdeveloper.mozilla.org%2Fja%2Fdocs%2FWeb%2FJavaScript%2FReference%2FFunctions_and_function_scope%2FMethod_definitions" title="メソッド定義" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Functions_and_function_scope/Method_definitions">developer.mozilla.org</a></cite></p>

<p>とはいえ、classの中にfunction付きのメソッドを定義するとエラーになるのはなぜなのかしら。<br/>
このへんがいまいちわからない。</p>

<p><br/></p>

<p>冒頭のReactに戻ると、こう書いてしまえばいい。</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>  onFormSubmit(e) <span class="synIdentifier">{</span>
    e.preventDefault()
    console.log(<span class="synIdentifier">this</span>)
  <span class="synIdentifier">}</span>


  render() <span class="synIdentifier">{</span>
    <span class="synStatement">return</span> (
      &lt;div className=<span class="synConstant">&quot;ui segment&quot;</span>&gt;
        &lt;form className=<span class="synConstant">&quot;ui form&quot;</span> onSubmit=<span class="synIdentifier">{</span> e =&gt; <span class="synIdentifier">this</span>.onFormSubmit(e) <span class="synIdentifier">}</span>&gt;
          &lt;div className=<span class="synConstant">&quot;field&quot;</span>&gt;
            &lt;label&gt;Image Search&lt;/label&gt;
            &lt;input type=<span class="synConstant">&quot;text&quot;</span> 
            value=<span class="synIdentifier">{this</span>.state.term<span class="synIdentifier">}</span>
            onChange=<span class="synIdentifier">{</span>e =&gt; 
            <span class="synIdentifier">this</span>.setState(<span class="synIdentifier">{</span> term: e.target.value <span class="synIdentifier">}</span>)<span class="synIdentifier">}</span>/&gt;
          &lt;/div&gt;
        &lt;/form&gt;
      &lt;/div&gt;
    )
  <span class="synIdentifier">}</span>
</pre>


<p>お、アロー関数使ったんだな、でおしまいかとおもいきや冷静に考えるとイベントリスナーが実行する関数そのものを変更してる。</p>

<p>こういうのみると全然javascriptのことわかってないなぁって思う。</p>

-----
--------
AUTHOR: konoemario
TITLE: 自分のためのApache設定メモ
BASENAME: 2018/12/11/202156
STATUS: Draft
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 12/11/2018 20:21:56
-----
BODY:
<h1>.htaccessとは</h1>

<p>あとで書く</p>

<h1>ブラウザの言語に応じてリダイレクトしたい</h1>

<p>調べればいくらでもでてくるけど、毎回わけわかんねえってなるので。</p>

<p><b>.htaccess</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink><span class="synStatement">&lt;</span>IfModule mod_rewrite.c<span class="synStatement">&gt;</span>
RewriteEngine On
RewriteBase /
<span class="synComment"># ドメイン名のみ　or ドメイン名/の場合、リダイレクト</span>

RewriteCond  %<span class="synSpecial">{</span>HTTP:Accept-Language<span class="synSpecial">}</span> ^en <span class="synStatement">[</span>NC<span class="synStatement">]</span>
RewriteRule ^$ jp-en/ <span class="synStatement">[</span>R<span class="synStatement">=</span><span class="synConstant">301</span><span class="synStatement">]</span>

RewriteCond  %<span class="synSpecial">{</span>HTTP:Accept-Language<span class="synSpecial">}</span> ^zh <span class="synStatement">[</span>NC<span class="synStatement">]</span>
RewriteRule ^$ jp-zh/ <span class="synStatement">[</span>R<span class="synStatement">=</span><span class="synConstant">301</span><span class="synStatement">]</span>

RewriteRule ^$ jp-ja/ <span class="synStatement">[</span>R<span class="synStatement">=</span><span class="synConstant">301</span><span class="synStatement">]</span>
<span class="synStatement">&lt;</span>/IfModule<span class="synStatement">&gt;</span>
</pre>


<ul>
<li><code>%{HTTP:Accept-Language}</code>でApacheがリクエストヘッダから読み込んだ変数を参照できる。</li>
</ul>


<p>他にどんな変数があるかはぐぐってみよう。きっとリクエストヘッダに書いてあるような情報は大抵あるはず。</p>

<ul>
<li>RewriteRule
こんな感じにかける。<code>RewriteCond</code>が直前にあるけど、一旦置いといていい。</li>
</ul>


<p><code>RewriteRule</code>だけで、条件にあてはまったら書き換え内容を実行する、となる。</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>RewriteRule  <span class="synStatement">[</span>条件<span class="synStatement">]</span> <span class="synStatement">[</span>書き換え内容<span class="synStatement">]</span> <span class="synStatement">[</span>オプション<span class="synStatement">]</span>
</pre>


<p>今回のケースでは、正規表現になっている。先頭<code>^</code>と行末<code>$</code>という指定のコンボで、なんぞとなるんだけれども、これはなんも値がないっていう意味になる。</p>

<p>なんも値がない、つまりドメイン名が指定された場合、と考えちゃう。<br/>
※www.hogehoge/ でアクセスすると、<code>/</code>スラッシュが入ってくんじゃないの？と思うが、.htaccess内ではドメイン直下のスラッシュは勝手に消されるらしい。</p>

<p>書く場所によって違うという恐ろしいこ。</p>

<p>※素敵な記事<br/>
<a href="https://weblabo.oscasierra.net/apache-rewrite-base/">Apache&#x306E;Rewrite&#x3092;&#x8A2D;&#x5B9A;&#x3059;&#x308B;&#x524D;&#x306B;&#x77E5;&#x3063;&#x3066;&#x304A;&#x304F;&#x3079;&#x304D;&#x3053;&#x3068; | WEB ARCH LABO</a></p>

-----
--------
AUTHOR: konoemario
TITLE: HTTP/2をApacheで設定してみる
BASENAME: 2018/12/04/193134
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 12/04/2018 19:31:34
CATEGORY: AWS
CATEGORY: HTTP
CATEGORY: プログラム
-----
BODY:
<p>HTTP2まわりでの設定を行ったのでメモ。</p>

<h1 id="本題">本題</h1>

<ul class="table-of-contents">
    <li><a href="#本題">本題</a></li>
    <li><a href="#HTTP2ってなに">HTTP2ってなに？</a><ul>
            <li><a href="#わたしのHTTP11">わたしのHTTP/1.1</a></li>
            <li><a href="#わたしのHTTP2">わたしのHTTP/2</a></li>
        </ul>
    </li>
    <li><a href="#HTTP2を導入する">HTTP/2を導入する</a><ul>
            <li><a href="#クライアント側curlの準備">クライアント側：curlの準備</a></li>
            <li><a href="#サーバー側の準備-Apache">サーバー側の準備: Apache</a></li>
            <li><a href="#リクエストの内容を確認するHTTP">リクエストの内容を確認する(HTTP)</a></li>
            <li><a href="#リクエストの内容を確認するHTTPS">リクエストの内容を確認する(HTTPS)①</a><ul>
                    <li><a href="#自己証明書の用意">自己証明書の用意</a></li>
                </ul>
            </li>
            <li><a href="#リクエストの内容を確認するHTTPS-1">リクエストの内容を確認する(HTTPS)②</a></li>
            <li><a href="#備忘">備忘</a></li>
        </ul>
    </li>
</ul>

<p><br/></p>

<h1 id="HTTP2ってなに">HTTP2ってなに？</h1>

<p>こちらの記事を読ませていただきました。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fknowledge.sakura.ad.jp%2F7734%2F" title="普及が進む「HTTP/2」の仕組みとメリットとは | さくらのナレッジ" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://knowledge.sakura.ad.jp/7734/">knowledge.sakura.ad.jp</a></cite></p>

<p><br/></p>

<h4 id="わたしのHTTP11">わたしのHTTP/1.1</h4>

<p>理解不足なので、いろいろ間違いはあるけれども、以下の理解。<br />
* ファイルが複数ある場合は、複数のコネクションをはる
* ファイルごとにリクエスト・レスポンスのやりとりが必須なので、リクエストヘッダ・レスポンスヘッダ等、コンテンツ以外の部分でのデータも多く発生してしまう。</p>

<p><br/></p>

<h4 id="わたしのHTTP2">わたしのHTTP/2</h4>

<p>理解不足なので(省略)
* ファイルが複数あっても1コネクション内でやりとりできる。(ストリームを使う)
* (なので)ファイルごとにリクエストヘッダ・レスポンスヘッダとか不要になる。</p>

<p>つまり、HTTP/2のほうが、パフォーマンスに優れる！</p>

<p><br/></p>

<h1 id="HTTP2を導入する">HTTP/2を導入する</h1>

<p>導入するまえに、クライアント(ブラウザ)とサーバのやりとりを。</p>

<ul>
<li>クライアント（ブラウザ）側がHTTP/2のやり方でいけるぜ！とサーバに連絡する。</li>
<li>サーバー(Apache、Nginx等)が対応していれば、HTTP/2でいくか！と応答する</li>
<li>サーバー(Apache、Nginx等)が対応してなければ、HTTP/2って何よ？HTTP/1.1でやるよと応答する</li>
</ul>


<p>こんなイメージ。</p>

<p>クライアント(ブラウザ側)は、Wikiに書いてある通り。(大抵は対応している)<br />
<a href="https://ja.wikipedia.org/wiki/HTTP/2">HTTP/2 - Wikipedia</a></p>

<p>ただ、ブラウザはHTTPSでしか対応していないみたい。</p>

<p>サーバー側も、上記Wikiに書いてある通り。</p>

<p><br/></p>

<h2 id="クライアント側curlの準備">クライアント側：curlの準備</h2>

<p>以降では、クライアント側にブラウザではなくcurlを使って検証します。</p>

<p>curlがHTTP/2に対応しているかは以下の記事を参考にさせていただきました。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fqiita.com%2Fmasakielastic%2Fitems%2Ff563437c44b0d4c04f87" title="curl エクステンションで HTTP/2 リクエストを送信する - Qiita" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://qiita.com/masakielastic/items/f563437c44b0d4c04f87">qiita.com</a></cite></p>

<p><br/></p>

<h2 id="サーバー側の準備-Apache">サーバー側の準備: Apache</h2>

<p>サーバー側はAmazonLinux2の環境を用意し、Apacheを使うことにします。</p>

<p><b>Apacheのインストール</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ sudo yum install <span class="synSpecial">-y</span> httpd
$ httpd <span class="synSpecial">-v</span>
Server version: Apache/<span class="synConstant">2</span>.<span class="synConstant">4</span>.<span class="synConstant">34</span> <span class="synPreProc">()</span>
Server built:   Sep  <span class="synConstant">1</span> <span class="synConstant">2018</span> 05:35:00
$ sudo systemctl <span class="synStatement">start</span> httpd
</pre>


<p><br/></p>

<p>Apacheの初期ページでもいいんだけれども、初期ページのHTTPステータスコードが403を返して不安になるので、別途用意します。</p>

<p><b>適当なページをApacheのドキュメントルート配下に作成</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ sudo vim index.html
</pre>


<p>さて、ApacheでHTTP/2を有効にするには、<code>mod_http2</code>というモジュールが必要になるとのことですが、AmazonLinux2のリポジトリにあるApacheに、こちらのモジュールが既にありそうです。</p>

<p><br/>
<b>Apacheのモジュール確認</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ httpd <span class="synSpecial">-M</span>|<span class="synStatement">grep</span> http2_module
 http2_module <span class="synPreProc">(</span><span class="synSpecial">shared</span><span class="synPreProc">)</span>
 proxy_http2_module <span class="synPreProc">(</span><span class="synSpecial">shared</span><span class="synPreProc">)</span>
</pre>


<p><br/></p>

<p>以下のconfファイルで読み込んでるみたいでした。</p>

<p><b/>/etc/httpd/conf.modules.d/10-h2.conf</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>LoadModule http2_module modules/mod_http2.so
</pre>


<p>また、<code>httpd.conf</code>についてもデフォルトで以下の設定が記載されていました。</p>

<p><b>httpd.conf</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink><span class="synComment"># Enable HTTP/2 by default</span>
<span class="synComment">#</span>
<span class="synComment"># https://httpd.apache.org/docs/2.4/mod/core.html#protocols</span>

<span class="synStatement">&lt;</span>IfModule mod_http2.c<span class="synStatement">&gt;</span>
    LogLevel http2:debug
    Protocols h2 h2c http/<span class="synConstant">1</span>.<span class="synConstant">1</span>
<span class="synStatement">&lt;</span>/IfModule<span class="synStatement">&gt;</span>
</pre>


<p><br/></p>

<h2 id="リクエストの内容を確認するHTTP">リクエストの内容を確認する(HTTP)</h2>

<p>さっそく、リクエストを投げてみます。</p>

<p>シンプルに、EC2内で<code>localhost</code>に対してリクエストを行います。</p>

<p><b>curlでリクエスト</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ curl localhost <span class="synSpecial">-vso</span> /dev/null <span class="synSpecial">--http2</span>
</pre>


<ul>
<li>-v: verboseの略、詳細なログがでる</li>
<li>-s: 進捗を非表示に</li>
<li>-o: body部分の出力先を /dev/nullにする(ヘッダだけ表示の-Iオプションでもいいのかな)</li>
</ul>


<p><br/></p>

<p><b>curlでリクエストした結果</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ curl localhost <span class="synSpecial">-vso</span> /dev/null <span class="synSpecial">--http2</span>
* Rebuilt URL to: localhost/
*   Trying <span class="synConstant">127</span>.<span class="synConstant">0</span>.<span class="synConstant">0</span>.<span class="synConstant">1</span>...
* TCP_NODELAY set
* Connected to localhost <span class="synPreProc">(</span><span class="synConstant">127</span><span class="synSpecial">.</span><span class="synConstant">0</span><span class="synSpecial">.</span><span class="synConstant">0</span><span class="synSpecial">.</span><span class="synConstant">1</span><span class="synPreProc">)</span> port <span class="synConstant">80</span> <span class="synPreProc">(</span><span class="synComment">#0)</span>

<span class="synSpecial">---リクエストヘッダ</span>
<span class="synStatement">&gt;</span><span class="synSpecial"> GET / HTTP/</span><span class="synConstant">1</span><span class="synSpecial">.</span><span class="synConstant">1</span>
<span class="synStatement">&gt;</span><span class="synSpecial"> Host: localhost</span>
<span class="synStatement">&gt;</span><span class="synSpecial"> User-Agent: curl/</span><span class="synConstant">7</span><span class="synSpecial">.</span><span class="synConstant">55</span><span class="synSpecial">.</span><span class="synConstant">1</span>
<span class="synStatement">&gt;</span><span class="synSpecial"> Accept: */*</span>
<span class="synStatement">&gt;</span><span class="synSpecial"> Connection: Upgrade, HTTP2-Settings</span>
<span class="synStatement">&gt;</span><span class="synSpecial"> Upgrade: h2c</span>
<span class="synStatement">&gt;</span><span class="synSpecial"> HTTP2-Settings: AAMAAABkAARAAAAAAAIAAAAA</span>
<span class="synStatement">&gt;</span>

<span class="synSpecial">---レスポンスヘッダ</span>
<span class="synStatement">&lt;</span><span class="synSpecial"> HTTP/</span><span class="synConstant">1</span><span class="synSpecial">.</span><span class="synConstant">1</span><span class="synSpecial"> </span><span class="synConstant">200</span><span class="synSpecial"> OK</span>
<span class="synStatement">&lt;</span><span class="synSpecial"> Date: Tue, </span><span class="synConstant">04</span><span class="synSpecial"> Dec </span><span class="synConstant">2018</span><span class="synSpecial"> 02:01:45 GMT</span>
<span class="synStatement">&lt;</span><span class="synSpecial"> Server: Apache/</span><span class="synConstant">2</span><span class="synSpecial">.</span><span class="synConstant">4</span><span class="synSpecial">.</span><span class="synConstant">34</span><span class="synSpecial"> </span><span class="synPreProc">()</span>
<span class="synStatement">&lt;</span><span class="synSpecial"> Last-Modified: Tue, </span><span class="synConstant">04</span><span class="synSpecial"> Dec </span><span class="synConstant">2018</span><span class="synSpecial"> 01:56:59 GMT</span>
<span class="synStatement">&lt;</span><span class="synSpecial"> ETag: </span><span class="synStatement">&quot;</span><span class="synConstant">a-57c2894b5f659</span><span class="synStatement">&quot;</span>
<span class="synStatement">&lt;</span><span class="synSpecial"> Accept-Ranges: bytes</span>
<span class="synStatement">&lt;</span><span class="synSpecial"> Content-Length: </span><span class="synConstant">10</span>
<span class="synStatement">&lt;</span><span class="synSpecial"> Content-Type: text/html</span><span class="synStatement">;</span><span class="synSpecial"> </span><span class="synIdentifier">charset</span>=<span class="synSpecial">UTF-8</span>
<span class="synStatement">&lt;</span>
</pre>


<p>あれー、レスポンスヘッダは、HTTP/1.1のままだ、、、</p>

<p>ということで、いろいろ試行錯誤して、悩んでいたところ、以下の記事に従い、Log設定を見直したところ</p>

<p><a href="https://icing.github.io/mod_h2/howto.html">how to h2 in apache</a></p>

<p><b>Apacheのログ</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink><span class="synStatement">[</span>http2:warn<span class="synStatement">]</span> <span class="synStatement">[</span>pid <span class="synConstant">1354</span><span class="synStatement">]</span> AH10034: The mpm module <span class="synPreProc">(</span><span class="synSpecial">prefork.c</span><span class="synPreProc">)</span> is not supported by mod_http2. The mpm determines how things are processed <span class="synError">in</span> your server. HTTP/<span class="synConstant">2</span> has more demands <span class="synError">in</span> this regard and the currently selected mpm will just not <span class="synStatement">do</span>. This is an advisory warning. Your server will <span class="synStatement">continue</span> to work, but the HTTP/<span class="synConstant">2</span> protocol will be inactive.
</pre>


<p>Apacheのプリフォーク型だとHTTP/2対応してねえよ！とのメッセージが。</p>

<p>なので、ApacheのMPMの設定をイベントに変更する。</p>

<p><b>/etc/httpd/conf.modules.d</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink><span class="synComment">#LoadModule mpm_prefork_module modules/mod_mpm_prefork.so</span>
LoadModule mpm_event_module modules/mod_mpm_event.so
</pre>


<p>Apache再起動後に試してみると、</p>

<p><b>再度リクエストを投げる<b/></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ curl <span class="synSpecial">-vso</span> /dev/null http://localhost <span class="synSpecial">--http2</span>
* Rebuilt URL to: http://localhost/
*   Trying <span class="synConstant">127</span>.<span class="synConstant">0</span>.<span class="synConstant">0</span>.<span class="synConstant">1</span>...
* TCP_NODELAY set
* Connected to localhost <span class="synPreProc">(</span><span class="synConstant">127</span><span class="synSpecial">.</span><span class="synConstant">0</span><span class="synSpecial">.</span><span class="synConstant">0</span><span class="synSpecial">.</span><span class="synConstant">1</span><span class="synPreProc">)</span> port <span class="synConstant">80</span> <span class="synPreProc">(</span><span class="synComment">#0)</span>

<span class="synSpecial">--リクエストヘッダ</span>
<span class="synStatement">&gt;</span><span class="synSpecial"> GET / HTTP/</span><span class="synConstant">1</span><span class="synSpecial">.</span><span class="synConstant">1</span>
<span class="synStatement">&gt;</span><span class="synSpecial"> Host: localhost</span>
<span class="synStatement">&gt;</span><span class="synSpecial"> User-Agent: curl/</span><span class="synConstant">7</span><span class="synSpecial">.</span><span class="synConstant">55</span><span class="synSpecial">.</span><span class="synConstant">1</span>
<span class="synStatement">&gt;</span><span class="synSpecial"> Accept: */*</span>
<span class="synStatement">&gt;</span><span class="synSpecial"> Connection: Upgrade, HTTP2-Settings</span>
<span class="synStatement">&gt;</span><span class="synSpecial"> Upgrade: h2c</span>
<span class="synStatement">&gt;</span><span class="synSpecial"> HTTP2-Settings: AAMAAABkAARAAAAAAAIAAAAA</span>
<span class="synStatement">&gt;</span>

<span class="synSpecial">---レスポンスヘッダ</span>
<span class="synStatement">&lt;</span><span class="synSpecial"> HTTP/</span><span class="synConstant">1</span><span class="synSpecial">.</span><span class="synConstant">1</span><span class="synSpecial"> </span><span class="synConstant">101</span><span class="synSpecial"> Switching Protocols</span>
<span class="synStatement">&lt;</span><span class="synSpecial"> Upgrade: h2c</span>
<span class="synStatement">&lt;</span><span class="synSpecial"> Connection: Upgrade</span>
<span class="synSpecial">* Received </span><span class="synConstant">101</span>
<span class="synSpecial">* Using HTTP2, server supports multi-use</span>
<span class="synSpecial">* Connection state changed </span><span class="synPreProc">(</span><span class="synSpecial">HTTP/</span><span class="synConstant">2</span><span class="synSpecial"> confirmed</span><span class="synPreProc">)</span>
<span class="synSpecial">* Copying HTTP/</span><span class="synConstant">2</span><span class="synSpecial"> data in stream buffer to connection buffer after upgrade: </span><span class="synIdentifier">len</span>=<span class="synConstant">28</span>
<span class="synSpecial">* Connection state changed </span><span class="synPreProc">(</span><span class="synSpecial">MAX_CONCURRENT_STREAMS updated</span><span class="synPreProc">)</span><span class="synStatement">!</span>
<span class="synStatement">&lt;</span><span class="synSpecial"> HTTP/</span><span class="synConstant">2</span><span class="synSpecial"> </span><span class="synConstant">200</span>
<span class="synStatement">&lt;</span><span class="synSpecial"> date: Sun, </span><span class="synConstant">00</span><span class="synSpecial"> Jan </span><span class="synConstant">1900</span><span class="synSpecial"> 00:00:00 GMT</span>
<span class="synStatement">&lt;</span><span class="synSpecial"> server: Apache/</span><span class="synConstant">2</span><span class="synSpecial">.</span><span class="synConstant">4</span><span class="synSpecial">.</span><span class="synConstant">34</span><span class="synSpecial"> </span><span class="synPreProc">()</span><span class="synSpecial"> OpenSSL/</span><span class="synConstant">1</span><span class="synSpecial">.</span><span class="synConstant">0</span><span class="synSpecial">.2k-fips</span>
<span class="synStatement">&lt;</span><span class="synSpecial"> last-modified: Tue, </span><span class="synConstant">04</span><span class="synSpecial"> Dec </span><span class="synConstant">2018</span><span class="synSpecial"> 02:09:45 GMT</span>
<span class="synStatement">&lt;</span><span class="synSpecial"> etag: W/</span><span class="synStatement">&quot;</span><span class="synConstant">175-57c28c25dc213</span><span class="synStatement">&quot;</span>
<span class="synStatement">&lt;</span><span class="synSpecial"> accept-ranges: bytes</span>
<span class="synStatement">&lt;</span><span class="synSpecial"> content-length: </span><span class="synConstant">373</span>
<span class="synStatement">&lt;</span><span class="synSpecial"> content-type: text/html</span><span class="synStatement">;</span><span class="synSpecial"> </span><span class="synIdentifier">charset</span>=<span class="synSpecial">UTF-8</span>
<span class="synStatement">&lt;</span>
<span class="synSpecial">{ [</span><span class="synConstant">373</span><span class="synSpecial"> bytes data]</span>
<span class="synSpecial">* Connection </span><span class="synComment">#0 to host localhost left intact</span>
</pre>


<p>無事、HTTP/2.0でかえってきた！
ちなみに<code>h2c</code>は<code>HTTP/2 over TCP</code>の略語で、上記のリクエストはhttpsではなくhttpプロトコルでリクエストを投げてるので、HTTP/2のh2cの方式で応答しているってことなのかな。</p>

<p><br/></p>

<h2 id="リクエストの内容を確認するHTTPS">リクエストの内容を確認する(HTTPS)①</h2>

<p>せっかくなので、HTTPS経由でも試してみる。</p>

<p>まずは、ApacheがTLSで受け付けるように設定する。<br />
設定にあたってはこちらを参考にした。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fdocs.aws.amazon.com%2Fja_jp%2FAWSEC2%2Flatest%2FUserGuide%2FSSL-on-an-instance.html" title="チュートリアル: Amazon Linux 2 に SSL/TLS を設定する - Amazon Elastic Compute Cloud" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://docs.aws.amazon.com/ja_jp/AWSEC2/latest/UserGuide/SSL-on-an-instance.html">docs.aws.amazon.com</a></cite></p>

<p><b>mod_sslの導入</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ httpd <span class="synSpecial">-M</span>|<span class="synStatement">grep</span> mod_ssl
$ sudo yum install <span class="synSpecial">-y</span> mod_ssl
</pre>


<p><br/>
上記のAWSのドキュメントには、自己証明書が用意されているっぽい記述があるんだけれどもなかった。
なのでまずは、自己証明書を用意することにする。</p>

<p><br/></p>

<h3 id="自己証明書の用意">自己証明書の用意</h3>

<p>以下の記事を参考にさせていただきました。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fakiyoko.hatenablog.jp%2Fentry%2F2015%2F05%2F24%2F234148" title="AWS で自己署名証明書を使ってみる - akiyoko blog" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://akiyoko.hatenablog.jp/entry/2015/05/24/234148">akiyoko.hatenablog.jp</a></cite></p>

<p><b>自己証明書の作成</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ sudo su -

<span class="synComment"># cd /etc/httpd/conf</span>

//鍵と証明書の作成
<span class="synComment">#openssl genrsa 2048 &gt; server.key</span>
<span class="synComment"># openssl req -new -key server.key &gt; server.csr</span>
<span class="synComment"># openssl x509 -days 3650 -req -signkey server.key &lt; server.csr &gt; server.crt</span>

//鍵と証明書を置くディレクトリを別途作成して配置する
<span class="synComment"># mkdir /etc/httpd/conf/ssl.crt</span>
<span class="synComment"># mkdir /etc/httpd/conf/ssl.key</span>
<span class="synComment"># mv server.crt  /etc/httpd/conf/ssl.crt</span>
<span class="synComment"># mv server.key /etc/httpd/conf/ssl.key</span>
</pre>


<p><br/></p>

<p><code>mod_ssl</code>をインストールしたら、`ssl.conf'ができてたのでこちらを編集</p>

<p><b>Apacheの設定変更</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>sudo vim /etc/httpd/conf.d/ssl.conf
</pre>


<p><br/></p>

<p><b>鍵と証明書のパスを修正</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>SSLCertificateFile /etc/httpd/conf/ssl.crt/server.crt
SSLCertificateKeyFile /etc/httpd/conf/ssl.key/server.key
</pre>


<p><br/></p>

<p>以上に設定をし、Apacheを再起動する。</p>

<p><br/></p>

<h2 id="リクエストの内容を確認するHTTPS-1">リクエストの内容を確認する(HTTPS)②</h2>

<p>証明書を導入後にhttpsをつけてリクエストしてみる。</p>

<p><b>リクエスト</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ curl <span class="synSpecial">--insecure</span> <span class="synSpecial">-vso</span> /dev/null https://localhost <span class="synSpecial">--http2</span>
</pre>


<ul>
<li>--insecure: オレオレ証明書だけど大丈夫だよ！っていうオプション</li>
</ul>


<p><br/></p>

<p><b>リクエストの結果</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ curl <span class="synSpecial">--insecure</span> <span class="synSpecial">-vso</span> /dev/null https://localhost <span class="synSpecial">--http2</span>
* Rebuilt URL to: https://localhost/
*   Trying <span class="synConstant">127</span>.<span class="synConstant">0</span>.<span class="synConstant">0</span>.<span class="synConstant">1</span>...
* TCP_NODELAY set
* Connected to localhost <span class="synPreProc">(</span><span class="synConstant">127</span><span class="synSpecial">.</span><span class="synConstant">0</span><span class="synSpecial">.</span><span class="synConstant">0</span><span class="synSpecial">.</span><span class="synConstant">1</span><span class="synPreProc">)</span> port <span class="synConstant">443</span> <span class="synPreProc">(</span><span class="synComment">#0)</span>
<span class="synSpecial">* ALPN, offering h2</span>
<span class="synSpecial">* ALPN, offering http/</span><span class="synConstant">1</span><span class="synSpecial">.</span><span class="synConstant">1</span>
<span class="synSpecial">* Cipher selection: ALL:</span><span class="synStatement">!</span><span class="synSpecial">EXPORT:</span><span class="synStatement">!</span><span class="synSpecial">EXPORT40:</span><span class="synStatement">!</span><span class="synSpecial">EXPORT56:</span><span class="synStatement">!</span><span class="synSpecial">aNULL:</span><span class="synStatement">!</span><span class="synSpecial">LOW:</span><span class="synStatement">!</span><span class="synSpecial">RC4:@STRENGTH</span>
<span class="synSpecial">* successfully set certificate verify locations:</span>
<span class="synSpecial">*   CAfile: /etc/pki/tls/certs/ca-bundle.crt</span>
<span class="synSpecial">  CApath: none</span>
<span class="synSpecial">* TLSv1.</span><span class="synConstant">2</span><span class="synSpecial"> </span><span class="synPreProc">(</span><span class="synSpecial">OUT</span><span class="synPreProc">)</span><span class="synSpecial">, TLS header, Certificate Status </span><span class="synPreProc">(</span><span class="synConstant">22</span><span class="synPreProc">)</span><span class="synSpecial">:</span>
<span class="synSpecial">} [</span><span class="synConstant">5</span><span class="synSpecial"> bytes data]</span>
<span class="synSpecial">* TLSv1.</span><span class="synConstant">2</span><span class="synSpecial"> </span><span class="synPreProc">(</span><span class="synSpecial">OUT</span><span class="synPreProc">)</span><span class="synSpecial">, TLS handshake, Client hello </span><span class="synPreProc">(</span><span class="synConstant">1</span><span class="synPreProc">)</span><span class="synSpecial">:</span>
<span class="synSpecial">} [</span><span class="synConstant">512</span><span class="synSpecial"> bytes data]</span>
<span class="synSpecial">* TLSv1.</span><span class="synConstant">2</span><span class="synSpecial"> </span><span class="synPreProc">(</span><span class="synSpecial">IN</span><span class="synPreProc">)</span><span class="synSpecial">, TLS handshake, Server hello </span><span class="synPreProc">(</span><span class="synConstant">2</span><span class="synPreProc">)</span><span class="synSpecial">:</span>
<span class="synSpecial">{ [</span><span class="synConstant">103</span><span class="synSpecial"> bytes data]</span>
<span class="synSpecial">* TLSv1.</span><span class="synConstant">2</span><span class="synSpecial"> </span><span class="synPreProc">(</span><span class="synSpecial">IN</span><span class="synPreProc">)</span><span class="synSpecial">, TLS handshake, Certificate </span><span class="synPreProc">(</span><span class="synConstant">11</span><span class="synPreProc">)</span><span class="synSpecial">:</span>
<span class="synSpecial">{ [</span><span class="synConstant">782</span><span class="synSpecial"> bytes data]</span>
<span class="synSpecial">* TLSv1.</span><span class="synConstant">2</span><span class="synSpecial"> </span><span class="synPreProc">(</span><span class="synSpecial">IN</span><span class="synPreProc">)</span><span class="synSpecial">, TLS handshake, Server key exchange </span><span class="synPreProc">(</span><span class="synConstant">12</span><span class="synPreProc">)</span><span class="synSpecial">:</span>
<span class="synSpecial">{ [</span><span class="synConstant">333</span><span class="synSpecial"> bytes data]</span>
<span class="synSpecial">* TLSv1.</span><span class="synConstant">2</span><span class="synSpecial"> </span><span class="synPreProc">(</span><span class="synSpecial">IN</span><span class="synPreProc">)</span><span class="synSpecial">, TLS handshake, Server finished </span><span class="synPreProc">(</span><span class="synConstant">14</span><span class="synPreProc">)</span><span class="synSpecial">:</span>
<span class="synSpecial">{ [</span><span class="synConstant">4</span><span class="synSpecial"> bytes data]</span>
<span class="synSpecial">* TLSv1.</span><span class="synConstant">2</span><span class="synSpecial"> </span><span class="synPreProc">(</span><span class="synSpecial">OUT</span><span class="synPreProc">)</span><span class="synSpecial">, TLS handshake, Client key exchange </span><span class="synPreProc">(</span><span class="synConstant">16</span><span class="synPreProc">)</span><span class="synSpecial">:</span>
<span class="synSpecial">} [</span><span class="synConstant">70</span><span class="synSpecial"> bytes data]</span>
<span class="synSpecial">* TLSv1.</span><span class="synConstant">2</span><span class="synSpecial"> </span><span class="synPreProc">(</span><span class="synSpecial">OUT</span><span class="synPreProc">)</span><span class="synSpecial">, TLS change cipher, Client hello </span><span class="synPreProc">(</span><span class="synConstant">1</span><span class="synPreProc">)</span><span class="synSpecial">:</span>
<span class="synSpecial">} [</span><span class="synConstant">1</span><span class="synSpecial"> bytes data]</span>
<span class="synSpecial">* TLSv1.</span><span class="synConstant">2</span><span class="synSpecial"> </span><span class="synPreProc">(</span><span class="synSpecial">OUT</span><span class="synPreProc">)</span><span class="synSpecial">, TLS handshake, Finished </span><span class="synPreProc">(</span><span class="synConstant">20</span><span class="synPreProc">)</span><span class="synSpecial">:</span>
<span class="synSpecial">} [</span><span class="synConstant">16</span><span class="synSpecial"> bytes data]</span>
<span class="synSpecial">* TLSv1.</span><span class="synConstant">2</span><span class="synSpecial"> </span><span class="synPreProc">(</span><span class="synSpecial">IN</span><span class="synPreProc">)</span><span class="synSpecial">, TLS change cipher, Client hello </span><span class="synPreProc">(</span><span class="synConstant">1</span><span class="synPreProc">)</span><span class="synSpecial">:</span>
<span class="synSpecial">{ [</span><span class="synConstant">1</span><span class="synSpecial"> bytes data]</span>
<span class="synSpecial">* TLSv1.</span><span class="synConstant">2</span><span class="synSpecial"> </span><span class="synPreProc">(</span><span class="synSpecial">IN</span><span class="synPreProc">)</span><span class="synSpecial">, TLS handshake, Finished </span><span class="synPreProc">(</span><span class="synConstant">20</span><span class="synPreProc">)</span><span class="synSpecial">:</span>
<span class="synSpecial">{ [</span><span class="synConstant">16</span><span class="synSpecial"> bytes data]</span>
<span class="synSpecial">* SSL connection using TLSv1.</span><span class="synConstant">2</span><span class="synSpecial"> / ECDHE-RSA-AES256-GCM-SHA384</span>
<span class="synSpecial">* ALPN, server accepted to use h2</span>
<span class="synSpecial">* Server certificate:</span>
<span class="synSpecial">*  subject: </span><span class="synIdentifier">C</span>=<span class="synSpecial">XX</span><span class="synStatement">;</span><span class="synSpecial"> </span><span class="synIdentifier">L</span>=<span class="synSpecial">Default City</span><span class="synStatement">;</span><span class="synSpecial"> </span><span class="synIdentifier">O</span>=<span class="synSpecial">Default Company Ltd</span>
<span class="synSpecial">*  start date: Dec  </span><span class="synConstant">4</span><span class="synSpecial"> 02:29:14 </span><span class="synConstant">2018</span><span class="synSpecial"> GMT</span>
<span class="synSpecial">*  expire date: Dec  </span><span class="synConstant">1</span><span class="synSpecial"> 02:29:14 </span><span class="synConstant">2028</span><span class="synSpecial"> GMT</span>
<span class="synSpecial">*  issuer: </span><span class="synIdentifier">C</span>=<span class="synSpecial">XX</span><span class="synStatement">;</span><span class="synSpecial"> </span><span class="synIdentifier">L</span>=<span class="synSpecial">Default City</span><span class="synStatement">;</span><span class="synSpecial"> </span><span class="synIdentifier">O</span>=<span class="synSpecial">Default Company Ltd</span>
<span class="synSpecial">*  SSL certificate verify result: self signed certificate </span><span class="synPreProc">(</span><span class="synConstant">18</span><span class="synPreProc">)</span><span class="synSpecial">, continuing anyway.</span>
<span class="synSpecial">* Using HTTP2, server supports multi-use</span>
<span class="synSpecial">* Connection state changed </span><span class="synPreProc">(</span><span class="synSpecial">HTTP/</span><span class="synConstant">2</span><span class="synSpecial"> confirmed</span><span class="synPreProc">)</span>
<span class="synSpecial">* Copying HTTP/</span><span class="synConstant">2</span><span class="synSpecial"> data in stream buffer to connection buffer after upgrade: </span><span class="synIdentifier">len</span>=<span class="synConstant">0</span>
<span class="synSpecial">} [</span><span class="synConstant">5</span><span class="synSpecial"> bytes data]</span>
<span class="synSpecial">* Using Stream ID: </span><span class="synConstant">1</span><span class="synSpecial"> </span><span class="synPreProc">(</span><span class="synSpecial">easy handle 0x19a3ea0</span><span class="synPreProc">)</span>
<span class="synSpecial">} [</span><span class="synConstant">5</span><span class="synSpecial"> bytes data]</span>
<span class="synStatement">&gt;</span><span class="synSpecial"> GET / HTTP/</span><span class="synConstant">2</span>
<span class="synStatement">&gt;</span><span class="synSpecial"> Host: localhost</span>
<span class="synStatement">&gt;</span><span class="synSpecial"> User-Agent: curl/</span><span class="synConstant">7</span><span class="synSpecial">.</span><span class="synConstant">55</span><span class="synSpecial">.</span><span class="synConstant">1</span>
<span class="synStatement">&gt;</span><span class="synSpecial"> Accept: */*</span>
<span class="synStatement">&gt;</span>
<span class="synSpecial">{ [</span><span class="synConstant">5</span><span class="synSpecial"> bytes data]</span>
<span class="synSpecial">* Connection state changed </span><span class="synPreProc">(</span><span class="synSpecial">MAX_CONCURRENT_STREAMS updated</span><span class="synPreProc">)</span><span class="synStatement">!</span>
<span class="synSpecial">} [</span><span class="synConstant">5</span><span class="synSpecial"> bytes data]</span>
<span class="synStatement">&lt;</span><span class="synSpecial"> HTTP/</span><span class="synConstant">2</span><span class="synSpecial"> </span><span class="synConstant">200</span>
<span class="synStatement">&lt;</span><span class="synSpecial"> date: Tue, </span><span class="synConstant">04</span><span class="synSpecial"> Dec </span><span class="synConstant">2018</span><span class="synSpecial"> 04:08:54 GMT</span>
<span class="synStatement">&lt;</span><span class="synSpecial"> server: Apache/</span><span class="synConstant">2</span><span class="synSpecial">.</span><span class="synConstant">4</span><span class="synSpecial">.</span><span class="synConstant">34</span><span class="synSpecial"> </span><span class="synPreProc">()</span><span class="synSpecial"> OpenSSL/</span><span class="synConstant">1</span><span class="synSpecial">.</span><span class="synConstant">0</span><span class="synSpecial">.2k-fips</span>
<span class="synStatement">&lt;</span><span class="synSpecial"> last-modified: Tue, </span><span class="synConstant">04</span><span class="synSpecial"> Dec </span><span class="synConstant">2018</span><span class="synSpecial"> 02:09:45 GMT</span>
<span class="synStatement">&lt;</span><span class="synSpecial"> etag: </span><span class="synStatement">&quot;</span><span class="synConstant">175-57c28c25dc213</span><span class="synStatement">&quot;</span>
<span class="synStatement">&lt;</span><span class="synSpecial"> accept-ranges: bytes</span>
<span class="synStatement">&lt;</span><span class="synSpecial"> content-length: </span><span class="synConstant">373</span>
<span class="synStatement">&lt;</span><span class="synSpecial"> content-type: text/html</span><span class="synStatement">;</span><span class="synSpecial"> </span><span class="synIdentifier">charset</span>=<span class="synSpecial">UTF-8</span>
</pre>


<p>TLSの分、やりとりが長いけれどもHTTP/2でかえってきた！</p>

<p><br/></p>

<h2 id="備忘">備忘</h2>

<p>AWSで、クライアント---①---ELB--②--EC2のときに、HTTP/2の通信はどうなってるんだろう。</p>

<p>①はHTTP/2.0っぽいんだけど、②は一体？</p>

<p>2018/12/5 ついき
ELBはリスナーとしてはHTTP/2対応してるけど、背後のEC2に接続するときはHTTP/1.1とのこと！
AWS のELBのドキュメントに書いてある。</p>

-----
--------
AUTHOR: konoemario
TITLE: 受託案件のWeb系の納品物ってビルド後のソースとソース一式、どっちを渡してる？
BASENAME: 2018/11/27/161355
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 11/27/2018 16:13:55
CATEGORY: プログラム
CATEGORY: javascript
IMAGE: https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20181122/20181122174429.png
-----
BODY:
<h1 id="前置き">前置き</h1>

<p>Web案件の受託開発をしていてふと思った疑問。</p>

<p>納品するときって、ソースコード一式 or Webpackでビルド後のソースのどっちを納品してますか？</p>

<p>大抵はソースコード一式を納品しているような気もするんだけれども、わりとビルド後のソースだけを納品してOKっていうパターンもあったりする。</p>

<p>これで問題になったことはそんない。<br/>
でも、たまに納品後にお客さん側でCSSやHTML、もしくはjavascriptをちょっと修正する、みたいなことがあったりする。</p>

<p>その際に、リソースをminifyしてたりすると、なんぞこれ！と言われてしまうわけです。</p>

<p>コンパイル型言語であれば、納品先でちょっと修正するなんていう発想はそもそもないんだろうけれども、javascriptのようなスクリプト言語だったり、HTML・CSSだったら、お客さん側でも、俺わかるから！って人が修正するみたいなケースがあるんじゃないかと思う。</p>

<p>そもそも、そっちで修正するケースなんて想定してねえよ！といったり、ではソースコード一式渡すんで、Node.jsいれてビルドしてね！！！って言うだけの話っちゃ話なんですが、なんでビルドなんかしてるのか説明しろ！といわれた場合に備え、ちゃんと答えられるようにしときたいと思った今日このごろ。</p>

<p><br/></p>

<h1 id="本題">本題</h1>

<p>ということで、やっぱりWebpackとかの話になる。<br/>
以前も↓の記事でぜんぜんわかねえという感想だけを書いた記事に引き続き再整理。<br/>
ちょっとわかってきた気がする。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fwww.tohuandkonsome.site%2Fentry%2F2018%2F07%2F13%2F182057" title="やっぱり、WebpackもBabelもよくわからない - 豆腐とコンソメ" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://www.tohuandkonsome.site/entry/2018/07/13/182057">www.tohuandkonsome.site</a></cite></p>

<ul class="table-of-contents">
    <li><a href="#前置き">前置き</a></li>
    <li><a href="#本題">本題</a><ul>
            <li><a href="#検証環境とメモ">検証環境とメモ</a></li>
        </ul>
    </li>
    <li><a href="#そもそもなんでビルドしてんの">そもそもなんでビルドしてんの？</a></li>
    <li><a href="#開発効率をあげるって">開発効率をあげるって？</a><ul>
            <li><a href="#機能ごとにファイルを分割するって">機能ごとにファイルを分割するって？</a><ul>
                    <li><a href="#さらに分割する">さらに分割する</a></li>
                    <li><a href="#ファイルを分割したけれども">ファイルを分割したけれども</a></li>
                    <li><a href="#importとexportを使う">importとexportを使う</a></li>
                    <li><a href="#結局どうすんのよ">結局どうすんのよ</a></li>
                </ul>
            </li>
        </ul>
    </li>
</ul>

<h4 id="検証環境とメモ">検証環境とメモ</h4>

<ul>
<li>Chromeで実行</li>
<li>webpack-dev-serverとhttp-serverで確認</li>
</ul>


<p><br/></p>

<h2 id="そもそもなんでビルドしてんの">そもそもなんでビルドしてんの？</h2>

<p>いろいろ考えたんですが、<strong>開発効率をあげるために、ビルドしてます</strong>ってことだと思う。</p>

<p><br/></p>

<h2 id="開発効率をあげるって">開発効率をあげるって？</h2>

<p>なんでビルドすると開発効率があがんの？って話です。</p>

<p>突き詰めると、このへんでしょうか。</p>

<ul>
<li>機能ごとにファイルを分割して管理したい。そのほうが開発作業がスムーズ。</li>
<li>ES6構文やTypeScriptを使って効率よくコードを書きたい。</li>
<li>使用したいフレームワーク・ライブラリがビルド前提。</li>
</ul>


<p>以降では、1点目のファイル分割に注力して記載することにします。<br/>
※他も整理しようかとおもったけれども、心が折れた。</p>

<p><br/></p>

<h3 id="機能ごとにファイルを分割するって">機能ごとにファイルを分割するって？</h3>

<p>さて、ここに簡単なHTML + javascriptを用意してみました。</p>

<p>以下の通り、ユーザー名を投稿するだけのシンプルなフォームです。<br/>
唯一の特徴があるとすると、ボタンを押したときに、ユーザー名が未入力だとエラーメッセージをクライアント側で出力しているぐらいです。</p>

<p><figure class="figure-image figure-image-fotolife" title="かんたんなフォーム"><div class="images-row mceNonEditable"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20181122/20181122174429.png" alt="f:id:konoemario:20181122174429p:plain" title="f:id:konoemario:20181122174429p:plain" class="hatena-fotolife" itemprop="image"></span><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20181122/20181122174452.png" alt="f:id:konoemario:20181122174452p:plain" title="f:id:konoemario:20181122174452p:plain" class="hatena-fotolife" itemprop="image"></span></div><figcaption>かんたんなフォーム</figcaption></figure></p>

<p><br/></p>

<p>実際のコードは以下の通りになります。</p>

<p><b>index.html</b></p>

<pre class="code lang-html" data-lang="html" data-unlink>  <span class="synIdentifier">&lt;</span><span class="synStatement">form</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;form&quot;</span><span class="synIdentifier"> </span><span class="synType">action</span><span class="synIdentifier">=</span><span class="synConstant">&quot;/hoge&quot;</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">'input'</span><span class="synIdentifier">&gt;</span>
      <span class="synIdentifier">&lt;</span><span class="synStatement">label</span><span class="synIdentifier"> </span><span class="synType">for</span><span class="synIdentifier">=</span><span class="synConstant">&quot;user-name&quot;</span><span class="synIdentifier">&gt;</span>ユーザー名<span class="synIdentifier">&lt;/</span><span class="synStatement">label</span><span class="synIdentifier">&gt;</span>
      <span class="synIdentifier">&lt;</span><span class="synStatement">input</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;user-name&quot;</span><span class="synIdentifier"> </span><span class="synType">type</span><span class="synIdentifier">=</span><span class="synConstant">&quot;text&quot;</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">'error'</span><span class="synIdentifier">&gt;</span>
      <span class="synIdentifier">&lt;</span><span class="synStatement">label</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;user-name-error&quot;</span><span class="synIdentifier"> </span><span class="synType">style</span><span class="synIdentifier">=</span><span class="synConstant">&quot;color: red&quot;</span><span class="synIdentifier">&gt;&lt;/</span><span class="synStatement">label</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">button</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;submit&quot;</span><span class="synIdentifier">&gt;</span>Submit<span class="synIdentifier">&lt;/</span><span class="synStatement">button</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;/</span><span class="synStatement">form</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">script</span><span class="synIdentifier">&gt;</span>
<span class="synSpecial">    </span><span class="synComment">//formのsubmitボタンを押したときのイベント</span>
<span class="synSpecial">    </span><span class="synStatement">document</span><span class="synSpecial">.getElementById</span>(<span class="synConstant">'form'</span>)<span class="synSpecial">.addEventListener</span>(<span class="synConstant">'submit'</span><span class="synSpecial">, </span><span class="synIdentifier">function</span>(<span class="synStatement">event</span>)<span class="synSpecial"> </span><span class="synIdentifier">{</span>
<span class="synSpecial">      </span><span class="synComment">//ユーザー名をとってきて</span>
<span class="synSpecial">      </span><span class="synIdentifier">var</span><span class="synSpecial"> userName = </span><span class="synStatement">document</span><span class="synSpecial">.getElementById</span>(<span class="synConstant">'user-name'</span>)<span class="synSpecial">.value</span>

<span class="synSpecial">      </span><span class="synComment">//ユーザー名がからっぽなら、エラーメッセージを出す</span>
<span class="synSpecial">      </span><span class="synStatement">if</span>(<span class="synSpecial">userName === </span><span class="synConstant">''</span>)<span class="synSpecial"> </span><span class="synIdentifier">{</span>
<span class="synSpecial">        </span><span class="synStatement">document</span><span class="synSpecial">.getElementById</span>(<span class="synConstant">'user-name-error'</span>)<span class="synSpecial">.innerHTML = </span><span class="synConstant">'ユーザーネームを入力してください'</span>
<span class="synSpecial">        </span><span class="synStatement">event</span><span class="synSpecial">.preventDefault</span>()
<span class="synSpecial">      </span><span class="synIdentifier">}</span>
<span class="synSpecial">    </span><span class="synIdentifier">}</span>)
<span class="synSpecial">  </span><span class="synIdentifier">&lt;/</span><span class="synStatement">script</span><span class="synIdentifier">&gt;</span>
</pre>


<p><br/></p>

<p>現在、ひとつのファイルにHTMLとjavascriptとが一緒になっています。<br/>
これぐらいの規模であれば、HTMLとjavascriptが一緒になってても特段問題ないのですが、</p>

<ul>
<li>ユーザー名だけではなく、生年月日やEメール等、入力項目が増えるたびにどんどんコードが増えていく</li>
<li>複数人で編集するときに`index.html'のコンフリクトが半端ない</li>
</ul>


<p>と問題が増えていくことが考えられます。</p>

<p>そもそもファイル内のコードが長いと、コード間を移動するのもめんどくさいし、差分も取りづらい、とデメリットがいっぱいありますよね。</p>

<p>なので、ファイルをHTMLとjavascriptをちゃんとわけることにします。</p>

<p><b>index.html</b></p>

<pre class="code lang-html" data-lang="html" data-unlink>  <span class="synIdentifier">&lt;</span><span class="synStatement">form</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;form&quot;</span><span class="synIdentifier"> </span><span class="synType">action</span><span class="synIdentifier">=</span><span class="synConstant">&quot;/hoge&quot;</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">'input'</span><span class="synIdentifier">&gt;</span>
      <span class="synIdentifier">&lt;</span><span class="synStatement">label</span><span class="synIdentifier"> </span><span class="synType">for</span><span class="synIdentifier">=</span><span class="synConstant">&quot;user-name&quot;</span><span class="synIdentifier">&gt;</span>ユーザー名<span class="synIdentifier">&lt;/</span><span class="synStatement">label</span><span class="synIdentifier">&gt;</span>
      <span class="synIdentifier">&lt;</span><span class="synStatement">input</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;user-name&quot;</span><span class="synIdentifier"> </span><span class="synType">type</span><span class="synIdentifier">=</span><span class="synConstant">&quot;text&quot;</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">'error'</span><span class="synIdentifier">&gt;</span>
      <span class="synIdentifier">&lt;</span><span class="synStatement">label</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;user-name-error&quot;</span><span class="synIdentifier"> </span><span class="synType">style</span><span class="synIdentifier">=</span><span class="synConstant">&quot;color: red&quot;</span><span class="synIdentifier">&gt;&lt;/</span><span class="synStatement">label</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">button</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;submit&quot;</span><span class="synIdentifier">&gt;</span>Submit<span class="synIdentifier">&lt;/</span><span class="synStatement">button</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;/</span><span class="synStatement">form</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">script</span><span class="synIdentifier"> </span><span class="synType">src</span><span class="synIdentifier">=</span><span class="synConstant">&quot;main.js&quot;</span><span class="synIdentifier">&gt;&lt;/</span><span class="synStatement">script</span><span class="synIdentifier">&gt;</span>
</pre>


<p><br/></p>

<p><b>main.js</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synComment">//formのsubmitボタンを押したときのイベント</span>
<span class="synStatement">document</span>.getElementById(<span class="synConstant">'form'</span>).addEventListener(<span class="synConstant">'submit'</span>, <span class="synIdentifier">function</span>(<span class="synStatement">event</span>) <span class="synIdentifier">{</span>
  <span class="synComment">//ユーザー名をとってきて</span>
  <span class="synIdentifier">var</span> userName = <span class="synStatement">document</span>.getElementById(<span class="synConstant">'user-name'</span>).value

  <span class="synComment">//ユーザー名がからっぽなら、エラーメッセージを出す</span>
  <span class="synStatement">if</span>(userName === <span class="synConstant">''</span>) <span class="synIdentifier">{</span>
    <span class="synStatement">document</span>.getElementById(<span class="synConstant">'user-name-error'</span>).innerHTML = <span class="synConstant">'ユーザーネームを入力してください'</span>
    <span class="synStatement">event</span>.preventDefault()
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>)
</pre>


<p><br/></p>

<p>単純に、javascriptの内容を<code>main.js</code>に切り出して、<code>index.html</code>側から参照しているだけですね。<br/>
ちょっとしたjavascriptを書く場合は、こんなふうにしていることが一般的かと思います。</p>

<p>※とはいえ、Googleアナリティクスとかのガジェット系の埋め込みはHTMLに直接書いちゃいますが。</p>

<p><br/></p>

<h4 id="さらに分割する">さらに分割する</h4>

<p>さて、さきほどhtmlとjavascriptを分割しました。</p>

<p>ですが、<code>main.js</code>もチェック内容やらなんやらが増えていくと、コードが肥大化していきます。</p>

<p>例えば、Eメールアドレスの項目が増えたので、こちらのバリデーションチェックも追加することにしました。</p>

<p><b>Eメールアドレスが増えた</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synComment">//formのsubmitボタンを押したときのイベント</span>
<span class="synStatement">document</span>.getElementById(<span class="synConstant">'form'</span>).addEventListener(<span class="synConstant">'submit'</span>, <span class="synIdentifier">function</span>(<span class="synStatement">event</span>) <span class="synIdentifier">{</span>
  <span class="synComment">//</span>
  <span class="synIdentifier">var</span> userName = <span class="synStatement">document</span>.getElementById(<span class="synConstant">'user-name'</span>).value
  <span class="synIdentifier">var</span> email = <span class="synStatement">document</span>.getElementById(<span class="synConstant">'email'</span>).value

  <span class="synComment">//ユーザー名がからっぽなら、エラーメッセージを出す</span>
  <span class="synStatement">if</span>(userName === <span class="synConstant">''</span>) <span class="synIdentifier">{</span>
    <span class="synStatement">document</span>.getElementById(<span class="synConstant">'user-name-error'</span>).innerHTML = <span class="synConstant">'ユーザーネームを入力してください'</span>
  <span class="synIdentifier">}</span>

  <span class="synComment">//Eメールが空っぽ</span>
  <span class="synStatement">if</span>(email === <span class="synConstant">''</span>) <span class="synIdentifier">{</span>
    <span class="synStatement">document</span>.getElementById(<span class="synConstant">'email-error'</span>).innerHTML = <span class="synConstant">'Eメールアドレスを入力してください'</span>
  <span class="synIdentifier">}</span>

  <span class="synComment">//Eメールの形式が不正</span>
  <span class="synStatement">if</span>(!email.match( <span class="synConstant">/^[a-zA-Z0-9.!#$%&amp;’*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*$/</span>)) <span class="synIdentifier">{</span>
    <span class="synStatement">document</span>.getElementById(<span class="synConstant">'email-error'</span>).innerHTML = <span class="synConstant">'Eメールアドレスの形式がおかしいです'</span>
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>)
</pre>


<p><br/></p>

<p>そもそもの設計が～とかはあるんですが、この状態では項目が増えていく度にコードが増えていくことが考えられます。</p>

<p>なので、ちょっと構成を見直してみます。
あんまりいい例ではないのですが、項目が正しいかどうかをチェックする機能を汎用的に考え、別の関数として切り出します。</p>

<p>ここでは、空っぽかどうかを判定する<code>isEmpty</code>関数と、Eメールアドレスが正しいかを確認する、<code>isEmail</code>関数をつくることにしました。</p>

<p><b>チェック内容を関数として切り出す</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synComment">//formのsubmitボタンを押したときのイベント</span>
<span class="synStatement">document</span>.getElementById(<span class="synConstant">'form'</span>).addEventListener(<span class="synConstant">'submit'</span>, <span class="synIdentifier">function</span>(<span class="synStatement">event</span>) <span class="synIdentifier">{</span>
  <span class="synComment">//</span>
  <span class="synIdentifier">var</span> userName = <span class="synStatement">document</span>.getElementById(<span class="synConstant">'user-name'</span>).value
  <span class="synIdentifier">var</span> email = <span class="synStatement">document</span>.getElementById(<span class="synConstant">'email'</span>).value

  <span class="synStatement">if</span>(isEmpty(userName)) <span class="synIdentifier">{</span>
    <span class="synStatement">document</span>.getElementById(<span class="synConstant">'user-name-error'</span>).innerHTML = <span class="synConstant">'ユーザーネームを入力してください'</span>
    <span class="synStatement">event</span>.preventDefault()
  <span class="synIdentifier">}</span>

  <span class="synStatement">if</span>(isEmpty(email)) <span class="synIdentifier">{</span>
    <span class="synStatement">document</span>.getElementById(<span class="synConstant">'email-error'</span>).innerHTML = <span class="synConstant">'Eメールアドレスを入力してください'</span>
    <span class="synStatement">event</span>.preventDefault()
  <span class="synIdentifier">}</span>

  <span class="synStatement">if</span>(!isEmail(email)) <span class="synIdentifier">{</span>
    <span class="synStatement">document</span>.getElementById(<span class="synConstant">'email-error'</span>).innerHTML = <span class="synConstant">'Eメールアドレスの形式がおかしいです'</span>
    <span class="synStatement">event</span>.preventDefault()
  <span class="synIdentifier">}</span>

<span class="synIdentifier">}</span>)

<span class="synComment">// Eメールアドレスの形式チェック</span>
<span class="synIdentifier">function</span> isEmail(value) <span class="synIdentifier">{</span>
  <span class="synStatement">if</span>(value.match( <span class="synConstant">/^[a-zA-Z0-9.!#$%&amp;’*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*$/</span>)) <span class="synIdentifier">{</span>
    <span class="synStatement">return</span> <span class="synConstant">true</span>
  <span class="synIdentifier">}</span>
  <span class="synStatement">return</span> <span class="synConstant">false</span>
<span class="synIdentifier">}</span>

<span class="synComment">// 空っぽかどうか</span>
<span class="synIdentifier">function</span> isEmpty(value) <span class="synIdentifier">{</span>
  <span class="synStatement">return</span> value === <span class="synConstant">''</span>
<span class="synIdentifier">}</span>
</pre>


<p>さて関数化することで、別の箇所でEメールの項目がでてきたとしても、この関数を使うことでチェックができるようになりましたね。<br/>
ただ、関数を<code>main.js</code>に書いちゃうと、コードが肥大化していくという問題は解消されません。</p>

<p>であれば、関数は別のファイル<code>validate.js</code>に切り出すことにします。</p>

<p><b>validate.js</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synComment">// Eメールアドレスの形式チェック</span>
<span class="synIdentifier">function</span> isEmail(value) <span class="synIdentifier">{</span>
  <span class="synStatement">if</span>(value.match( <span class="synConstant">/^[a-zA-Z0-9.!#$%&amp;’*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*$/</span>)) <span class="synIdentifier">{</span>
    <span class="synStatement">return</span> <span class="synConstant">true</span>
  <span class="synIdentifier">}</span>
  <span class="synStatement">return</span> <span class="synConstant">false</span>
<span class="synIdentifier">}</span>

<span class="synComment">// 空っぽかどうか</span>
<span class="synIdentifier">function</span> isEmpty(value) <span class="synIdentifier">{</span>
  <span class="synStatement">return</span> value === <span class="synConstant">''</span>
<span class="synIdentifier">}</span>
</pre>


<p><br/></p>

<h4 id="ファイルを分割したけれども">ファイルを分割したけれども</h4>

<p>切り出したはいいのですが、このままだと<code>main.js</code>内から<code>isEmpty</code>関数や<code>isEmail</code>関数を参照することはできません。<br/>
なので、<code>index.html</code>にて、`validate.js'も読み込んでおくようにしておきます。</p>

<p><b>index.html</b></p>

<pre class="code lang-html" data-lang="html" data-unlink>  <span class="synIdentifier">&lt;</span><span class="synStatement">script</span><span class="synIdentifier"> </span><span class="synType">src</span><span class="synIdentifier">=</span><span class="synConstant">&quot;validate.js&quot;</span><span class="synIdentifier">&gt;&lt;/</span><span class="synStatement">script</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">script</span><span class="synIdentifier"> </span><span class="synType">src</span><span class="synIdentifier">=</span><span class="synConstant">&quot;main.js&quot;</span><span class="synIdentifier">&gt;&lt;/</span><span class="synStatement">script</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">body</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">html</span><span class="synIdentifier">&gt;</span>
</pre>


<p>これでも、大丈夫といえば大丈夫なんですが、気になる点がいくつかあります。</p>

<ul>
<li><p><code>main.js</code>と<code>validate.js</code>の読み込み順を意識する必要がある。<br/>
<code>main.js</code>内が<code>isEmpty</code>等の関数を呼び出すタイミングで、<code>validate.js</code>の読み込みが終わっていないと、そんな関数ねえよと怒られてしまいます。<br/>
今回は、画面のボタンを押さない限り、関数が呼び出されないので、読み込み順を逆にしても大きな問題はないのですが、あまりいい状態とはいえません。</p></li>
<li><p>サーバーに対してのリクエスト数が増える
性能とかを気にしない環境であれば、そこまで問題はないのですが、<code>validate.js</code>と<code>main.js</code>とでわかれている場合、サーバに対するリクエストは以下のように2回リクエストが発生します。</p></li>
</ul>


<p><figure class="figure-image figure-image-fotolife" title="一言でおわる話を図式化した"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20181127/20181127152901.png" alt="f:id:konoemario:20181127152901p:plain" title="f:id:konoemario:20181127152901p:plain" class="hatena-fotolife" itemprop="image"></span><figcaption>一言でおわる話を図式化した</figcaption></figure></p>

<p>だから何よ？ってなるかもしれませんが、このリクエスト数っていうのが性能を考えるにあたって、結構大きな影響を与えます。</p>

<p>なので、できれば1回のリクエストでまとめてとってこれたほうがサーバーにとってはうれしかったりします。</p>

<p>※といいつつ、あんまりわかってない。Apacheのpreforkタイプだったら、リクエストがある度にプロセスをforkしちゃうからやべえんだよってことなのかな？Nginxとかだったらそこまででもなかったり？とはいえファイルオープンとかのシステムコールの発生回数は増えるんだからってことなのかしら。TCPのコネクションは使いまわすからだいじょうぶ？</p>

<p>この他にも変数のスコープの話とかもありそうなんですが、ちょっと理解が足りてないんで割愛します。</p>

<p><br/></p>

<h4 id="importとexportを使う">importとexportを使う</h4>

<p>さて、ちょっと話がそれます。</p>

<p>さきほど、ファイルを分割したあとに、<code>main.js</code>から<code>validate.js</code>を参照できるように読み込み順を意識して<code>index.html</code>に記載しました。</p>

<p><b>index.html</b></p>

<pre class="code lang-html" data-lang="html" data-unlink>  <span class="synIdentifier">&lt;</span><span class="synStatement">script</span><span class="synIdentifier"> </span><span class="synType">src</span><span class="synIdentifier">=</span><span class="synConstant">&quot;validate.js&quot;</span><span class="synIdentifier">&gt;&lt;/</span><span class="synStatement">script</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">script</span><span class="synIdentifier"> </span><span class="synType">src</span><span class="synIdentifier">=</span><span class="synConstant">&quot;main.js&quot;</span><span class="synIdentifier">&gt;&lt;/</span><span class="synStatement">script</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">body</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">html</span><span class="synIdentifier">&gt;</span>
</pre>


<p>しかし、こんなことをしなくてもjavascriptには<code>import/export</code>という構文があります。<br/>
正確には、javascriptのES6構文から使えるようなりました。</p>

<p>さきほどの<code>validate.js</code>の関数に<code>export</code>を付与してあげます。</p>

<p><b>validate.js</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synComment">// Eメールアドレスの形式チェック</span>
<span class="synStatement">export</span> <span class="synIdentifier">function</span> isEmail(value) <span class="synIdentifier">{</span>
  <span class="synStatement">if</span>(value.match( <span class="synConstant">/^[a-zA-Z0-9.!#$%&amp;’*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*$/</span>)) <span class="synIdentifier">{</span>
    <span class="synStatement">return</span> <span class="synConstant">true</span>
  <span class="synIdentifier">}</span>
  <span class="synStatement">return</span> <span class="synConstant">false</span>
<span class="synIdentifier">}</span>

<span class="synComment">// 空っぽかどうか</span>
<span class="synStatement">export</span> <span class="synIdentifier">function</span> isEmpty(value) <span class="synIdentifier">{</span>
  <span class="synStatement">return</span> value === <span class="synConstant">''</span>
<span class="synIdentifier">}</span>
</pre>


<p>そして、<code>main.js</code>には<code>validate.js</code>の関数を参照するという<code>import</code>分を追加してあげます。</p>

<p><b>main.js</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">import</span> <span class="synIdentifier">{</span> isEmpty, isEmail <span class="synIdentifier">}</span> from <span class="synConstant">'./validate.js'</span>

<span class="synComment">//formのsubmitボタンを押したときのイベント</span>
<span class="synStatement">document</span>.getElementById(<span class="synConstant">'form'</span>).addEventListener(<span class="synConstant">'submit'</span>, <span class="synIdentifier">function</span>(<span class="synStatement">event</span>) <span class="synIdentifier">{</span>
  <span class="synComment">//</span>
  <span class="synIdentifier">var</span> userName = <span class="synStatement">document</span>.getElementById(<span class="synConstant">'user-name'</span>).value
  <span class="synIdentifier">var</span> email = <span class="synStatement">document</span>.getElementById(<span class="synConstant">'email'</span>).value

  <span class="synStatement">if</span>(isEmpty(userName)) <span class="synIdentifier">{</span>
    <span class="synStatement">document</span>.getElementById(<span class="synConstant">'user-name-error'</span>).innerHTML = <span class="synConstant">'ユーザーネームを入力してください'</span>
    <span class="synStatement">event</span>.preventDefault()
  <span class="synIdentifier">}</span>

  <span class="synStatement">if</span>(isEmpty(email)) <span class="synIdentifier">{</span>
    <span class="synStatement">document</span>.getElementById(<span class="synConstant">'email-error'</span>).innerHTML = <span class="synConstant">'Eメールアドレスを入力してください'</span>
    <span class="synStatement">event</span>.preventDefault()
  <span class="synIdentifier">}</span>

  <span class="synStatement">if</span>(!isEmail(email)) <span class="synIdentifier">{</span>
    <span class="synStatement">document</span>.getElementById(<span class="synConstant">'email-error'</span>).innerHTML = <span class="synConstant">'Eメールアドレスの形式がおかしいです'</span>
    <span class="synStatement">event</span>.preventDefault()
  <span class="synIdentifier">}</span>

<span class="synIdentifier">}</span>)
</pre>


<p>この上で、<code>index.html</code>のscriptタグのtypeを<code>module</code>に変更すると、<code>validate.js</code>を<code>index.html</code>に書かなくとも、関数を参照することができるようになります！</p>

<p><b>index.html</b></p>

<pre class="code lang-html" data-lang="html" data-unlink>  <span class="synIdentifier">&lt;</span><span class="synStatement">script</span><span class="synIdentifier"> </span><span class="synType">type</span><span class="synIdentifier">=</span><span class="synConstant">&quot;module&quot;</span><span class="synIdentifier"> </span><span class="synType">src</span><span class="synIdentifier">=</span><span class="synConstant">&quot;main.js&quot;</span><span class="synIdentifier">&gt;&lt;/</span><span class="synStatement">script</span><span class="synIdentifier">&gt;</span>
</pre>


<p>この方法で、先ほどの</p>

<ul>
<li>読み込み順を意識しなきゃいけない</li>
<li>リクエスト数が増える</li>
</ul>


<p>の問題が解決されたかのように思えますが、後者のリクエスト数が増えるという問題は解決されていません。<br/>
というのも、結局のところ<code>main.js</code>と<code>validate.js</code>をそれぞれとってきた後に、<code>import/export</code>でうまいことブラウザがやってくれているからです。</p>

<p>しかし、ES6構文の話にもなりますが、この<code>import/export</code>はIE11だと動かないです。</p>

<p><br/></p>

<h4 id="結局どうすんのよ">結局どうすんのよ</h4>

<p>開発時にファイルは分割して管理したいけれども、ブラウザが使うときは一個にまとめちゃいなよ！という発想になります。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20181127/20181127155541.png" alt="f:id:konoemario:20181127155541p:plain" title="f:id:konoemario:20181127155541p:plain" class="hatena-fotolife" itemprop="image"></span></p>

<p>さて、これを実現することができるのが<code>Webpack</code>になります。</p>

<p>Webpackを通すことで、分割されたファイルをひとつのファイル(ここでは<code>index.js')にまとめることができます。  
まとめることができた半面、作成された</code>index.js`は一見するとなにがなんだかわからないコードになってしまいます。</p>

<p>開発者はうれしい！<br/>
サーバーの性能という観点からもうれしい！</p>

<p>ただ、<code>index.js</code>を直接修正するのはやめたほうがいいですね。</p>

-----
--------
AUTHOR: konoemario
TITLE: Vue.js + FIrebaseのEメール+パスワード認証をためす
BASENAME: 2018/11/19/182438
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 11/19/2018 18:24:38
CATEGORY: Firebase
CATEGORY: Vue.js
CATEGORY: Nuxt.js
CATEGORY: プログラム
IMAGE: https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20181119/20181119120339.png
-----
BODY:
<h1 id="日記">日記</h1>

<p>Nuxt.js + Firebaseで、お酒の写真とコメントを管理するWebアプリをつくってる。</p>

<p><figure class="figure-image figure-image-fotolife" title="作成中のWebアプリ"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20181119/20181119174520.png" alt="f:id:konoemario:20181119174520p:plain" title="f:id:konoemario:20181119174520p:plain" class="hatena-fotolife" itemprop="image"></span><figcaption>作成中のWebアプリ</figcaption></figure>
使用ユーザーは奥さんの1名だけ。</p>

<p>とりあえずなにかしらWebアプリを完成させたい、という目標を達成するために必要最低限の機能は一通り実装できた。</p>

<p>使用ユーザーは奥さん1名だけなので、ログイン機能なんかいらないんだけれども、FirebaseのRealtimeDatabseのルールが誰でも書き込める、だとさすがにどうなのかなという思いから認証機能を実装することにした。 <br/>
※認証機能よりも画像の表示をなんとかしたほうがいいのはわかってるんだ。</p>

<h1 id="本題">本題</h1>

<ul class="table-of-contents">
    <li><a href="#日記">日記</a></li>
    <li><a href="#本題">本題</a><ul>
            <li><a href="#ユーザーの管理をFirebaseで行う">ユーザーの管理をFirebaseで行う</a><ul>
                    <li><a href="#Eメールとパスワードでユーザー管理する">Eメールとパスワードでユーザー管理する</a></li>
                    <li><a href="#Firebaseの認証について">Firebaseの認証について</a></li>
                    <li><a href="#まずはログイン画面を作成する">　まずはログイン画面を作成する</a></li>
                    <li><a href="#firebaseauthを使わない方法">firebase.authを使わない方法</a></li>
                    <li><a href="#firebaseauthを使う方法">firebase.authを使う方法</a></li>
                    <li><a href="#tokenを使ってRealtimeDatabaseのREST-APIの認証を行う">tokenを使ってRealtimeDatabaseのREST APIの認証を行う</a></li>
                </ul>
            </li>
        </ul>
    </li>
</ul>

<p><br/></p>

<h2 id="ユーザーの管理をFirebaseで行う">ユーザーの管理をFirebaseで行う</h2>

<p>FIrebaseでの認証は以前、Udemyの以下のNuxt.jsの講習でさわったことがあったので、以下の講習内容と</p>

<p><a href="https://www.udemy.com/nuxtjs-vuejs-on-steroids/">https://www.udemy.com/nuxtjs-vuejs-on-steroids/</a></p>

<p>Firebase公式の内容で復習を行うことにしました。<br/>
<a href="https://firebase.google.com/docs/auth/web/manage-users?hl=ja">Firebase &#x3067;&#x30E6;&#x30FC;&#x30B6;&#x30FC;&#x3092;&#x7BA1;&#x7406;&#x3059;&#x308B; &nbsp;|&nbsp; Firebase</a></p>

<p><br/></p>

<h3 id="Eメールとパスワードでユーザー管理する">Eメールとパスワードでユーザー管理する</h3>

<p>Firebaseの認証方法はいろいろあって、一番初歩的なログイン画面をつくって、Eメール、パスワードを入力させて認証するものから、Google認証のようにOAuth2をベースにした認証やらなんやらがいっぱいある。</p>

<p>このWebアプリのために、ユーザーとパスワードを管理してもらうのは申し訳ないので、最終的にはGoogle認証等に移行するつもりですが、とりあえずは初歩的なEメールとパスワード認証を使ってみることにします。</p>

<h3 id="Firebaseの認証について">Firebaseの認証について</h3>

<p>FirebaseのAuthenticationという機能で特段サーバ等を用意せずともユーザーの管理ができてしまう恐ろしい子。</p>

<p>Firebaseのコンソールで「Authencication」⇒「ユーザー」を参照すると、後述する処理で登録したユーザーの一覧を参照することができる。</p>

<p><figure class="figure-image figure-image-fotolife" title="ユーザーが追加された！"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20181119/20181119121402.png" alt="f:id:konoemario:20181119121402p:plain" title="f:id:konoemario:20181119121402p:plain" class="hatena-fotolife" itemprop="image"></span><figcaption>登録済みのユーザー</figcaption></figure></p>

<p>こちらのFirebaseのAuthenticationの機能と、データを管理するFirebaseのRealtimeDatabaseを組み合わせて、ログイン機能を実装していく。</p>

<h3 id="まずはログイン画面を作成する">　まずはログイン画面を作成する</h3>

<p>とりあえずは、こんな感じのログイン画面を作成します、</p>

<p><figure class="figure-image figure-image-fotolife" title="ログイン画面"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20181119/20181119120339.png" alt="f:id:konoemario:20181119120339p:plain" title="f:id:konoemario:20181119120339p:plain" class="hatena-fotolife" itemprop="image"></span><figcaption>ログイン画面</figcaption></figure>
<br/></p>

<p>画面は、<code>login.vue</code>というVueコンポーネントで実装しました。</p>

<p><b>login.vue</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>&lt;template lang=<span class="synConstant">&quot;pug&quot;</span>&gt;
.login
  label.label email
  input.input(type=<span class="synConstant">&quot;text&quot;</span> v-model=<span class="synConstant">&quot;email&quot;</span>)
  label.label password
  input.input(type=<span class="synConstant">&quot;text&quot;</span> v-model=<span class="synConstant">&quot;password&quot;</span>)
  button.button(@click=<span class="synConstant">&quot;login&quot;</span>) login
&lt;/template&gt;

&lt;script&gt;
  <span class="synStatement">export</span> <span class="synStatement">default</span> <span class="synIdentifier">{</span>
    data() <span class="synIdentifier">{</span>
      <span class="synStatement">return</span> <span class="synIdentifier">{</span>
        email: <span class="synConstant">''</span>,
        password: <span class="synConstant">''</span>,
      <span class="synIdentifier">}</span>
    <span class="synIdentifier">}</span>,
    methods: <span class="synIdentifier">{</span>
      async login() <span class="synIdentifier">{</span>
       <span class="synComment">//ボタンを押したときの処理をかく  </span>
     <span class="synIdentifier">}</span>
   <span class="synIdentifier">}</span>
</pre>


<h3 id="firebaseauthを使わない方法">firebase.authを使わない方法</h3>

<p>認証を行うにあたっては、firebase.authという便利なパッケージがあるのでこちらを使うのが基本だ思う。
だけど、前述のUdemyの講習ではfirebase.authを使っていなかったので、復習の意味を込めて一旦firebase.authを使わないでやってみます。</p>

<p>といっても、firebase.authの内部でやっていることを、直接やるだけの話です。</p>

<p><br/></p>

<p>さきほどの<code>login.vue</code>について、ログインボタンを押した場合の処理を追記します。</p>

<p><b>login.vueを抜粋</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synComment">//HTMLは省略  </span>
&lt;script&gt;
  <span class="synStatement">export</span> <span class="synStatement">default</span> <span class="synIdentifier">{</span>
    data() <span class="synIdentifier">{</span>
      <span class="synStatement">return</span> <span class="synIdentifier">{</span>
        email: <span class="synConstant">''</span>,
        password: <span class="synConstant">''</span>,
      <span class="synIdentifier">}</span>
    <span class="synIdentifier">}</span>,
    methods: <span class="synIdentifier">{</span>
      async login() <span class="synIdentifier">{</span>
        <span class="synComment">// 既存ユーザーの認証はこっち</span>
        <span class="synComment">//const url = 'https://www.googleapis.com/identitytoolkit/v3/relyingparty/verifyPassword?key=' + process.env.fbAPIKey    </span>

        <span class="synComment">// 新規ユーザーの認証</span>
        <span class="synStatement">const</span> url = <span class="synConstant">'https://www.googleapis.com/identitytoolkit/v3/relyingparty/signupNewUser?key='</span> + process.env.fbAPIKey    

        <span class="synStatement">try</span> <span class="synIdentifier">{</span>
          <span class="synStatement">const</span> token = await <span class="synIdentifier">this</span>.$axios.$post(url ,<span class="synIdentifier">{</span>
            email: <span class="synIdentifier">this</span>.email,
            password: <span class="synIdentifier">this</span>.password,
            returnSecureToken: <span class="synConstant">true</span>
          <span class="synIdentifier">}</span>)

          <span class="synComment">//token取得して保存する</span>
          localStorage.setItem(<span class="synConstant">'token'</span>, token.idToken)
          localStorage.setItem(<span class="synConstant">'tokenExpiration'</span>, token.expiresIn)
        <span class="synIdentifier">}</span> <span class="synStatement">catch</span>(error) <span class="synIdentifier">{</span>
          console.log(error)
        <span class="synIdentifier">}</span>
      <span class="synIdentifier">}</span>
    <span class="synIdentifier">}</span>
  <span class="synIdentifier">}</span>
&lt;/script&gt;
</pre>


<p><br/></p>

<p>Firebaseのユーザーの作成 or ユーザーの認証のエンドポイントに対して、EメールとパスワードとfirebaseのAPIKeyをつけてなげるだけです。</p>

<p>上記APIは以下のドキュメントを参考にしています。<br/>
<a href="https://firebase.google.com/docs/reference/rest/auth">https://firebase.google.com/docs/reference/rest/auth</a></p>

<p>APIのキーは、Firebaseのコンソール画面にある↓のような箇所に書いてあるやつですね。</p>

<p><figure class="figure-image figure-image-fotolife" title="FirebaseのAPIキー"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20181119/20181119115914.png" alt="f:id:konoemario:20181119115914p:plain" title="f:id:konoemario:20181119115914p:plain" class="hatena-fotolife" itemprop="image"></span><figcaption>FirebaseのAPIキー</figcaption></figure></p>

<p><br/></p>

<p>さて、上記<code>login.vue</code>に記載されている処理を実行すると、以下のようなレスポンスが返ってきました。</p>

<p><b>ユーザーの新規作成APIの結果</b></p>

<pre class="code lang-json" data-lang="json" data-unlink><span class="synSpecial">{</span>
  &quot;<span class="synStatement">error</span>&quot;: <span class="synSpecial">{</span>
    &quot;<span class="synStatement">code</span>&quot;: <span class="synConstant">400</span>,
    &quot;<span class="synStatement">message</span>&quot;: &quot;<span class="synConstant">OPERATION_NOT_ALLOWED</span>&quot;,
    &quot;<span class="synStatement">errors</span>&quot;: <span class="synSpecial">[</span>
      <span class="synSpecial">{</span>
        &quot;<span class="synStatement">message</span>&quot;: &quot;<span class="synConstant">OPERATION_NOT_ALLOWED</span>&quot;,
        &quot;<span class="synStatement">domain</span>&quot;: &quot;<span class="synConstant">global</span>&quot;,
        &quot;<span class="synStatement">reason</span>&quot;: &quot;<span class="synConstant">invalid</span>&quot;
      <span class="synSpecial">}</span>
    <span class="synSpecial">]</span>
  <span class="synSpecial">}</span>
<span class="synSpecial">}</span>
</pre>


<p><br/></p>

<p>どうやらFirebaseのAuthenticationの設定でログイン方法の設定を行っておく必要があるみたいです。</p>

<p><figure class="figure-image figure-image-fotolife" title="ログイン方法のメール + パスワードを有効にする"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20181119/20181119120111.png" alt="f:id:konoemario:20181119120111p:plain" title="f:id:konoemario:20181119120111p:plain" class="hatena-fotolife" itemprop="image"></span><figcaption>ログイン方法のメール + パスワードを有効にする</figcaption></figure></p>

<p><br/></p>

<p>上記設定を行った後に、再度適当なメールアドレス、パスワードを設定したところ、無事リクエストが通りました。</p>

<p><b>ユーザーの新規作成APIの結果</b></p>

<pre class="code lang-json" data-lang="json" data-unlink><span class="synSpecial">{</span>
  &quot;<span class="synStatement">kind</span>&quot;: &quot;<span class="synConstant">identitytoolkit#SignupNewUserResponse</span>&quot;,
  &quot;<span class="synStatement">idToken</span>&quot;: &quot;<span class="synConstant">省略</span>&quot;,
  &quot;<span class="synStatement">email</span>&quot;: &quot;<span class="synConstant">tekitouna@email.com</span>&quot;,
  &quot;<span class="synStatement">refreshToken</span>&quot;: &quot;<span class="synConstant">省略</span>&quot;,
  &quot;<span class="synStatement">expiresIn</span>&quot;: &quot;<span class="synConstant">3600</span>&quot;,
  &quot;<span class="synStatement">localId</span>&quot;: &quot;<span class="synConstant">b7NUgSEZIZavcPVADGR27Fg0XgZ2</span>&quot;
<span class="synSpecial">}</span>
</pre>


<p><br/></p>

<p>リクエストの結果、<code>idToken</code>なるものが返ってきたので、これをlocalstorageに保存しておくことにします。 <br/>
このtokenをRealTimeDataBaseを参照するREST APIに渡して、tokenをもとに認証されたユーザーのみデータベースの内容を書き込むことができる、という設定に変更することで今回やりたいことが実現できそうです。</p>

<p><br/></p>

<p><br/></p>

<h3 id="firebaseauthを使う方法">firebase.authを使う方法</h3>

<p>さきほどは、<code>https://www.googleapis.com/identitytoolkit/v3/relyingparty/verifyPassword</code>等のAPIを直接叩いていましたが、通常はfirebase.authの機能を使えばよさそうです。</p>

<p>なので、さっそく<code>firebase</code>のパッケージをインストールします。</p>

<p><b>firebaseをインストール</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ npm install <span class="synSpecial">--save</span> firebase
</pre>


<p>今回はNuxt.jsを使用しているので、<code>plugin</code>としてFirebaseの初期設定処理を行っています。</p>

<p>初期設定の値は、ウェブアプリに Firebase を追加で取得できる値を設定します。<br/>
また、<code>firebase</code>にはいろんなパッケージが含まれているので、必要最低限のものだけimportするようにします。  <br/>
ここではfirebaseのコアである<code>firebase/app</code>と認証のパッケージである<code>firebase/auth</code>をimportします。</p>

<p><b>firebase.js</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">import</span> firebase from <span class="synConstant">'firebase/app'</span>
<span class="synStatement">import</span> <span class="synConstant">'firebase/auth'</span>
<span class="synStatement">import</span> <span class="synConstant">'firebase/database'</span>

<span class="synStatement">if</span> (!firebase.apps.length) <span class="synIdentifier">{</span>
  firebase.initializeApp(<span class="synIdentifier">{</span>
    apiKey: process.env.fbAPIKey,
    <span class="synComment">//以下省略</span>
  <span class="synIdentifier">}</span>)
<span class="synIdentifier">}</span>

<span class="synStatement">export</span> <span class="synStatement">default</span> firebase
</pre>


<p><br/></p>

<p>あとは、さきほど同様に<code>login.vue</code>でfirebase.authの認証用のメソッドを呼ぶだけになります。</p>

<p><b>login.vueを抜粋</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>
&lt;script&gt;
  <span class="synStatement">import</span> firebase from <span class="synConstant">'~/plugins/firebase'</span>

  <span class="synStatement">export</span> <span class="synStatement">default</span> <span class="synIdentifier">{</span>
    data() <span class="synIdentifier">{</span>
      <span class="synStatement">return</span> <span class="synIdentifier">{</span>
        email: <span class="synConstant">''</span>,
        password: <span class="synConstant">''</span>,
      <span class="synIdentifier">}</span>
    <span class="synIdentifier">}</span>,
    methods: <span class="synIdentifier">{</span>
      async login() <span class="synIdentifier">{</span>

        <span class="synStatement">try</span> <span class="synIdentifier">{</span>
          <span class="synComment">// 新規ユーザーの作成</span>
          <span class="synComment">//const user = await firebase.auth().createUserWithEmailAndPassword(this.email, this.password)</span>

          <span class="synComment">// 既存ユーザーの認証 </span>
          <span class="synStatement">const</span> user = await firebase.auth().signInWithEmailAndPassword(<span class="synIdentifier">this</span>.email, <span class="synIdentifier">this</span>.password)

          <span class="synStatement">const</span> token = await firebase.auth().currentUser.getIdToken(<span class="synConstant">true</span>)
          localStorage.setItem(<span class="synConstant">'token'</span>, token.idToken)
        <span class="synIdentifier">}</span> <span class="synStatement">catch</span>(error) <span class="synIdentifier">{</span>
          console.log(error)
        <span class="synIdentifier">}</span>
      <span class="synIdentifier">}</span>
    <span class="synIdentifier">}</span>
  <span class="synIdentifier">}</span>
&lt;/script&gt;
</pre>


<p><br/></p>

<p>一点、firebase.authを使わなかった場合、tokenの値は直接取得できていましたが、firebase.authではtokenを取得するために<code>firebase.auth().currentUser.getIdToken()</code>を使う必要があるみたいです。<br/>
こちらですが、tokenの有効期限が切れた後に、もっかい呼ぶと、リフレッシュトークンをもとに、新しいtokenを返却してくれるという素晴らしいものになっているみたいです。</p>

<p>当初はtokenの有効期限もクライアント側に保持して、意識する必要があるのかななんて思ってたんですが、getIdTokenを使えば、有効期限を気にしなくてもよくなるのかしら。</p>

<p><br/></p>

<h3 id="tokenを使ってRealtimeDatabaseのREST-APIの認証を行う">tokenを使ってRealtimeDatabaseのREST APIの認証を行う</h3>

<p>さきほど取得したtokenを使って、RealtimeDatabaseの認証の設定を行ってみます。</p>

<p>RealtimeDatabaseはデータを取ってくるだけであれば、KEY名に<code>.json</code>をつけてあげるだけで簡単に取得できますね。
私の場合、<code>articles</code>とうキーにオブジェクトをぶらさげているので、以下のような形になります。</p>

<p><b>REST APIでデータを取得する</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>https://自分のrealtimedatabaseのdomain/articles.json
</pre>


<p><br/></p>

<p>現状、上記にアクセスすると誰でも<code>articles.json</code>の内容を参照することができます。<br/>
これをログインしたユーザーのみ参照できる、という設定に変えてみます。</p>

<p>Firebaseのコンソール画面より、「Database」⇒「RealtimeDatabase」⇒「ルール」を開き、以下のように<code>read</code>の設定に<code>auth!=null</code>を設定しています。</p>

<p><code>auth</code>は、認証されたユーザーの情報が設定されるみたいです。</p>

<p><figure class="figure-image figure-image-fotolife" title="ruleを設定する"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20181119/20181119125008.png" alt="f:id:konoemario:20181119125008p:plain" title="f:id:konoemario:20181119125008p:plain" class="hatena-fotolife" itemprop="image"></span><figcaption>ruleを設定する</figcaption></figure></p>

<p>実際に試してみると、さきほどまでアクセスできていた<code>https://自分のrealtimedatabaseのdomain/articles.json</code>を参照すると、<code>Permission Denied</code>と言われます。</p>

<p>しかし<code>https://自分のrealtimedatabaseのdomain/articles.json?auth=取得したidToken</code>をつけてアクセスすることで、REST APIが認証され、<code>articles.json</code>の内容を取得することができました。</p>

<p>ものすごく簡単にできちゃいますね。<br/>
この調子でGoogle認証もやってみたいと思います。</p>

-----
--------
AUTHOR: konoemario
TITLE: フロントエンドの開発にDockerを使ってたけれども、なんだかいらない気がしてきた
BASENAME: 2018/11/14/182349
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 11/14/2018 18:23:49
CATEGORY: docker
CATEGORY: プログラム
CATEGORY: 雑談
-----
BODY:
<p>フロントエンドの開発環境にdockerを使うようにしていたんだけれども、Node.jsのバージョンだけ意識するんであれば、nodebrewなりなんなりで切り替えして、ホストOSにそのまんまNode.jsしかり、jsのパッケージをインストールしたほうがいいんじゃないかと思った今日このごろ。</p>

<p>今までは、下記のような<code>Dockerfile</code>、<code>docker-compose.yml</code>を用意して、Dockerコンテナを使った。</p>

<p>作成に関しては以下の記事を参考させていただいた。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fpostd.cc%2Flessons-building-node-app-docker%2F" title="DockerでのNodeアプリ構築で学んだこと | POSTD" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://postd.cc/lessons-building-node-app-docker/">postd.cc</a></cite></p>

<p><b>Dockerfile</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>FROM node:9.11-alpine

<span class="synComment">#add user for security</span>
<span class="synComment">#shadow: you can use useradd on alpine</span>
RUN apk <span class="synSpecial">--update</span> add shadow &amp;&amp;<span class="synStatement">\</span>
    <span class="synStatement">rm</span> <span class="synSpecial">-rf</span> /var/cache/apk/* &amp;&amp;<span class="synStatement">\</span>
    useradd <span class="synSpecial">--user-group</span> <span class="synSpecial">--create-home</span> app
ENV <span class="synIdentifier">HOME</span>=/home/app
<span class="synComment">#package.json.lockもCOPYすべし</span>
COPY ./app/package.json <span class="synPreProc">$HOME</span>/src
RUN chown <span class="synSpecial">-R</span> app:app <span class="synPreProc">$HOME</span>/*
ENV HOST 0.0.0.0
USER app
WORKDIR <span class="synPreProc">$HOME</span>/src
RUN npm install <span class="synSpecial">--no-cache</span>
</pre>


<p><br/></p>

<p><b>docker-compose.yml</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>version: <span class="synStatement">'</span><span class="synConstant">3</span><span class="synStatement">'</span>
services:
  app:
    build: ./
    <span class="synComment"># コンテナ起動後になにかしらをするコマンド</span>
    <span class="synStatement">command</span>: npm run serve
    privileged: <span class="synStatement">true</span>
    ports:
      - <span class="synStatement">'</span><span class="synConstant">3000:3000</span><span class="synStatement">'</span>
    volumes:
      - ./app:/home/app/src
      - /home/app/src/node_modules
</pre>


<p>これの素敵なところは、node_modulesがDockerイメージに含まれる点。<br/>
なので、Dockerコンテナを作成するたびにパッケージのインストールが不要になる。<br/>
また、Windows環境限定の話なんだけれども、node_modulesはコンテナ内に含まれ、ホストOSと同期していないので、ホストがWidowsのときに<code>npm install</code>したらシンボリックリンクのエラーやらなんやらでうごかねええみたいなイライラがなくなる。 <br/>
個人的には、後者のコンテナ内に含まれるという点で、この方法を使ってた。</p>

<p><br/></p>

<h3>めんどくさい点</h3>

<h4>パッケージを追加するとき</h4>

<p>しかし、パッケージが足りないから追加しようみたいなときに、困ったりする。
こういうときは、コンテナをバックグラウンドで実行した状態にしておいて、<code>exec</code>でコンテナ内に入って、<code>npm install --save hogehoge</code>とか叩いてる。</p>

<p><b>パッケージを追加したい</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ docker-compose up <span class="synSpecial">-d</span> app 
$ docker-compose <span class="synStatement">exec</span> app /bin/ash
</pre>


<p><br/></p>

<p>そもそも、コンテナ起動時に実行するコマンドがリソースをbuildだけして終わりみたいなときは、違うコマンドを実行するようにdocker-compose.ymlを修正するか、ttyのオプションを変更したりしている。</p>

<p>また、コンテナを何らかの理由で消したときは、再度<code>docker-compose build app</code>等でイメージを作成しなおす必要がある。</p>

<p>このへんのことをしていると何か間違っている気がして仕方がない。</p>

<p><br/></p>

<h4>実行するコマンドをかえたい</h4>

<p>前述の内容とかぶるのだけれども、<code>npm run build</code>じゃなくって、<code>npm run serve</code>したい！みたいなときに<code>docker-compose.yml</code>のコマンドを変更して、<code>docker-compose up</code>を叩いてる。</p>

<p>たぶんこれは間違ってて、どちらかというと<code>docker-compose run</code>で都度コンテナを作っては捨てる、の考え方のほうがdockerっぽいのかしら。</p>

<p><b>コマンドをかえたいとき</b></p>

<pre class="code" data-lang="" data-unlink>$ docker-compose run --rm app npm run serve </pre>


<p><br/>
微妙にportとかdocker-composeの値を見てくれなかったりでちょっと不便。</p>

<p><br/></p>

<h3>結果</h3>

<p>で、このへんのことをうんうんやってたんだけれども、ESLintとかの結果をIDEと連携したいとかになると、結局ホストOSにNodeを入れなきゃいけないような気がしてて、だったら最初からホストOSにそのまんまインストールすればよくないか、と思ったということでした。</p>

<p>規模と用途と、そもそも何を解決したいのかを考えて使いわけができたらいいなあ。</p>

-----
--------
AUTHOR: konoemario
TITLE: そろそろVue.jsでもテストコードを書いていこう
BASENAME: 2018/11/08/175213
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 11/08/2018 17:52:13
CATEGORY: Vue.js
CATEGORY: プログラム
-----
BODY:
<p>Vue.jsでわりといろいろつくっている今日このごろ。<br/>
そこそこ使ってるのに、未だにEsLintもいれてないし、テストコードも書いてないという状況に危機感を覚えた。<br/>
特にテストコード書いてないのはまずい気がする。ブラウザで毎回確認するのも時間かかるしね。</p>

<p>10カ月ほど前に、以下のLaracastのVueTestingをさっと見たんだけれども、あんまり生かせてない。
しかも、 Laracastの有料講座を見るために毎月1000円ぐらい払ってる気がする。<br/>
全然有効に使えてなくて悔しいので、今一度学びなおしてみる。</p>

<p>といっても下記の動画は無料でみれる。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Flaracasts.com%2Fseries%2Ftesting-vue%2Fepisodes%2F1" title="TDD Your First Vue Component From Scratch" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://laracasts.com/series/testing-vue/episodes/1">laracasts.com</a></cite></p>

<p>エピソード1の内容はわずか11分なんだけれども、メモを（無駄に）取りながら書いたらやけに長くなった。<br/>
書いといてあれだけれども気になる方は、動画を見たほうが絶対いい。</p>

<ul class="table-of-contents">
    <li><a href="#最低限のかんきょうづくり">最低限のかんきょうづくり</a></li>
    <li><a href="#コードを書く">コードを書く</a></li>
    <li><a href="#テストが通るようにする">テストが通るようにする①</a><ul>
            <li><a href="#補足-自分の中のVuejsのコンポーネント">補足 自分の中のVue.jsのコンポーネント</a></li>
        </ul>
    </li>
    <li><a href="#DOMのレンダリングの内容を検証する">DOMのレンダリングの内容を検証する</a></li>
    <li><a href="#イベントの結果を検証する">イベントの結果を検証する</a></li>
    <li><a href="#補足">補足</a><ul>
            <li><a href="#単一ファイルコンポーネントをテストする">単一ファイルコンポーネントをテストする</a></li>
            <li><a href="#watchオプション">watchオプション</a></li>
        </ul>
    </li>
</ul>

<p>作業の記録はGithubにあげています。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2FRyomasao%2Ftestingvue" title="Ryomasao/testingvue" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://github.com/Ryomasao/testingvue">github.com</a></cite></p>

<p><br/></p>

<h2 id="最低限のかんきょうづくり">最低限のかんきょうづくり</h2>

<p>講座に沿って、メモをしていくことにする。<br/>
講座では、VueCLI等は使ってなかったので、それに倣い、一からVueを導入する。</p>

<p><b>まずはvueの準備</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ npm init <span class="synSpecial">-y</span>
$ npm install <span class="synSpecial">--save</span> vue
</pre>


<p><br/></p>

<p>次にテストツールを導入する。</p>

<p><b>テストツールの導入</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>npm install <span class="synSpecial">--save-dev</span> vue-<span class="synStatement">test</span>-utils
</pre>


<p><br/></p>

<p>次に、Mocha + Webpackというテストランナーをインストールする。</p>

<p><b>テストランナーの導入</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ npm install <span class="synSpecial">--save-dev</span> @vue/<span class="synStatement">test</span>-utils mocha mocha-webpack
</pre>


<p><span style="color: #ff0000">2018/11/08 現在、mocha-webpackはwebpack4に対応していないみたいで、後続の<code>npm run test</code>をしたときに、Webpackのコンパイルのみ行われて、テストが走らないという事象が起こります。 </span>
ですので、webpack4を使う場合は、以下のバージョンを使用する必要がありました。</p>

<p><b>違うバージョンを使用</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ npm install mocha-webpack@next <span class="synSpecial">--save-dev</span>
</pre>


<p><br/></p>

<p><code>vue-test-utils</code>だけで済むかと思ったんだけども、javascriptのコードを実行するのは<code>vue-test-utils</code>ではなくテストランナーと呼ばれるもので、いくつか種類があるとのこと。 <br/>
<code>vue-test-utils</code>とテストランナーの役割分担がちょっとイメージできない。</p>

<p><br/></p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fvue-test-utils.vuejs.org%2Fja%2Fguides%2Fchoosing-a-test-runner.html" title="テストランナを選ぶ | Vue Test Utils" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://vue-test-utils.vuejs.org/ja/guides/choosing-a-test-runner.html">vue-test-utils.vuejs.org</a></cite></p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fvue-test-utils.vuejs.org%2Fja%2Fguides%2Ftesting-single-file-components-with-mocha-webpack.html" title="Mocha + webpack による単一ファイルコンポーネントのテスト | Vue Test Utils" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://vue-test-utils.vuejs.org/ja/guides/testing-single-file-components-with-mocha-webpack.html">vue-test-utils.vuejs.org</a></cite></p>

<p>テストランナーである、webpack + mochaはwebpackでコンパイルしてコンパイルしたものをmochaで実行するっぽいもの。</p>

<p><br/></p>

<p>講座に戻ります。</p>

<p><code>src/components</code>ディレクトリと、<code>test</code>ディレクトリを作って、空っぽのファイルをそれぞれおいておきます。</p>

<p><b>テスト対象とテストコードを作成する</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>├── package-lock.json
├── package.json
├── src
│   └── components
│           └── Counter.js
└── <span class="synStatement">test</span>
    └── counter.spec.js
</pre>


<p><br/></p>

<p>ええ！もうテストを叩くんですか！という勢いで、<code>npm run test</code> を実行します。</p>

<p><b>テストを実行</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ npm run <span class="synStatement">test</span>
<span class="synStatement">&gt;</span> <span class="synStatement">echo</span><span class="synConstant"> </span><span class="synStatement">&quot;</span><span class="synConstant">Error: no test specified</span><span class="synStatement">&quot;</span><span class="synConstant"> </span>&amp;&amp; <span class="synStatement">exit</span> <span class="synConstant">1</span>

Error: no <span class="synStatement">test</span> specified
</pre>


<p><br/></p>

<p>ですが、テストなんかねえよ！と怒られます。<br/>
<code>npm run test</code> は、<code>package.json</code>の<code>scripts: test</code>の箇所を実行していますね。</p>

<p>こちらをみると、先ほどのエラーが記載されていることがわかります。<br/>
<b>package.json</b></p>

<pre class="code lang-json" data-lang="json" data-unlink>  &quot;<span class="synStatement">scripts</span>&quot;: <span class="synSpecial">{</span>
    &quot;<span class="synStatement">test</span>&quot;: &quot;<span class="synConstant">echo </span><span class="synSpecial">\&quot;</span><span class="synConstant">Error: no test specified</span><span class="synSpecial">\&quot;</span><span class="synConstant"> &amp;&amp; exit 1</span>&quot;
  <span class="synSpecial">}</span>,
</pre>


<p>ですので、こちらを変更していきます。</p>

<p><br/></p>

<p><b>package.json</b></p>

<pre class="code lang-json" data-lang="json" data-unlink>  &quot;<span class="synStatement">scripts</span>&quot;: <span class="synSpecial">{</span>
     &quot;<span class="synStatement">test</span>&quot;: &quot;<span class="synConstant">mocha-webpack --webpack-config webpack.config.js  test/**/*.spec.js</span>&quot;
  <span class="synSpecial">}</span>,
</pre>


<p><code>mocha-webpack</code>はwebpackでコンパイルするので、wepackのconfigファイルを指定しています。<br/>
<code>test/**/*.spec.js</code> は実行するテストコードを指定しています。</p>

<p>とりあえず空っぽの<code>webpack.config.js</code>をプロジェクトのルートディレクトリ配下につくっときます。</p>

<p><b>webpack.config.jsをつくる</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ <span class="synStatement">touch</span> webpack.config.js
</pre>


<p><br/></p>

<p>また、webpack4から、<code>mode'オプションの指定をしとかないとWarningがでてしまうので、</code>webpack.config.js`に記載しとくことにします。</p>

<p><b>webpack.config.js</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>module.exports = <span class="synIdentifier">{</span>
  mode: <span class="synConstant">'development'</span>
<span class="synIdentifier">}</span>
</pre>


<p><br/></p>

<p>また、webpackが必要なのでこちらもインストールします。</p>

<p><b>webpackを入れる</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ npm install <span class="synSpecial">--save-dev</span> webpack
</pre>


<p>準備ができたら、再度実行します。</p>

<p><b>テストを実行</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ npm run <span class="synStatement">test</span>
 WEBPACK  Compiled successfully <span class="synError">in</span> 159ms

 MOCHA  Testing...


  <span class="synConstant">0</span> passing <span class="synPreProc">(</span><span class="synSpecial">0ms</span><span class="synPreProc">)</span>

 MOCHA  Tests completed successfully
</pre>


<p>テストコード自体が空っぽなので<code>0 pasing</code>といわれていますが、なんとなく動いたみたいです！</p>

<p><br/></p>

<h2 id="コードを書く">コードを書く</h2>

<p>先に講座ででてきたコード全体を記載することにします。</p>

<p><b>counter.spec.js</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">import</span> <span class="synIdentifier">{</span> mount <span class="synIdentifier">}</span> from <span class="synConstant">'vue-test-utils'</span>
<span class="synStatement">import</span> Counter from <span class="synConstant">'../src/components/Counter.js'</span>
<span class="synStatement">import</span> expect from <span class="synConstant">'expect'</span>

describe(<span class="synConstant">'Counter'</span>, () =&gt; <span class="synIdentifier">{</span>

  it (<span class="synConstant">'default to a count of 0'</span>, () =&gt; <span class="synIdentifier">{</span>
    <span class="synIdentifier">let</span> wrapper = mount(Counter)

    expect(wrapper.vm.count).toBe(0)
  <span class="synIdentifier">}</span>)

<span class="synIdentifier">}</span>)
</pre>


<p>コードの細かい部分はさっぱりですが、<code>Counter</code>のプロパティっぽい<code>count</code>の値が0だったらOK！っていってるのはわかるかと思います。</p>

<p><br/></p>

<p>次に具体的な中身を見ていきたいと思います。<br/>
まず、気になるのは <code>let wrapper = mount(Counter)</code>の部分。 <br/>
公式ガイドによれば、<code>mount</code>はVueコンポーネントをマウントしてラップしたものを返し、ラッパーのvmプロパティにアクセスすることでVueインスタンスにアクセスできるようなことが書いてある。<br/>
このへんの理解がいまいちわからないけれども、コンポーネント渡してあげればそれを作って返してくれるぐらいの理解でいいのかな。<br/>
今回だと、コンポーネントではなく、ただのモジュールでちょっと不思議だけれども進める。</p>

<p>次に<code>expect</code>の部分。<br/>
これは、PHPUnitとかにもあったアサーションの部分。<br/>
メソッド名から何を期待しているのかはなんとなく想像ができると思う。<br/>
アサーションの部分も別のライブラリとのことで、講座では<code>expect</code>を導入していた。</p>

<p><b>expecのインストール</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ npm install expect <span class="synSpecial">--save-dev</span>
</pre>


<p><br/></p>

<p>ちなみに、expectのgithubをみると、<code>jest</code>と呼ばれる別のライブラリに移行するような記載があったので、今後はそっちを使うほうがいいのかもしれない。<br/>
とりあえずは、講座の通り<code>expect</code>のままでいく。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2Fmjackson%2Fexpect" title="mjackson/expect" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://github.com/mjackson/expect">github.com</a></cite></p>

<p><br/></p>

<p>それ以外に、<code>describe</code>とか<code>it</code>とか気になるけど、これが<code>mocha</code>の関数みたい。  <br/>
この辺については、書きながら学んでいくことにする。</p>

<p>次に、コードは直接でていないけど必要なライブラリ達。</p>

<p><code>vue-template-compiler</code>は、Vueのテンプレートをプリコンパイルしてくれるもの。<br/>
Vue.jsってブラウザで描画するときにテンプレートをコンパイルしてrender関数に置き換えるものと、事前にWebpackとかでプリコンパルしてrender関数に置き換えるタイプがあるんだけれども、この<code>vue-template-compile</code>はプリコンパイルをしてくれるライブラリ。</p>

<p>テストコードで単一コンポーネントとかをテストする際に、必須なのかな？あんまりよくわかってない。<br/>
今回もまだ<code>.vue</code>のファイルはないんだけれども、いれておく必要がある。</p>

<p><b>vue-template-compilerのインストール</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ npm install <span class="synSpecial">--save-dev</span> vue-template-compiler
</pre>


<p><br/></p>

<p>最後に、仮想ブラウザ環境を提供するライブラリをいれる。</p>

<p><b>仮想ブラウザ環境のパッケージを導入</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ npm install <span class="synSpecial">--save-dev</span> jsdom jsdom-global
</pre>


<p>こちらは公式のガイドに書いてある通り、実際のブラウザ環境で書いたコードを動かすことはできるけれども、いろんなブラウザあるから複雑だから、仮想環境で実行したほうがいいよてきなことが書いてある。<br/>
ブラウザで動かさずにNode.jsで動かすとのこと。</p>

<p>これをインストールしたら<code>JSDOM</code>のセットアップをしとく必要がある。<br/>
どこでするかというと、テストコードを実行する前のセットアップを行う機能があるみたいなのでこちらでやる。</p>

<p><code>setup.js</code>というファイルをプロジェクトルート配下に作成する。</p>

<p><b>setup.jsの作成</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink><span class="synStatement">touch</span> setup.js
</pre>


<p><br/></p>

<p>中身は、こんな感じ。  Node.jsで動かすのでES6のimportではなく、CommonJSのrequireで書く。<br/>
※この表現があってるか自信がない。</p>

<p><b>setup.js</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>require(<span class="synConstant">'jsdom-global'</span>)()
</pre>


<p><br/></p>

<p>最後に、<code>setup.js</code>をテストコード起動時に実行されるようにする。</p>

<p><b>package.json</b></p>

<pre class="code lang-json" data-lang="json" data-unlink>  &quot;<span class="synStatement">scripts</span>&quot;: <span class="synSpecial">{</span>
   &quot;<span class="synStatement">test</span>&quot;: &quot;<span class="synConstant">mocha-webpack --webpack-config webpack.config.js --require test/setup.js  test/**/*.spec.js</span>&quot;
  <span class="synSpecial">}</span>,
</pre>


<p><br/></p>

<p>いざ、実行！</p>

<p><b>実行</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ npm run <span class="synStatement">test</span>
 WEBPACK  Compiled successfully <span class="synError">in</span> 864ms

 MOCHA  Testing...


  Counter
    <span class="synConstant">1</span><span class="synError">)</span> default to a count of <span class="synConstant">0</span>


  <span class="synConstant">0</span> passing <span class="synPreProc">(</span><span class="synSpecial">26ms</span><span class="synPreProc">)</span>
  <span class="synConstant">1</span> failing

  <span class="synConstant">1</span><span class="synError">)</span> Counter
       default to a count of <span class="synConstant">0</span>:
     Error: expect<span class="synPreProc">(</span><span class="synSpecial">received</span><span class="synPreProc">)</span>.toBe<span class="synPreProc">(</span><span class="synSpecial">expected</span><span class="synPreProc">)</span> // Object.is equality
</pre>


<p>なんかエラーがでてびっくりしますが、内容をよく見ると、期待してた値と違うんじゃ！とちゃんとテストが動いていることが確認できました！</p>

<p><br/></p>

<h2 id="テストが通るようにする">テストが通るようにする①</h2>

<p><code>Counter.js</code>を修正します。
Vueインスタンスを作成するときのように`data関数'としてデータを持たせます。</p>

<p><b>Counter.js</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">export</span> <span class="synStatement">default</span> <span class="synIdentifier">{</span>
  data () <span class="synIdentifier">{</span>
    <span class="synStatement">return</span> <span class="synIdentifier">{</span>
      count: 0
    <span class="synIdentifier">}</span>
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>
</pre>


<p><br/></p>

<p>この状態でテストを実行すると、テストが通ることが確認できます！</p>

<p><b>テストが通った！</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>  Counter
    ✓ default to a count of <span class="synConstant">0</span>


  <span class="synConstant">1</span> passing <span class="synPreProc">(</span><span class="synSpecial">57ms</span><span class="synPreProc">)</span>

 MOCHA  Tests completed successfully
</pre>


<p>テストが通ったことで、ようやく、Counterコンポーネントのcountの値が最初は0であること、をテストしてたんだなぁと今更ながら気づきました。</p>

<p>ちなみに、<code>Counter.js</code>の中で、なんで'data()'みたいなのをちょろっと書くだけでいいんだろうと不思議だったのですが、コンポーネントをtemplateオプションで作成してるって考えればよいのですかね。</p>

<p><br/></p>

<h5 id="補足-自分の中のVuejsのコンポーネント">補足 自分の中のVue.jsのコンポーネント</h5>

<ul>
<li>単一ファイルコンポーネントとしてつくる(拡張子が.vueのやつ)</li>
<li>以下のようなオブジェクトをつくるだけのやつ</li>
</ul>


<p><b>こういうやつ</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synIdentifier">{</span> 
  template: `&lt;div&gt;hoge&lt;/div&gt;`
  data() <span class="synIdentifier">{</span>
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>
</pre>


<ul>
<li>上記テンプレートはrender関数に置き換える必要があって、ブラウザ側でコンパイルしなきゃいけないので、render関数を直接使うやつ</li>
</ul>


<p>書いといてあれだけど、以下の記事がわかりやすい！</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Faloerina01.github.io%2Fblog%2F2017-03-08-1%23vue%25E3%2583%2586%25E3%2583%25B3%25E3%2583%2597%25E3%2583%25AC%25E3%2583%25BC%25E3%2583%2588%25E3%2581%25AE%25E5%25AE%259F%25E8%25A3%2585%25E6%2596%25B9%25E6%25B3%2595" title="Vue2.x系のハマりどころ templateとコンパイラを完全解説するよ" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://aloerina01.github.io/blog/2017-03-08-1#vue%E3%83%86%E3%83%B3%E3%83%97%E3%83%AC%E3%83%BC%E3%83%88%E3%81%AE%E5%AE%9F%E8%A3%85%E6%96%B9%E6%B3%95">aloerina01.github.io</a></cite></p>

<p><br/></p>

<h2 id="DOMのレンダリングの内容を検証する">DOMのレンダリングの内容を検証する</h2>

<p>本題に戻ります。</p>

<p>さきほどは、Counterコンポーネントのcountの初期値が0であることを検証しました。
次にこういうこともできるんだよということで、Counterコンポーネントの内で描画される内容について検証します。</p>

<p>テストコードは以下の通りです。</p>

<p><b>counter.spec.js:</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">import</span> <span class="synIdentifier">{</span> mount <span class="synIdentifier">}</span> from <span class="synConstant">'vue-test-utils'</span>
<span class="synStatement">import</span> Counter from <span class="synConstant">'../src/components/Counter.js'</span>
<span class="synStatement">import</span> expect from <span class="synConstant">'expect'</span>

describe(<span class="synConstant">'Counter'</span>, () =&gt; <span class="synIdentifier">{</span>

 <span class="synIdentifier">let</span> wrapper = mount(Counter)

  it (<span class="synConstant">'default to a count of 0'</span>, () =&gt; <span class="synIdentifier">{</span>
    expect(wrapper.vm.count).toBe(0)
  <span class="synIdentifier">}</span>)
  
  <span class="synComment">//  Counerコンポーネント内のクラス.countのDOMノードのHTMLは0っていう文字を含んでるよね！</span>
  it (<span class="synConstant">'presents the current count'</span>, () =&gt; <span class="synIdentifier">{</span>
    expect(wrapper.find(<span class="synConstant">'.count'</span>).html()).toContain(0)
  <span class="synIdentifier">}</span>)

<span class="synIdentifier">}</span>)
</pre>


<p><br/></p>

<p>例のごとく、なんにがなんだかという状態だったので、先にテストが通るようにコードを修正します。</p>

<p><b>Counter.js</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">export</span> <span class="synStatement">default</span> <span class="synIdentifier">{</span>
  template: `
    &lt;div&gt;
      &lt;span <span class="synStatement">class</span>=<span class="synConstant">&quot;count&quot;</span> v-text=<span class="synConstant">&quot;count&quot;</span>&gt;&lt;/span&gt;
    &lt;/div&gt;
  `,
  data () <span class="synIdentifier">{</span>
    <span class="synStatement">return</span> <span class="synIdentifier">{</span>
      count: 0
    <span class="synIdentifier">}</span>
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>
</pre>


<p><br/></p>

<p><code>Counter.js</code>にテンプレートオプションを追加して、countの内容を描画するように修正しました。</p>

<p>テストコードの<code>wrapper.find('.count').html()).toContain(0)</code>は、コメントにも書いてある通り、「Counerコンポーネント内のクラス.countのDOMノードのHTMLは0っていう文字を含んでるよね」ということをアサートしています。</p>

<p>mountが返却する、wrapperですが、公式ガイドの通り、便利なメソッドがたくさんあります。<br/>
ここでは、<code>find()</code>で指定したクラス名を保持するDOMノードを取得して、<code>html()</code>でDOMノードを文字列化しているという流れですかね。<br/>
なんだかすごい！</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fvue-test-utils.vuejs.org%2Fja%2Fapi%2Fwrapper%2F%23html" title="Wrapper | Vue Test Utils" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://vue-test-utils.vuejs.org/ja/api/wrapper/#html">vue-test-utils.vuejs.org</a></cite></p>

<p><br/></p>

<h2 id="イベントの結果を検証する">イベントの結果を検証する</h2>

<p>DOMの内容を検証したら、次はイベントの内容を検証します。</p>

<p>まずはテストコートになります。<br/>
<code>button</code>タグを持つDOMノードを取得して、そのDOMノードのイベント<code>click</code>を実行するという内容になります。<br/>
もう画面で何回もクリックしなくていいんだね！という感動があります。<br/>
ちなみにひっそりと、Counterコンポーネントのmountのタイミングをテスト実行時に1回だけ読み込むパターンから、状態が残っちゃうみたいなので各テストごとに読み込むように変更しています。 <br/>
これも、いろんなイベントを呼びながら検証していくなら、一回だけ読むこんでおくってのもありですかね。<br/>
※これ以外にも<code>beforEach</code>なるものを使うと、テストステートメントごとに、初期設定を指定できるみたいなので、通常はこっちを使うのかも。</p>

<p><b>counter.spec.js</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">import</span> <span class="synIdentifier">{</span> mount <span class="synIdentifier">}</span> from <span class="synConstant">'vue-test-utils'</span>
<span class="synStatement">import</span> Counter from <span class="synConstant">'../src/components/Counter.js'</span>
<span class="synStatement">import</span> expect from <span class="synConstant">'expect'</span>

describe(<span class="synConstant">'Counter'</span>, () =&gt; <span class="synIdentifier">{</span>


  it (<span class="synConstant">'default to a count of 0'</span>, () =&gt; <span class="synIdentifier">{</span>
    <span class="synIdentifier">let</span> wrapper = mount(Counter)
    expect(wrapper.vm.count).toBe(0)
  <span class="synIdentifier">}</span>)

  it (<span class="synConstant">'increments the count the button is clicked'</span>, () =&gt; <span class="synIdentifier">{</span>
    <span class="synIdentifier">let</span> wrapper = mount(Counter)
    <span class="synComment">// 最初は0だけれども</span>
    expect(wrapper.vm.count).toBe(0)

    <span class="synComment">// ボタンをおすと</span>
    wrapper.find(<span class="synConstant">'button'</span>).trigger(<span class="synConstant">'click'</span>);

    <span class="synComment">// 1になる</span>
    expect(wrapper.vm.count).toBe(1)
  <span class="synIdentifier">}</span>)


  it (<span class="synConstant">'presents the current count'</span>, () =&gt; <span class="synIdentifier">{</span>
    <span class="synComment">// wrapperを各テストで使いまわすと、↑の状態が残ったままなので、mountしなおす。</span>
    <span class="synIdentifier">let</span> wrapper = mount(Counter)
    expect(wrapper.find(<span class="synConstant">'.count'</span>).html()).toContain(0)
  <span class="synIdentifier">}</span>)

<span class="synIdentifier">}</span>)
</pre>


<p>肝心の<code>Counter.js</code>はこんな感じになりました。</p>

<p><b>Counter.js</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">export</span> <span class="synStatement">default</span> <span class="synIdentifier">{</span>
  template: `
    &lt;div&gt;
      &lt;span <span class="synStatement">class</span>=<span class="synConstant">&quot;count&quot;</span> v-text=<span class="synConstant">&quot;count&quot;</span>&gt;&lt;/span&gt;
      &lt;button @click=<span class="synConstant">&quot;count++&quot;</span>&gt;Increment&lt;/button&gt;
    &lt;/div&gt;
  `,
  data () <span class="synIdentifier">{</span>
    <span class="synStatement">return</span> <span class="synIdentifier">{</span>
      count: 0
    <span class="synIdentifier">}</span>
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>
</pre>


<p>これ以外にも本格的に使うには、mockの準備だったり、VueCliで運用するとどんな感じなんだろうと、気になる点がいっぱいあるので、引き続き学習していきます。</p>

<h2 id="補足">補足</h2>

<h3 id="単一ファイルコンポーネントをテストする">単一ファイルコンポーネントをテストする</h3>

<p>テンプレートオプションでつくったコンポーネントをテストしてたけれども、実際は単一ファイルコンポーネントでやるケースがほとんど。</p>

<p>動画のエピソード2を見れば解説しているんだけれども追記。</p>

<p>まずは、単純に.vueの構文に置き換えます。</p>

<p><b>Counter.vue</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>&lt;template&gt;
&lt;div&gt;
  &lt;span <span class="synStatement">class</span>=<span class="synConstant">&quot;count&quot;</span> v-text=<span class="synConstant">&quot;count&quot;</span>&gt;&lt;/span&gt;
  &lt;button @click=<span class="synConstant">&quot;count++&quot;</span> <span class="synStatement">class</span>=<span class="synConstant">&quot;increment&quot;</span>&gt;Increment&lt;/button&gt;
&lt;/div&gt;
&lt;/template&gt;

&lt;script&gt;
<span class="synStatement">export</span> <span class="synStatement">default</span> <span class="synIdentifier">{</span>
  data () <span class="synIdentifier">{</span>
    <span class="synStatement">return</span> <span class="synIdentifier">{</span>
      count: 0
    <span class="synIdentifier">}</span>
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>
&lt;/script&gt;
</pre>


<p><br/></p>

<p>次にwebpackに.vueのファイルをプリコンパイルしてね、という定義を書きます。</p>

<p><b>webpack.config.js</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">const</span> VueLoaderPlugin = require(<span class="synConstant">'vue-loader/lib/plugin'</span>)

module.exports = <span class="synIdentifier">{</span>
  mode: <span class="synConstant">'development'</span>,
  module: <span class="synIdentifier">{</span>
    rules: <span class="synIdentifier">[</span>
      <span class="synIdentifier">{</span>
        test: <span class="synConstant">/\.vue$/</span>,
        use: <span class="synConstant">'vue-loader'</span>
      <span class="synIdentifier">}</span>
    <span class="synIdentifier">]</span>
  <span class="synIdentifier">}</span>,
  plugins: <span class="synIdentifier">[</span>
    <span class="synComment">// 動画で使っているvue-loaderより新しいvue-loaderはpluginの定義が必須みたい</span>
    <span class="synStatement">new</span> VueLoaderPlugin()
  <span class="synIdentifier">]</span>
<span class="synIdentifier">}</span>;
</pre>


<p>最後に<code>vue-loader</code>をインストールします。</p>

<p><b>vue-loaderのインストール</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ npm install <span class="synSpecial">--save-dev</span> vue-loader
</pre>


<p>これだけで、単一ファイルコンポーネントのテストができるようになります。</p>

<p><br/></p>

<h3 id="watchオプション">watchオプション</h3>

<p>これもエピソード3で紹介されているんだけれども、ものすごく感動した。</p>

<p><b>watch用のスクリプト追加</b></p>

<pre class="code lang-json" data-lang="json" data-unlink>  &quot;<span class="synStatement">scripts</span>&quot;: <span class="synSpecial">{</span>
    &quot;<span class="synStatement">test</span>&quot;: &quot;<span class="synConstant">mocha-webpack --webpack-config webpack.config.js --require test/setup.js  test/**/*.spec.js</span>&quot;,
    &quot;<span class="synStatement">watch</span>&quot;: &quot;<span class="synConstant">mocha-webpack --webpack-config webpack.config.js --watch --require test/setup.js  test/**/*.spec.js</span>&quot;
  <span class="synSpecial">}</span>,
</pre>


<p>いや、単純にファイルの変更監視をしてくれて、変更がある度にテストランナーが走るみたいなやつなんだけれども、使ってみると、テスト駆動感が半端ない。</p>

<p>ちょっとクラス名変えたいなあとか、メソッド名かえたいなってときも、変更後にちゃんと動くか確認したりするのが結構めんどうで、どうしようかななんで葛藤があるんだけれども、watchしてると、がんがんかえていこうって気持ちになる。</p>

-----
--------
AUTHOR: konoemario
TITLE: sedで正規表現で置換したときのメモ
BASENAME: 2018/11/07/121944
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 11/07/2018 12:19:44
CATEGORY: プログラム
CATEGORY: 正規表現
-----
BODY:
<p>正規表現系のメタ文字の意味とかって、検索しにくいよね。</p>

<h3>やりたいこと</h3>

<p>たまに、こんな感じのHTMLがあって、</p>

<p><b>もととなるHTML</b></p>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span><span class="synStatement">option</span><span class="synIdentifier"> </span><span class="synType">value</span><span class="synIdentifier">=</span><span class="synConstant">&quot;&quot;</span><span class="synIdentifier">&gt;</span>都道府県を選択<span class="synIdentifier">&lt;/</span><span class="synStatement">option</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;</span><span class="synStatement">option</span><span class="synIdentifier"> </span><span class="synType">value</span><span class="synIdentifier">=</span><span class="synConstant">&quot;北海道&quot;</span><span class="synIdentifier"> &gt;</span>北海道<span class="synIdentifier">&lt;/</span><span class="synStatement">option</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;</span><span class="synStatement">option</span><span class="synIdentifier"> </span><span class="synType">value</span><span class="synIdentifier">=</span><span class="synConstant">&quot;青森県&quot;</span><span class="synIdentifier"> &gt;</span>青森県<span class="synIdentifier">&lt;/</span><span class="synStatement">option</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;</span><span class="synStatement">option</span><span class="synIdentifier"> </span><span class="synType">value</span><span class="synIdentifier">=</span><span class="synConstant">&quot;岩手県&quot;</span><span class="synIdentifier"> &gt;</span>岩手県<span class="synIdentifier">&lt;/</span><span class="synStatement">option</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;</span><span class="synStatement">option</span><span class="synIdentifier"> </span><span class="synType">value</span><span class="synIdentifier">=</span><span class="synConstant">&quot;宮城県&quot;</span><span class="synIdentifier"> &gt;</span>宮城県<span class="synIdentifier">&lt;/</span><span class="synStatement">option</span><span class="synIdentifier">&gt;</span>
</pre>


<p><br/></p>

<p>Vue.jsかなんかを使うことになり、なんやかんやでHTMLのoptionsをslotで利用するのではなく、オブジェクトの形として持たせたいときがある。</p>

<p><b>ほしい形</b></p>

<pre class="code" data-lang="" data-unlink>{
  value:&#39;&#39;,
  title:&#39;都道府県を選択&#39; 
}, 
{
  value:&#39;北海道&#39;,
  title:&#39;北海道&#39; 
}, 
{
  value:&#39;青森県&#39;,
  title:&#39;青森県&#39; 
}, 
{
  value:&#39;岩手県&#39;,
  title:&#39;岩手県&#39; 
}, 
{
  value:&#39;宮城県&#39;,
  title:&#39;宮城県&#39; 
}, </pre>


<p><br/></p>

<p>5個ぐらい置き換えたところで、なんだかなぁということで、置き換える方法を学ぶことにした。結果手作業よりも時間がかかった。<br/>
次から生かせるよ、うん。</p>

<p><br/></p>

<h2>作業記録</h2>

<p>てきとうなエディタを開いて、もととなるHTMLを放り込む。
<code>text</code>というファイル名をつけて保存する。</p>

<p><b>textというファイルで保存</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink><span class="synStatement">&lt;</span>option <span class="synIdentifier">value</span>=<span class="synStatement">&quot;&quot;&gt;</span>都道府県を選択<span class="synStatement">&lt;</span>/option<span class="synStatement">&gt;</span>
<span class="synStatement">&lt;</span>option <span class="synIdentifier">value</span>=<span class="synStatement">&quot;</span><span class="synConstant">北海道</span><span class="synStatement">&quot;</span> <span class="synStatement">&gt;</span>北海道<span class="synStatement">&lt;</span>/option<span class="synStatement">&gt;</span>
<span class="synStatement">&lt;</span>option <span class="synIdentifier">value</span>=<span class="synStatement">&quot;</span><span class="synConstant">青森県</span><span class="synStatement">&quot;</span> <span class="synStatement">&gt;</span>青森県<span class="synStatement">&lt;</span>/option<span class="synStatement">&gt;</span>
<span class="synStatement">&lt;</span>option <span class="synIdentifier">value</span>=<span class="synStatement">&quot;</span><span class="synConstant">岩手県</span><span class="synStatement">&quot;</span> <span class="synStatement">&gt;</span>岩手県<span class="synStatement">&lt;</span>/option<span class="synStatement">&gt;</span>
<span class="synStatement">&lt;</span>option <span class="synIdentifier">value</span>=<span class="synStatement">&quot;</span><span class="synConstant">宮城県</span><span class="synStatement">&quot;</span> <span class="synStatement">&gt;</span>宮城県<span class="synStatement">&lt;</span>/option<span class="synStatement">&gt;</span>
</pre>


<p>「北海道」という都道県名のみ正規表現で抽出する。</p>

<p><b>正規表現で抽出</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ <span class="synStatement">grep</span> <span class="synSpecial">-E</span> <span class="synSpecial">-o</span>  <span class="synStatement">'</span><span class="synConstant">&gt;(.*)&lt;</span><span class="synStatement">'</span> <span class="synStatement">test</span>
<span class="synStatement">&gt;</span>都道府県を選択<span class="synStatement">&lt;</span>
<span class="synStatement">&gt;</span>北海道<span class="synStatement">&lt;</span>
<span class="synStatement">&gt;</span>青森県<span class="synStatement">&lt;</span>
<span class="synStatement">&gt;</span>岩手県<span class="synStatement">&lt;</span>
<span class="synStatement">&gt;</span>宮城県<span class="synStatement">&lt;</span>
</pre>


<p><br/></p>

<p><code>`-E</code>オプションはgrepで拡張正規表現を使うっていうもの。grepはgrepで正規表現の方言があるみたいなので、込み入ったことをするときは注意が必要そう。<br/>
<code>-o</code>オプションは、マッチした箇所のみ抽出する。このオプションがないとマッチした部分が含まれる行がすべてが出力される。</p>

<p>正規表現そのものの意味は、>で始まり、&lt;で終わる間の文字を取得したいという願いを込めたもの。<br/>
括弧でくくった箇所だけほしかったんだけれども、grepの正規表現って指定した箇所のみ抽出ってできないのかしら。</p>

<p>とりあえず先ほどの結果を<code>test2</code>に保存しとく。</p>

<p><b>とりあえず保存</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ <span class="synStatement">grep</span> <span class="synSpecial">-E</span> <span class="synSpecial">-o</span>  <span class="synStatement">'</span><span class="synConstant">&gt;(.*)&lt;</span><span class="synStatement">'</span> <span class="synStatement">test</span> <span class="synStatement">&gt;</span> test2
</pre>


<p><br/></p>

<p>調べると、<code>sed</code>コマンドは正規表現で該当箇所のみ抽出ができるみたい。</p>

<p>こんな感じの基本があって、</p>

<p><b>sedの基本構文</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$  <span class="synStatement">sed</span>  <span class="synStatement">&quot;</span><span class="synConstant">s/置き換え前/置き換え後 /</span><span class="synStatement">&quot;</span>
</pre>


<p><br/></p>

<p><code>-r</code>オプションで正規表現が使えて、正規表現で括弧で指定した箇所は、<code>\1</code>で参照できるとのこと。<br/>
括弧が複数あれば、''\1,'\2'と対応してく。</p>

<p><b>つかってみる</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$  cat test2 | <span class="synStatement">sed</span> <span class="synSpecial">-r</span> s<span class="synStatement">&quot;</span><span class="synConstant">/&gt;(.*)&lt;/</span><span class="synSpecial">\1</span><span class="synConstant">/</span><span class="synStatement">&quot;</span>
都道府県を選択
北海道
青森県
岩手県
宮城県
</pre>


<p><br/></p>

<p>お、いい感じに参照出来ました。</p>

<p>あとは、ほしい形に整形するだけで終わり。</p>

<p><b>無事完了</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ <span class="synStatement">grep</span> <span class="synSpecial">-E</span> <span class="synSpecial">-o</span>  <span class="synStatement">'</span><span class="synConstant">&gt;.*&lt;</span><span class="synStatement">'</span> <span class="synStatement">test</span> |<span class="synStatement">sed</span> <span class="synSpecial">-r</span> s<span class="synStatement">&quot;</span><span class="synConstant">/&gt;(.*)&lt;/{ value: </span><span class="synSpecial">\1</span><span class="synConstant">, title: </span><span class="synSpecial">\1</span><span class="synConstant">, },/</span><span class="synStatement">&quot;</span>
<span class="synSpecial">{</span> value: 都道府県を選択, title: 都道府県を選択, <span class="synSpecial">}</span>,
<span class="synSpecial">{</span> value: 北海道, title: 北海道, <span class="synSpecial">}</span>,
<span class="synSpecial">{</span> value: 青森県, title: 青森県, <span class="synSpecial">}</span>,
<span class="synSpecial">{</span> value: 岩手県, title: 岩手県, <span class="synSpecial">}</span>,
<span class="synSpecial">{</span> value: 宮城県, title: 宮城県, <span class="synSpecial">}</span>,
</pre>


<p>改行したければしたい箇所で<code>\n</code>をいれる。</p>

-----
--------
AUTHOR: konoemario
TITLE: dockerコンテナでcomposerのinstallに失敗する
BASENAME: 2018/11/01/193427
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 11/01/2018 19:34:27
CATEGORY: プログラム
CATEGORY: docker
CATEGORY: PHP
-----
BODY:
<h2>日記</h2>

<p>Vue.jsの本を読んでて、Vue.jsをつかってるとデータ駆動的になる～っていう記載があった。<br/>
なんとか駆動とかって使うと、とてもかっこいい感じがして、こういうことが言えるようになりたいなぁなんて思ってた。</p>

<p>先日、Vue.jsを使って、入力フォームの値をサーバーにPOSTするってことをした。<br/>
Ajaxじゃなくって普通のPOST。<br/>
このとき、サーバー側のバリデーションエラーになった場合、その結果をどうやって画面に表示させようかって悩んでた。</p>

<p>というのも、VueはDOMを直接制御して表示させるのではなくって、DOMとバインドしているデータを変更してあげるべきだから。(べき、というのは、データを変更したほうが設計として、とてもわかりやすいもになるということ)</p>

<p>このときようやく、あーデータ駆動ってこういうことなんだなって実感した。<br/>
優秀な人は理論だけですんなりいけるんだろうけど、頭が悪い自分は、1年近くVueを触ってようやくこのことが実感できた。</p>

<p>うん、Vue.jsはデータ駆動だよ。</p>

<p>また、今回みたいなAjaxではなくって普通にPOSTするケースの場合、Vue.jsじゃなくってもいい、もしくはVue.jsじゃないほうがいいのかなーなんて気もした。</p>

<p>流行りだし、便利だってことで、Vue.jsだったりReactをさわってるけれども、クライアントに状態をもたせる必要があるアプリケーションだからこそ生きる気がします。</p>

<h2>本題</h2>

<p>しょうもない話。</p>

<p>以前につくったPHPベースのコンテナを久しぶりに作成～起動しようと、<code>docker-compose build</code>をしたら、composeでの導入部分でエラーになった。</p>

<p><br/>
<b>エラーの内容</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>Step <span class="synConstant">7</span>/<span class="synConstant">13</span> : RUN php <span class="synSpecial">-r</span> <span class="synStatement">&quot;</span><span class="synConstant">copy('https://getcomposer.org/installer', 'composer-setup.php');</span><span class="synStatement">&quot;</span>   &amp;&amp; php <span class="synSpecial">-r</span> <span class="synStatement">&quot;</span><span class="synConstant">if (hash_file('SHA384', 'composer-setup.php') === '544e09ee996cdf60ece3804abc52599c22b1f40f4323403c44d44fdfdd586475ca9813a858088ffbc1f233e9b180f061') { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('composer-setup.php'); } echo PHP_EOL;</span><span class="synStatement">&quot;</span>   &amp;&amp; php composer-setup.php   &amp;&amp; php <span class="synSpecial">-r</span> <span class="synStatement">&quot;</span><span class="synConstant">unlink('composer-setup.php');</span><span class="synStatement">&quot;</span>   &amp;&amp; <span class="synStatement">mv</span> composer.phar /usr/<span class="synStatement">local</span>/bin/composer
 <span class="synSpecial">---&gt;</span> Running <span class="synError">in</span> f17c38d91481
Installer corrupt
Could not open input file: composer-setup.php
ERROR: Service <span class="synStatement">'</span><span class="synConstant">admin</span><span class="synStatement">'</span> failed to build: The <span class="synStatement">command</span> <span class="synStatement">'</span><span class="synConstant">/bin/sh -c php -r &quot;copy(</span><span class="synStatement">'</span>https://getcomposer.org/installer<span class="synStatement">'</span><span class="synConstant">, </span><span class="synStatement">'</span>composer-setup.php<span class="synStatement">'</span><span class="synConstant">);&quot;   &amp;&amp; php -r &quot;if (hash_file(</span><span class="synStatement">'</span>SHA384<span class="synStatement">'</span><span class="synConstant">, </span><span class="synStatement">'</span>composer-setup.php<span class="synStatement">'</span><span class="synConstant">) === </span><span class="synStatement">'</span>544e09ee996cdf60ece3804abc52599c22b1f40f4323403c44d44fdfdd586475ca9813a858088ffbc1f233e9b180f061<span class="synStatement">'</span><span class="synConstant">) { echo </span><span class="synStatement">'</span>Installer verified<span class="synStatement">'</span><span class="synConstant">; } else { echo </span><span class="synStatement">'</span>Installer corrupt<span class="synStatement">'</span><span class="synConstant">; unlink(</span><span class="synStatement">'</span>composer-setup.php<span class="synStatement">'</span><span class="synConstant">); } echo PHP_EOL;&quot;   &amp;&amp; php composer-setup.php   &amp;&amp; php -r &quot;unlink(</span><span class="synStatement">'</span>composer-setup.php<span class="synStatement">'</span><span class="synConstant">);&quot;   &amp;&amp; mv composer.phar /usr/local/bin/composer</span><span class="synStatement">'</span> returned a non-zero code: <span class="synConstant">1</span>
</pre>


<p><br/></p>

<p><code>composer-setup.php</code>がないよっていわてて、あれーって思って悩んでたんだけど、よくみるとファイルのハッシュチェックでエラーになってることに気づく。  ('Installer corrupt'←これね)</p>

<p>composerのサイトで確認してみると、案の定ハッシュの値がかわっていた。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgetcomposer.org%2Fdownload%2F" title="Composer" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://getcomposer.org/download/">getcomposer.org</a></cite></p>

<p>composerが新しくなる度に、ハッシュの値を書き換えなきゃいけないのかしら。<br/>
<code>docker build</code>でけっこう時間かかって、途中でこけると悲しいので、バージョンを固定させる的ななにかがあればいいのかな。</p>

-----
--------
AUTHOR: konoemario
TITLE: CloudFunctionsを試す
BASENAME: 2018/10/16/230359
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 10/16/2018 23:03:59
CATEGORY: Firebase
CATEGORY: プログラム
CATEGORY: Node.js
IMAGE: https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20181015/20181015232348.png
-----
BODY:
<h1>日記</h1>

<p>いろいろとつまみぐいをするような学習方法は螺旋階段のように、知識がついていって即効性はある反面、体系だった知識になりにくくって応用が利かないのがよくわかる。<br/>
どこかで一度立ち止まって、基礎を学んだほうがいいなーと思う今日この頃。</p>

<p><br/></p>

<h1>本題</h1>

<p>サーバーレスの流れに乗っかって、画像とかデータとかをFirebaseのFireStogageだったりRealtimeDatabaseにデータをつっこんでたりしている。</p>

<p>FireStorageにあげた画像のサイズがおもいのほかでかくって、もっと軽くして保存しておきたい。</p>

<p>いろいろな方法がありそうなんだけれども、せっかくなのでCloudFunctionsをつかってみる。</p>

<p>CloudFunctionsはNode.jsで書いたコードを実行してくれるサービスでAPIとして利用できる。<br/>
コードが実行されるタイミングは通常のAPIのようにHTTPリクエストがあったらレスポンスをするものだったり、FIrebaseのほかのサービスの何かの処理をトリガーにして動かしたりといろいろなことができるみたい。</p>

<p>今回は、FIrbase Storageにpng画像をあげると、jepegに変換してくれるというサンプルを実行してみる。<br/>
肝心の画像の圧縮はまだできてなくってサンプルコードを動かしただけの内容。</p>

<p><br/></p>

<h2>事前準備</h2>

<p>何をしたか描いておきたかったのに、時間が空きすぎて何したかあんま覚えていないけれども、こんなことをしたはず。</p>

<ul>
<li>Google Cloud Platformのアカウントを用意しておく</li>
<li>プロジェクトをつくっておく</li>
<li>CloudFuntionsを有効しておく</li>
</ul>


<h2>サンプルコード</h2>

<p>firebaseのサンプルが以下のリポジトリにいっぱいある。<br/>
こちらの<code>convert-image</code>を試して見る。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2Ffirebase%2Ffunctions-samples" title="firebase/functions-samples" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://github.com/firebase/functions-samples">github.com</a></cite></p>

<p><b>サンプルプロジェクトをclone</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ <span class="synStatement">mkdir</span> 任意のディレクトリ/firebase
$ <span class="synStatement">cd</span> 任意のディレクトリ/firebase
$ git clone https://github.com/firebase/<span class="synStatement">functions</span>-samples.git
</pre>


<p><br/></p>

<p>CloudFunctionsで動かすコードをデプロイするにはfirebaseのCLIツールである<code>firebase-tools</code>が必要みたいなのでインストールする。</p>

<p><b>firebase cliの導入</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ npm install <span class="synSpecial">-g</span> firebase-tools
</pre>


<p><br/></p>

<p>インストールしたら、サンプルコードのディレクトリに移動。</p>

<p><b>convert-imageを試してみる</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ <span class="synStatement">cd</span> <span class="synStatement">functions</span>-samples/convert-images/
</pre>


<p><br/></p>

<p>中身は、こんな感じ。</p>

<p><b>ディレクトリ構成</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ tree <span class="synSpecial">-L</span> <span class="synConstant">2</span>
.
├── README.md
├── firebase.json
└── <span class="synStatement">functions</span>
    ├── index.js
    ├── package-lock.json
    └── package.json
</pre>


<p>firebase.jsonが気になったけれども、中身を見ると<code>{}</code>だけが記載されており空っぽ。<br/>
READMEの通り、上記ディレクトリで<code>firebase deploy</code>を実行してみる。</p>

<p><b>デプロイ</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ firebase deploy

Error: Command requires authentication, please run firebase login
</pre>


<p><br/></p>

<p>ログインしてとのことなので、まずはログインする。</p>

<p><b>firebaseにログイン</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ firebase login

Visit this URL on any device to log <span class="synError">in</span>:
https://accounts.google.com/o/oauth2/auth?<span class="synIdentifier">client_id</span>=省略
Waiting <span class="synStatement">for</span> authentication...

✔  Success<span class="synStatement">!</span> Logged <span class="synStatement">in</span> as xxxxxxxxxxx
</pre>


<p><br/></p>

<p>Google認証画面がブラウザで表示され、ぽちぽちしたことでログインできた。</p>

<p>deployするにあたっては、<code>npm install</code>でpakage.jsonに書かれているパッケージたちをインストールしておく必要があるみたい。<br/>
必要なものはCloud Funcution側で依存解決するのかなと思ってたので意外。</p>

<p><b>firebaseにログイン</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ npm install
</pre>


<p><br/></p>

<p>パッケージをインストールしたら、再度デプロイしてみる。</p>

<p><b>firebaseにログイン</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ firebase deploy
$ firebase deploy

<span class="synStatement">===</span> Deploying to <span class="synStatement">'</span><span class="synConstant">osake...プロジェクト名</span><span class="synStatement">'</span>...

i  deploying <span class="synStatement">functions</span>
i  <span class="synStatement">functions</span>: ensuring necessary APIs are enabled...
✔  <span class="synStatement">functions</span>: all necessary APIs are enabled
i  <span class="synStatement">functions</span>: preparing <span class="synStatement">functions</span> directory <span class="synStatement">for</span> uploading...
i  <span class="synStatement">functions</span>: packaged <span class="synStatement">functions</span> <span class="synPreProc">(</span>53.05 KB<span class="synPreProc">)</span> <span class="synStatement">for</span> uploading
✔  <span class="synStatement">functions</span>: <span class="synStatement">functions</span> folder uploaded successfully
i  <span class="synStatement">functions</span>: creating Node.js <span class="synConstant">8</span> function imageToJPG<span class="synPreProc">(</span>us-central1<span class="synPreProc">)</span>...
✔  <span class="synStatement">functions[</span>imageToJPG(us-central1)<span class="synStatement">]</span>: Successful create operation. 

✔  Deploy <span class="synStatement">complete!</span>
</pre>


<p>なんだかデプロイできたみたい。</p>

<p>過去にブラウザからぽちっと3つほどfirebaseのプロジェクトを作ってたんだけど、そのうちの一つにデプロイされたみたい。<br/>
デフォルトのプロジェクトみたいな設定をした記憶がちょっとないんだけれども、どうなっているんだろう。</p>

<p>おそらくは、firebase-cliをつかって、<code>firebase init</code>みたいなコマンドをたたくことで、そのディレクトリに紐づくプロジェクトとかを設定するんだと思う。
（その結果firebase.jsonが吐かれるんだとも)</p>

<p><b>※参考 プロジェクト一覧</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ firebase list
┌───────────┬───────────────────────┬─────────────┐
│ Name      │ Project ID / Instance │ Permissions │
├───────────┼───────────────────────┼─────────────┤
│ scrape    │ scrape-xxxxx          │ Owner       │
├───────────┼───────────────────────┼─────────────┤
│ osake     │ osake-xxxxx           │ Owner       │
├───────────┼───────────────────────┼─────────────┤
│ nuxt-blog │ nuxt-blog-xxxxx       │ Owner       │
└───────────┴───────────────────────┴─────────────┘
</pre>


<p>さっそく、ブラウザでコンソールにログインして、対象のプロジェクトのFunctionsをみてみるとなんかできていることが確認できた。</p>

<p><figure class="figure-image figure-image-fotolife" title="Cloud Functionsの画面"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20181015/20181015232348.png" alt="f:id:konoemario:20181015232348p:plain" title="f:id:konoemario:20181015232348p:plain" class="hatena-fotolife" itemprop="image"></span><figcaption>Cloud Functionsの画面</figcaption></figure></p>

<p><br/></p>

<p>さっそく、該当のプロジェクトのStorageにpng画像をあげてみた。<br/>
うまくいけば、jpegに変換されるはず。</p>

<p><figure class="figure-image figure-image-fotolife" title="CloudStorageにアップロード"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20181015/20181015235954.png" alt="f:id:konoemario:20181015235954p:plain" title="f:id:konoemario:20181015235954p:plain" class="hatena-fotolife" itemprop="image"></span><figcaption>CloudStorageにアップロード</figcaption></figure></p>

<p><br/></p>

<p>どれくらいかかるのかなーとしばらく(5ふんぐらい)待つもjpeg画像ができる気配がない。(ブラウザのリロードを忘れずに。)</p>

<p>Functionsでログを確認すると、<code>admin is not defined</code>というエラーメッセージを吐いていた。</p>

<p><figure class="figure-image figure-image-fotolife" title="CloudFunctionsでエラー"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20181016/20181016000409.png" alt="f:id:konoemario:20181016000409p:plain" title="f:id:konoemario:20181016000409p:plain" class="hatena-fotolife" itemprop="image"></span><figcaption>CloudFunctionsでエラー</figcaption></figure></p>

<p><br/></p>

<p><a href="https://firebase.google.com/docs/functions/get-started?hl=ja">公式のチュートリアル</a>を参考に、以下のコードを追加して、再度デプロイすることに。</p>

<p><b>index.js</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synConstant">'use strict'</span>;

<span class="synStatement">const</span> functions = require(<span class="synConstant">'firebase-functions'</span>);

<span class="synComment">// 追加</span>
<span class="synStatement">const</span> admin = require(<span class="synConstant">'firebase-admin'</span>);
admin.initializeApp();
<span class="synComment">// ここまで</span>

<span class="synStatement">const</span> mkdirp = require(<span class="synConstant">'mkdirp-promise'</span>);
<span class="synStatement">const</span> spawn = require(<span class="synConstant">'child-process-promise'</span>).spawn;
<span class="synStatement">const</span> path = require(<span class="synConstant">'path'</span>);
<span class="synStatement">const</span> os = require(<span class="synConstant">'os'</span>);
<span class="synStatement">const</span> fs = require(<span class="synConstant">'fs'</span>);
</pre>


<p><br/></p>

<p>デプロイ後に再度画像をあげなおすと、無事、jpeg画像が生成されていることが確認できた。すごい。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20181016/20181016225645.png" alt="f:id:konoemario:20181016225645p:plain" title="f:id:konoemario:20181016225645p:plain" class="hatena-fotolife" itemprop="image"></span></p>

<p>次は圧縮していく。</p>

-----
--------
AUTHOR: konoemario
TITLE: Nuxt.jsでaxiosを使うときのパターン
BASENAME: 2018/10/13/184817
STATUS: Draft
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 10/13/2018 18:48:17
-----
BODY:
<h3>いつもの</h3>

<p>サーバーサイドレンダリングはいらないぜパターン。</p>

<p><b>index.vue</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">import</span> axios from <span class="synConstant">'axios'</span>

<span class="synStatement">export</span> <span class="synStatement">default</span> <span class="synIdentifier">{</span>
  data() <span class="synIdentifier">{</span>
    <span class="synStatement">return</span> <span class="synIdentifier">{</span>
      articles: <span class="synIdentifier">[]</span>
    <span class="synIdentifier">}</span>
  <span class="synIdentifier">}</span>,
  created() <span class="synIdentifier">{</span>
    console.log(<span class="synConstant">'index page is created'</span>)
    axios.get(<span class="synConstant">'https://osake-d4cfe.firebaseio.com/articles.json'</span>)
    .then(res =&gt; <span class="synIdentifier">{</span>
      <span class="synIdentifier">this</span>.articles = res.data
    <span class="synIdentifier">}</span>)
    .<span class="synStatement">catch</span>(error =&gt; <span class="synIdentifier">{</span>
      console.log(error)
    <span class="synIdentifier">}</span>)
  <span class="synIdentifier">}</span>,
<span class="synIdentifier">}</span>
</pre>


<ul>
<li>Vuex.jsでaxiosをシンプルに使うときのパターン</li>
<li>Nuxt.jsだからといってとくだんなにもかわらない</li>
<li>async await でもいいんだけれども話が別に方向にいきそうなのであんまり触れない</li>
</ul>


<p><br/></p>

<h3>いつもの + Nuxt.jsのaxiosプラグインを使用</h3>

<p>Nuxt.jsのプラグインとして用意されているaxiosをせっかくだから利用してみるパターン。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2Fnuxt-community%2Faxios-module" title="nuxt-community/axios-module" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://github.com/nuxt-community/axios-module">github.com</a></cite></p>

<p><b>インストール</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ npm install @nuxtjs/axios
</pre>


<p><br/></p>

<p><b>nuxt.config.js</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>module.exports = <span class="synIdentifier">{</span>
  modules: <span class="synIdentifier">[</span>
    <span class="synConstant">'@nuxtjs/axios'</span>,
  <span class="synIdentifier">]</span>,
  axios: <span class="synIdentifier">{</span>
    <span class="synComment">// ここにオプションを設定できたりする</span>
    <span class="synComment">// proxyHeaders: false</span>
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>
</pre>


-----
--------
AUTHOR: konoemario
TITLE: 
BASENAME: 2018/10/10/111216
STATUS: Draft
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 10/10/2018 10:51:03
IMAGE: https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20181010/20181010104556.png
-----
BODY:
<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fqiita.com%2Fterrierscript%2Fitems%2F0574ab1ef358fecb55b9" title="なんとなくで理解しないWebpackのCSS周辺 - Qiita" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://qiita.com/terrierscript/items/0574ab1ef358fecb55b9">qiita.com</a></cite></p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fics.media%2Fentry%2F17376" title="最新版で学ぶwebpack 4入門 - スタイルシート(CSSやSass)を取り込む方法 - ICS MEDIA" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://ics.media/entry/17376">ics.media</a></cite></p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Flog.pocka.io%2Fposts%2Fvue-webpack-tutorial" title="Webpackで始めるVue.js" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://log.pocka.io/posts/vue-webpack-tutorial">log.pocka.io</a></cite></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ ./node_modules/.bin/vue-cli-service inspect <span class="synStatement">&gt;</span> output.js
</pre>




<pre class="code lang-sh" data-lang="sh" data-unlink>$ tree
.
├── App.vue
├── components
│      ├── Test.vue
</pre>


<h3>初期設定：App.vueのみスタイル</h3>

<p><b>App.vue</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>&lt;style lang=<span class="synConstant">&quot;scss&quot;</span>&gt;
#app <span class="synIdentifier">{</span>
  font-family: <span class="synConstant">'Avenir'</span>, Helvetica, Arial, sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  text-align: center;
  color: #2c3e50;
  margin-<span class="synStatement">top</span>: 60px;
<span class="synIdentifier">}</span>
&lt;/style&gt;
</pre>


<p><b>ビルド</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$  npm run build
</pre>


<p><br/></p>

<p><b>結果</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>  File           Size                          Gzipped

  dist/app.js    1055.63 kb                    253.24 kb
</pre>


<p>あれ、javascriptだけしかない。Chromeでみても、ちゃんとスタイルはあたってる。スタイルはどこに？</p>

<p>Webpackは基本的に各リソースをjavasciptで実行できる形のものという考え方がめちゃくちゃわかりやすい。</p>

<p>Webpackのloaderと呼ばれるものが、<code>.css</code>で書いたものを<code>app.js</code>にまとめて、app.js実行時にhtmlに<code>style</code>タグを埋め込んでるみたい。</p>

<p><figure class="figure-image figure-image-fotolife" title="chromeで見た図"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20181010/20181010104556.png" alt="f:id:konoemario:20181010104556p:plain" title="f:id:konoemario:20181010104556p:plain" class="hatena-fotolife" itemprop="image"></span><figcaption>chromeで見た図</figcaption></figure></p>

<p>Webpackでcssをjsに変換して、htmlに埋め込むという一連の流れには、最低限<code>css-loader</code>と<code>style-loader</code>が必要とのこと。  <br/>
* css-loader: @importとかを依存解決してくれるみたい
* style-loader:先ほどのstyleタグをhtmlに埋め込んでくれるもの</p>

<p>あれ、でもさわってるのって<code>.css</code> じゃなくって <code>.vue</code>だよね。</p>

<p>*vue-loader:いろいろな機能があるけれども、ここで大事なのは、<code>.vue</code>に書かれた<code>style</code>タグに書かれた内容をwebpackのloaderに処理可能にするものということ</p>

-----
--------
AUTHOR: konoemario
TITLE: Nuxt.jsでassetsをCDNから配信する
BASENAME: 2018/09/19/215853
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 09/19/2018 21:58:53
CATEGORY: Nuxt.js
CATEGORY: プログラム
-----
BODY:
<p>当たり前のことかもしれないけど、アセットをCDNから配信したいけど、どうようかと思ったらものすごく簡単だった話。</p>

<p>Nuxt.jsを<code>npm run build</code>でビルドして<code>npm run start</code>で起動してサイトにアクセスしてみると、アセットは<code>ドメイン/_nuxt/</code>配下を参照していることがわかる。</p>

<p><br/>
<b>サイトにアクセスしてHTMLソースを見たとき</b></p>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span><span class="synStatement">script</span><span class="synIdentifier"> </span><span class="synType">src</span><span class="synIdentifier">=</span><span class="synConstant">&quot;/_nuxt/pages/index.js&quot;</span><span class="synIdentifier"> </span><span class="synType">defer</span><span class="synIdentifier">=</span><span class="synConstant">&quot;&quot;</span><span class="synIdentifier">&gt;&lt;/</span><span class="synStatement">script</span><span class="synIdentifier">&gt;</span>
</pre>


<p><br/></p>

<p>また、Nuxt.js内で以下のように書いていたimgのsrcも同様に</p>

<p><br/>
<b>hogehoge.vue</b></p>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span><span class="synStatement">img</span><span class="synIdentifier"> </span><span class="synType">src</span><span class="synIdentifier">=</span><span class="synConstant">&quot;~/assets/images/logo.png&gt;</span>
</pre>


<p><br/></p>

<p><code>_nuxt</code>配下に置き換わっている。<br/>
<b>ビルド後</b></p>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span><span class="synStatement">img</span><span class="synIdentifier"> </span><span class="synType">src</span><span class="synIdentifier">=</span><span class="synConstant">&quot;/_nuxt/img/logo.ad5be72.jpg&quot;</span><span class="synIdentifier">&gt;</span>
</pre>


<p>今回、jsだったり画像だったりは、<code>_nuxt</code>から配信するのではなく、AWSのCloudFrontだったりのCDNから配信するようにしたかった。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fja.nuxtjs.org%2Fapi%2Fconfiguration-build%23loaders" title="API: build プロパティ - Nuxt.js" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://ja.nuxtjs.org/api/configuration-build#loaders">ja.nuxtjs.org</a></cite></p>

<p>上記をみると、<code>nuxt.config.js</code>の<code>build</code>に<code>publicPath</code>を指定してあげればいけるっぽいことが書かれている。</p>

<p>なので、サンプル通りに書いてみる。</p>

<p><br/>
<b>nuxt.config.js</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>module.exports = <span class="synIdentifier">{</span>
  build: <span class="synIdentifier">{</span>
    <span class="synComment">// CDNのドメイン名を設定する</span>
    publicPath: <span class="synConstant">'https//mycdn_domain/assets/'</span>
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>
</pre>


<p><br/></p>

<p>再度ビルドして、試しに起動してみてHTMLを確認してみると、見事にアセット達が、CDNを指すようになった。</p>

<p><b>ビルド後</b></p>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span><span class="synStatement">script</span><span class="synIdentifier"> </span><span class="synType">src</span><span class="synIdentifier">=</span><span class="synConstant">&quot;https://mycdn_domain/assets/pages/index.js&quot;</span><span class="synIdentifier"> </span><span class="synType">defer</span><span class="synIdentifier">=</span><span class="synConstant">&quot;&quot;</span><span class="synIdentifier">&gt;&lt;/</span><span class="synStatement">script</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;</span><span class="synStatement">img</span><span class="synIdentifier"> </span><span class="synType">src</span><span class="synIdentifier">=</span><span class="synConstant">&quot;https://mycdn_domain/assets/img/logo.ad5be72.jpg&quot;</span><span class="synIdentifier">&gt;</span>
</pre>


<p>あとは肝心のアセットをCDNのストレージにアップロードすればいい。<br/>
どこにあるんだろうと思ったけれども、ビルドしたときに、プロジェクトのルートディレクトリに<code>.nuxt</code>ができている</p>

<p><br/></p>

<p><b>ビルドする</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ 
$ tree <span class="synSpecial">-aL</span> <span class="synConstant">1</span> 
.
├── .editorconfig
├── .git
├── .gitignore
├── .nuxt            ←これができる
├── README.md
├── assets
├── components
├── layouts
├── middleware
├── node_modules
├── nuxt.config.js
├── package-lock.json
├── package.json
├── pages
├── plugins
├── static
└── store
</pre>


<p><br/></p>

<p><code>.nuxt</code>の中に<code>dist</code>ディレクトリがあるので、これをそのままCDNのストレージにアップロードすることにした。</p>

<p><b>.nuxt/dist配下のファイル</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ tree <span class="synSpecial">-L</span> <span class="synConstant">1</span>
.
├── LICENSES
├── app.d3f9a819d101620d04de.js
├── fonts
├── img
├── index.spa.html
├── index.ssr.html
├── layouts
├── manifest.2f9dbf3059b488511414.js
├── pages
├── server-bundle.json
├── vendor.7b05ec8e037fef1169eb.js
└── vue-ssr-client-manifest.jso
</pre>


<p><br/></p>

<p>やりたいことはできたのでよかったのだけれども、SSRする場合、サーバー側は同じリソースをみてるのか、別なのかいまいちわかってない。</p>

-----
--------
AUTHOR: konoemario
TITLE: 3連休だしDocker環境でNuxt.jsをさわってみよう
BASENAME: 2018/09/15/165656
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 09/15/2018 16:56:56
CATEGORY: Vue.js
CATEGORY: プログラム
CATEGORY: Nuxt.js
IMAGE: https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20180915/20180915164411.png
-----
BODY:
<p>久々の更新。</p>

<p>最近、Nuxt.jsとFirebaseで遊んでます。<br/>
さくさくつくれるからたのしい。</p>

<p> なのでNuxt.jsの記事を書くことにした。</p>

<ul class="table-of-contents">
    <li><a href="#Nuxtjsを準備する">Nuxt.jsを準備する</a></li>
    <li><a href="#Dockerを準備する">Dockerを準備する</a><ul>
            <li><a href="#Dockerfile">Dockerfile</a></li>
            <li><a href="#docker-composeyml">docker-compose.yml</a></li>
        </ul>
    </li>
    <li><a href="#起動する">起動する</a></li>
</ul>

<h2 id="Nuxtjsを準備する">Nuxt.jsを準備する</h2>

<p>さっそく、環境をつくっていきます。<br/>
適当な場所にディレクトリを作成します。</p>

<p>お酒の画像をあげるサービスをつくってみようと思うので、ディレクトリ名は<code>osake</code>にします！</p>

<p><br/>
<b>任意の場所にディレクトリを作成</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ <span class="synStatement">mkdir</span> osake
$ <span class="synStatement">cd</span> osake
</pre>


<p><br/></p>

<p>次に、Nuxt.jsで作成するアプリケーションのディレクトリを作成していきます。
適当に<code>nuxt</code>とつけときました。</p>

<p><br/>
<b>任意の場所にディレクトリを作成</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ <span class="synStatement">mkdir</span> nuxt
$ <span class="synStatement">cd</span> nuxt
</pre>


<p><br/></p>

<p>ここに、Nuxt.jsを起動するコンテナの<code>Dockerfile</code>を置いておきます。
 <code>Dockerfile</code>はあとで編集するので、とりあえず次に進みます。</p>

<p><br/>
<b>Dockerfileを作成</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ <span class="synStatement">touch</span> Dockerfile
</pre>


<p><br/></p>

<p>続いて、Nuxt.jsをプロジェクトを作成します。<br/>
プロジェクトの作成方法はいろいろな方法があるみたいです。</p>

<p><a href="https://qiita.com/high-u/items/1d2e91e97495ac90d10c#4nuxt-communitycreate-nuxt-app-%E7%B7%A8">Nuxt.js &#x306F;&#x3058;&#x3081;&#x307E;&#x3057;&#x305F;&#x3002;&#x30D7;&#x30ED;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x4F5C;&#x6210;&#x3067; 5 &#x3064;&#x306E;&#x65B9;&#x6CD5;&#x3092;&#x8A66;&#x3057;&#x305F;&#x3002;</a></p>

<p>自分のホスト環境(自分のPC)にNode.jsをインストールしていて、npmやyarnなどのパッケージ管理ツールをいれているのであれば、vue-cliかcreate-nuxt-app等を使ってつくるのが手っ取り早いかと思います。</p>

<p>ですが、せっかくDockerをつかうので、自分のホスト環境にはNode.js等はなるべくいれないで、コンテナ内で完結するようにしてみます。</p>

<p>そこで今回は、vue-cliで引っ張ってくるスターターテンプレートをgitで直接もってきて、それをもとにプロジェクトを作成することにします。</p>

<p>さきほど作成した<code>nuxt</code>ディレクトリ配下で<code>git clone</code>し、<code>src</code>ディレクトリに格納します。</p>

<p><br/>
<b>スターターテンプレートをもってくる</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink><span class="synPreProc">$git</span> clone https://github.com/nuxt-community/starter-template src
</pre>


<p><br/></p>

<p>スターターテンプレートのリポジトリをもってきたら、すこし作業が必要です。<br/>
リポジトリ内の<code>template</code>配下のファイルを作成した<code>src</code>配下にもってきます。</p>

<p>このへんの作業を毎回やるのは面倒なので、githubに作業後の状態をあげています。<br/>
この段落の最後に貼ってます。</p>

<p><br/>
<b>ほしいものだけの状態にする</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink><span class="synPreProc">$cd</span> src
<span class="synComment"># いらないファイルを消す</span>
<span class="synPreProc">$rm</span> LICENSE README.md  meta.js 
<span class="synComment"># リポジトリは別で作成するので、もともとのものは削除</span>
<span class="synPreProc">$rm</span>  <span class="synSpecial">-r</span> .git
<span class="synComment"># template配下の内容をsrc直下にする</span>
<span class="synPreProc">$mv</span> template/* ./
<span class="synComment"># 隠しファイルも忘れずに</span>
<span class="synPreProc">$mv</span> template/.??* ./
<span class="synComment"># ファイルの移動が終わったのでtempalteはいらない</span>
<span class="synPreProc">$rm</span> <span class="synSpecial">-r</span> template/
</pre>


<p><br/></p>

<p>また、package.jsonの<code>name</code>、<code>description</code>、<code>author</code>を適宜修正しておきます。</p>

<p><br/>
<b>package.jsonを修正しておく</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synIdentifier">{</span>
  <span class="synConstant">&quot;name&quot;</span>: <span class="synConstant">&quot;osake&quot;</span>,
  <span class="synConstant">&quot;version&quot;</span>: <span class="synConstant">&quot;1.0.0&quot;</span>,
  <span class="synConstant">&quot;description&quot;</span>: <span class="synConstant">&quot;My Nuxt.js Project&quot;</span>,
  <span class="synConstant">&quot;author&quot;</span>: <span class="synConstant">&quot;tohu&quot;</span>,
</pre>


<p><br/></p>

<p>これで準備が整いました。</p>

<p><br/></p>

<p>以下は、スターターテンプレートの内容を修正した後の状態になります。</p>

<p><b>修正済みの内容</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ git clone https://github.com/Ryomasao/nuxt-starter-template src
</pre>


<p><br/></p>

<h2 id="Dockerを準備する">Dockerを準備する</h2>

<p>次に、Nuxt.jsを動かすための環境をDockerでつくっていきます。<br/>
自分のホスト環境にDockerとdocker-composeを用意しておく必要があります。</p>

<p><br/></p>

<h3 id="Dockerfile">Dockerfile</h3>

<p>最初に用意した<code>oskae</code>配下のディレクトリに用意した<code>Dockerfile</code>を以下のように編集します。</p>

<p><br/>
<b>Dockerfile</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>FROM node:9.11-alpine

RUN apk --update add shadow &amp;&amp;<span class="synIdentifier">\</span>
    rm -rf /<span class="synIdentifier">var</span>/cache/apk<span class="synComment">/* &amp;&amp;\</span>
<span class="synComment">    useradd --user-group --create-home app</span>
<span class="synComment">ENV HOME=/home/app</span>

<span class="synComment">COPY ./src/package.json $HOME/nuxt/</span>
<span class="synComment">RUN chown -R app:app $HOME/*</span>
<span class="synComment">ENV HOST 0.0.0.0</span>
<span class="synComment">USER app</span>
<span class="synComment">WORKDIR $HOME/nuxt</span>
<span class="synComment">RUN npm install --no-cache</span>
</pre>


<p><br/></p>

<p>やっていることを、上から簡単に見ていきます。</p>

<p>ベースとなるOSですが、非常に軽い<code>Alpine</code>と呼ばれるOSイメージを使います。<br/>
下記は、<code>Alpine</code>にNode.jsのver9.11がインストールされた状態のイメージになります。</p>

<p><b>ベースイメージの選択</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>FROM node:9.11-alpine
</pre>


<p><br/></p>

<p>続いて、<code>shadow</code>と呼ばれるパッケージをインストールし、Nuxt.jsを実行するユーザー<code>app</code>をつくります。  <br/>
<code>Alpine</code>は軽量なんですが、それだけに<code>useradd</code>とかのコマンドがデフォルトでないみたいなので、<code>shadow</code>をインストールしてます。</p>

<p><b>ユーザーの追加</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>RUN apk <span class="synSpecial">--update</span> add shadow &amp;&amp;<span class="synStatement">\</span>
    <span class="synStatement">rm</span> <span class="synSpecial">-rf</span> /var/cache/apk/* &amp;&amp;<span class="synStatement">\</span>
    useradd <span class="synSpecial">--user-group</span> <span class="synSpecial">--create-home</span> app
</pre>


<p><br/></p>

<p>テスト環境なのでrootユーザーで実行しても問題はなさそうですが、コンテナをフルで活用して本番環境でもがんがんつかっていくかもしれない未来のことを考えてユーザー作成を習慣化しておきます。</p>

<p><br/>
そしたら環境変数HOMEに、appユーザーのホームディレクトリを指定し、ホスト環境のpackage.jsonをコンテナ内にコピーします。<br/>
ファイルの権限もappユーザーにしときます。</p>

<p><b>もろもろの準備</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>ENV <span class="synIdentifier">HOME</span>=/home/app

COPY ./src/package.json <span class="synPreProc">$HOME</span>/nuxt/
RUN chown <span class="synSpecial">-R</span> app:app <span class="synPreProc">$HOME</span>/*
</pre>


<p><br/></p>

<p>最後に、Nuxt.jsを起動した際に、外部からの通信を受け入れるようにするために、「HOST」の設定を行い、appユーザーを使い、ホームディレクトリのnuxt配下で<code>npm install</code>しておしまいです！</p>

<p><b>もろもろの準備</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>ENV HOST 0.0.0.0
USER app
WORKDIR <span class="synPreProc">$HOME</span>/nuxt
RUN npm install <span class="synSpecial">--no-cache</span>
</pre>


<p><br/></p>

<h3 id="docker-composeyml">docker-compose.yml</h3>

<p><code>Dockerfile</code>の準備ができたら、docker-compose.ymlも用意します。  <br/>
コンテナはひとつしかないので、docker-composeは使わなくてもいいような気がしますが、何かと便利で、こっちに慣れてしまったので、積極的に使っていきます。</p>

<p>一番最初に作成した<code>oskae</code>ディレクトリ直下にdocker-compose.ymlを作成します。</p>

<p><br/>
<b>docker-compose.ymlを作成</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ <span class="synStatement">touch</span> dokcer-compose.yml
</pre>


<p><br/></p>

<p>念のためですが、ディレクトリ構成はこんな感じになってます。<br/>
<br/>
<b>docker-compose.ymlを作成</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>└── osake
    ├── docker-compose.yml
    └── nuxt
        ├── Dockerfile
        └── src
</pre>


<p><br/></p>

<p>docker-compose.ymlを以下の内容に修正します。</p>

<p>個別でみていく余力がなくなったので、内容をコメントに書いています。</p>

<p><b>docker-compose.yml</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>version: <span class="synStatement">'</span><span class="synConstant">3</span><span class="synStatement">'</span>
services:
  nuxt:
    <span class="synComment"># ./nuxt/Dockerfileをもとにnuxtコンテナを作成する</span>
    build: ./nuxt
    <span class="synComment"># コンテナ起動時のコマンド</span>
    <span class="synStatement">command</span>: npm run dev 
    <span class="synComment"># 特権モードを有効にしておく(いらないかも)</span>
    privileged: <span class="synStatement">true</span>
    <span class="synComment"># コンテナ外部からport3000でアクセスできるようにする</span>
    ports:
      - <span class="synStatement">'</span><span class="synConstant">3000:3000</span><span class="synStatement">'</span>
    volumes:
         <span class="synComment"># ホストOSとコンテナ内でNuxt.jsのソースコードを共有できるようする</span>
      - ./nuxt/src:/home/app/nuxt
        <span class="synComment"># node_modulesはコンテナ内の内容で上書き</span>
      - /home/app/nuxt/node_modules
</pre>


<p><br/></p>

<h2 id="起動する">起動する</h2>

<p>長くなりましたが、もうそろそろ終わります。</p>

<p>dokcer-compose.ymlが置いてあるディレクトリに移動して、以下のコマンドを叩きます。<br/>
そうすると、Dockerfileに記載されている内容で、イメージが作成されていきます。<br/>
Dockerfile内でnpm installを行なっているので、イメージにNuxt.jsに必要なパッケージもイメージに含まれることになります。</p>

<p><br/></p>

<p><b>イメージの作成</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ docker-compose build 

Building nuxt
Step <span class="synConstant">1</span>/<span class="synConstant">9</span> : FROM node:9.11-alpine
 <span class="synSpecial">---&gt;</span> a56170f59699
Step <span class="synConstant">2</span>/<span class="synConstant">9</span> : RUN apk <span class="synSpecial">--update</span> add shadow &amp;&amp;    <span class="synStatement">rm</span> <span class="synSpecial">-rf</span> /var/cache/apk/* &amp;&amp;    useradd <span class="synSpecial">--user-group</span> <span class="synSpecial">--create-home</span> app
 <span class="synSpecial">---&gt;</span> Using cache
 <span class="synSpecial">---&gt;</span> a63d566ef7ae
Step <span class="synConstant">3</span>/<span class="synConstant">9</span> : ENV <span class="synIdentifier">HOME</span>=/home/app
 <span class="synSpecial">---&gt;</span> Using cache
 <span class="synSpecial">---&gt;</span> 19fe73f63747
Step <span class="synConstant">4</span>/<span class="synConstant">9</span> : COPY ./src/package.json <span class="synPreProc">$HOME</span>/nuxt/
 <span class="synSpecial">---&gt;</span> 1b972d62d9cb
Step <span class="synConstant">5</span>/<span class="synConstant">9</span> : RUN chown <span class="synSpecial">-R</span> app:app <span class="synPreProc">$HOME</span>/*
 <span class="synSpecial">---&gt;</span> Running <span class="synError">in</span> 2d8a1087b417
Removing intermediate container 2d8a1087b417
 <span class="synSpecial">---&gt;</span> 51480aa38c2d
Step <span class="synConstant">6</span>/<span class="synConstant">9</span> : ENV HOST 0.0.0.0
 <span class="synSpecial">---&gt;</span> Running <span class="synError">in</span> d74b0bd9c978
Removing intermediate container d74b0bd9c978
 <span class="synSpecial">---&gt;</span> 68a8d499158d
Step <span class="synConstant">7</span>/<span class="synConstant">9</span> : USER app
 <span class="synSpecial">---&gt;</span> Running <span class="synError">in</span> f33805224f35
Removing intermediate container f33805224f35
 <span class="synSpecial">---&gt;</span> 2e45695157c5
Step <span class="synConstant">8</span>/<span class="synConstant">9</span> : WORKDIR <span class="synPreProc">$HOME</span>/nuxt
 <span class="synSpecial">---&gt;</span> Running <span class="synError">in</span> 764368a8fb0e
Removing intermediate container 764368a8fb0e
 <span class="synSpecial">---&gt;</span> 352bf34020ce
Step <span class="synConstant">9</span>/<span class="synConstant">9</span> : RUN npm install <span class="synSpecial">--no-cache</span>
</pre>


<p><br/></p>

<p>最後にコンテナを起動し、ログにOPENの内容が表示されたら、「<a href="http://localhost:3000">http://localhost:3000</a>」にアクセスしてみましょう。</p>

<p><b>コンテナの作成 &amp; 起動</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ dokcer-compose up 

Starting osake_nuxt_1 ... <span class="synError">done</span>
Attaching to osake_nuxt_1
nuxt_1  | 
<span class="synComment"># 省略 </span>
nuxt_1  |  DONE  Compiled successfully <span class="synError">in</span> <span class="synSpecial">-6867ms06</span>:<span class="synConstant">54</span>:<span class="synConstant">01</span>
nuxt_1  | 
nuxt_1  | 
nuxt_1  |  OPEN  http://localhost:<span class="synConstant">3000</span> 
</pre>


<p><br/></p>

<p>こんな感じの内容が見ることができたら無事完了です！</p>

<p><figure class="figure-image figure-image-fotolife" title="起動した"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20180915/20180915164411.png" alt="f:id:konoemario:20180915164411p:plain" title="f:id:konoemario:20180915164411p:plain" class="hatena-fotolife" itemprop="image"></span><figcaption>起動した</figcaption></figure></p>

<p>Nuxt.js本体にまったく触れることができませんでしたが、次回さわっていこうと思います。</p>

-----
--------
AUTHOR: konoemario
TITLE: 血反吐を吐いて学んだNuxt.js
BASENAME: 2018/09/13/225429
STATUS: Draft
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 08/20/2018 23:09:42
IMAGE: https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20180820/20180820224052.png
-----
BODY:
<h2>出会い</h2>

<p>とある案件で、ユーザーが参照する画面のデザインが一新されることになった。</p>

<p>もともと、デザイン込みで請け負っていた案件で、Laravelと、フロントエ ンドのちょっとした動きだったり、APIを叩く処理はVue.jsで実装されていた。</p>

<p>今回、ユーザーが参照する画面のデザインは、他社が作製することになった。<br/>
自分たちは、他社が作製した静的なHTMLをLaravelのBladeだったり、Vue.jsに置き換えればいいんだなーぐらいに考えていた。</p>

<p>さて、この度他社から提供されたソースコードを見てびっくり。</p>

<p>うおおお、<code>.html</code>なんかひとつもねえええ、全部<code>.vue</code>じゃねえか！<br/>
よくみると、SPAになってるんじゃねえか。SPAつくったことねえぞ！リリース近いのにどうすんだよこれ！  うおおおおお。</p>

<p>というのが僕とNuxt.jsの出会いでした。</p>

<p><br/></p>

<h2>本題</h2>

<p>ということで本題です。<br/>
出会いは最悪でしたが、今では告白されたら付き合っちゃおうかな！ぐらい好きです。<br/>
とはいえ、まだまだ僕もNuxt.jsのことをわかっていないので、まだまだこれからなんですが、少なくとも血反吐を吐いていた期間になかなか理解できなかったことをここに書いていこうと思います。</p>

<p><br/></p>

<h3>Nuxt.jsとは</h3>

<p>Nuxtは「ネクスト」と読むみたいです。<br/>
Nuxt.jsはVue.jsに加えて、SPAを作る際に必須のVueRouter、また規模の大きなアプリケーションを作る際に必要なVuexなどの機能が含まれているフレームワークです。<br/>
また、一番注目すべき点としてはサーバーサイドレンダリング(SSR)と呼ばれる機能が挙げられるかと思います。</p>

<p>もともと、React.jsにNext.jsと呼ばれるサーバーサイドレンダリングやらなんやらするフレームワークがあったみたいで、それのVue.js版みたいな感じなんですかね。</p>

<p>ここでは、Nuxt.jsの各要素をもうすこし細かくみていきます。</p>

<p><br/></p>

<h4>VueRouterとは</h4>

<p>SPAではないWebサイトをつくる際には基本的には使わない機能かと思います。 <br/>
私も、SPAではないサイトでは、Vue.jsちょこちょこと遊んでいたのですが、特に使うこともなく過ごしてきました。<br/>
※ちなみに、SPAじゃないサイトって、なんていうんですかね。 <br/>
非SPAっていうと、SPAからの視点になるような気がしていて、歴史的にはSPAの方がごく浅いのに違和感が。</p>

<p>使い方と、動きのイメージとしては、こんな感じですかね、とうことでCodepenを貼っておきます。<br/>
ほぼ公式の丸パクリですが、リンクになっている文字列を押すと、表示される文言がかわるのがわかるかと思います。</p>

<p data-height="265" data-theme-id="0" data-slug-hash="OoJyqw" data-default-tab="js,result" data-user="tohu" data-pen-title="OoJyqw" class="codepen">See the Pen <a href="https://codepen.io/tohu/pen/OoJyqw/">OoJyqw</a> by tohu (<a href="https://codepen.io/tohu">@tohu</a>) on <a href="https://codepen.io">CodePen</a>.</p>


<script async src="https://static.codepen.io/assets/embed/ei.js"></script>


<p>え、Vue.jsの<code>v-if</code>やら<code>v-show</code>で表示を制御するのと何が違うのかしらと、思った方がいるかもしれないので補足しますと、vueRouterは<strong>ページ遷移</strong>をします。</p>

<p>CodepenだとURLが見えないので、個別で試してみた結果を貼りますとこんな感じになります。</p>

<p><figure class="figure-image figure-image-fotolife" title="トップページにアクセスした図"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20180820/20180820224052.png" alt="f:id:konoemario:20180820224052p:plain" title="f:id:konoemario:20180820224052p:plain" class="hatena-fotolife" itemprop="image"></span><figcaption>トップページにアクセスした図</figcaption></figure></p>

<p><br/></p>

<p><figure class="figure-image figure-image-fotolife" title="/userにアクセスした図"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20180820/20180820224056.png" alt="f:id:konoemario:20180820224056p:plain" title="f:id:konoemario:20180820224056p:plain" class="hatena-fotolife" itemprop="image"></span><figcaption>/userにアクセスした図</figcaption></figure></p>

<p><br/></p>

<p>SPAでないサイトであれば、<code>/user</code>にアクセスしたら<code>/user</code>用のページをサーバーから返しあげなきゃいけないんですが、SPAの場合は、初回にどかんともってきて、サーバーに<code>/user</code>用のページをくださいと問い合わせることもなく、クライアント側で描画するみたいなことをしてくれます。</p>

<p><br/></p>

<p>このVueRouterですが、Nuxt.jsにはデフォルト組み込まれており、使い方もVue.jsでVueRouterを使うよりも、簡単に使えるようになっています。</p>

<p>簡単な例を書いてみます。<br/>
VueRouterを使う場合、以下のように、〜のURLにアクセスしたら〜のコンポーネントを表示してね！っていう設定を書く必要があります。</p>

<p><b>通常のVueRouterの例</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">const</span> routes = <span class="synIdentifier">[</span>
  <span class="synIdentifier">{</span> path: <span class="synConstant">'/'</span>, component: Index <span class="synIdentifier">}</span>,
  <span class="synIdentifier">{</span> path: <span class="synConstant">'/user'</span>, component: User <span class="synIdentifier">}</span>
<span class="synIdentifier">]</span>
</pre>


<p>ですが、Nuxt.jsの場合は、決まったディレクトリにファイルを置いておくだけで、このへんの設定を用意してくれます。</p>

<p><br/></p>

<p><b>決まったディレクトリにURLに対応するファイルを置いておく</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>├── pages
│   ├── index.vue
│   └── user.vue
</pre>


<p>さて、ここで気になる問いですが、SPAじゃないサイトをつくろうと思ったときにNuxt.jsを採用する意味があるのか、という点です。</p>

<p>というのも、前述の通り、Nuxt.jsはVueRouterを標準搭載しているし、またファイルも<code>.html</code>がなく全部<code>.vue</code>で書くような形になっています。</p>

<p>なので、意味がないです、と書きたいところなんですが、なんと恐ろしいことに、Nuxt.jsでつくったサイトを静的HTMLに書き起こしてくれる機能がNuxt.jsにはあったりします。</p>

<p><b>恐ろしいコマンド</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ npm run generate
</pre>


<p>こんな感じのコマンドを打つと、<code>.html</code>やらなんやらが生成されます。<br/>
なので、出力された各ページを、Webサーバーに置いてあげると、今まで通り非SPAなページなサイトができあがります。</p>

<p>ちなみに、私がNuxt.jsをやるきっかけになった今回の案件で、当初SPAじゃねえかこれ！とかいろいろ焦ってたのですが、最悪、この静的ページを作成する機能を用いて、<code>.html</code>を出力し、それをLaravelが処理できるようにBladeかなにかにして、必要に応じてVue.jsをまた埋め込む みたいなこともできたのかもしれません。</p>

<p>この辺に関しては、SPAでいこう！と決めてしまったので、ちょっと自信がないです。</p>

<p><br/></p>

<h4>Vuexとは</h4>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fwww.udemy.com%2Freact-redux-from-beginning%2F" title="最短で学ぶReactとReduxの基礎から実践まで | Udemy" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://www.udemy.com/react-redux-from-beginning/">www.udemy.com</a></cite></p>

<p>なんだけれども、Reduxがでてきたあたりで、いろんなパッケージを突っ込み始めて、なんのために導入するんだろうが未だ消化できていない。</p>

<p>そんな中、Nuxt.jsに出会うことになったので、Nuxt.jsの話をしようと思う。</p>

<p>Nuxt.jsってのは、</p>

-----
--------
AUTHOR: konoemario
TITLE: SPAの認証がわからない + JWTのデコードでエラー
BASENAME: 2018/08/15/234034
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 08/15/2018 23:40:34
CATEGORY: プログラム
-----
BODY:
<h1>日記</h1>

<p>SPAをつくることにしたんだけれども、APIの認証をどうしていいのかがいまいちわからない。</p>

<p>APIに状態を持たせるのは良くないということで、セッションを使った認証ではなくJWTを使った認証にチャレンジしてみることにした。
（とはいえ、あんまりそのメリットもよくわかってない。APIで認証のためにセッションを使うのと、tokenを使うのでなんか違いがあるのだろうか。認証以外の情報がtokenとしてどんどん増えていくことを想定してのtokenなのかな。何かの記事でAPIだとセッションが使えないみたいなことが書いてあったんだけれども、なんで使えないのかもよくわからない。)</p>

<p>ユーザー登録をして、IDとパスワードを入力を含めたサイトであれば、</p>

<ol>
<li>自分のサイトでログイン画面でIDとパスワードを入力</li>
<li>IDとパスワードで該当のユーザーが登録されていたら、ユーザーの情報をもとにtokenを生成しクライアントに渡す</li>
<li>以降、サーバー側にAPIを投げる際にはtokenを付加して投げる</li>
<li>サーバー側はtokenをデコードして、ユーザーが存在するかとか、不正なtokenじゃないかとかをチェックする</li>
</ol>


<p>みたいな感じなんだと思う、</p>

<p>これが、GitHubとかTwitterとかの外部認証を用いた場合がいまいちよくわからない。<br/>
なんとなくこんな感じだと思う。</p>

<ol>
<li>外部のサイト(GitHub)にリダイレクト</li>
<li>外部のサイト(GitHub)で ログイン画面でIDとパスワードを入力</li>
<li>外部のサイトから、自分のサイトにtoken付きでリダイレクト</li>
<li>自分のサイトでtokenを受け取り、ログイン用のAPIにtokenを渡してAPIを叩く。</li>
<li>ログイン用のAPIで外部サイト(Githubとか)のユーザー情報を取得するようなAPIを叩く。</li>
<li>取得したユーザー情報を自分のサイトのDBに登録して、さらにユーザー情報をもとにしたtokenを生成する</li>
<li>以降は、自サイトのときと同じ。</li>
</ol>


<p>ただ、いろいろ調べると、アクセストークンは、認証（誰か)ではなく認可（〜をしてよい)しかわからないので、そのまま認証に使うのはよくないよ的な記事がたくさんある。</p>

<p><a href="https://gist.github.com/j5ik2o/7ce9686a82aee5caaef258f98d9b4b36">OAuth2&#x3092;&#x305D;&#x306E;&#x307E;&#x307E;&#x8A8D;&#x8A3C;&#x306B;&#x4F7F;&#x3063;&#x3066;&#x306F;&#x3044;&#x3051;&#x306A;&#x3044;&#x7406;&#x7531; &#x301C; &#x96D1;&#x306A;&#x307E;&#x3068;&#x3081; &middot; GitHub</a></p>

<p>誰が、がわかるのは前述のアクセストークンを発行する使用のOAuthではなくOpenIDConnectなんだよ、とかもあるんだけれども、Githubを利用した認証と、OpneIDConnectの関係もよくわからない。GithubからIDトークンってもらえるのかしら。</p>

<p><a href="https://qiita.com/TakahikoKawasaki/items/8f0e422c7edd2d220e06">[&#x524D;&#x7DE8;] ID&#x30C8;&#x30FC;&#x30AF;&#x30F3;&#x304C;&#x5206;&#x304B;&#x308C;&#x3070; OpenID Connect &#x304C;&#x5206;&#x304B;&#x308B;</a></p>

<p>また、OpenIDConnectなのかOAuthの話なのかわからないけれども、自サイトから外部サイトにリダイレクトするときにstateっていうパラメータを発行しておいて、外部サイトから自サイトに戻るときにstateに変更がないかを調べていると思う。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Ftech-lab.sios.jp%2Farchives%2F8492" title="OAuthやOpenID Connectで使われるstateパラメーターについて" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://tech-lab.sios.jp/archives/8492">tech-lab.sios.jp</a></cite></p>

<p>上記のサイトで、stateの意味をわかりやすく書いてくれているんだけれども、APIでセッションを使わない場合、どう実装するのかが謎。</p>

<p>Laravelの外部認証のライブラリを眺めてたんだけれども、セッションを使う場合と使わない場合で(stateless)で処理がわかれていて、使わない場合は、stateのチェックをしていないように見える。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2Flaravel%2Fsocialite" title="laravel/socialite" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://github.com/laravel/socialite">github.com</a></cite></p>

<p>ちゃんと確認できてないのであれなんだけれども、仮にしてないとしたら、それでいいのだろうか。</p>

<p>いろいろ整理したいんだけれども、なかなか時間と気持ちがなく更新をさぼっていたのでしょうもないので、最後にしょうもない記事を書くことにした。</p>

<p><br/></p>

<h1>JWTのtokenのデコードでエラー</h1>

<p>とあるAPIを叩く際の認証にJWTを使うことにした。</p>

<p>環境はPHPで、以下のライブラリを使っていた。<br/>
<iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2Ftymondesigns%2Fjwt-auth" title="tymondesigns/jwt-auth" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://github.com/tymondesigns/jwt-auth">github.com</a></cite></p>

<p>四苦八苦してtokenを発行することに成功し、今度はそれをデコードして検証する機能を実装して、curlで検証していた。</p>

<p><b>curlでヘッダにtokenをつけて検証</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ curl <span class="synSpecial">-H</span> <span class="synStatement">&quot;</span><span class="synConstant">Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiIxM…lOIn0.d0NPptNDHzoFFG2gL8WffARAOxnnnjDk-7qMsKc19nM</span><span class="synStatement">&quot;</span> http://localhost:<span class="synConstant">8000</span>/api/<span class="synConstant">1</span>/users
</pre>


<p><br/></p>

<p>しかし、コピペし忘れてたんだけれども、こんなエラーがでてしまった。  <br/>
<b>エラーメッセージ</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>Could not decode token: <span class="synStatement">&quot;</span><span class="synConstant">eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiIxM…lOIn0.d0NPptNDHzoFFG2gL8WffARAOxnnnjDk-7qMsKc19nM</span><span class="synStatement">&quot;</span> is an invalid JWS
</pre>


<p><br/></p>

<p>あれーと、JWTの中身をいろいろと見ていて、1時間ほど経過した際に気づきました。<br/>
あれ、エラーメッセージのtokenの内容、途中で省略されてんじゃねえか！と。</p>

<p>というのも、Chormeのコンソールにtokenを出力して、確認してたんですが、長い文字列は省略されていたみたいです。</p>

<p><figure class="figure-image figure-image-fotolife" title="コピペ元"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20180815/20180815205456.png" alt="f:id:konoemario:20180815205456p:plain" title="f:id:konoemario:20180815205456p:plain" class="hatena-fotolife" itemprop="image"></span><figcaption>コピペ元</figcaption></figure></p>

<p><br/></p>

<p>ちゃんと、JSONオブジェクトを展開したものを使いましょうというしょうもない話でした。</p>

<p><figure class="figure-image figure-image-fotolife" title="正しいtoken"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20180815/20180815205557.png" alt="f:id:konoemario:20180815205557p:plain" title="f:id:konoemario:20180815205557p:plain" class="hatena-fotolife" itemprop="image"></span><figcaption>正しいtoken</figcaption></figure></p>

-----
--------
AUTHOR: konoemario
TITLE: 認証まとめ
BASENAME: 2018/08/15/205628
STATUS: Draft
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 08/12/2018 18:18:00
-----
BODY:
<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20180815/20180815205456.png" alt="f:id:konoemario:20180815205456p:plain" title="f:id:konoemario:20180815205456p:plain" class="hatena-fotolife" itemprop="image"></span><script src="https://gist.github.com/j5ik2o/7ce9686a82aee5caaef258f98d9b4b36.js"> </script><cite class="hatena-citation"><a href="https://gist.github.com/j5ik2o/7ce9686a82aee5caaef258f98d9b4b36">gist.github.com</a></cite></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>curl <span class="synSpecial">-H</span> <span class="synStatement">&quot;</span><span class="synConstant">Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiIxM…lOIn0.d0NPptNDHzoFFG2gL8WffARAOxnnnjDk-7qMsKc19nM</span><span class="synStatement">&quot;</span> http://localhost:<span class="synConstant">8000</span>/api/<span class="synConstant">1</span>/users
</pre>


<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20180815/20180815205557.png" alt="f:id:konoemario:20180815205557p:plain" title="f:id:konoemario:20180815205557p:plain" class="hatena-fotolife" itemprop="image"></span></p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Ftikasan.hatenablog.com%2Fentry%2F2017%2F05%2F02%2F232719" title="GithubのOAuth2.0の仕様について理解する（Githubログイン） - ぺい" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://tikasan.hatenablog.com/entry/2017/05/02/232719">tikasan.hatenablog.com</a></cite></p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2Fcretueusebiu%2Flaravel-nuxt" title="cretueusebiu/laravel-nuxt" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://github.com/cretueusebiu/laravel-nuxt">github.com</a></cite></p>

<p>jwt-authライブラリ公式</p>

<p><a href="https://github.com/tymondesigns/jwt-auth/wiki/Creating-Tokens">Creating Tokens &middot; tymondesigns/jwt-auth Wiki &middot; GitHub</a></p>

<p>LaravelApi</p>

<p><a href="http://blog.asial.co.jp/1498">Laravel 5.4&#x3067;Web API&#x3092;&#x4F5C;&#x308B; - &#x30A2;&#x30B7;&#x30A2;&#x30EB;&#x30D6;&#x30ED;&#x30B0;</a></p>

<p><a href="https://qiita.com/tkt989/items/15b49e9ea8d31d8228ce">Laravel + Jwt Auth &#x3067;&#x8A8D;&#x8A3C;&#x4ED8;&#x304D;WebAPI&#x3092;&#x4F5C;&#x308B;</a></p>

<p>SPA</p>

<p><a href="https://qiita.com/acro5piano/items/eb29f13b82f386220460#_reference-3f516735e1f0890da252">Laravel 5.4 &#x3068; Vue.js 2.2 &#x3068; JWTAuth &#x3067;&#x3001;&#x30ED;&#x30B0;&#x30A4;&#x30F3;&#x3067;&#x304D;&#x308B; SPA &#x30A2;&#x30D7;&#x30EA;&#x30B1;&#x30FC;&#x30B7;&#x30E7;&#x30F3;&#x306E;&#x30C1;&#x30E5;&#x30FC;&#x30C8;&#x30EA;&#x30A2;&#x30EB; &#x305D;&#x306E;4</a></p>

<p><a href="https://atuweb.net/201706_twitter-jwt-login-token/">Twitter &#x8A8D;&#x8A3C;&#x3068; JWT &#x3067;&#x30ED;&#x30B0;&#x30A4;&#x30F3;&#x6A5F;&#x80FD;&#x3092;&#x5B9F;&#x88C5;&#x3057;&#x305F;&#x8A71; - &#x65B0;&#x3055;&#x3063;&#x307D;&#x308D; IT &#x30AD;&#x30E3;&#x30EA;&#x30A2;&#x7814;&#x7A76;&#x5BA4;</a></p>

<p><a href="https://qiita.com/hareku/items/ea09602bf40bf0a42040">Nuxt.js&#x3068;Laravel&#x3092;&#x4F7F;&#x3063;&#x3066;Twitter&#x30ED;&#x30B0;&#x30A4;&#x30F3;&#x6A5F;&#x80FD;&#x3092;&#x5B9F;&#x88C5;&#x3059;&#x308B;</a></p>

<p>JWTとは</p>

<p><a href="http://kzkohashi.hatenablog.com/entry/2018/03/25/225343">Laravel&#x3067;JSON Web Token&#x3092;&#x4F7F;&#x3063;&#x305F;&#x8A8D;&#x8A3C;&#x65B9;&#x6CD5; - &#x3044;&#x3063;&#x304D;&#x306E;blog</a></p>

<p>Nginx</p>

<p><a href="https://qiita.com/superyusuke/items/31d86da8288f90d0616a">&quot;&#x30D5;&#x30ED;&#x30F3;&#x30C8;&#x30A8;&#x30F3;&#x30C9;&#x30A8;&#x30F3;&#x30B8;&#x30CB;&#x30A2;&#x306E;&#x305F;&#x3081;&#x306E;&quot; Nginx &#x30D7;&#x30ED;&#x30AD;&#x30B7;&#x30B5;&#x30FC;&#x30D0;&#x30FC;&#x3092; Docker &#x3067;&#x904B;&#x7528;&#x3059;&#x308B;&#x65B9;&#x6CD5;</a></p>

<p>LaravelPassport</p>

<p><a href="https://medium.com/crunchtimer/laravel5-6-passport%E3%81%A7api%E8%AA%8D%E8%A8%BC%E3%82%92%E5%AE%9F%E8%A3%85-fc8916580b6">Laravel5.6 Passport&#x3067;API&#x8A8D;&#x8A3C;&#x3092;&#x5B9F;&#x88C5; &ndash; Crunchtimer &ndash; Medium</a></p>

<p><a href="http://www.dn-web64.com/archives/web/laravel_passport/">http://www.dn-web64.com/archives/web/laravel_passport/</a></p>

<p>stateがない場合</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Ftech-lab.sios.jp%2Farchives%2F8492" title="OAuthやOpenID Connectで使われるstateパラメーターについて" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://tech-lab.sios.jp/archives/8492">tech-lab.sios.jp</a></cite></p>

<p>lumenでsession
<a href="https://stackoverflow.com/questions/47050984/enabling-session-in-lumen-framework">laravel - Enabling session in lumen framework - Stack Overflow</a></p>

-----
--------
AUTHOR: konoemario
TITLE: Vue.jsから入りReactを触ったときの気づき
BASENAME: 2018/07/20/171437
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 07/20/2018 17:14:37
CATEGORY: javascript
CATEGORY: Vue.js
CATEGORY: React
CATEGORY: プログラム
IMAGE: https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20180720/20180720163708.png
-----
BODY:
<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fwww.udemy.com%2Freact-redux-from-beginning%2F" title="最短で学ぶReactとReduxの基礎から実践まで | Udemy" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://www.udemy.com/react-redux-from-beginning/">www.udemy.com</a></cite></p>

<p>こちらのReactの講座途中まで終わって、あーVue.jsでもこうすればいいんだなぁという点があったので書く。  　</p>

<p><span style="color: #ff5252">※書いているコードは、直接この記事で書いちゃったのでtypoミスなどなにかしらのミスがあるかもしれません。</span></p>

<h3>今まで</h3>

<p>こんなふうに、メンバー登録ができて、かつ登録済のメンバーの一覧が下部に表示されるようなページがあたっとします。</p>

<p><figure class="figure-image figure-image-fotolife" title="こんなページ"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20180720/20180720163708.png" alt="f:id:konoemario:20180720163708p:plain" title="f:id:konoemario:20180720163708p:plain" class="hatena-fotolife" itemprop="image"></span><figcaption>こんなページ</figcaption></figure></p>

<p><br/></p>

<p>こんなとき、Vueで以下のような構成でつくってました。</p>

<p><figure class="figure-image figure-image-fotolife" title="Vueの構成"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20180720/20180720163604.png" alt="f:id:konoemario:20180720163604p:plain" title="f:id:konoemario:20180720163604p:plain" class="hatena-fotolife" itemprop="image"></span><figcaption>Vueの構成</figcaption></figure></p>

<ul>
<li>フォームの内容を登録するコンポーネントである、CreateFormComponent</li>
<li>登録済の内容を表示する、MemberListComponent</li>
<li>上記二つを束ねる、index.js</li>
</ul>


<p><br/></p>

<p>CreateFormComponentには、こんな感じでaxiosでデータを登録する箇所を実装しています。<br/>
データを登録した際の結果として、登録済のメンバーの一覧すべてが返却されてきます。<br/>
なので、この結果をメンバーリストを表示するSearchComponentに渡したい、という要望がでてきます。</p>

<p><b>CreateFormComponent.vue</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>   onSubmit() <span class="synIdentifier">{</span>
      axios.post(ENTORY_POINT, <span class="synIdentifier">{</span>
        name: name,
        color: color,
      <span class="synIdentifier">}</span>)
      .then((res) =&gt; <span class="synIdentifier">{</span>
        <span class="synComment">//ここで返ってきた結果をリストコンポーネントに渡したい！</span>
        console.log(res.data);
      <span class="synIdentifier">}</span>)
      .<span class="synStatement">catch</span>((error) =&gt; console.log(error));
  <span class="synIdentifier">}</span>
</pre>


<p><br/></p>

<p>CreateFormComponentからSearchComponentに値を渡すときは、直接渡すことはできない？のでVueの親コンポーネントに情報を渡す、でおなじみのemitを使って一度親にデータを渡して、そこからSerachComponentに渡すかと思います。</p>

<p><b>CreateFormComponent.vue</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>   onSubmit() <span class="synIdentifier">{</span>
      axios.post(ENTORY_POINT, <span class="synIdentifier">{</span>
        name: name,
        color: color,
      <span class="synIdentifier">}</span>)
      .then((res) =&gt; <span class="synIdentifier">{</span>
        <span class="synComment">//emitを使って親コンポーネントに渡す</span>
        <span class="synIdentifier">this</span>.$emit(<span class="synConstant">'data'</span>, res,data);
      <span class="synIdentifier">}</span>)
      .<span class="synStatement">catch</span>((error) =&gt; console.log(error));
  <span class="synIdentifier">}</span>
</pre>


<p><br/></p>

<p>こんなかんじに<code>emit</code>で指定したイベント名を<code>create-fom</code>に定義して、</p>

<p><b>index.html</b></p>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;app&quot;</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span>create-fom<span class="synIdentifier"> @</span><span class="synType">data</span><span class="synIdentifier">=</span><span class="synConstant">&quot;setData&quot;</span><span class="synIdentifier">&gt;&lt;/</span>create-fom<span class="synIdentifier">&gt;</span>
     <span class="synIdentifier">&lt;</span>search-<span class="synStatement">form</span><span class="synIdentifier"> &gt;&lt;/</span>search-<span class="synStatement">form</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;</span>srcipt<span class="synIdentifier"> </span><span class="synType">src</span><span class="synIdentifier">=</span><span class="synConstant">&quot;index.js&quot;</span><span class="synIdentifier">&gt;&lt;/</span><span class="synStatement">script</span><span class="synIdentifier">&gt;</span>
</pre>


<p><br/></p>

<p><code>index.js</code>でデータを同期するようのメソッド<code>setData</code>を定義してあげたりしていました。</p>

<p><b>index.js</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">new</span> Vue(<span class="synIdentifier">{</span>
  el:<span class="synConstant">'.app'</span>,
  components:<span class="synIdentifier">{</span>
  <span class="synComment">//省略 </span>
  <span class="synIdentifier">}</span>,
  data:<span class="synIdentifier">{</span>
      members: <span class="synIdentifier">[]</span>,
  <span class="synIdentifier">}</span>
  methods:<span class="synIdentifier">{</span>
     setData(data) <span class="synIdentifier">{</span>
       <span class="synIdentifier">this</span>.members = data; 
    <span class="synIdentifier">}</span>
 <span class="synIdentifier">}</span>
);
</pre>


<p><br/></p>

<p>最終的に、SerachFormComponentにはプロパティとして、<code>members</code>を渡せばやりたいことはできますね。<br/>
<b>index.html</b></p>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;app&quot;</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span>create-fom<span class="synIdentifier"> @</span><span class="synType">data</span><span class="synIdentifier">=</span><span class="synConstant">&quot;setData&quot;</span><span class="synIdentifier">&gt;&lt;/</span>create-fom<span class="synIdentifier">&gt;</span>
     <span class="synIdentifier">&lt;</span>search-<span class="synStatement">form</span><span class="synIdentifier">  :members=</span><span class="synConstant">&quot;members&quot;</span><span class="synIdentifier">&gt;&lt;/</span>search-<span class="synStatement">form</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;</span>srcipt<span class="synIdentifier"> </span><span class="synType">src</span><span class="synIdentifier">=</span><span class="synConstant">&quot;index.js&quot;</span><span class="synIdentifier">&gt;&lt;/</span><span class="synStatement">script</span><span class="synIdentifier">&gt;</span>
</pre>


<p><br/></p>

<p>コンポーネント同士でデータを共有したい場合は、その値を親にまでもってくる、というところはVueだろうがReactだろうか一緒ですね。</p>

<p><a href="https://mae.chab.in/archives/2943">Captcha</a><br/>
上記より引用</p>

<blockquote><p> 複数の子コンポーネントからデータを集めたい時や、2つの子コンポーネント同士でやりとりを行わせたい時は、状態（state）を親コンポーネントまで渡すようにします。親コンポーネントはその後、状態（state）をpropsを通して子コンポーネントに渡します。そのため子コンポーネントは常に互いに同期するようになっています。また同様に親コンポーネントとも同期するようになっています。</p></blockquote>

<p><br/></p>

<h3>Reactを学習した際の気づき</h3>

<p>気になったのは、親コンポーネントにデータをもってきたときに、そのデータの変更を行う処理も親にもってきている点です。</p>

<p>さきほどのコードを変更するとこんな感じになります。 <br/>
<br/></p>

<p>まず、大本の<code>index.js</code>に<code>members</code>更新するaxiosの処理をCreateFormComponentよりもってきて、<code>crreateMember</code>という関数で作成します。  <br/>
CreateFormComponent内にあるnameとcolorは、引数としてもらうようにします。</p>

<p><b>index.js</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">new</span> Vue(<span class="synIdentifier">{</span>
  el:<span class="synConstant">'.app'</span>,
  components:<span class="synIdentifier">{</span>
  <span class="synComment">//省略 </span>
  <span class="synIdentifier">}</span>,
  data:<span class="synIdentifier">{</span>
      members: <span class="synIdentifier">[]</span>,
  <span class="synIdentifier">}</span>
  methods:<span class="synIdentifier">{</span>
     <span class="synComment">//CreateFormComponentのAPI処理を親に書く</span>
     createMember(props) <span class="synIdentifier">{</span>
       axios.post(ENTORY_POINT, <span class="synIdentifier">{</span>
        name: props.name,
        color: props.color,
      <span class="synIdentifier">}</span>)
      .then((res) =&gt; <span class="synIdentifier">{</span>
        <span class="synComment">//親のデータに直接セット</span>
        <span class="synIdentifier">this</span>.members = res.data;
      <span class="synIdentifier">}</span>)
      .<span class="synStatement">catch</span>((error) =&gt; console.log(error));
     <span class="synIdentifier">}</span>
 <span class="synIdentifier">}</span>
);
</pre>


<p><br/></p>

<p>そして、さきほどつくった<code>createMember</code>関数を、CreateFormComponentにプロパティとして渡してあげます。</p>

<p><b>index.html</b></p>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;app&quot;</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span>create-fom<span class="synIdentifier"> :handleSubmit=</span><span class="synConstant">&quot;createMember&quot;</span><span class="synIdentifier">&gt;&lt;/</span>create-fom<span class="synIdentifier">&gt;</span>
     <span class="synIdentifier">&lt;</span>search-<span class="synStatement">form</span><span class="synIdentifier">  :members=</span><span class="synConstant">&quot;members&quot;</span><span class="synIdentifier">&gt;&lt;/</span>search-<span class="synStatement">form</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;</span>srcipt<span class="synIdentifier"> </span><span class="synType">src</span><span class="synIdentifier">=</span><span class="synConstant">&quot;index.js&quot;</span><span class="synIdentifier">&gt;&lt;/</span><span class="synStatement">script</span><span class="synIdentifier">&gt;</span>
</pre>


<p><br/></p>

<p>最後にもともとあったボタンをおしたときの処理は、バインドしたデータを親からもらった関数に渡して実行するだけです。</p>

<p><b>CreateFormComponent.vue</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>   <span class="synComment">//省略</span>
   props:handleSubmit
   <span class="synComment">//省略</span>
   onSubmit() <span class="synIdentifier">{</span>
　　<span class="synIdentifier">this</span>.handleSubmit(<span class="synIdentifier">{</span>name:<span class="synIdentifier">this</span>.name, color:<span class="synIdentifier">this</span>.color<span class="synIdentifier">}</span>);
  <span class="synIdentifier">}</span>
</pre>


<p>こうすることで、emitがいらなくなり、またデータ更新処理があちこちに散らばらなくなりました。</p>

-----
--------
AUTHOR: konoemario
TITLE: やっぱり、WebpackもBabelもよくわからない
BASENAME: 2018/07/13/182057
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 07/13/2018 18:20:57
CATEGORY: プログラム
CATEGORY: javascript
IMAGE: https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20180713/20180713144557.png
-----
BODY:
<h1>日記</h1>

<p>Reactをさわってみることにした。</p>

<h1>本題</h1>

<p>webpackとBabelの違いがなんだかわからなくなってしまった今日このごろ。</p>

<p>自分の中では、両者はこんな認識だった。</p>

<ul>
<li>webpack：複数のjsファイルとかだったりをひとつにまとめることができる。</li>
<li>Babel： ES6構文をES6が対応していないブラウザでも使えるようにES5にトランスパイルしてくれる。</li>
</ul>


<p>なんだけれども、こんな感じの<code>Hello.js</code>とそれを<code>@import</code>する<code>index.js</code>があった場合、どっちが何をやってるのかがわからなくなった。</p>

<p><b>Hello.js</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">export</span> <span class="synIdentifier">function</span> sayHello(message) <span class="synIdentifier">{</span>
   console.log(message);
<span class="synIdentifier">}</span>
</pre>


<p><br/></p>

<p><b>index.js</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">import</span> <span class="synIdentifier">{</span> sayHello <span class="synIdentifier">}</span> from <span class="synConstant">&quot;./lib/Hello.js&quot;</span>
sayHello(<span class="synConstant">'Ohankyyyyyy'</span>);
</pre>


<p><br/></p>

<p>というのも<code>@import</code>はES6構文だと思うんだけれども、これをIE11でも使えるようにしているのはwebpackなのか、Babelなのかどっちなんだろう。</p>

<p><br/></p>

<h2>2018/10/16 追記</h2>

<p>検証するまでもなく、下記にある参考にさせていただいた記事に記載がありました。
これを自分のことばで認識すると、</p>

<p> BabelはES6構文をES6が対応していないブラウザが実行できる形に変換してくれるが、import/exportの依存解決まではやってくれない。  <br/>
 Webpackなどのモジュールバンドラーでまとめる必要がある。</p>

<p>とのことでした。<br/>
※ちなみにES6っていってるけどES7とかES8とかもあって日々構文が進化しているみたい。  BabelはES8⇒ES6とか、柔軟に対応できるとのこと。<br/>
   まさにカオス。</p>

<p><br/></p>

<h2>ということで検証してみる</h2>

<p>試してみればいいじゃん！ということで試してみます。<br/>
webpackの記事については以下を参考にさせていただきました。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fics.media%2Fentry%2F16511" title="ブラウザで覚えるES Modules入門 - JavaScriptでモジュールを使う時代 - ICS MEDIA" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://ics.media/entry/16511">ics.media</a></cite></p>

<p>めっちゃわかりすい。</p>

<p><br/></p>

<h3>まずは、何も使わないでES6構文</h3>

<p>さきほどの、二つのjsファイルを作成して、</p>

<p><b>Hello.js</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">export</span> <span class="synIdentifier">function</span> sayHello(message) <span class="synIdentifier">{</span>
   console.log(message);
<span class="synIdentifier">}</span>
</pre>


<p><br/></p>

<p><b>index.js</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">import</span> <span class="synIdentifier">{</span> sayHello <span class="synIdentifier">}</span> from <span class="synConstant">&quot;./lib/Hello.js&quot;</span>
sayHello(<span class="synConstant">'Ohankyyyyyy'</span>);
</pre>


<p><br/></p>

<p><code>index.js</code> を読み込みます。</p>

<p><b>index.html</b></p>

<pre class="code lang-html" data-lang="html" data-unlink>  //省略
  script(src=&quot;/javascripts/index.js&quot;)
</pre>


<p><br/></p>

<p>Chromeで参照してみると、シンタックスエラーになってることが確認できます。</p>

<p><figure class="figure-image figure-image-fotolife" title="Chromeでシンタックスエラー"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20180713/20180713144557.png" alt="f:id:konoemario:20180713144557p:plain" title="f:id:konoemario:20180713144557p:plain" class="hatena-fotolife" itemprop="image"></span><figcaption>Chromeでシンタックスエラー</figcaption></figure>
<br/></p>

<p>おや、ChromeはES6構文に対応しているはずでは？と思いきや、<code>type="module"</code>を指定しなきゃいけないみたいです。</p>

<p><b>index.html</b></p>

<pre class="code lang-html" data-lang="html" data-unlink>  //省略
 script(type=&quot;module&quot; src=&quot;/javascripts/index.js&quot;)
</pre>


<p><br/></p>

<p>再度確認すると、無事実行されていることが確認できました。</p>

<p><figure class="figure-image figure-image-fotolife" title="Chromeで動いてる！"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20180713/20180713145216.png" alt="f:id:konoemario:20180713145216p:plain" title="f:id:konoemario:20180713145216p:plain" class="hatena-fotolife" itemprop="image"></span><figcaption>Chromeで動いてる！</figcaption></figure></p>

<p><br/></p>

<p>ネットワークタブを確認してみると、<code>index.js</code>読込み後に、<code>Hello.js</code>を読みにいってそうなことがわかります。</p>

<p><figure class="figure-image figure-image-fotolife" title="Chromeのネットワークタブの様子"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20180713/20180713145632.png" alt="f:id:konoemario:20180713145632p:plain" title="f:id:konoemario:20180713145632p:plain" class="hatena-fotolife" itemprop="image"></span><figcaption>Chromeのネットワークタブの様子</figcaption></figure>
<br/></p>

<p>さてさて、この状態でIEで確認してみると、コンソールログは何も出力されておらず、またネットワークも<code>index.js</code>のみ取得しているみたいです。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20180713/20180713145919.png" alt="f:id:konoemario:20180713145919p:plain" title="f:id:konoemario:20180713145919p:plain" class="hatena-fotolife" itemprop="image"></span>
<br/></p>

<p>ここで、ES6構文の<code>@import</code>はIE11では対応してなくて、使えないということが確認できました。</p>

<p><br/></p>

<h3>次にWebpackをためす</h3>

<p>次にwebpackでひとつにまとめてみようと思います。
早速インストールします。</p>

<p><b>webpackを導入</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ npm install webpack webpack-cli
</pre>


<p><br/></p>

<p>インストールができたら、さっそく実行します。<br/>
webpackの設定ファイルである<code>webpack.config.js</code>がなければ、<code>src</code>ディレクトリあるるものを<code>dist</code>に<code>main.js</code>として出力してくれるみたいです。</p>

<p><b>webpackを実行</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>./node_modules/.bin/webpack <span class="synSpecial">--mode</span> production
</pre>


<p><br/></p>

<p>作成された<code>main.js</code>を読み込むように修正します。
また<code>type="module"</code>の定義も元に戻して消しておきます。</p>

<p><b>index.html</b></p>

<pre class="code lang-html" data-lang="html" data-unlink>  //省略
 script(src=&quot;/javascripts/main.js&quot;)
</pre>


<p><br/></p>

<p>この状態でChrome、IE11で確認してみると、無事javascriptが動いていることが確認できました。<br/>
※画像はIE11のみです。</p>

<p><figure class="figure-image figure-image-fotolife" title="IE11でも動いた"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20180713/20180713152435.png" alt="f:id:konoemario:20180713152435p:plain" title="f:id:konoemario:20180713152435p:plain" class="hatena-fotolife" itemprop="image"></span><figcaption>IE11でも動いた</figcaption></figure></p>

<p><br/></p>

<p>とすると、<code>@import</code>を使えるようにしているのはwebpackだ！という結論が自分の中ででました。<br/>
あれ、実はBabelなんていらないんじゃないかとも思ってきたので、他の構文で試してみます。</p>

<p><br/></p>

<h3>Babelじゃなきゃだめそうな構文を試す</h3>

<p>さきほどの<code>Hello.js</code>にES6構文のアロー関数式を追加してみることにします。</p>

<p><b>Hello.js</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">export</span> <span class="synIdentifier">function</span> sayHello(message) <span class="synIdentifier">{</span>

   console.log(message);
   <span class="synComment">// アロー関数式を追加</span>
   <span class="synStatement">const</span> Bye = () =&gt; console.log(<span class="synConstant">'Bye'</span>);
   Bye();
<span class="synIdentifier">}</span>
</pre>


<p>これをwebpackを通して、IE11で実行してみたところ<br/>
<b>webpackを実行</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>./node_modules/.bin/webpack <span class="synSpecial">--mode</span> production
</pre>


<p><br/></p>

<p>予想に反して、IE11でも実行できてしまいました。</p>

<p><figure class="figure-image figure-image-fotolife" title="あれ、IE11でも実行できる"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20180713/20180713172109.png" alt="f:id:konoemario:20180713172109p:plain" title="f:id:konoemario:20180713172109p:plain" class="hatena-fotolife" itemprop="image"></span><figcaption>あれ、IE11でも実行できる</figcaption></figure>
<br/></p>

<p>そもそもIE11でアロー関数が使えるのではないかとも思い、webpackを通さないで実行してみたところ、構文エラーになってしまいました。</p>

<p>とすると、webpackを通せばBabelなんていらないのでしょうか？</p>

<p>そんなはずはないという思いで、IE11で実行できないという構文をぐぐってみることにしました。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fteratail.com%2Fquestions%2F115501" title="Babelを使えばIE11で使えないjavascriptも使用できるのでしょうか。｜teratail" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://teratail.com/questions/115501">teratail.com</a></cite></p>

<p>上記の記事を参考に、試してみることにします。</p>

<p><b>Hello.js</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">export</span> <span class="synIdentifier">function</span> sayHello(message) <span class="synIdentifier">{</span>

   console.log(message);
  <span class="synComment">// だめそうな構文を追加</span>
   <span class="synStatement">const</span> cityList = <span class="synIdentifier">[</span>
    <span class="synIdentifier">{</span> name: <span class="synConstant">'東京'</span>, value: <span class="synConstant">'1'</span> <span class="synIdentifier">}</span>,
    <span class="synIdentifier">{</span> name: <span class="synConstant">'神奈川'</span>, value: <span class="synConstant">'2'</span> <span class="synIdentifier">}</span>,
    <span class="synIdentifier">{</span> name: <span class="synConstant">'千葉'</span>, value: <span class="synConstant">'3'</span> <span class="synIdentifier">}</span>,
    <span class="synIdentifier">{</span> name: <span class="synConstant">'埼玉'</span>, value: <span class="synConstant">'4'</span> <span class="synIdentifier">}</span>,
    <span class="synIdentifier">]</span>;

    <span class="synStatement">const</span> target = cityList.find((city) =&gt; <span class="synIdentifier">{</span>
        <span class="synStatement">return</span> (city.name === <span class="synConstant">'東京'</span>);
    <span class="synIdentifier">}</span>);

    console.log(target);
<span class="synIdentifier">}</span>
</pre>


<p>ちゃんと？エラーになりました。</p>

<p><figure class="figure-image figure-image-fotolife" title="無事、IE11でエラーになった"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20180713/20180713173114.png" alt="f:id:konoemario:20180713173114p:plain" title="f:id:konoemario:20180713173114p:plain" class="hatena-fotolife" itemprop="image"></span><figcaption>無事、IE11でエラーになった</figcaption></figure></p>

<p><br/></p>

<h3>Babelを使う</h3>

<p>さきほどの構文がBabelを使うことで動くことを確認してみる。</p>

<p>何はともあれ、Babelをインストールする。 <br/>
<b>Babelのインストール</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ npm install babel-core babel-loader babel-preset-env
</pre>


<p><br/></p>

<p>Babelを使うにあたっては、こちらの記事はとてもわかりやすい。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fics.media%2Fentry%2F16028" title="最新版で学ぶwebpack 4入門 - Babel 7でES2018環境の構築(React, Vue, Three.js, jQueryのサンプル付き) - ICS MEDIA" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://ics.media/entry/16028">ics.media</a></cite></p>

<p><br/></p>

<p>上記の記事を参考に、webpack.config.jsを作成する。</p>

<p><b>webpack.config.js</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>module.exports = <span class="synIdentifier">{</span>
  mode: <span class="synConstant">'development'</span>,

  entry: <span class="synConstant">'./src/index.js'</span>,

  output: <span class="synIdentifier">{</span>
    path: `$<span class="synIdentifier">{</span>__dirname<span class="synIdentifier">}</span>/<span class="synStatement">public</span>/javascripts`,
    filename: <span class="synConstant">'main.js'</span>
  <span class="synIdentifier">}</span>,

  module: <span class="synIdentifier">{</span>
    rules: <span class="synIdentifier">[</span>
      <span class="synIdentifier">{</span>
        test: <span class="synConstant">/\.js$/</span>,
        use: <span class="synIdentifier">[</span>
          <span class="synIdentifier">{</span>
            loader: <span class="synConstant">'babel-loader'</span>,
            options: <span class="synIdentifier">{</span>
              presets: <span class="synIdentifier">[</span>
                <span class="synIdentifier">[</span><span class="synConstant">'env'</span>, <span class="synIdentifier">{</span><span class="synConstant">'modules'</span>: <span class="synConstant">false</span><span class="synIdentifier">}]</span>
              <span class="synIdentifier">]</span>
            <span class="synIdentifier">}</span>
          <span class="synIdentifier">}</span>
        <span class="synIdentifier">]</span>
      <span class="synIdentifier">}</span>
    <span class="synIdentifier">]</span>
  <span class="synIdentifier">}</span>
</pre>


<p><br/></p>

<p>この状態で再度webpackを実行。
<b>webpackを実行</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>./node_modules/.bin/webpack
</pre>


<p><br/></p>

<p>IE11を実行してみると、</p>

<p><figure class="figure-image figure-image-fotolife" title="IE11でメッセージかわってエラー"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20180713/20180713175754.png" alt="f:id:konoemario:20180713175754p:plain" title="f:id:konoemario:20180713175754p:plain" class="hatena-fotolife" itemprop="image"></span><figcaption>IE11でメッセージかわってエラー</figcaption></figure></p>

<p>あら、Babel実行前とメッセージがかわりますが、エラーになっちゃってます。<br/>
調べてみると、ArrayをfindするというメソッドがIE11で実装されていないみたい。</p>

<p>こちらの最下部にある、Array.prototype.findがない場合に代替するコードを先に読み込んでおけば、無事にarray.findを使うことができた。<br/>
<iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fdeveloper.mozilla.org%2Fja%2Fdocs%2FWeb%2FJavaScript%2FReference%2FGlobal_Objects%2FArray%2Ffind" title="Array.prototype.find()" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/find">developer.mozilla.org</a></cite></p>

<p><br/></p>

<h3>とりあえずの結果</h3>

<p>なんだかよくわからない結果になってしまった。</p>

<p>なんとなくの結論をメモしておく。</p>

<ul>
<li><p><code>@import</code>などのモジュールに関する機能はwebpackだけで事足りる。というのもwebpackはモジュールをまとめたりするものだから。</p></li>
<li><p>ES6構文をES5にしか対応していないブラウザで使用するにはwebpackだけじゃ足りなくってbabelでトランスパイルする必要がある。</p></li>
<li><p>とはいえ、babelだけやっとけばいいというものもなく、ものによっては代替コード(pollyfill)が必要になる。</p></li>
</ul>


<p>また、また気になったら試してみたいことは、</p>

<ul>
<li><p>webpackを使わないでbabelを使ったときに、@import構文は機能するのか。<br/>
(gulpとかでやった場合ってどうなんだろう)</p></li>
<li><p>今回はpollyfillが必要になってしまったけれども、babelを通すことで通るようになるものってなんだろう。</p></li>
</ul>


<p>こうやってみると何もわかってないことがわかる。</p>

-----
--------
AUTHOR: konoemario
TITLE: Reactメモ
BASENAME: 2018/07/18/192125
STATUS: Draft
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 07/09/2018 18:17:52
-----
BODY:
<h2>環境構築</h2>

<p>まずは、Node.jsのインストールはしておこう。</p>

<p><b>Node.jsのバージョン</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ node <span class="synSpecial">-v</span>
v9.6.1
</pre>


<p><br/></p>

<p>少なくとも最近のNode.jsのバージョンであれば、パッケージ管理マネージャーのnpmも一緒にインストールされているはず。</p>

<p><b>npmのバージョン</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ node <span class="synSpecial">-v</span>
v9.6.1
</pre>


<p><br/></p>

<p>ただ、今回はnpmではなくってyarnを使ってみる。<br/>
yarnはnpmと互換性のあるパッケージ管理マネージャーなんだけれども、なんだか速いらしいです。</p>

<p>yarn自身はnpmでもインストールできるみたいです。<br/>
また、他のプロジェクトでも使う可能性もあるので、グローバル環境にインストールしちゃいます。
yarnをインストールするのにnpmを使うという切なさ。</p>

<p><b>yarnのインストール</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ npm install yarn <span class="synSpecial">-g</span>
</pre>


<p><br/></p>

<p>そうしたらReact用のディレクトリを作成して、そこにいろいろ追加することにします。</p>

<p><b>React用のディレクトリを作成</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ <span class="synStatement">mkdir</span> sample-react 
</pre>


<p><br/></p>

<p>まずは、ここはyarnで管理するぞ！という宣言を込め<code>npm init</code>ならぬ<code>yarn init</code>をしておきます。<br/>
いろいろ聞かれますが、全部Enterで流します。<br/>
例のごとく、yarn(npm)でパッケージを公開する際に必要なものらしいので特に気にしなくて大丈夫です。</p>

<p><b>yarnの初期設定</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ yarn init
yarn init v1.7.0
question name <span class="synPreProc">(</span><span class="synSpecial">sample-react</span><span class="synPreProc">)</span>:
question version <span class="synPreProc">(</span><span class="synSpecial">1.0.0</span><span class="synPreProc">)</span>:
question description:
question entry point <span class="synPreProc">(</span><span class="synSpecial">index.js</span><span class="synPreProc">)</span>:
question repository url:
question author:
question license <span class="synPreProc">(</span><span class="synSpecial">MIT</span><span class="synPreProc">)</span>:
question private:
success Saved package.json
Done <span class="synError">in</span> 6.63s.
</pre>


<p><br/></p>

<p>さあ、こっからはいろんなパッケージをいれていく時間だよ！
この辺をやればやるほど、よくわからないものを触ってる感が強くなってきますね。</p>

<p>何はともあれ最初は、webpackを入れます。</p>

<p><b>webpackのインストール</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ yarn add webpack webpacl-cli webpack-dev-server
</pre>


<p>ここでwebpackとはこんなものだよ！と端的に言えればいいのですが、いまだによくわかってないという。
複数モジュールをひとつにまとめる過程が、コンパイルっぽい段階なのか、webpackなのか、そもそもwebpackはコンパイラみたいなもんだよというものかと混乱の極みです。</p>

<p>次にES6のjsをES5でも動くようにするbabel達をインストールしておきます。</p>

<p><b>babelのインストール</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ yarn add babel-core babel-loader  babel-preset-es2015 babel-preset-env
</pre>


<p>最後に、本命のReactをインストールします。</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ babel-preset-react react react-dom
</pre>


<p>webpack.config.jsをつくっとく。</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synIdentifier">var</span> publidDir = __dirname + <span class="synConstant">'/public'</span>;
module.exports = <span class="synIdentifier">{</span>
  <span class="synComment">// コンパイル対象のエントリーポイント</span>
  entry: <span class="synIdentifier">[</span>
    <span class="synConstant">'./src/index.jsx'</span>
  <span class="synIdentifier">]</span>,
  <span class="synComment">//出力先</span>
  output: <span class="synIdentifier">{</span>
    path: publidDir,
    filename: <span class="synConstant">'bundle.js'</span>
  <span class="synIdentifier">}</span>,
  <span class="synComment">// ローダーの設定</span>
  module: <span class="synIdentifier">{</span>
    rules: <span class="synIdentifier">[</span>
      <span class="synIdentifier">{</span>
        <span class="synComment">// コンパイル対象の拡張子を書けばいいみたい</span>
        test: <span class="synConstant">/\.(js|jsx)$/</span>,
        <span class="synComment">// nodo_modules配下は対象外にしろってことなんだろうけど、対象にするとどうなるんだろう。</span>
        <span class="synComment">// あー、entryのindex.js内で@importとかしてるからか。</span>
        exclude: <span class="synConstant">/node_modules/</span>,
        loader: <span class="synConstant">'babel-loader'</span>,
        <span class="synComment">// ここに書いてもいいし、.babelrcに書いてもいいみたい</span>
        options: <span class="synIdentifier">{</span>
          presets: <span class="synIdentifier">[</span><span class="synConstant">'react'</span>, <span class="synConstant">'env'</span><span class="synIdentifier">]</span>
        <span class="synIdentifier">}</span>
      <span class="synIdentifier">}</span>
    <span class="synIdentifier">]</span>
  <span class="synIdentifier">}</span>,
  <span class="synComment">// @import するときに.jsとか.jsxとかつけなくていいのはこの子のおかげと思われる</span>
  resolve: <span class="synIdentifier">{</span>
      extensions: <span class="synIdentifier">[</span><span class="synConstant">'.js'</span>, <span class="synConstant">'.jsx'</span><span class="synIdentifier">]</span>,
  <span class="synIdentifier">}</span>,
  <span class="synComment">//webpack-serverの設定</span>
  devServer: <span class="synIdentifier">{</span>
    <span class="synComment">// 謎</span>
    historyApiFallback: <span class="synConstant">true</span>,
    <span class="synComment">//documentroot</span>
    contentBase: publidDir
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>;
</pre>


<h3>コンパイル</h3>

<pre class="code lang-sh" data-lang="sh" data-unlink>.$ /node_modules/.bin/webpack <span class="synSpecial">--mode</span> development
</pre>


<h3>webpack-dev-serverの起動</h3>

<pre class="code lang-sh" data-lang="sh" data-unlink><span class="synStatement">&quot;</span><span class="synConstant">./node_modules/.bin/webpack-dev-server --mode development </span>
</pre>


<p>vagrantやdockerとかで起動しているときは、こんなかんじでいけた。</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ ./node_modules/.bin/webpack-dev-server <span class="synSpecial">--mode</span> development <span class="synSpecial">--host</span> 0.0.0.0 <span class="synSpecial">--public</span> VMのIP:port <span class="synSpecial">--watch-poll</span>
</pre>


<p>◆関数</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">const</span> Map = (<span class="synIdentifier">{</span> lat, lng <span class="synIdentifier">}</span>) =&gt; <span class="synIdentifier">{</span>
  <span class="synStatement">return</span> (
  &lt;MyMapComponent
    isMarkerShown
    googleMapURL=<span class="synConstant">&quot;https://maps.googleapis.com/maps/api/js?v=3.exp&amp;libraries=geometry,drawing,places&amp;key=AIzaSyAlmZk5ORyFRNbPQ2mNf9rK7YXOClDHW2I&quot;</span>
    loadingElement=<span class="synIdentifier">{</span>&lt;div style=<span class="synIdentifier">{{</span> height: <span class="synConstant">'100%'</span> <span class="synIdentifier">}}</span> /&gt;<span class="synIdentifier">}</span>
    containerElement=<span class="synIdentifier">{</span>&lt;div style=<span class="synIdentifier">{{</span> height: <span class="synConstant">'400px'</span> <span class="synIdentifier">}}</span> /&gt;<span class="synIdentifier">}</span>
    mapElement=<span class="synIdentifier">{</span>&lt;div style=<span class="synIdentifier">{{</span> height: <span class="synConstant">'100%'</span> <span class="synIdentifier">}}</span> /&gt;<span class="synIdentifier">}</span>
    <span class="synStatement">location</span>=<span class="synIdentifier">{{</span> lat, lng <span class="synIdentifier">}}</span>
  /&gt;
);
<span class="synIdentifier">}</span>
</pre>


<p>↑と↓は同じ。
reactというよりかは、javascriptの話。
実行するブロックがひとつなら、returnを書かなくても、return してくれる。</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">const</span> Map = (<span class="synIdentifier">{</span> lat, lng <span class="synIdentifier">}</span>) =&gt; (
  &lt;MyMapComponent
    isMarkerShown
    googleMapURL=<span class="synConstant">&quot;https://maps.googleapis.com/maps/api/js?v=3.exp&amp;libraries=geometry,drawing,places&amp;key=AIzaSyAlmZk5ORyFRNbPQ2mNf9rK7YXOClDHW2I&quot;</span>
    loadingElement=<span class="synIdentifier">{</span>&lt;div style=<span class="synIdentifier">{{</span> height: <span class="synConstant">'100%'</span> <span class="synIdentifier">}}</span> /&gt;<span class="synIdentifier">}</span>
    containerElement=<span class="synIdentifier">{</span>&lt;div style=<span class="synIdentifier">{{</span> height: <span class="synConstant">'400px'</span> <span class="synIdentifier">}}</span> /&gt;<span class="synIdentifier">}</span>
    mapElement=<span class="synIdentifier">{</span>&lt;div style=<span class="synIdentifier">{{</span> height: <span class="synConstant">'100%'</span> <span class="synIdentifier">}}</span> /&gt;<span class="synIdentifier">}</span>
    <span class="synStatement">location</span>=<span class="synIdentifier">{{</span> lat, lng <span class="synIdentifier">}}</span>
  /&gt;
);
</pre>


<p>◆上記に関連して疑問</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">return</span> axios.get().then()

<span class="synStatement">return</span> (axios.get().then())
</pre>


<p>上段の方は、呼ぶ側でthenが使えない。
下段は使える。</p>

<p>何が違うんだろう。</p>

<p>◆axiosに関しての疑問</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>  <span class="synStatement">return</span> (axios
    .get(GEOCODE_ENDPOINT, config)
    .then((res) =&gt; <span class="synIdentifier">{</span>
      <span class="synStatement">const</span> <span class="synIdentifier">{</span> data <span class="synIdentifier">}</span> = res;
      <span class="synStatement">const</span> <span class="synIdentifier">{</span> <span class="synStatement">status</span> <span class="synIdentifier">}</span> = data;
      <span class="synStatement">const</span> result = data.results<span class="synIdentifier">[</span>0<span class="synIdentifier">]</span>;

      <span class="synStatement">if</span> (<span class="synStatement">typeof</span> result === <span class="synConstant">'undefined'</span>) <span class="synIdentifier">{</span>
        <span class="synStatement">return</span> <span class="synIdentifier">{</span> <span class="synStatement">status</span> <span class="synIdentifier">}</span>;
      <span class="synIdentifier">}</span>

      <span class="synStatement">const</span> address = result.formatted_address;
      <span class="synStatement">const</span> <span class="synIdentifier">{</span> <span class="synStatement">location</span> <span class="synIdentifier">}</span> = result.geometry;

      <span class="synStatement">return</span> <span class="synIdentifier">{</span> <span class="synStatement">status</span>, address, <span class="synStatement">location</span> <span class="synIdentifier">}</span>;
    <span class="synIdentifier">}</span>));
<span class="synIdentifier">}</span>;
</pre>


<p>thenの中でreturnするとどうなるんだけっけ。resolveと同じ？</p>

<p>◆プロパティ</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>&lt;hoge  <span class="synStatement">location</span>=<span class="synIdentifier">{</span>ここにコンポーネントに渡すプロパティを書く<span class="synIdentifier">}</span> /&gt;
</pre>


<p>プロパティを書く際に {lat} って書くと、 {lat: lat}って渡す。</p>

<p>◆shothand
キーとバリューが同じなら、これでいいじゃんてきな。</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synIdentifier">{</span>lat: lat, lng: lng<span class="synIdentifier">}</span>  → <span class="synIdentifier">{</span> lat , lng <span class="synIdentifier">}</span> でいける
</pre>


<p>◆shothand
キーとバリューが同じなら、これでいいじゃんてきな2。</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synIdentifier">let</span> name = member.name;
↓
<span class="synIdentifier">let</span> <span class="synIdentifier">{</span> name <span class="synIdentifier">}</span> = member
</pre>


<p>◆shothand3</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">const</span> params = <span class="synIdentifier">{</span>
  a:1
  b:2
<span class="synIdentifier">}</span>

<span class="synIdentifier">{</span> params <span class="synIdentifier">}</span> はparams : <span class="synIdentifier">{</span>
  a:1,
  b:2
<span class="synIdentifier">}</span>

paramsは <span class="synIdentifier">{</span>a:1, b:1)
</pre>


<p>◆shothand2
プロパティの値を展開してくれるやつ</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>&lt;Marker <span class="synIdentifier">{</span>...props.<span class="synStatement">location</span><span class="synIdentifier">}</span> &gt; → &lt;Marker lat=<span class="synIdentifier">{</span>props.lat<span class="synIdentifier">}</span> lng=<span class="synIdentifier">{</span>props.lng<span class="synIdentifier">}</span> /&gt;
</pre>


<p>◆mao</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">const</span>      hotels: <span class="synIdentifier">[</span>
        <span class="synIdentifier">{</span> id: 111, name: <span class="synConstant">'hotel ookura'</span>, url: <span class="synConstant">'https://google.co.jp'</span> <span class="synIdentifier">}</span>,
        <span class="synIdentifier">{</span> id: 222, name: <span class="synConstant">'かまど や'</span>, url: <span class="synConstant">'https://google.co.jp'</span> <span class="synIdentifier">}</span>,
      <span class="synIdentifier">]</span>,

    <span class="synStatement">const</span> result = hotels.map((hotel) =&gt; <span class="synIdentifier">{</span>
      console.log(hotel);
      <span class="synStatement">return</span> <span class="synIdentifier">{</span>
        id: hotel.id,
      <span class="synIdentifier">}</span>;
    <span class="synIdentifier">}</span>);
</pre>


<p>結果は、[{id:111},{id:222}]が返ってくる。</p>

<p>◆</p>

<p>idはメアド
passはco
<a href="https://webservice.rakuten.co.jp/app/create">https://webservice.rakuten.co.jp/app/create</a></p>

-----
--------
AUTHOR: konoemario
TITLE: 正規表現メモ
BASENAME: 2018/07/06/163131
STATUS: Draft
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 07/06/2018 16:28:29
-----
BODY:
<p>ファイル名のチェック</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>        if<span class="synPreProc">(</span><span class="synStatement">!</span><span class="synSpecial">preg_match</span><span class="synPreProc">(</span><span class="synStatement">'</span><span class="synConstant">/^[a-zA-Z0-9-_\.]+$/</span><span class="synStatement">'</span><span class="synSpecial">, </span><span class="synPreProc">$fileName))</span><span class="synSpecial">{</span>
            abort<span class="synPreProc">(</span><span class="synConstant">404</span><span class="synPreProc">)</span><span class="synStatement">;</span>
        <span class="synSpecial">}</span>
</pre>


<ul>
<li>^行頭から、$行末まで</li>
<li><span data-unlink>内の文字が一文字以上の繰り返し +</li>
<li></span>内は許容する文字</li>
</ul>


<p>preg_matchは、マッチしたら1を、しなかったら0を返す。
if()は1はtrue、0はfalse。</p>

-----
--------
AUTHOR: konoemario
TITLE: LaravelでPKがIDじゃないときのfactory
BASENAME: 2018/07/04/170354
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 07/04/2018 17:03:54
CATEGORY: Laravel
CATEGORY: プログラム
-----
BODY:
<p>Laravelで、PKがidじゃないテーブルをつくったときに、factoryの挙動がちょっと違ったのでメモ。</p>

<p>こんな感じのモデルがあって、PKがデフォルトと異なるので、プロパティに<code>user_id</code>を書いてあげる。<br/>
<br/>
<b>PKがidではなくuser_idなUserモデル</b></p>

<pre class="code lang-php" data-lang="php" data-unlink><span class="synSpecial">&lt;?php</span>
<span class="synType">class</span> User <span class="synType">extends</span> Model
<span class="synSpecial">{</span>
    <span class="synType">protected</span> <span class="synStatement">$</span><span class="synIdentifier">primaryKey</span> <span class="synStatement">=</span> '<span class="synConstant">user_id</span>';

    <span class="synType">protected</span> <span class="synStatement">$</span><span class="synIdentifier">fillable</span> <span class="synStatement">=</span>  <span class="synSpecial">[</span>'<span class="synConstant">user_id];</span>


<span class="synConstant">}</span>
</pre>


<p>この状態で、テスト用のファクトリーを定義してあげて、</p>

<pre class="code lang-php" data-lang="php" data-unlink><span class="synSpecial">&lt;?php</span>
<span class="synComment">//ユーザー情報</span>
<span class="synStatement">$</span><span class="synIdentifier">factory</span><span class="synType">-&gt;</span>define<span class="synSpecial">(</span>App\User<span class="synStatement">::</span><span class="synType">class</span>, <span class="synPreProc">function</span> <span class="synSpecial">(</span>Faker <span class="synStatement">$</span><span class="synIdentifier">faker</span><span class="synSpecial">)</span> <span class="synSpecial">{</span>

    <span class="synStatement">return</span> <span class="synSpecial">[</span>
        '<span class="synConstant">user_id</span>' <span class="synStatement">=&gt;</span> <span class="synStatement">$</span><span class="synIdentifier">faker</span><span class="synType">-&gt;</span>randomNumber<span class="synSpecial">(</span><span class="synConstant">13</span><span class="synSpecial">)</span>,
        '<span class="synConstant">name</span>' <span class="synStatement">=&gt;</span> <span class="synStatement">$</span><span class="synIdentifier">faker</span><span class="synType">-&gt;</span><span class="synIdentifier">name</span>
    <span class="synSpecial">]</span>;
<span class="synSpecial">})</span>;
</pre>


<p>factoryを実行すると、</p>

<p><b>facotryを実行</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink><span class="synStatement">&gt;&gt;</span> factory<span class="synPreProc">(</span><span class="synStatement">'</span><span class="synConstant">App\User</span><span class="synStatement">'</span><span class="synPreProc">)</span>-<span class="synStatement">&gt;</span>create<span class="synPreProc">()</span>;
<span class="synStatement">=&gt;</span> App\User <span class="synSpecial">{</span><span class="synComment">#979</span>
     user_id: <span class="synConstant">0</span>,
     name: <span class="synStatement">&quot;</span><span class="synConstant">Dr. Zane Stroman</span><span class="synStatement">&quot;</span>,
     updated_at: <span class="synStatement">&quot;</span><span class="synConstant">2018-07-04 16:52:37</span><span class="synStatement">&quot;</span>,
     created_at: <span class="synStatement">&quot;</span><span class="synConstant">2018-07-04 16:52:37</span><span class="synStatement">&quot;</span>,
   <span class="synSpecial">}</span>
</pre>


<p>あら<code>user_id</code>が0になってる。</p>

<p><br/></p>

<p>どうやら、デフォルトのPKのidはauto_incrementになってるので、その機能をオフにしてあげなきゃいけないみたい。</p>

<p><br/></p>

<pre class="code lang-php" data-lang="php" data-unlink><span class="synSpecial">&lt;?php</span>
<span class="synType">class</span> User <span class="synType">extends</span> Model
<span class="synSpecial">{</span>
    <span class="synType">protected</span> <span class="synStatement">$</span><span class="synIdentifier">primaryKey</span> <span class="synStatement">=</span> '<span class="synConstant">user_id</span>';

    <span class="synType">protected</span> <span class="synStatement">$</span><span class="synIdentifier">fillable</span> <span class="synStatement">=</span>  <span class="synSpecial">[</span>'<span class="synConstant">user_id</span>'<span class="synSpecial">]</span>;

    <span class="synComment">//追記</span>
    <span class="synType">public</span> <span class="synStatement">$</span><span class="synIdentifier">incrementing</span> <span class="synStatement">=</span> <span class="synConstant">false</span>;
<span class="synSpecial">}</span>
</pre>


<p>これで、無事作成できた。</p>

<p>このへんのことを考えると、PKを全部idにしちゃったほうがフレームワークの機能的には使いやすいのかな。</p>

-----
--------
AUTHOR: konoemario
TITLE: LaravelのModelのcreateでハマった件
BASENAME: 2018/07/02/164314
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 07/02/2018 16:43:14
CATEGORY: プログラム
CATEGORY: Laravel
-----
BODY:
<h2>日記</h2>

<p>前の会社をやめて一年が経ってしまった。</p>

<h2>起きたこと</h2>

<p>Laravelなんとなく使えるようになったかなと思ったけれども、未だにフレームワークがちゃんと読めない。<br/>
というかPHPの基本的なところがわかってないんじゃないか疑惑。</p>

<p>こんな平凡な<code>Product</code>モデルがあって、</p>

<p><b>Productモデル</b></p>

<pre class="code lang-php" data-lang="php" data-unlink><span class="synSpecial">&lt;?php</span>
<span class="synType">namespace</span> App;

<span class="synType">class</span> Product <span class="synType">extends</span> Models
<span class="synSpecial">{</span>
   <span class="synStatement">$</span><span class="synIdentifier">fillable</span> <span class="synStatement">=</span> <span class="synSpecial">[</span>'<span class="synConstant">product_id</span>'<span class="synSpecial">]</span>;

    <span class="synType">public</span> <span class="synPreProc">function</span> <span class="synStatement">__construct</span><span class="synSpecial">()</span> <span class="synSpecial">{</span>
        <span class="synType">parent</span><span class="synStatement">::__construct</span><span class="synSpecial">()</span>;
        <span class="synComment">//以降に個別の設定処理</span>
    <span class="synSpecial">}</span>
<span class="synSpecial">}</span>   
</pre>


<p>tinkerでProductレコードを新規に作成するメソッド`create()'を実行したら、エラーになった。</p>

<p><b>実行した処理</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ php artisan tinker
Psy Shell v0.8.12 <span class="synPreProc">(</span><span class="synSpecial">PHP 7.1.11 ― cli</span><span class="synPreProc">)</span> by Justin Hileman
<span class="synStatement">&gt;&gt;&gt;</span> <span class="synPreProc">$product</span> <span class="synStatement">=</span> new App\Product
<span class="synStatement">&gt;&gt;&gt;</span> <span class="synPreProc">$product</span>-<span class="synStatement">&gt;</span>create<span class="synPreProc">(</span><span class="synSpecial">[</span><span class="synStatement">'</span><span class="synConstant">product_id</span><span class="synStatement">'</span><span class="synSpecial"> </span><span class="synStatement">=&gt;</span><span class="synSpecial"> </span><span class="synConstant">1</span><span class="synSpecial">]</span><span class="synPreProc">)</span>;
</pre>


<p>エラーメッセージに表示されているSQLをみると、<code>create()</code>の引数に指定している、<code>product_id</code>が無視されているではありませんか。</p>

<p><b>エラーメッセージ</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>Illuminate\Database\QueryException with message <span class="synStatement">'</span><span class="synConstant">SQLSTATE[HY000]: General error: 1364 Field </span><span class="synStatement">'</span>product_id<span class="synStatement">'</span><span class="synConstant"> doesn</span><span class="synStatement">'</span>t have a default value <span class="synPreProc">(</span><span class="synSpecial">SQL: insert into `products` </span><span class="synPreProc">(</span><span class="synSpecial">`updated_at`, `created_at`</span><span class="synPreProc">)</span><span class="synSpecial"> values </span><span class="synPreProc">(</span><span class="synConstant">2018-07-02</span><span class="synSpecial"> </span><span class="synConstant">15</span><span class="synSpecial">:</span><span class="synConstant">52</span><span class="synSpecial">:</span><span class="synConstant">14</span><span class="synSpecial">, </span><span class="synConstant">2018-07-02</span><span class="synSpecial"> </span><span class="synConstant">15</span><span class="synSpecial">:</span><span class="synConstant">52</span><span class="synSpecial">:</span><span class="synConstant">14</span><span class="synPreProc">))</span><span class="synStatement">'</span>
</pre>


<p><br/></p>

<p>あれ、モデルに<code>fillable</code>もちゃんと書いてるよな、、、と1時間ぐらいハマってたんですが、  原因はコンストラクタでした。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fstackoverflow.com%2Fquestions%2F30502922%2Fa-construct-on-an-eloquent-laravel-model" title="A __construct on an Eloquent Laravel Model" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://stackoverflow.com/questions/30502922/a-construct-on-an-eloquent-laravel-model">stackoverflow.com</a></cite></p>

<p>以下にようにモデルのコンストラクタに、<code>arrtibutes</code>の引数を設定してあげます。</p>

<p><b>修正後のProductモデル</b></p>

<pre class="code lang-php" data-lang="php" data-unlink><span class="synSpecial">&lt;?php</span>
<span class="synType">namespace</span> App;

<span class="synType">class</span> Product <span class="synType">extends</span> Models
<span class="synSpecial">{</span>
   <span class="synStatement">$</span><span class="synIdentifier">fillable</span> <span class="synStatement">=</span> <span class="synSpecial">[</span>'<span class="synConstant">product_id</span>'<span class="synSpecial">]</span>;

    <span class="synType">public</span> <span class="synPreProc">function</span> <span class="synStatement">__construct</span><span class="synSpecial">(</span><span class="synType">array</span> <span class="synStatement">$</span><span class="synIdentifier">attributes</span> <span class="synStatement">=</span> <span class="synSpecial">[])</span> <span class="synSpecial">{</span>
        <span class="synType">parent</span><span class="synStatement">::__construct</span><span class="synSpecial">(</span><span class="synStatement">$</span><span class="synIdentifier">attributes</span><span class="synSpecial">)</span>;
        <span class="synComment">//以降に個別の設定処理</span>
    <span class="synSpecial">}</span>
<span class="synSpecial">}</span>   
</pre>


<p>フレームワーク内のModel.phpのコンストラクタをみると、<code>attributes</code>の引数があり、これは<code>create()</code>で渡している配列の値っぽいです。</p>

<p><b>Model.php</b></p>

<pre class="code lang-php" data-lang="php" data-unlink><span class="synSpecial">&lt;?php</span>

    <span class="synComment">/**</span>
<span class="synComment">     * Create a new Eloquent model instance.</span>
<span class="synComment">     *</span>
<span class="synComment">     * </span><span class="synPreProc">@param  </span><span class="synComment">array  $attributes</span>
<span class="synComment">     * </span><span class="synPreProc">@return </span><span class="synComment">void</span>
<span class="synComment">     */</span>
    <span class="synType">public</span> <span class="synPreProc">function</span> <span class="synStatement">__construct</span><span class="synSpecial">(</span><span class="synType">array</span> <span class="synStatement">$</span><span class="synIdentifier">attributes</span> <span class="synStatement">=</span> <span class="synSpecial">[])</span>
    <span class="synSpecial">{</span>
        <span class="synStatement">$</span><span class="synIdentifier">this</span><span class="synType">-&gt;</span>bootIfNotBooted<span class="synSpecial">()</span>;

        <span class="synStatement">$</span><span class="synIdentifier">this</span><span class="synType">-&gt;</span>syncOriginal<span class="synSpecial">()</span>;;

        <span class="synStatement">$</span><span class="synIdentifier">this</span><span class="synType">-&gt;</span>fill<span class="synSpecial">(</span><span class="synStatement">$</span><span class="synIdentifier">attributes</span><span class="synSpecial">)</span>;
    <span class="synSpecial">}</span>
</pre>


<p><code>create()</code>でProductのインスタンスをつくるという基本的なことを忘れていて、<code>attributes</code>って、tinkerでnewしたときに設定してないよな、、、どっからくるんだ、と思ってました。</p>

<p>そもそもModelクラス内にもトレイトにもcreateメソッドはないんだけれども、どう呼んでるんだろうという新たな謎を胸に秘め生きていこうと思います。</p>

-----
--------
AUTHOR: konoemario
TITLE: 
BASENAME: 2018/06/27/183016
STATUS: Draft
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 06/26/2018 20:46:34
-----
BODY:
<p>ここに巨大なファイル<code>before_big_file.csv</code>と<code>after_big_file.csv</code>とが存在している。
※GBを超えるファイル。</p>

<p><code>after_big_file.csv</code>は<code>before_big_file.csv</code>をもとに、一定条件で置換処理を行っている。<br/>
正しく置換できたか確認をするために、念のためファイル間で差分をとっておきたい。</p>

<p><b>巨大なファイルを100万件ごとに分割する</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ split <span class="synSpecial">-l1000000</span> <span class="synSpecial">-d</span>  before_big_file.tsv
</pre>


<p>これを実行すると、x00、x01、x02、、、とファイルが分割されて作成されていく。<br/>
<code>-d</code>オプションを付けないと、xaa、xab、xac、、、というファイル名で作成されていく。
分割したファイルが2桁を超えるようであれば、'-a'オプションで桁数を指定できるみたい。</p>

<p><b>分割したファイルをbeforeディレクトリに移動</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ <span class="synStatement">mkdir</span> before
$  <span class="synStatement">mv</span> x* before
</pre>


<p>変更後のファイル、<code>after_big_file.csv</code>でもファイル分割して、afterディレクトリに移動しておく。</p>

<p><b>比較用シェルスクリプト</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink><span class="synComment">#!/bin/bash</span>
<span class="synStatement">for</span> file <span class="synStatement">in</span> <span class="synSpecial">`</span><span class="synStatement">ls</span><span class="synSpecial"> before/x*`</span>
<span class="synStatement">do</span>
        diff ./before/<span class="synPreProc">${file</span><span class="synStatement">##</span>*/<span class="synPreProc">}</span> ./after/<span class="synPreProc">${file</span><span class="synStatement">##</span>*/<span class="synPreProc">}</span>
<span class="synStatement">done</span>
</pre>




<pre class="code lang-sh" data-lang="sh" data-unlink>./diff.sh
</pre>


-----
--------
AUTHOR: konoemario
TITLE: watch-poll
BASENAME: 2018/06/21/124719
STATUS: Draft
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 06/20/2018 18:40:03
-----
BODY:
<p><a href="https://webpack.js.org/guides/development-vagrant/">Development - Vagrant</a></p>

<pre class="code" data-lang="" data-unlink>
const path = require(&#39;path&#39;);

const publidDir = path.join(__dirname, &#39;/public&#39;);

module.exports = {
  entry: [
    &#39;./src/index.js&#39;,
  ],
  output: {
    path: publidDir,
    publicPath: &#39;/&#39;,
    filename: &#39;bundle.js&#39;,
  },</pre>


<ul>
<li><p>bundle.jsのエントリーポイントがindex.js</p></li>
<li><p>eslintを動かすために結局Windowsのホストマシンにeslintをいれた。</p></li>
<li>sassのwepackの設定をいれたらコンパイルエラー</li>
</ul>


<p><iframe src="https://hatenablog-parts.com/embed?url=http%3A%2F%2Fkoukitips.net%2Fpost1967%2F" title="[Webpack4 アップデートエラー] Error: Chunk.entrypoints: Use Chunks.groupsIterable and filter by instanceof Entrypoint instead | koukiTips" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://koukitips.net/post1967/">koukitips.net</a></cite></p>

-----
--------
AUTHOR: konoemario
TITLE: ElasticCacheのmemcacheの挙動メモ
BASENAME: 2018/06/20/162311
STATUS: Draft
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 06/20/2018 16:12:24
-----
BODY:
<p>Laravel5.5でAWSのElasticCacheのmemcachedを利用していた。</p>

<p>ElasticCacheのmemcachedにはクラスタとノードというものがあるんだけれども、クラスタのエンドポイントを指定すべきなのかノードのエンドポイントを指定すべきなのかが謎だった。<br/>
クラスタ用のライブラリを導入すればクラスタ1択なんだけれども、シングルノードであれば、問題ないのかな。</p>

<p>シングルクラスタ：シングルノード
シングルクラスタ：マルチノード
マルチクラスタ：シングルノード
マルチクラスタ：マルチノード</p>

<pre class="code lang-php" data-lang="php" data-unlink><span class="synSpecial">&lt;?php</span>

  <span class="synStatement">$</span><span class="synIdentifier">dynamic_client</span> <span class="synStatement">=</span> <span class="synPreProc">new</span> Memcached<span class="synSpecial">()</span>;

  <span class="synStatement">$</span><span class="synIdentifier">server_port</span> <span class="synStatement">=</span> '<span class="synConstant">11211</span>';

  <span class="synComment">#クラスタのID1</span>
  <span class="synComment">#$server_endpoint1 = 'dimpbt-stg-cache00.5zbbua.cfg.apne1.cache.amazonaws.com';</span>
  <span class="synComment">#クラスタID1のノード</span>
  <span class="synStatement">$</span><span class="synIdentifier">server_endpoint1</span> <span class="synStatement">=</span> '<span class="synConstant">dimpbt-stg-cache00.5zbbua.0001.apne1.cache.amazonaws.com</span>';


  <span class="synComment">#クラスタのID2</span>
  <span class="synComment">#$server_endpoint2 = 'dimpbt-stg-cache01.5zbbua.cfg.apne1.cache.amazonaws.com';</span>
  <span class="synComment">#クラスタID2のノード</span>
  <span class="synStatement">$</span><span class="synIdentifier">server_endpoint2</span> <span class="synStatement">=</span> '<span class="synConstant">dimpbt-stg-cache01.5zbbua.0001.apne1.cache.amazonaws.com</span>';


  <span class="synStatement">$</span><span class="synIdentifier">dynamic_client</span><span class="synType">-&gt;</span>addServer<span class="synSpecial">(</span><span class="synStatement">$</span><span class="synIdentifier">server_endpoint1</span>, <span class="synStatement">$</span><span class="synIdentifier">server_port</span><span class="synSpecial">)</span>;
  <span class="synStatement">$</span><span class="synIdentifier">dynamic_client</span><span class="synType">-&gt;</span>addServer<span class="synSpecial">(</span><span class="synStatement">$</span><span class="synIdentifier">server_endpoint2</span>, <span class="synStatement">$</span><span class="synIdentifier">server_port</span><span class="synSpecial">)</span>;

  <span class="synStatement">$</span><span class="synIdentifier">sl</span> <span class="synStatement">=</span> <span class="synStatement">$</span><span class="synIdentifier">dynamic_client</span><span class="synType">-&gt;</span>getServerList<span class="synSpecial">()</span>;
  <span class="synIdentifier">print_r</span><span class="synSpecial">(</span><span class="synStatement">$</span><span class="synIdentifier">sl</span><span class="synSpecial">)</span>;

  <span class="synStatement">$</span><span class="synIdentifier">array</span> <span class="synStatement">=</span> <span class="synSpecial">[</span>
    '<span class="synConstant">shot1</span>' <span class="synStatement">=&gt;</span> '<span class="synConstant">hit</span>',
    '<span class="synConstant">shot2</span>' <span class="synStatement">=&gt;</span> '<span class="synConstant">hit</span>',
    '<span class="synConstant">shot3</span>' <span class="synStatement">=&gt;</span> '<span class="synConstant">hit</span>',
    '<span class="synConstant">shot4</span>' <span class="synStatement">=&gt;</span> '<span class="synConstant">hit</span>',
    '<span class="synConstant">shot6</span>' <span class="synStatement">=&gt;</span> '<span class="synConstant">hit</span>',
    '<span class="synConstant">shot7</span>' <span class="synStatement">=&gt;</span> '<span class="synConstant">hit</span>',
    '<span class="synConstant">shot8</span>' <span class="synStatement">=&gt;</span> '<span class="synConstant">hit</span>',
    '<span class="synConstant">shot9</span>' <span class="synStatement">=&gt;</span> '<span class="synConstant">hit</span>',
    '<span class="synConstant">shot10</span>' <span class="synStatement">=&gt;</span> '<span class="synConstant">hit</span>',
  <span class="synSpecial">]</span>;


  <span class="synStatement">if</span><span class="synSpecial">(</span><span class="synStatement">$</span><span class="synIdentifier">argv</span><span class="synSpecial">[</span><span class="synConstant">1</span><span class="synSpecial">]</span> <span class="synStatement">==</span> '<span class="synConstant">set</span>'<span class="synSpecial">)</span> <span class="synSpecial">{</span>
    <span class="synComment">#値を設定する</span>
    <span class="synStatement">foreach</span><span class="synSpecial">(</span><span class="synStatement">$</span><span class="synIdentifier">array</span> <span class="synStatement">as</span> <span class="synStatement">$</span><span class="synIdentifier">key</span> <span class="synStatement">=&gt;</span> <span class="synStatement">$</span><span class="synIdentifier">value</span><span class="synSpecial">){</span>

      <span class="synStatement">if</span><span class="synSpecial">(</span><span class="synStatement">!$</span><span class="synIdentifier">dynamic_client</span><span class="synType">-&gt;</span>set<span class="synSpecial">(</span><span class="synStatement">$</span><span class="synIdentifier">key</span>, <span class="synStatement">$</span><span class="synIdentifier">value</span>, <span class="synConstant">600</span><span class="synSpecial">)){</span>
        <span class="synPreProc">print</span><span class="synSpecial">(</span><span class="synStatement">$</span><span class="synIdentifier">key</span> <span class="synStatement">.</span>'<span class="synConstant">:</span>'<span class="synStatement">.</span> <span class="synStatement">$</span><span class="synIdentifier">value</span><span class="synStatement">.</span>&quot;<span class="synConstant">:set error</span><span class="synSpecial">\n</span>&quot;<span class="synSpecial">)</span>;
      <span class="synSpecial">}</span>;

    <span class="synSpecial">}</span>
  <span class="synSpecial">}</span><span class="synStatement">else</span><span class="synSpecial">{</span>
    <span class="synComment">#値を取得する</span>
    <span class="synStatement">foreach</span><span class="synSpecial">(</span><span class="synStatement">$</span><span class="synIdentifier">array</span> <span class="synStatement">as</span> <span class="synStatement">$</span><span class="synIdentifier">key</span> <span class="synStatement">=&gt;</span> <span class="synStatement">$</span><span class="synIdentifier">value</span><span class="synSpecial">){</span>

      <span class="synStatement">$</span><span class="synIdentifier">memValue</span> <span class="synStatement">=</span> <span class="synStatement">$</span><span class="synIdentifier">dynamic_client</span><span class="synType">-&gt;</span>get<span class="synSpecial">(</span><span class="synStatement">$</span><span class="synIdentifier">key</span><span class="synSpecial">)</span>;
</pre>


<p><a href="https://github.com/laravel/framework/issues/15555">Session randomly expiring too early &middot; Issue #15555 &middot; laravel/framework &middot; GitHub</a></p>

<p>Redisの方がいいかもしれない。</p>

-----
--------
AUTHOR: konoemario
TITLE: サーバーの設定ファイルをAnsibleで管理する
BASENAME: 2018/06/20/160237
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 06/20/2018 16:02:37
CATEGORY: Ansible
CATEGORY: プログラム
IMAGE: https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20180619/20180619122321.jpg
-----
BODY:
<p>ある日、保守しているサイトの担当者から、サイトが「502 Bad Gateway」の文字がでて見れねえぞ！どうなってるんだよ！とお怒りので電話が。</p>

<p>ものすごくアクセスがきていて、単純にさばききれないだけなんじゃと思い、ロードバランサでリクエスト数を確認をしてみるも、たいしてアクセスはきていない。</p>

<p>いろいろと調べてみると、特定のサーバーにのみ問題が発生していることが確認できた、</p>

<p>Webサーバー周りの設定を確認をしてみると、問題のあったサーバーの設定が、他のサーバーと異なることが発覚。</p>

<p>誰だ、こんなふざけたことをしたやつは！と思ったら自分でした、はい。</p>

<p>目の前が真っ暗になりました。</p>

<p><br/>
<span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20180619/20180619122321.jpg" alt="f:id:konoemario:20180619122321j:plain" title="f:id:konoemario:20180619122321j:plain" class="hatena-fotolife" itemprop="image"></span>
<br/></p>

<p>その後、各サーバの設定を合わせることで、無事事象は解消したのですが、なんで設定に差分が！と後悔が押し寄せてきます。</p>

<p>思い返せば、設定ファイルを各サーバにログインして個別で編集しており、その際に差分が発生したのではないかと。</p>

<p>なので、今後こういったことがないように、Webサーバー周りの設定ファイルを管理して一括で配布できるようにしておこうと誓ったのでした。</p>

<p><br/></p>

<ul class="table-of-contents">
    <li><a href="#対応方法">対応方法</a></li>
    <li><a href="#前提事項">前提事項</a></li>
    <li><a href="#Ansibleを用意する">Ansibleを用意する</a></li>
    <li><a href="#ステージング用ファイルを用意する">ステージング用ファイルを用意する</a><ul>
            <li><a href="#hosts">hosts</a></li>
            <li><a href="#group_vars">group_vars</a></li>
        </ul>
    </li>
    <li><a href="#Playbookを書いていく">Playbookを書いていく</a><ul>
            <li><a href="#role">role</a></li>
            <li><a href="#webserversyml">webservers.yml</a></li>
        </ul>
    </li>
    <li><a href="#いざ実行する">いざ実行する</a></li>
</ul>

<h2 id="対応方法">対応方法</h2>

<p>ソースコードはもちろんgitなどの構成管理ツールで管理しているのですが、サーバーの設定ファイルは適当になっていました。  <br/>
なので、サーバーの設定ファイルもgitで管理していこうと思います。</p>

<p>また、単純に管理するだけではだめで、きちんと一括で配布できるようにしておく必要があります。</p>

<p>配布する処理はなんでもいいのですが、前回もさわったAnsibleを使っていこうと思います。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=http%3A%2F%2Fwww.tohuandkonsome.site%2Fentry%2F2018%2F05%2F08%2F223808" title="今日から君が開発環境を作ってねと言われたのでAnsbileでつくろう  - 豆腐とコンソメ" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://www.tohuandkonsome.site/entry/2018/05/08/223808">www.tohuandkonsome.site</a></cite></p>

<p><br/></p>

<h2 id="前提事項">前提事項</h2>

<p>今回の登場するサーバ達は以下になります。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20180619/20180619124026.jpg" alt="f:id:konoemario:20180619124026j:plain" title="f:id:konoemario:20180619124026j:plain" class="hatena-fotolife" itemprop="image"></span></p>

<ul>
<li>アプリサーバー：エンドユーザーがアクセスするサイトを置いている。一番リクエストが多い。</li>
<li>CMSサーバー：アプリサーバーに表示するコンテンツを管理するためのサイトを置いている。サイト運用者が使うだけなのでリクエスト数は少ない。</li>
<li>バッチサーバー：  バッチで動かす処理はここで実行する。</li>
</ul>


<p>本来Web01とWeb02の設定はまったく一緒なはずなんですが、php-fpm回りの設定が異なっていました。
今回は、php-fpmだったりNginxあたりの設定ファイルをターゲットに作業を行おうと思います。</p>

<p>また、これらのWebサーバー回りの設定は、アプリサーバーとCMSサーバーで、設定を変えています。<br/>
というのも、アプリサーバ側のほうは、リクエストがたくさんくることを想定した設定になっています。<br/>
一方CMSサーバの方はデフォルト値という適当設定になっています。(それがいいかはさておき)</p>

<p>さらに、環境も本番環境とステージング環境でわかれています。<br/>
<span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20180619/20180619124830.jpg" alt="f:id:konoemario:20180619124830j:plain" title="f:id:konoemario:20180619124830j:plain" class="hatena-fotolife" itemprop="image"></span></p>

<p>なので、以下の4パターン用の設定ファイル管理・配布ができることを目標とします。</p>

<table>
<thead>
<tr>
<th style="text-align:left;"> 環境 </th>
<th style="text-align:right;"> サーバーの種類</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;"> production </td>
<td style="text-align:right;"> アプリサーバー </td>
</tr>
<tr>
<td style="text-align:left;"> production </td>
<td style="text-align:right;"> CMSサーバー</td>
</tr>
<tr>
<td style="text-align:left;"> staging </td>
<td style="text-align:right;"> アプリサーバー </td>
</tr>
<tr>
<td style="text-align:left;"> staging </td>
<td style="text-align:right;"> CMSサーバー</td>
</tr>
</tbody>
</table>


<p><br/></p>

<h2 id="Ansibleを用意する">Ansibleを用意する</h2>

<p>早速、Ansibleを用意します。</p>

<p>Ansileをインストールする場所ですが、開発環境用のVagrantでたてたOSにインストールすることにしました。</p>

<p>ローカル環境においた各種設定ファイルを、ansibleがssh経由で各サーバーにおいてくれるイメージになります。<br/>
<span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20180619/20180619135620.jpg" alt="f:id:konoemario:20180619135620j:plain" title="f:id:konoemario:20180619135620j:plain" class="hatena-fotolife" itemprop="image"></span></p>

<p><br/>
<b>インストール</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ sudo yum install ansible
</pre>


<p><br/></p>

<p>インストールが完了したら、まずはディレクトリ構成を考えます。<br/>
Ansible使用する際の構成はいろいろな構成があって悩ましいのですが、公式のBestPracticeの例を参考にすることにしました。</p>

<p><a href="https://docs.ansible.com/ansible/latest/user_guide/playbooks_best_practices.html#best-practices">Best Practices &mdash; Ansible Documentation</a></p>

<p>とりあえずこんな感じでディレクトリをきっておくことにしました。</p>

<p><b>Ansibleのディレクトリ構成</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ tree
.
├── inventories
│   ├── production
│   └── staging
├── roles
│   ├── role-nginx
</pre>


<p>最後に実行するplaybook実行用のコマンドでステージング環境を選択した場合、inventories/staging配下のファイルが変数として使えるようになるイメージです。</p>

<p><b>ステージング環境用</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ ansible-playbook <span class="synSpecial">-i</span> inventories/staging/hosts 実行するplaybook名.yml
</pre>


<p><br/></p>

<h2 id="ステージング用ファイルを用意する">ステージング用ファイルを用意する</h2>

<p>ここでは、ステージング環境に注目していきます。</p>

<p>以下のように、inventories/staging配下にディレクトリ、ファイルをつくっておきます。<br/>
<br/></p>

<p><b>Ansibleのディレクトリ構成</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ tree
.
├── inventories
│   ├── production
│   └── staging
│       ├── group_vars  ←追加
│       │   ├── cms.yml  ←追加
│       │   └── web.yml   ←追加
│       └── hosts ←追加
├── roles
│   ├── role-nginx
</pre>


<p><br/></p>

<h4 id="hosts">hosts</h4>

<p>まずは、一番大事と思われる<code>hosts</code>に定義を追加します。<br/>
見ての通り、ステージング環境のサーバーのIPを記載しています。<br/>
（実際のIPを書くとまずいのでxxにしてます。)</p>

<p>バッチサーバーは今回どうでもいいのですが、一応追加しています。</p>

<p><br/>
<b>hosts</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink><span class="synStatement">[</span>web<span class="synStatement">]</span>
xx.xx.xx.100
xx.xx.xx.101
<span class="synStatement">[</span>cms<span class="synStatement">]</span>
xx.xx.xx.200
<span class="synStatement">[</span>batch<span class="synStatement">]</span>
xx.xx.xx.300

<span class="synStatement">[</span>webservers:children<span class="synStatement">]</span>
web
cms

<span class="synStatement">[</span>all:vars<span class="synStatement">]</span>
<span class="synIdentifier">env</span>=staging
</pre>


<p><br/></p>

<p>'[グループ名]'をつけることで複数のサーバーをグループ化することができます。<br/>
また、childrenを使うとグループ同士をさらにグループ化できるみたいです。<br/>
今回は、nginxを使用している、webサーバーとcmsサーバーをまとめて<code>webservers</code>というグループとして扱っています。</p>

<p>また最後の<code>all:vars</code>ですが、このhosts上に定義しているグループに関する処理を実行する際に使用できる変数を定義できるみたいです。<br/>
ここでは、変数名:envに値:stagingを設定しています。</p>

<p><br/></p>

<h4 id="group_vars">group_vars</h4>

<p>続いて、グループごとに異なる変数はgroup_vars配下で管理することにします。<br/>
さきほど追加した、<code>web.yml</code>と<code>cms.yml</code>を編集します。</p>

<p>ここでは、変数:groupに値:web or cms をそれぞれ設定しています。</p>

<p><b>web.yml</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>group: web
</pre>


<p><b>cms.yml</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>group: cms
</pre>


<p><br/></p>

<h2 id="Playbookを書いていく">Playbookを書いていく</h2>

<p>ここからは実際にansibleのplaybookを書いていきます。<br/>
ここではroleを使ってかくことにします。</p>

<h4 id="role">role</h4>

<p>次に、実際に各サーバで行う処理を記述するためのroleを書いていきます。<br/>
以下のように、role-nginx配下にディレクトリ、ファイルを置くことにしました。<br/>
php-fpm用のロールも似たようなものになるので、これ以降は省略しています。</p>

<p><br/>
<b>role-nginx配下にファイルを追加</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>├── roles
│   ├── role-nginx
│   │   ├── files 
│   │   │   └── staging
│   │   │       ├── nginx.conf.cms
│   │   │       └── nginx.conf.web
│   │   └── tasks
│   │       └── main.yml
</pre>


<p><br/></p>

<p><code>nginx.conf.cms</code>、<code>nginx.conf.web</code>は実際のサーバー上に置かれているnginxの設定ファイルを持ってきています。<br/>
テンプレートの<code>nginx.conf</code>を用意しておいて、その中で環境ごとの変数を展開させる方法でもよかったんですが、既に動いている環境だっだので、単純なものにしました。</p>

<p><code>main.yml</code>には、実際の設定処理を書きます。</p>

<p><code>copy</code>モジュールを使って、さきほど用意したnginxのファイルを、各サーバーにおいてあげます。<br/>
ここでは、コピー元のnginx.confを各環境で切り分けられるように、さきほど定義した変数を展開しているだけになります。</p>

<p><br/>
<b>main.yml</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>- name: copy nginx.conf
  copy: <span class="synIdentifier">src</span>=<span class="synSpecial">{{</span> env <span class="synSpecial">}}</span>/nginx.conf.<span class="synSpecial">{{</span> group <span class="synSpecial">}}</span> <span class="synIdentifier">dest</span>=/etc/nginx/nginx.conf <span class="synIdentifier">owner</span>=root <span class="synIdentifier">group</span>=root <span class="synIdentifier">mode</span>=<span class="synConstant">0644</span>
</pre>


<p>サーバーにcopyした後にnginxの再起動を行うというのであれば、以下のようにしてもいいかもしれません。</p>

<p><br/>
<b>copy後にnginxを再起動する</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>- name: copy nginx.conf
  copy: <span class="synIdentifier">src</span>=<span class="synSpecial">{{</span> env <span class="synSpecial">}}</span>/nginx.conf.<span class="synSpecial">{{</span> group <span class="synSpecial">}}</span> <span class="synIdentifier">dest</span>=/etc/nginx/nginx.conf <span class="synIdentifier">owner</span>=root <span class="synIdentifier">group</span>=root <span class="synIdentifier">mode</span>=<span class="synConstant">0644</span>

<span class="synComment">#nginxの再起動</span>
- service: <span class="synIdentifier">name</span>=nginx <span class="synIdentifier">state</span>=restarted
</pre>


<p><br/></p>

<h4 id="webserversyml">webservers.yml</h4>

<p>最後に、先ほどつくったroleを束ねるメインとなるファイルを作成します。<br/>
以下のようにansible直下に<code>webservers.yml</code>を追加します。</p>

<p><b>webservers.ymlを追加する</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>├── inventories
└── webservers.yml
</pre>


<p><b>webservers.yml</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>- hosts: webservers
  become: yes
  roles:
    - role-nginx
</pre>


<p>ここでは、<code>targes</code>に冒頭で定義したグループ<code>webservers</code>を指定してあげます。<br/>
また、roleに書いたコマンドをsudo権限で実行するように<code>become:yes</code>としてあげます。<br/>
最後に実行するroleとしてさきほど書いたroleを定義させてあげれば完了です。</p>

<p><br/></p>

<h3 id="いざ実行する">いざ実行する</h3>

<p>ここまできたら後は実行するだけです。</p>

<p><b>ステージング環境用</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ ansible-playbook <span class="synSpecial">-i</span> inventories/staging/hosts webservers.yml
</pre>


<p>と思ったら、ansibleをインストールしたVagrant上の環境から各サーバーにSSHで接続できるようにしておく必要があります。
今回は、既存の接続の公開鍵が用意されているため、そちらを指定してあげることにします。</p>

<p>用意されている鍵は、cms用とweb用とでわかれているため、グループ用の変数を定義していた<code>cms.yml</code>と<code>web.yml</code>に用意した鍵の場所とログインユーザーを記載しておきます。</p>

<p><b>web.yml</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>group: web
ansible_ssh_private_key_file: /home/vagrant/.ssh/web.ppk
ansible_user: tohu
</pre>


<p><b>cms.yml</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>group: cms
ansible_ssh_private_key_file: /home/vagrant/.ssh/cms.ppk
ansible_user: tohu
</pre>


<p>また、各サーバーはsudo権限実行時にはパスワードをが要求される設定になっていたので<code>--ask-become-pass</code>オプションをつけてあげることにしました。</p>

<p><b>ステージング環境用</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ ansible-playbook <span class="synSpecial">-i</span> inventories/staging/hosts webservers.yml <span class="synSpecial">--ask-become-pass</span>
</pre>


<p>これで無事、一括で作成したnginxの設定ファイルを配布することができるようになりました。</p>

-----
--------
AUTHOR: konoemario
TITLE: プロセスをforkしてみる
BASENAME: 2018/06/14/204835
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 06/14/2018 20:48:35
CATEGORY: C
CATEGORY: Linux
IMAGE: https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20180614/20180614152143.png
-----
BODY:
<p>php-fpmをチューニングする機会があって、いろいろと試していたんだけれども、根本的な部分がいまいちいちわからないことに気づかされる。</p>

<p>プロセスという言葉だったり、スレッドという意味だったり、c10k問題だったり、NginxだったりApacheだったり。</p>

<p>c10k問題という言葉が気になって調べたときに、ハード的には問題ないんだけれども、プロセスやらスレッドがたくさんありすぎるとやばいんだよ！という情報をみて、なんでプロセスを増やすんだろうとか、当たり前であろうことがわからなかったり。</p>

<p>今回でいえば、php-fpmは、こんなイメージで親プロセスが子プロセスを生成してリクエストをさばいているんだと思う。</p>

<p><figure class="figure-image figure-image-fotolife" title="php-fpmの挙動"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20180614/20180614152143.png" alt="f:id:konoemario:20180614152143p:plain" title="f:id:konoemario:20180614152143p:plain" class="hatena-fotolife" itemprop="image"></span><figcaption>php-f</figcaption></figure></p>

<p>これらの仕組みはphp-fpmのソースコードを読めばわかるんだろうけれども、ちらっと見た感じ、自分のスキルではお手上げ感が半端なかったので、基本的なところから試してみることにする。</p>

<p>ちょうど前回さわったGoではforkとかしないんだよみたいなことが書いてあったりして、その理解にもなりそう。</p>

<p><br/></p>

<h2>プロセスをforkしてみる</h2>

<p>ということでforkというものを試してみる。<br/>
どいうときに使うかは一旦おいておくよ！</p>

<p>今回はこちらの教科書に従って試してた。</p>

<p><div class="hatena-asin-detail"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797386479/hatena-blog-22/"><img src="https://images-fe.ssl-images-amazon.com/images/I/51P7Lxl0cKL._SL160_.jpg" class="hatena-asin-detail-image" alt="ふつうのLinuxプログラミング 第2版 Linuxの仕組みから学べるgccプログラミングの王道" title="ふつうのLinuxプログラミング 第2版 Linuxの仕組みから学べるgccプログラミングの王道"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797386479/hatena-blog-22/">ふつうのLinuxプログラミング 第2版 Linuxの仕組みから学べるgccプログラミングの王道</a></p><ul><li><span class="hatena-asin-detail-label">作者:</span> 青木峰郎</li><li><span class="hatena-asin-detail-label">出版社/メーカー:</span> SBクリエイティブ</li><li><span class="hatena-asin-detail-label">発売日:</span> 2017/09/22</li><li><span class="hatena-asin-detail-label">メディア:</span> 単行本</li><li><a href="http://d.hatena.ne.jp/asin/4797386479/hatena-blog-22" target="_blank">この商品を含むブログを見る</a></li></ul></div><div class="hatena-asin-detail-foot"></div></div></p>

<p><br/></p>

<p>教科書通りが一番いいんだけれども、まずはシンプルに最低限写経することにした。</p>

<p><b>プロセスをforkするサンプル</b></p>

<pre class="code lang-c" data-lang="c" data-unlink><span class="synPreProc">#include </span><span class="synConstant">&lt;stdio.h&gt;</span>
<span class="synPreProc">#include </span><span class="synConstant">&lt;stdlib.h&gt;</span>
<span class="synPreProc">#include </span><span class="synConstant">&lt;unistd.h&gt;</span>
<span class="synPreProc">#include </span><span class="synConstant">&lt;sys/types.h&gt;</span>
<span class="synPreProc">#include </span><span class="synConstant">&lt;sys/wait.h&gt;</span>

<span class="synType">int</span> main(<span class="synType">int</span> argc, <span class="synType">char</span> *argv[]){

    pid_t pid;

    <span class="synComment">//fork()でプロセスを生成することができる！</span>
    pid = fork();

    <span class="synStatement">if</span>(pid &lt; <span class="synConstant">0</span>) {
      fprintf(<span class="synConstant">stderr</span>, <span class="synConstant">&quot;fork(2) failed</span><span class="synSpecial">\n</span><span class="synConstant">&quot;</span>);
      exit(<span class="synConstant">1</span>);
    }

    <span class="synComment">//子プロセス</span>
    <span class="synStatement">if</span>(pid == <span class="synConstant">0</span>) {
       printf(<span class="synConstant">&quot;im child, my-pid=</span><span class="synSpecial">%d</span><span class="synConstant">, child-pid=</span><span class="synSpecial">%d\n</span><span class="synConstant">&quot;</span>, getpid(), pid);
    }<span class="synStatement">else</span>{
    <span class="synComment">//親プロセス</span>
      printf(<span class="synConstant">&quot;im parent, my-pid=</span><span class="synSpecial">%d</span><span class="synConstant">, child-pid=</span><span class="synSpecial">%d\n</span><span class="synConstant">&quot;</span>, getpid(), pid);
    }
    
}
</pre>


<p><br/></p>

<p><code>fork</code>すると、自身のプロセスをコピーするとのこと。</p>

<p><b>fork命令</b></p>

<pre class="code lang-c" data-lang="c" data-unlink>    pid = fork();
</pre>


<p><br/></p>

<p>おもしろいのが、<code>fork</code>してできた子プロセスは、<code>fork</code>の命令以降から実行されるところ。<br/>
以下の図のように、親プロセスから生成された子プロセスは、親プロセスの頭から実行されるわけではなく、fork以降の<code>printf("hello")</code>のみが実行されることになる。</p>

<p><figure class="figure-image figure-image-fotolife" title="forkのうごき"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20180614/20180614192732.png" alt="f:id:konoemario:20180614192732p:plain" title="f:id:konoemario:20180614192732p:plain" class="hatena-fotolife" itemprop="image"></span><figcaption>forkのうごき</figcaption></figure></p>

<p>興味深い、とおもっていたんだけれども、forkしてできたプロセスが親プロセスを頭から実行してたら、forkが無限に続いちゃうことに気づいた。<br/>
なので、forkした以降の命令を実行するのはもっともなことだと思った。</p>

<p><br/></p>

<h3>プロセスが親プロセスなのか、forkされた子プロセスなのか</h3>

<p>`fork'で親プロセスをコピーして、子プロセスを生成することがわかった。<br/>
そもそもなんでプロセスをコピーして生成する必要があるんだろうという最もな疑問はさておき、子プロセスだからやる処理みたいなことを実現する。<br/>
冒頭のphp-fpmの親プロセスと子プロセスがまさにそんな感じでしたね。</p>

<p>これもおもしろいのが、二回目の登場の以下の部分。<br/>
<code>pid</code>にはforkして生成された子プロセスの場合、0が返却され、親プロセスの場合は子のプロセスIDが設定されるとのこと。<br/>
※forkに失敗すると、親プロセスの方で-1が返ってくるとのこと。</p>

<p><b>fork命令</b></p>

<pre class="code lang-c" data-lang="c" data-unlink>    pid = fork();
</pre>


<p><br/></p>

<p>なので、以下のようにpidの値をもとに処理を制御することができる。</p>

<p><b>親プロセスと子プロセスで処理を切り替える</b></p>

<pre class="code lang-c" data-lang="c" data-unlink>    <span class="synComment">//子プロセス</span>
    <span class="synStatement">if</span>(pid == <span class="synConstant">0</span>) {
       printf(<span class="synConstant">&quot;im child, my-pid=</span><span class="synSpecial">%d</span><span class="synConstant">, child-pid=</span><span class="synSpecial">%d\n</span><span class="synConstant">&quot;</span>, getpid(), pid);
    }<span class="synStatement">else</span>{
    <span class="synComment">//親プロセス</span>
      printf(<span class="synConstant">&quot;im parent, my-pid=</span><span class="synSpecial">%d</span><span class="synConstant">, child-pid=</span><span class="synSpecial">%d\n</span><span class="synConstant">&quot;</span>, getpid(), pid);
    }
    
</pre>


<p><br/></p>

<p><code>getpid()</code>は自身のプロセスIDを取得する関数。<br/>
これを実行すると、こんな感じになる。</p>

<p><b>実行結果</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ ./bin/spawn
im parent, my-<span class="synIdentifier">pid</span>=<span class="synConstant">16166</span>, child-<span class="synIdentifier">pid</span>=<span class="synConstant">16167</span>
im child, my-<span class="synIdentifier">pid</span>=<span class="synConstant">16167</span>, child-<span class="synIdentifier">pid</span>=<span class="synConstant">0</span>
</pre>


<p><br/></p>

<p>親のプロセスIDは16166で、forkされた子プロセスのIDは16167になってる。<br/>
親プロセスではforkした返り値のpidは子のプロセスIDだけれども、子のプロセスIDでは0が設定されていることが確認できた。</p>

<p><br/></p>

<h3>子プロセスのプログラムの内容を新しいプログラムで上書きする</h3>

<p>なにいってんだこいつと思うタイトルです。そんなことできるんだと思いました。<br/>
<code>exec</code>族と呼ばれる命令達を使うとできるみたいです。</p>

<p>教科書にしたがって、<code>execl()</code>関数を使います。</p>

<p><b>execlを使ってみる</b></p>

<pre class="code lang-c" data-lang="c" data-unlink>    <span class="synComment">//子プロセス</span>
    <span class="synStatement">if</span>(pid == <span class="synConstant">0</span>) {
        execl(<span class="synConstant">&quot;/home/vagrant/linux/src/linuxprogram/bin/loop&quot;</span>, <span class="synConstant">&quot;/home/vagrant/linux/src/linuxprogram/bin/loop&quot;</span>, <span class="synConstant">NULL</span>);
        perror(<span class="synConstant">&quot;error&quot;</span>);
    }<span class="synStatement">else</span>{
    <span class="synComment">//親プロセス</span>
      printf(<span class="synConstant">&quot;im parent, my-pid=</span><span class="synSpecial">%d</span><span class="synConstant">, child-pid=</span><span class="synSpecial">%d\n</span><span class="synConstant">&quot;</span>, getpid(), pid);
    }
</pre>


<p><br/></p>

<p><code>execl()</code>関数の第一引数には実行するプロセスのパスを渡して、第2引数がargv[0]に相当するとのこと。
argv[0]には、実行されたプロセス名が設定されるので、パスを同じものを渡しておく必要があるみたい。<br/>
argv[1]以降がなければ、NULLを渡しておく。</p>

<p>ここでは、あらかじめコンパイルしておいた<code>loop</code>プログラムを実行してみることにする。<br/>
<code>loop</code>プログラムは、1秒ごとに標準出力に数字を出すだけの簡単なもの。</p>

<p><b>loop</b></p>

<pre class="code lang-c" data-lang="c" data-unlink><span class="synPreProc">#include </span><span class="synConstant">&lt;stdio.h&gt;</span>
<span class="synPreProc">#include </span><span class="synConstant">&lt;stdlib.h&gt;</span>

<span class="synType">int</span> main(<span class="synType">int</span> argc, <span class="synType">char</span> *argv[]){

    <span class="synType">int</span> i;

    <span class="synStatement">for</span>(i = <span class="synConstant">0</span>; i &lt; <span class="synConstant">10</span>; i++){
        sleep(<span class="synConstant">1</span>);
        printf(<span class="synConstant">&quot;count:</span><span class="synSpecial">%d\n</span><span class="synConstant">&quot;</span>, i);
        fflush(<span class="synConstant">stdout</span>);
    }

    exit(<span class="synConstant">0</span>);
}
</pre>


<p><br/></p>

<p>これを実行してみると、こんな感じになった。</p>

<p><b>実行結果</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ ./bin/spawn
im parent, my-<span class="synIdentifier">pid</span>=<span class="synConstant">19425</span>, child-<span class="synIdentifier">pid</span>=<span class="synConstant">19426</span>
<span class="synStatement">[</span>vagrant@localhost linuxprogram<span class="synStatement">]</span>$ count:<span class="synConstant">0</span>
count:<span class="synConstant">1</span>
count:<span class="synConstant">2</span>
count:<span class="synConstant">3</span>
count:<span class="synConstant">4</span>
count:<span class="synConstant">5</span>
count:<span class="synConstant">6</span>
count:<span class="synConstant">7</span>
count:<span class="synConstant">8</span>
count:<span class="synConstant">9</span>
</pre>


<p><br/></p>

<p>親プロセスはforkして、printfの結果を出力して終わってるんだけれども、子プロセスは親プロセスに関係なく処理を実行していることが確認できた。</p>

<p>イメージとしてはこんな感じ。</p>

<p><figure class="figure-image figure-image-fotolife" title="execlのイメージ"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20180614/20180614203051.png" alt="f:id:konoemario:20180614203051p:plain" title="f:id:konoemario:20180614203051p:plain" class="hatena-fotolife" itemprop="image"></span><figcaption>execlのイメージ</figcaption></figure></p>

<p>子プロセスは親プロセスのfork以降をコピーして実行するので、本来であれば<code>ohanky</code>が出力されるところを、<code>hoge</code>プログラムをexeclすることで、<code>buhii</code>が出力されることになる。<br/>
あなおそろしや。</p>

<p>何に使うんだろうとか、いろいろな疑問はさておき次は、親プロセスで子プロセスの実行結果を待ってみたり、プロセスがゾンビになってしまう等を試したい。</p>

-----
--------
AUTHOR: konoemario
TITLE: Goに入門してみる
BASENAME: 2018/06/12/184341
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 06/12/2018 18:43:41
CATEGORY: プログラム
CATEGORY: Go
-----
BODY:
<h1 id="日記">日記</h1>

<p>さいきんちょっとさぼりぎみ。  忙しくなると駄目ですね。<br/>
習慣がなくなることが怖いので、書くことを目的として書きました。<br/>
中身はからっぽだけど気にしない。</p>

<ul class="table-of-contents">
    <li><a href="#日記">日記</a><ul>
            <li><a href="#本題">本題</a></li>
            <li><a href="#ということではじめてみる">ということではじめてみる</a></li>
            <li><a href="#Hello-World">Hello World</a></li>
            <li><a href="#IDEをつかってみる">IDEをつかってみる</a></li>
        </ul>
    </li>
</ul>

<p><br/></p>

<h2 id="本題">本題</h2>

<p>ぼけーっと電車の中で以下の記事を見て、関数型言語(Go)というところに目がいきました。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fqiita.com%2Frana_kualu%2Fitems%2F19ab559dddbca6674417" title="2018年の最先端バックエンドエンジニアになろう - Qiita" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://qiita.com/rana_kualu/items/19ab559dddbca6674417">qiita.com</a></cite></p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fqiita.com%2Fpoly_soft%2Fitems%2Ffb649573c19b7a5c0227" title="2018年の最先端バックエンドエンジニアに必要なスキルについて考えてみました。 - Qiita" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://qiita.com/poly_soft/items/fb649573c19b7a5c0227">qiita.com</a></cite></p>

<p>他の記事でも、関数型言語をやったことがないのであれば、ぜひやりましょうみたいなことをよく見るので
やってみることにした。</p>

<p><br/></p>

<h2 id="ということではじめてみる">ということではじめてみる</h2>

<p>まずは、必要なリソースをダウンロードすることにします。
ちょっとだけ慣れてきたパッケージ管理ツール(yumとか)を使うかと思いきや、そうでもないみたい。</p>

<p>公式ページよりアーキテクチャにあったものをインストールしろとのこと。</p>

<p><a href="https://golang.org/dl/">https://golang.org/dl/</a></p>

<p>おお、OSがLinuxという欄に3つほど選択肢があるぞ、、、ということで調べます。</p>

<p>以下のコマンドを叩くことで、「64bit」環境であることが確認できました。</p>

<p><b>アーキテクチャの確認</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ arch
x86_64
</pre>


<p>なので「go1.10.3.linux-amd64.tar.gz」をダウンロードすることにします。<br/>
作業ディレクトリに移動して、wgetコマンドですね。</p>

<p><b>リソースをダウンロードする</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ <span class="synStatement">cd</span> /tmp
$ wget https://dl.google.com/go/go1.10.3.linux-amd64.tar.gz
</pre>


<p><br/></p>

<p>ダウンロードできたら、解凍します。<br/>
解凍したファイルは、`/usr/local'に置くことにします。</p>

<p><b>解凍する</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink><span class="synPreProc">$sudo</span> tar <span class="synSpecial">-C</span> /usr/<span class="synStatement">local</span> <span class="synSpecial">-xzf</span> go1.10.3.linux-amd64.tar.gz
$ <span class="synStatement">ls</span> <span class="synSpecial">-ltr</span> /usr/<span class="synStatement">local</span>
total <span class="synConstant">44</span>
drwxr-xr-x  <span class="synConstant">2</span> root root <span class="synConstant">4096</span> Jan  <span class="synConstant">6</span>  <span class="synConstant">2012</span> src
drwxr-xr-x  <span class="synConstant">2</span> root root <span class="synConstant">4096</span> Jan  <span class="synConstant">6</span>  <span class="synConstant">2012</span> sbin
drwxr-xr-x  <span class="synConstant">2</span> root root <span class="synConstant">4096</span> Jan  <span class="synConstant">6</span>  <span class="synConstant">2012</span> libexec
drwxr-xr-x  <span class="synConstant">2</span> root root <span class="synConstant">4096</span> Jan  <span class="synConstant">6</span>  <span class="synConstant">2012</span> include
drwxr-xr-x  <span class="synConstant">2</span> root root <span class="synConstant">4096</span> Jan  <span class="synConstant">6</span>  <span class="synConstant">2012</span> games
drwxr-xr-x  <span class="synConstant">2</span> root root <span class="synConstant">4096</span> Jan  <span class="synConstant">6</span>  <span class="synConstant">2012</span> etc
drwxr-xr-x  <span class="synConstant">3</span> root root <span class="synConstant">4096</span> Mar  <span class="synConstant">7</span> <span class="synConstant">06</span>:<span class="synConstant">46</span> lib
drwxr-xr-x  <span class="synConstant">6</span> root root <span class="synConstant">4096</span> Mar  <span class="synConstant">7</span> <span class="synConstant">06</span>:<span class="synConstant">46</span> share
drwxr-xr-x  <span class="synConstant">4</span> root root <span class="synConstant">4096</span> Mar  <span class="synConstant">7</span> <span class="synConstant">06</span>:<span class="synConstant">46</span> lib64
drwxr-xr-x  <span class="synConstant">2</span> root root <span class="synConstant">4096</span> Apr  <span class="synConstant">5</span> <span class="synConstant">08</span>:<span class="synConstant">12</span> bin
drwxr-xr-x <span class="synConstant">11</span> root root <span class="synConstant">4096</span> Jun  <span class="synConstant">7</span> <span class="synConstant">00</span>:<span class="synConstant">12</span> go
</pre>


<p><br/></p>

<p>解凍できたら早速動作確認をしてみます。<br/>
インストールしたディレクトリの'bin'配下に'go'ファイルがあるので、こちらを実行してみます。</p>

<p><b>動作確認</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ <span class="synStatement">cd</span> /usr/<span class="synStatement">local</span>/go/bin
$ ./go version
go version go1.10.3 linux/amd64
</pre>


<p><br/></p>

<p>ちゃんとバージョンが表示されました。
問題なさそうです。</p>

<p><br/></p>

<h2 id="Hello-World">Hello World</h2>

<p>ということで、さっそく初めてのGoを書いてみることにします。<br/>
何事も初めてってドキドキしますね。</p>

<p>進めていくにあたっては、こちらの記事を教科書にさせていただきました。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=http%3A%2F%2Fgihyo.jp%2Fdev%2Ffeature%2F01%2Fgo_4beginners" title="はじめてのGo―シンプルな言語仕様，型システム，並行処理" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://gihyo.jp/dev/feature/01/go_4beginners">gihyo.jp</a></cite></p>

<p>何はともあれ、作業用のディレクトリとファイルを作成します。</p>

<p><b>初めてのgoファイルを作成する</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ <span class="synStatement">mkdir</span> ~/go
$ <span class="synStatement">cd</span> ~/go
$ vim hello.go
</pre>


<p><br/></p>

<p>教科書の内容を写経し、</p>

<p><b>なにも考えずに写経</b></p>

<pre class="code lang-go" data-lang="go" data-unlink><span class="synStatement">package</span> main

<span class="synStatement">import</span> (
        <span class="synConstant">&quot;fmt&quot;</span>
)

<span class="synStatement">func</span> main(){
        fmt.Println(<span class="synConstant">&quot;hello world&quot;</span>)
}
</pre>


<p>よっしゃいくぞ！というところで、そんなコマンドねえよっていわれちゃいました。</p>

<p><b>よっしゃいけないぞ</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ go run hello.go
-bash: go: <span class="synStatement">command</span> not found
</pre>


<p>なのでパスを通してあげます。</p>

<p><b>パスを通す</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ vim ~/.bash_profile
</pre>


<p><b>.bash_profileに以下を追記</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink><span class="synStatement">export</span><span class="synIdentifier"> PATH=</span><span class="synPreProc">$PATH</span>:/usr/<span class="synStatement">local</span>/go/bin
</pre>


<p><b>環境変数反映</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink> $ <span class="synStatement">source</span> ~/.bash_profile
</pre>


<p><b>よっしゃいくぞ</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ go run hello.go
hello world
</pre>


<p>というところで無事実行ができました。</p>

<p><br/></p>

<h2 id="IDEをつかってみる">IDEをつかってみる</h2>

<p>さきほどの教科書を第3章ほど進めていくにつれ、IDEで作業がしたくなってきます。
最近はVsCodeを使っているのですが、探してみるとJetBrains社のIDEがあるとのことなので、そちらを使ってみることにします。</p>

<p>最初、「IntelliJ IDEA」のプラグインとしてあるという記事をみて、「IntelliJ IDEA」をダウンロードしていたりして、あれプラグインないぞ、なんてやってたのですが、どうも新しくGo言語用のIDEができていたみたいです。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fwww.jetbrains.com%2Fgo%2F" title="GoLand: Capable and Ergonomic Go IDE by JetBrains" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://www.jetbrains.com/go/">www.jetbrains.com</a></cite></p>

<p>無料期間は30日っぽく、集中してGoをやる感じでもなさそもないので、とりあえずはアーリーアクセス版を落とすことにしました。</p>

<p>アーリーアクセス版なのでバグやらなんやらがある可能性もあるのですが、趣味でやる程度なので特に問題はないと判断しました。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fwww.jetbrains.com%2Fgo%2Fnextversion%2F" title="Download GoLand: Capable and Ergonomic Go IDE by JetBrains" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://www.jetbrains.com/go/nextversion/">www.jetbrains.com</a></cite></p>

<p>そもそもGoのWindows版をインストールしてなかったりして、あれ実行できないぞとかもあったのですが、問題なく使えています。</p>

<p>いまのところ、パラダイムシフトみたいなものは特に感じることができてないです。<br/>
C言語っぽいけど、Cより書きやすいのなぐらいの理解。</p>

<p>さて何をつくろうか。　　</p>

-----
--------
AUTHOR: konoemario
TITLE: いろんな作業めも
BASENAME: 2018/09/07/151612
STATUS: Draft
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 05/21/2018 19:40:24
-----
BODY:
<p>作業メモ</p>

<p><b>dentrycache</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink><span class="synPreProc">$slabtob</span> <span class="synSpecial">-d</span> <span class="synConstant">1</span>
</pre>


<p>※-d オプションは反映する間隔。つけないとリアルタイムかな。</p>

<p><b>問題のcurl</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ strace <span class="synSpecial">-e</span> <span class="synIdentifier">trace</span>=access curl <span class="synStatement">'</span><span class="synConstant">https://www.google.com</span><span class="synStatement">'</span> <span class="synStatement">&gt;</span> /dev/null
</pre>


<p>⇒めっちゃ、denty_cacheが増えていくことが確認できる。</p>

<p>キャッシュクリア</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ <span class="synStatement">echo</span><span class="synConstant"> 2 </span><span class="synStatement">&gt;</span> /proc/sys/vm/drop_caches
</pre>


<p>今回の原因</p>

<p><a href="https://qiita.com/tfunato/items/e5619f8ad0060606e98c">https://qiita.com/tfunato/items/e5619f8ad0060606e98c</a></p>

<p>とてもわかりやすい。<br/>
<iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fsisidovski.hatenablog.com%2Fentry%2F2015%2F07%2F07%2F072150" title="linuxにおけるメモリと関連コマンド（free, vmstat, top, sar） - 銀色うつ時間" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://sisidovski.hatenablog.com/entry/2015/07/07/072150">sisidovski.hatenablog.com</a></cite></p>

<h2>Jmeter</h2>

<p>~/home/apache-jmeter-4.0/bin</p>

<p>GitBashで実行</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ ./jmeter <span class="synSpecial">-n</span> <span class="synSpecial">-t</span> ./templates/re.jmx  <span class="synSpecial">-l</span> log.jtl
</pre>


<p><a href="https://qiita.com/tatesuke/items/827e6190753964e46814">&#x3010;JMeter&#x3011;&#x8CA0;&#x8377;&#x30C6;&#x30B9;&#x30C8;&#x5B9F;&#x884C;&#x306F;GUI&#x304B;&#x3089;&#x884C;&#x3063;&#x3066;&#x306F;&#x306A;&#x3089;&#x306A;&#x3044;</a></p>

<p><a href="https://qiita.com/tatesuke/items/827e6190753964e46814">&#x3010;JMeter&#x3011;&#x8CA0;&#x8377;&#x30C6;&#x30B9;&#x30C8;&#x5B9F;&#x884C;&#x306F;GUI&#x304B;&#x3089;&#x884C;&#x3063;&#x3066;&#x306F;&#x306A;&#x3089;&#x306A;&#x3044;</a></p>

<h2>diffのオプション</h2>

<p>-yがいい</p>

<p><a href="https://qiita.com/bitnz/items/725350b614bafedc581a">&#x308F;&#x304B;&#x308A;&#x3084;&#x3059;&#x3044;&#x5DEE;&#x5206;(diff)&#x306E;&#x53D6;&#x308A;&#x65B9;&#x3044;&#x308D;&#x3044;&#x308D;&#x30E1;&#x30E2;</a></p>

<h2>mysqlの縦持ちのデータを横持にしたい話</h2>

<p>縦持ちカラム数が固定ならcase分でいけそだが、可変となるとたいへんかも？</p>

<p>これがやりたかった。ただ、mysqlのはrow_number関数がない。
<a href="https://dev.classmethod.jp/etc/sql-data-horizontal-vertical/">[SQL]&#x30C7;&#x30FC;&#x30BF;&#x306E;&#x7E26;&#x6301;&#x3061;&#x3001;&#x6A2A;&#x6301;&#x3061;&#x3092;&#x5165;&#x308C;&#x66FF;&#x3048;&#x308B; &#xFF5C; Developers.IO</a></p>

<p>mysqlにはrow_numberがないので、サブクエリで代替する方法
ためしたらめっちゃおそいので断念。
<a href="http://gihyo.jp/dev/serial/01/sql_academy2/000102">&#x7B2C;1&#x56DE; &#x9023;&#x756A;&#x306E;&#x7279;&#x6027;&#x3092;&#x5229;&#x7528;&#x3057;&#x3066;&#x30C7;&#x30FC;&#x30BF;&#x64CD;&#x4F5C;&#x3092;&#x3082;&#x3063;&#x3068;&#x81EA;&#x7531;&#x306B; SQL&#x3067;&#x9023;&#x756A;&#x3092;&#x6271;&#x3046; &#xFF08;2&#xFF09;&#x884C;&#x96C6;&#x5408;&#x306B;&#x9023;&#x756A;&#x3092;&#x5272;&#x308A;&#x5F53;&#x3066;&#x308B;&#xFF1A;SQL&#x30A2;&#x30BF;&#x30DE;&#x30A2;&#x30AB;&#x30C7;&#x30DF;&#x30FC;&#xFF5C;gihyo.jp &hellip; &#x6280;&#x8853;&#x8A55;&#x8AD6;&#x793E;</a></p>

<p>読んでないけどなにかあるかも。
<a href="http://crmprogrammer38.hatenablog.com/entry/2017/08/01/154831">SQL: &#x7E26;&#x6A2A;&#x5909;&#x63DB;&#x3067;&#x6C17;&#x3092;&#x3064;&#x3051;&#x3066;&#x3044;&#x308B;&#x3053;&#x3068; - &#x30D7;&#x30ED;&#x30B0;&#x30E9;&#x30DE;&#xFF13;&#xFF18;&#x306E;&#x65E5;&#x8A18;</a></p>

<h2>sed</h2>

<p>文字"を空白に置き換えたかった。</p>

<pre class="code lang-sh" data-lang="sh" data-unlink><span class="synStatement">sed</span> <span class="synSpecial">-e</span> <span class="synStatement">'</span><span class="synConstant">s/&quot;/ /g</span><span class="synStatement">'</span> sed.tsv  <span class="synStatement">&gt;</span> alter.tsv
</pre>


<p>sudo tail -f /var/log/nginx/pbt.di-pink.com/access.log | grep  --line-buffered -v "1.1\"\s200|302\s"
sudo tail -f var/log/nginx/pbt.di-pink.com/access.log | grep --line-buffered 504
sudo tail -f /var/log/nginx/pbt.di-pink.com/access.log | grep  --line-buffered  "1.1\"\s502\s"</p>

<p>特定の時刻で行数カウント
grep -c -E "2018:19:18" access.log-20180523</p>

<p>gzip -d gz解凍</p>

<p>df -h</p>

<h2>dstat</h2>

<p><a href="https://qiita.com/harukasan/items/b18e484662943d834901">dstat&#x306E;&#x4FBF;&#x5229;&#x306A;&#x30AA;&#x30D7;&#x30B7;&#x30E7;&#x30F3;&#x307E;&#x3068;&#x3081;</a></p>

<h2>キャッシュ　メモリ</h2>

<p>でかいログファイルがページキャッシュを圧迫する</p>

<p><a href="http://tech.mercari.com/entry/2015/07/16/170310">cachectld&#x301C;&#x7121;&#x99C4;&#x306A;&#x30DA;&#x30FC;&#x30B8;&#x30AD;&#x30E3;&#x30C3;&#x30B7;&#x30E5;&#x306E;&#x524A;&#x9664;&#x3092;&#x81EA;&#x52D5;&#x5316;&#x301C; - Mercari Engineering Blog</a></p>

<p>ページキャッシュ・バッファキャッシュ</p>

<p>ページキャッシュはファイルの情報。↑のでかいログを見るに、ファイルの内容とかも含んでるのかな。←HDDにアクセスすることなく参照できるとのことなので、そういうことなんだと思う。
dentry_cacheはディレクトリの構造なのかな。
バッファキャッシュはブロックデバイス。ストレージとかに直接アクセスするときのキャッシュとのこと。謎。</p>

<p><a href="https://qiita.com/kunihirotanaka/items/70d43d48757aea79de2d">&#x3044;&#x307E;&#x3055;&#x3089;&#x805E;&#x3051;&#x306A;&#x3044;Linux&#x3068;&#x30E1;&#x30E2;&#x30EA;&#x306E;&#x57FA;&#x790E;&#xFF06;vmstat&#x306E;&#x8A73;&#x3057;&#x3044;&#x4F7F;&#x3044;&#x65B9;</a></p>

<p>メモリの内訳を表示</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ cat /proc/meminfo
</pre>


<p><a href="http://sharply.hatenablog.com/entry/2016/07/18/233546">&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x3042;&#x305F;&#x308A;&#x306E;&#x30E1;&#x30E2;&#x30EA;&#x4F7F;&#x7528;&#x91CF;&#x3092;&#x77E5;&#x308A;&#x305F;&#x3044; - &#x5099;&#x5FD8;&#x9332; blog</a></p>

<p><a href="http://enakai00.hatenablog.com/entry/20110906/1315315488">/proc/meminfo&#x3092;&#x8003;&#x3048;&#x308B; - &#x3081;&#x3082;&#x3081;&#x3082;</a></p>

<p>中身はあんまわからないけれども記事がある。</p>

<h2>ロードアベレージ</h2>

<p><a href="https://qiita.com/kunihirotanaka/items/21194f77713aa0663e3b">Linux&#x306E;I/O&#x3084;CPU&#x306E;&#x8CA0;&#x8377;&#x3068;&#x30ED;&#x30FC;&#x30C9;&#x30A2;&#x30D9;&#x30EC;&#x30FC;&#x30B8;&#x306E;&#x95A2;&#x4FC2;&#x3092;&#x8A73;&#x3057;&#x304F;&#x898B;&#x3066;&#x307F;&#x308B;</a></p>

<p><a href="https://qiita.com/k0kubun/items/8065f5cf2da7605c8043">load average&#x3092;&#x898B;&#x3066;&#x30B7;&#x30B9;&#x30C6;&#x30E0;&#x306E;&#x8CA0;&#x8377;&#x3092;&#x78BA;&#x8A8D;&#x3059;&#x308B;</a></p>

<p><a href="https://qiita.com/yuku_t/items/2f5341e4aa635800a0a1">&#x30A2;&#x30D7;&#x30EA;&#x30A8;&#x30F3;&#x30B8;&#x30CB;&#x30A2;&#x5411;&#x3051;&#xFF1A;&#x300C;&#x30B5;&#x30FC;&#x30D0;&#x304C;&#x306A;&#x3093;&#x304B;&#x91CD;&#x3044;&#x300D;&#x6642;&#x306B;&#x3059;&#x308B;&#x3053;&#x3068;</a></p>

<h2>外部API</h2>

<p><a href="https://qiita.com/kinpira/items/ebf0d0c8427d33ed1ba7">&#x5916;&#x90E8;&#x30B5;&#x30FC;&#x30D3;&#x30B9;API&#x3092;&#x4F7F;&#x7528;&#x3057;&#x3066;&#x3044;&#x308B;&#x5834;&#x5408;&#x306E;&#x8CA0;&#x8377;&#x8A66;&#x9A13;&#x65B9;&#x6CD5;</a></p>

<h2>php-fpm</h2>

<p><iframe src="https://hatenablog-parts.com/embed?url=http%3A%2F%2Feno0514.hatenadiary.jp%2Fentry%2F20150614%2F1434228237" title="php-fpm＋nginxで「504 Gateway Time-out」が出た時の対処法 - oneのはてなダイアリー" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://eno0514.hatenadiary.jp/entry/20150614/1434228237">eno0514.hatenadiary.jp</a></cite></p>

<h2>環境変数を追加</h2>

<p>全ユーザーに追加する場合は</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ vim /etc/profile
<span class="synStatement">export</span><span class="synIdentifier"> HOGE=</span>HOGEHOGE
$ <span class="synStatement">source</span> /etc/profile
</pre>


<h2>とあるディレクトリにあるファイルを再帰的に検索して、権限を表示</h2>

<pre class="code lang-sh" data-lang="sh" data-unlink><span class="synComment"># ls -lR /var/www/html |grep -E &quot;\-.......-.&quot; &gt; temp.txt</span>
</pre>


<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fpiro791.blog.so-net.ne.jp%2F2010-07-21-1" title="特定のディレクトリから再帰的に特定のオーナーのファイルやディレクトリだけchownしたい: ぴろにっき" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://piro791.blog.so-net.ne.jp/2010-07-21-1">piro791.blog.so-net.ne.jp</a></cite></p>

<h2>権限変更系</h2>

<pre class="code lang-sh" data-lang="sh" data-unlink><span class="synComment">#グループ追加</span>
$ sudo groupadd developer
$ cat /etc/group
<span class="synComment">#hogeユーザーのプライマリーグループをdeveloperに変更する</span>
$ sudo  usermod <span class="synSpecial">-g</span> developer hoge
<span class="synComment">#セカンダリーに追加していきたい場合は、こっち</span>
$ sudo  usermod <span class="synSpecial">-aG</span> developer hoge
<span class="synComment">#groupがdeveloperのファイルを検索</span>
$ sudo <span class="synStatement">find</span> /var/www/html <span class="synSpecial">-group</span> developer <span class="synSpecial">-print</span> <span class="synStatement">&gt;</span> /tmp/temp.txt
<span class="synComment">#findした結果のグループを変更 -print0　とxagrs 0 はファイルにスペースがある場合の考慮</span>
$ sudo <span class="synStatement">find . </span>-group imj <span class="synSpecial">-print0</span> |xargs <span class="synConstant">-0</span> sudo chgrp developer
<span class="synComment">#findの権限に!で否定表現も使える -permは権限で検索 。-g+wはグループに書き込み権限があるもの</span>
$ <span class="synStatement">find . </span>! <span class="synSpecial">-user</span> root <span class="synSpecial">-group</span> developer ! <span class="synSpecial">-perm</span> <span class="synSpecial">-g</span>+w <span class="synSpecial">-print0</span> <span class="synStatement">&gt;</span>/tmp/perm.txt
</pre>


-----
--------
AUTHOR: konoemario
TITLE: メモリ調査メモ
BASENAME: 2018/05/16/122003
STATUS: Draft
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 05/16/2018 12:20:03
-----
BODY:
<p>とてもわかりやすい。<br/>
<iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fsisidovski.hatenablog.com%2Fentry%2F2015%2F07%2F07%2F072150" title="linuxにおけるメモリと関連コマンド（free, vmstat, top, sar） - 銀色うつ時間" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://sisidovski.hatenablog.com/entry/2015/07/07/072150">sisidovski.hatenablog.com</a></cite></p>

-----
--------
AUTHOR: konoemario
TITLE: 今日から君が開発環境を作ってねと言われたのでAnsbileでつくろう 
BASENAME: 2018/05/08/223808
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 05/08/2018 22:38:08
CATEGORY: Ansible
CATEGORY: プログラム
IMAGE: https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20180505/20180505195204.png
-----
BODY:
<h1>日記</h1>

<p>Ansibleをつかって便利だなぁっと思って、備忘録がてらまとめたいとおもったんだけれども、こんな記事や、Quitaのわかりやすい記事がいっぱいあって、書く労力のわりに、得るものがあんまないなと思った今日このごろ。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=http%3A%2F%2Fyteraoka.github.io%2Fansible-tutorial%2F" title="Ansible チュートリアル | Ansible Tutorial in Japanese" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://yteraoka.github.io/ansible-tutorial/">yteraoka.github.io</a></cite></p>

<p><br/></p>

<h1>本題</h1>

<p>とあるプロジェクトが始まったときに開発環境をつくる必要がでてきた。<br/>
なんとなく環境は用意できるけれども開発人数分ちゃんと用意したい！ということでAnsibleと呼ばれる構成管理ツールを使ってみました。</p>

<p>作成した環境は、Vagrantで作成した仮想マシン上に、Apache + PHP7 + Laravel + Mysql + memcached + Node.jsだったのですが、思いの外さくさくと書くことができたので、Ansibleおすすめです！</p>

<p>なので今回は、Ansibleを導入した際の手順等をまとめておこうと思います。</p>

<p><br/></p>

<h2>Ansibleの仕組み</h2>

<p>まずは、Ansibleのイメージです。</p>

<p>ものすごく適当な図ですが、下記の図をもとに紹介していきます。</p>

<p><figure class="figure-image figure-image-fotolife" title="Ansibleのいめーじ"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20180505/20180505195204.png" alt="f:id:konoemario:20180505195204p:plain" title="f:id:konoemario:20180505195204p:plain" class="hatena-fotolife" itemprop="image"></span><figcaption>Ansibleのいめーじ</figcaption></figure></p>

<p>大枠に「コントローラー」1台と「ターゲット」が2台存在しています。<br/>
これらは、それぞれが独立したマシンです。</p>

<p>コントローラーはAnsibleを実行するマシンになります。
なのでAnsibleをさわってみる際には、コントローラー側にAnsibleをインストールしておきます。</p>

<p>また、Ansibleに実行させる命令はPlaybookと呼ばれファイルにいろいろと記載します。<br/>
記載の内容はここでは割愛するのですが、yml形式とよばれるフォーマットで書きます。</p>

<p>コントローラーでAnsibleを実行すると、SSHでターゲットに接続し、playbookに書かれたコマンドを順次実行していきます。</p>

<p>図ではターゲットが2台存在していますが、環境をつくるターゲットにIPをAnsibleに教えてあげることで何台でも作成することができるみたいです。</p>

<p><br/></p>

<h2>Ansibleをつかってみる</h2>

<p>無駄な前置きが長くなりましたが、実際にさわってみることにします。</p>

<h3>Vagrantで仮想マシン「コントローラー」と「ターゲット」を作成する</h3>

<p> Ansibleを動かすコントローラーと実際に使用するターゲットをそれぞれVagrantで立ち上げることにします。</p>

<p>当初、コントローラーもVagrantで立ち上げるの？という疑問もありましたが、ホストマシンがWindowsだとAnsibleを実行できないみたいな問題があるとのことで素直にコントローラーも仮想マシンとして用意してあげます。</p>

<p>※よくよく調べると、Ansibleをローカルマシンを対象として実行するみたいな記事もあるので、コントローラーを用意しなくても、ターゲットにAnsibleをインストールして、自身に対して実行する、ということもできそうです。</p>

<p>まずは、作業ディレクトリを用意してあげます。
今回ホストマシンはWindowsなのでPowerShellで作業することをイメージしてます。</p>

<p><b>作業ディレクトリを作成</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink><span class="synStatement">mkdir</span> <span class="synStatement">test</span>
<span class="synStatement">cd</span> <span class="synStatement">test</span>
<span class="synStatement">mkdir</span> vagrant
</pre>


<p>作成したディレクトリ<code>test/vagrant</code>配下に以下のようなVagrantfileをおきます。</p>

<p>こんな感じのVagrantfileを用意することで、ひとつのVagrantfileで複数台のマシンを作成することができるみたいです。</p>

<p><br/>
<b>Vagrantfile</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>Vagrant.configure<span class="synPreProc">(</span><span class="synConstant">2</span><span class="synPreProc">)</span> <span class="synStatement">do</span> |config|
  config.vm.define <span class="synStatement">&quot;</span><span class="synConstant">controller</span><span class="synStatement">&quot;</span> <span class="synStatement">do</span> |node|
        node.vm.box <span class="synStatement">=</span> <span class="synConstant">&quot;mvbcoding/awslinux&quot;</span>
        node.vm.hostname <span class="synStatement">=</span> <span class="synConstant">&quot;controller&quot;</span>
        node.vm.network :private_network, ip: <span class="synStatement">&quot;</span><span class="synConstant">192.168.100.10</span><span class="synStatement">&quot;</span>
  end
  config.vm.define <span class="synStatement">&quot;</span><span class="synConstant">target</span><span class="synStatement">&quot;</span> <span class="synStatement">do</span> |node|
        node.vm.box <span class="synStatement">=</span> <span class="synConstant">&quot;mvbcoding/awslinux&quot;</span>
        node.vm.hostname <span class="synStatement">=</span> <span class="synConstant">&quot;target&quot;</span>
        node.vm.network :private_network, ip: <span class="synStatement">&quot;</span><span class="synConstant">192.168.100.20</span><span class="synStatement">&quot;</span>
        node.vm.network <span class="synStatement">&quot;</span><span class="synConstant">forwarded_port</span><span class="synStatement">&quot;</span>, guest: <span class="synConstant">80</span>, host: <span class="synConstant">8080</span>
  end
end
</pre>


<p><br/></p>

<p>書いている人は、Vagrantもなんとなく使える程度なので、しっかりとした解説はできないのですが大事な点だけをここに記載します。</p>

<ul>
<li><p>node.vm.box
Vagrantが立ち上げる仮想マシンの大元イメージです。<br/>
今回のプロジェクトではAWSLinuxを使うので、開発環境もAWSLinuxのイメージを使うことにします。</p></li>
<li><p>node.vm.hostname
Vagrantが立ち上げる仮想マシンの名前になります。
後ほど仮想マシンにsshでログインする際などに使います。</p></li>
<li><p>node.vm.network :private_network, ip
Vagrantが立ち上げる仮想マシンのIPになります。<br/>
Ansibleを実行する際にターゲットに接続する際に使用します。</p></li>
</ul>


<p>準備ができたら、実際に仮想マシンを立ち上げてみましょう。<br/>
Vagrantfileが置かれているディレクトリで以下のコマンドを実行します。</p>

<p><b>仮想マシンを起動する</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>vagrant up
</pre>


<p>これで仮想マシンが起動したはずです。</p>

<p>念のため仮想マシンに接続できるか確認してみましょう。</p>

<p>仮想マシンにログインする際には<code>vagrant ssh</code>とするのですがWindowsなので<code>Teraterm</code>をインストールの上、Vagrantのプラグインをインストールしましょう。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fblog.pg1x.com%2F2015%2F10%2F31%2F20151031233246%2F" title="vagrant teraterm が便利すぎてしょうがない件" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://blog.pg1x.com/2015/10/31/20151031233246/">blog.pg1x.com</a></cite></p>

<p>インストールが完了したら、以下のコマンドでそれぞれの仮想マシンにログインできるか確認します。</p>

<p><br/>
<b>仮想マシン「controller」に接続する</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>vagrant teraterm controller
</pre>


<p><b>仮想マシン「target」に接続する</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>vagrant teraterm target
</pre>


<p><br/></p>

<p>無事、接続できたら早速Ansibleをインストールしていきます。</p>

<p><br/></p>

<h3>Ansibleをインストールする</h3>

<p>それでは、早速Ansibleをインストールしていきます。<br/>
インストール対象は、controllerの方になるので、あらかじめcontrollerに接続の上インストールします。</p>

<p><b>仮想マシン「controller」に接続する</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>vagrant teraterm controller
</pre>


<p>ログインしたらyumコマンドでansibileをインストールします。</p>

<p><b>ログイン後インストール</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$  sudo yum <span class="synSpecial">-y</span> <span class="synSpecial">--enablerepo=epel</span> install ansible
</pre>


<p>AWS Linuxのデフォルトのパッケージリストには入ってないみたいなので、epelリポジトリから落としてきます。</p>

<p>無事、インストールできたら念のためバージョン等をみれるか確認しておきます。</p>

<p><b>ansibleの確認</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ ansible <span class="synSpecial">--version</span>
ansible 2.5.0
  config file <span class="synStatement">=</span> /etc/ansible/ansible.cfg
  configured module search path <span class="synStatement">=</span> <span class="synStatement">[</span>u<span class="synStatement">'</span><span class="synConstant">/home/vagrant/.ansible/plugins/modules</span><span class="synStatement">'</span>, u<span class="synStatement">'</span><span class="synConstant">/usr/share/ansible/plugins/modules</span><span class="synStatement">']</span>
  ansible python module location <span class="synStatement">=</span> /usr/lib/python2.6/site-packages/ansible
  executable location <span class="synStatement">=</span> /usr/bin/ansible
  python version <span class="synStatement">=</span> 2.6.9 <span class="synPreProc">(</span><span class="synSpecial">unknown, Sep  </span><span class="synConstant">1</span><span class="synSpecial"> </span><span class="synConstant">2016</span><span class="synSpecial">, </span><span class="synConstant">23</span><span class="synSpecial">:</span><span class="synConstant">34</span><span class="synSpecial">:</span><span class="synConstant">36</span><span class="synPreProc">)</span> <span class="synStatement">[</span>GCC 4.8.3 <span class="synConstant">20140911</span> (Red Hat 4.8.3<span class="synConstant">-9</span>)<span class="synStatement">]</span>
</pre>


<p>問題なさそうですね。</p>

<p><br/></p>

<h4>Ansibleをインストールしておきたい場合</h4>

<p>他の人が環境をつくる際に、Ansibleもインストールしておいてほしい、ということであれば、Vagrantのプロジョニングをつかって用意しとくといいかもです。</p>

<p>以下のように、Vagrantfileのprovisionに実行するシェルスクリプトを追記します。</p>

<p><b>Vagrantfile</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>Vagrant.configure<span class="synPreProc">(</span><span class="synConstant">2</span><span class="synPreProc">)</span> <span class="synStatement">do</span> |config|
  config.vm.define <span class="synStatement">&quot;</span><span class="synConstant">controller</span><span class="synStatement">&quot;</span> <span class="synStatement">do</span> |node|
        node.vm.box <span class="synStatement">=</span> <span class="synConstant">&quot;mvbcoding/awslinux&quot;</span>
        node.vm.hostname <span class="synStatement">=</span> <span class="synConstant">&quot;controller&quot;</span>
        node.vm.network :private_network, ip: <span class="synStatement">&quot;</span><span class="synConstant">192.168.100.10</span><span class="synStatement">&quot;</span>
        <span class="synComment">#初回のvagrant up のときに ansibleのインストールを行う</span>
        node.vm.provision :shell, path: <span class="synStatement">&quot;</span><span class="synConstant">install.sh</span><span class="synStatement">&quot;</span>
  end
  config.vm.define <span class="synStatement">&quot;</span><span class="synConstant">target</span><span class="synStatement">&quot;</span> <span class="synStatement">do</span> |node|
        node.vm.box <span class="synStatement">=</span> <span class="synConstant">&quot;mvbcoding/awslinux&quot;</span>
        node.vm.hostname <span class="synStatement">=</span> <span class="synConstant">&quot;target&quot;</span>
        node.vm.network :private_network, ip: <span class="synStatement">&quot;</span><span class="synConstant">192.168.100.20</span><span class="synStatement">&quot;</span>
        node.vm.network <span class="synStatement">&quot;</span><span class="synConstant">forwarded_port</span><span class="synStatement">&quot;</span>, guest: <span class="synConstant">80</span>, host: <span class="synConstant">8080</span>
  end
end
</pre>


<p>シェルスクリプトの中身は単純にyumを実行します。</p>

<p><b>install.sh</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink><span class="synComment">#!/usr/bin/env bash</span>
sudo yum <span class="synSpecial">-y</span> <span class="synSpecial">--enablerepo=epel</span> install ansible
</pre>


<p><br/></p>

<h3>Playbookを用意する</h3>

<p>Ansibleが用意できたら、今度は実行する命令を記載するPlaybookを記載します。</p>

<p>PlayBookの構成内容にはいろいろなパターンがあるみたいなのですが、以下のサイトを参考にさせていただき、一番簡単そうなベージックパターンを選ぶことにしました。</p>

<p><a href="https://dev.classmethod.jp/server-side/ansible/ansible-inventory-pattern/">Ansible inventory&#x30D1;&#x30BF;&#x30FC;&#x30F3; &#xFF5C; Developers.IO</a></p>

<p>まずはホストマシン上でplaybookを置く場所を作っていきます。<br/>
Vagrantfileが置いてあるディレトリに移動して、以下の作業を行います。</p>

<p><b>ansible用のディレクトリを作成</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink><span class="synStatement">mkdir</span> ansible
<span class="synStatement">cd</span> ansible
<span class="synStatement">mkdir</span> group_vars inventory roles
</pre>


<p>また、空っぽのファイル`master.yml'を同じディレクトリに置いておきます。</p>

<p>結果、こんな感じのディレクトリ構成になりました。</p>

<p><b>ディレクトリ構成</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>.
├── Vagrantfile
└── ansible
    ├── group_vars
    ├── inventory
    ├── master.yml
    └── roles
</pre>


<p>まずは、<code>inventory</code>配下に<code>hosts</code>ファイルを以下のように作成します。</p>

<p><b>hostsファイル</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink><span class="synStatement">[</span>targets<span class="synStatement">]</span>
192.168.100.20
</pre>


<p><br/>
なんぞ、これという感じなんですが、環境を作成するターゲットのマシンのIPを記載するみたいです。<br/>
上記に書かれているIPはVagrantfileで定義したIPなので、変更している場合は定義読み替えてください。</p>

<p>次に、実際に命令を書く<code>master.yml</code>を書いてみましょう。</p>

<p><b>master.yml</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>- hosts: targets
  user: vagrant
  tasks:
    - name: シンプルなこまんど<span class="synConstant">1</span>
      <span class="synStatement">command</span>: <span class="synStatement">touch</span> hoge1.txt <span class="synStatement">chdir=</span>/home/vagrant
    - name: シンプルなこまんど<span class="synConstant">2</span>
      <span class="synStatement">command</span>: <span class="synStatement">touch</span> hoge2.txt <span class="synStatement">chdir=</span>/home/vagrant
</pre>


<p>yamlの記法についてはここでは触れない(自分もあいまいです)として、上記の内容を見ますと</p>

<p>targetsを対象にvagrantユーザーでtasks配下の命令を実行する</p>

<p>ということがなんとなくわかるでしょうか。</p>

<p>命令は、モジュールと呼ばれるものをつかって書いていきます。</p>

<p>ここでは、<code>command</code>モジュールを使っているのですが、これは<code>command</code>に与えられた値をシェルで実行してくれるモジュールになります。</p>

<p>なので上記<code>master.yml</code>の例では<code>touch hoge1.txt</code>というコマンドを実行するということになります。</p>

<p><code>chdir</code>等は指定されたディレクトリでコマンドを実行するというオプションで、オプションの情報は公式ドキュメントにのってました。</p>

<p>※モジュールの一覧は以下に記載されています。</p>

<p><a href="http://docs.ansible.com/ansible/latest/modules/modules_by_category.html">Module Index &mdash; Ansible Documentation</a></p>

<p><br/></p>

<h3>PlayBookを実行する</h3>

<p>PlayBookの準備ができたので試しに実行してみます。</p>

<p><figure class="figure-image figure-image-fotolife" title="Ansibleのいめーじ"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20180505/20180505195204.png" alt="f:id:konoemario:20180505195204p:plain" title="f:id:konoemario:20180505195204p:plain" class="hatena-fotolife" itemprop="image"></span><figcaption>Ansibleのいめーじ</figcaption></figure></p>

<p>再掲になりますが、ansibleを実行は<code>controller</code>で行います。</p>

<p>ですので、まずは<code>controller</code>に接続します。</p>

<p><b>仮想マシン「controller」に接続する</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>vagrant teraterm controller
</pre>


<p>接続したら、ホストマシンと同期しているディレクトリに移動して、実行してみます。</p>

<p><b>Ansibleを実行する！</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ <span class="synStatement">cd</span> /vagrant/ansible
$ ansible-playbook <span class="synSpecial">-i</span> inventory/hosts master.yml 
</pre>


<p>おっしゃいくぜ！というところで残念なのですが、今のままだと<code>Permission denied</code>で怒られてしまいます。</p>

<p>というのも、Ansibleを実行する際に<code>controller</code>は<code>target</code>にsshで接続を行うのですが、<code>controller</code>から`target'に接続する際の鍵の情報がありません。</p>

<p>なので、まず鍵を作成しておきます。</p>

<p><code>controller</code>で鍵を生成するコマンドを叩きます。</p>

<p><b>controllerの鍵を作成する</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$  ssh-keygen
</pre>


<p>いろいろでてきますが、Enter連打しちゃってます。</p>

<p><b>公開鍵を表示する</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink><span class="synPreProc">$cat</span> ~/.ssh/id_rsa.pub 
</pre>


<p>鍵を作成すると、上記のファイルに公開鍵が生成されます。
上記で表示された公開鍵を、<code>target</code>に接続して<code>authorized_keys</code>に追記します。</p>

<p><b>公開鍵を追記する</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ vim ~/.ssh/authorized_keys 
</pre>


<p>これでようやく、Ansibleを実行する準備ができました。</p>

<p>再度、実行してみましょう。</p>

<p><b>Ansibleを実行する</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ <span class="synStatement">cd</span> /vagrant/ansible
$ ansible-playbook <span class="synSpecial">-i</span> inventory/hosts master.yml

PLAY <span class="synStatement">[</span>targets<span class="synStatement">]</span> ***************************************************************************************************************************************

TASK <span class="synStatement">[</span>Gathering Facts<span class="synStatement">]</span> *******************************************************************************************************************************
ok: <span class="synStatement">[</span>192.168.100.20<span class="synStatement">]</span>

TASK <span class="synStatement">[</span>シンプルなこまんど<span class="synStatement">]</span> *************************************************************************************************************************************
 <span class="synStatement">[</span>WARNING<span class="synStatement">]</span>: Consider using the file module with <span class="synIdentifier">state</span>=<span class="synStatement">touch</span> rather than running touch.  If you need to use <span class="synStatement">command</span> because file is insufficient you
can add <span class="synIdentifier">warn</span>=False to this <span class="synStatement">command</span> task or <span class="synStatement">set</span><span class="synIdentifier"> command_warnings=False in ansible.cfg to get rid of this message.</span>

changed: <span class="synStatement">[</span>192.168.100.20<span class="synStatement">]</span>

TASK <span class="synStatement">[</span>シンプルなこまんど<span class="synStatement">]</span> *************************************************************************************************************************************
changed: <span class="synStatement">[</span>192.168.100.20<span class="synStatement">]</span>

PLAY RECAP *******************************************************************************************************************************************
192.168.100.20             : <span class="synIdentifier">ok</span>=<span class="synConstant">3</span>    <span class="synIdentifier">changed</span>=<span class="synConstant">2</span>    <span class="synIdentifier">unreachable</span>=<span class="synConstant">0</span>    <span class="synIdentifier">failed</span>=<span class="synConstant">0</span>   

<span class="synStatement">[</span>vagrant@controller ansible<span class="synStatement">]</span>$ ansible-playbook <span class="synSpecial">-i</span> inventory/hosts master.yml 

PLAY <span class="synStatement">[</span>targets<span class="synStatement">]</span> ***************************************************************************************************************************************

TASK <span class="synStatement">[</span>Gathering Facts<span class="synStatement">]</span> *******************************************************************************************************************************
ok: <span class="synStatement">[</span>192.168.100.20<span class="synStatement">]</span>

TASK <span class="synStatement">[</span>シンプルなこまんど<span class="synStatement">]</span> *************************************************************************************************************************************
 <span class="synStatement">[</span>WARNING<span class="synStatement">]</span>: Consider using the file module with <span class="synIdentifier">state</span>=<span class="synStatement">touch</span> rather than running touch.  If you need to use <span class="synStatement">command</span> because file is insufficient you
can add <span class="synIdentifier">warn</span>=False to this <span class="synStatement">command</span> task or <span class="synStatement">set</span><span class="synIdentifier"> command_warnings=False in ansible.cfg to get rid of this message.</span>

changed: <span class="synStatement">[</span>192.168.100.20<span class="synStatement">]</span>

TASK <span class="synStatement">[</span>シンプルなこまんど<span class="synStatement">]</span> *************************************************************************************************************************************
changed: <span class="synStatement">[</span>192.168.100.20<span class="synStatement">]</span>

PLAY RECAP *******************************************************************************************************************************************
192.168.100.20             : <span class="synIdentifier">ok</span>=<span class="synConstant">3</span>    <span class="synIdentifier">changed</span>=<span class="synConstant">2</span>    <span class="synIdentifier">unreachable</span>=<span class="synConstant">0</span>    <span class="synIdentifier">failed</span>=<span class="synConstant">0</span>   
</pre>


<p>つらつらとログがでてくることが確認できるかと思います。</p>

<p>この状態で<code>target</code>に接続して、<code>/home/vagrant</code>配下を確認してみると、無事ファイルが作成されていることが確認できると思います！</p>

<p>これだけだと、シェルスクリプトを実行してるだけなんじゃないの？という気もするが、Ansibleには<code>command</code>以外にもいろいろなモジュールがあってものすごく便利です。</p>

<p>長くなったので、次回に続きます。  <br/>
次回は、roleをつかって具体的に環境を構築したいと思います。</p>

-----
--------
AUTHOR: konoemario
TITLE: ansibleメモ
BASENAME: 2018/05/08/221502
STATUS: Draft
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 05/08/2018 22:15:02
-----
BODY:
<p>なにはともあれ、今回のgitリポジトリを任意のディレクトリに置きます。</p>

<p><br/>
<b>リポジトリをとってくる</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>git  clone <span class="synSpecial">-b</span> develop https://repos.m-field.mobi/pokemon/pokemon.git
</pre>


<p><br/>
<b>Vagrantを起動する</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink><span class="synStatement">cd</span> pokemon\vagrant
vagrant up
</pre>


<p><br/></p>

<p>Vagrantを起動すると、仮想マシン<code>controller</code>と<code>target'の2台が立ち上がります。  
実際に開発でがりがりつかっていくのは</code>target`の方になります。</p>

<p><code>controller</code>の方は、<code>target</code>の環境を整えるだけの仮想マシンになります。</p>

<p><br/>
今回、仮想マシンを作成するにあたっては、Ansibleというものを使っています。</p>

<p>Ansibleは、指示を出すマシンが一台いて、そいつが何台ものマシンに対してこういうコマンドを実行してねと命令をするような感じで動くみたいです。  <br/>
ホストマシンが<code>controller</code>の役割を担うことができれば、Vagrantで<code>controller</code>を立ち上げる必要もないのですが、ホストマシンがWindowsだと動かないみたいなので、こういったことをしています。</p>

<p>一度、環境構築が完了したら、<code>controller</code>は不要になるので、以下のコマンドで停止させちゃいましょう。</p>

<p><b>指定した仮想OSを停止させる</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ vagrant halt controller
</pre>


<p>また、Windowsをシャットダウン等して、再度仮想OSを立ち上げる時は、<br/>
<b>指定した仮想OSを停止させる</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ vagrant up target
</pre>


<p>とすると、<code>target</code>のみ起動します。</p>

<h2>ansibleを実行する</h2>

<p>早速、ansibleを実行します。</p>

<p>あれ、<code>vagant up</code>したら全部やってくれるんじゃないの？と思った方、すみません、私のスキル不足で対応できていません。</p>

<p>とりあえず、<code>controller</code>にsshで接続しましょう。</p>

<p><b>コントローラーに接続する</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ vagrant teraterm controller
$ vagrant ssh controller

       __|  __|_  <span class="synError">)</span>
       _|  <span class="synPreProc">(</span><span class="synSpecial">     /   Amazon Linux AMI</span>
<span class="synSpecial">      ___</span><span class="synStatement">|</span><span class="synSpecial">\___</span><span class="synStatement">|</span><span class="synSpecial">___</span><span class="synStatement">|</span>

<span class="synSpecial">https://aws.amazon.com/amazon-linux-ami/2017.03-release-notes/</span>
<span class="synConstant">30</span><span class="synSpecial"> package</span><span class="synPreProc">(</span><span class="synSpecial">s</span><span class="synPreProc">)</span><span class="synSpecial"> needed for security, out of </span><span class="synConstant">39</span><span class="synSpecial"> available</span>
<span class="synSpecial">Run </span><span class="synStatement">&quot;</span><span class="synConstant">sudo yum update</span><span class="synStatement">&quot;</span><span class="synSpecial"> to apply all updates.</span>
<span class="synSpecial">Amazon Linux version 2017.09 is available.</span>
<span class="synSpecial">[vagrant@controller ~]$ </span>
</pre>


<p>無事、接続できましたかね。</p>

<p>参考記事</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fqiita.com%2Ft_nakayama0714%2Fitems%2Ffe55ee56d6446f67113c" title="Ansibleをはじめる人に。 - Qiita" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://qiita.com/t_nakayama0714/items/fe55ee56d6446f67113c">qiita.com</a></cite></p>

<h1></h1>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ python <span class="synSpecial">-V</span>
Python 2.7.12
</pre>




<pre class="code lang-sh" data-lang="sh" data-unlink>$ sudo yum install ansible
Loaded plugins: priorities, update-motd, upgrade-helper
No package ansible available.
</pre>


<p><a href="https://qiita.com/hitomatagi/items/9c21d53066c9c6e5357f">Ansible &#x6700;&#x521D;&#x306E;&#x4E00;&#x6B69; @ AWS EC2 - Qiita</a></p>

<p><b>パッケージリポジトリを追加</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ yum <span class="synSpecial">--enablerepo=epel</span> install ansible
</pre>


<p><b>確認</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ ansible <span class="synSpecial">--version</span>
ansible 2.4.2.0
</pre>


<p><b>ディレクトリ構成</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>.
|-- ansible
|   |-- group_vars
|   |   <span class="synSpecial">`-- targets.yml</span>
<span class="synSpecial">|   |-- inventory</span>
<span class="synSpecial">|   |   `</span>-- hosts
|   <span class="synSpecial">`-- test.yml</span>
<span class="synSpecial">|-- ssh_config</span>
<span class="synSpecial">`</span>-- Vagrantfile
</pre>


<p><b>gitをインストールしてみる</b></p>

<pre class="code" data-lang="" data-unlink>- hosts: targets
  user: vagrant
  tasks:
    - name: output message.
      debug: msg=&#34;{{ message }}&#34;

    - name: output fruits
      debug: msg=&#34;We want {{ item.value.amount }} {{ item.key }} !&#34; 
      with_dict: &#34;{{ fruits }}&#34;

    - name: install  packages from yum
      debug: msg=&#34;We want {{ item.value.amount }} {{ item.key }} !&#34; 
      with_dict: &#34;{{ fruits }}&#34;

    - name: install packages from yum
      become: yes
      yum: name={{ item }} state=latest
      with_items:
        - git</pre>


<p>sudoで実行する場合、'become: yes`を設定</p>

<p><b>playbookを実行</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ ansible-playbook <span class="synSpecial">-i</span> inventory/hosts test.yml
</pre>


<p><b>checkモードで!</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>ansible-playbook <span class="synSpecial">--check</span> <span class="synSpecial">-i</span> inventory/hosts main.yml
</pre>


<p><b>checkモードで!詳細！</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>ansible-playbook <span class="synSpecial">--check</span>  <span class="synSpecial">-v</span> <span class="synSpecial">-i</span> inventory/hosts main.yml
</pre>


<p><code>-vvv</code>まであるとのこと。</p>

<h2>ApacheとPHP</h2>

<p><a href="https://www.fumi.org/neta/201205sv.html">PHP&#x306E;CGI&#x65B9;&#x5F0F;/Module&#x65B9;&#x5F0F;&#x306E;&#x9055;&#x3044;</a></p>

<h2>php7.1系の最新版</h2>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ sudo yum install http://rpms.famillecollet.com/enterprise/remi-release-6.rpm
$ sudo yum install <span class="synSpecial">--enablerepo=remi-php71</span> <span class="synSpecial">--disablerepo=amzn-main</span> php
</pre>


<h2>php-fpmのインストール</h2>

<pre class="code lang-sh" data-lang="sh" data-unlink>sudo yum install <span class="synSpecial">--enablerepo=remi-php71</span> <span class="synSpecial">--disablerepo=amzn-main</span> php
</pre>


<h3>memo</h3>

<p><a href="https://www.softel.co.jp/blogs/tech/archives/4991">php-fpm + apache2.4.10(mod_proxy_fcgi) at softel&#x30E1;&#x30E2;</a></p>

<p><a href="https://www.softel.co.jp/blogs/tech/archives/4991">php-fpm + apache2.4.10(mod_proxy_fcgi) at softel&#x30E1;&#x30E2;</a></p>

<h2>#</h2>

<p><b>apr-util</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink><span class="synStatement">cd</span> apr-util-1.6.1
sudo ./configure <span class="synSpecial">--prefix=/opt/apr-util-1.6.3</span> <span class="synSpecial">--with-apr=/opt/apr-1.6.3</span>
make
make install
</pre>


<p><b>apache</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>sudo wget https://ftp.pcre.org/pub/pcre/pcre-8.42.tar.gz   
sudo tar xvzf pcre-8.42.tar.gz
<span class="synStatement">cd</span> pcre-8.42
</pre>


<p>とりあえずうまくいった。
<a href="https://blog.apar.jp/linux/9730/">Apache httpd 2.4.33 + HTTP/2 + Brotli &#x30A4;&#x30F3;&#x30B9;&#x30C8;&#x30FC;&#x30EB;&#x30E1;&#x30E2; | &#x3042;&#x3071;&#x30FC;&#x30D6;&#x30ED;&#x30B0;</a></p>

<p>ansible ver
<a href="https://qiita.com/myaaaaa_chan/items/a9740ba66f9a5c50594b">ansible&#x3067;Apache httpd&#x3092;&#x30BD;&#x30FC;&#x30B9;&#x304B;&#x3089;&#x30B3;&#x30F3;&#x30D1;&#x30A4;&#x30EB;&#x3057;&#x3066;&#x30A4;&#x30F3;&#x30B9;&#x30C8;&#x30FC;&#x30EB;&#x3059;&#x308B;Playbook&#x30E1;&#x30E2; - Qiita</a></p>

-----
--------
AUTHOR: konoemario
TITLE: Vagrant up でエラーが出た時のメモ
BASENAME: 2018/05/01/212134
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 05/01/2018 21:21:34
CATEGORY: Vagrant
CATEGORY: プログラム
-----
BODY:
<ul class="table-of-contents">
    <li><a href="#事象">事象</a></li>
    <li><a href="#解決策">解決策</a></li>
</ul>

<h1 id="事象">事象</h1>

<ul>
<li>ホストマシンのOS
Windows10</li>
</ul>


<p><b>Vagrantのバージョン</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>vagrant <span class="synSpecial">-v</span>
Vagrant 1.9.8
</pre>


<p><b>VirtualBoxのバージョン</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>5.1.26
</pre>


<p>上記の環境で、Vagrantを起動したとき以下のエラーが表示された。<br/>
（エラーメッセージを全文とっとけばよかった。。）</p>

<p>前日まで問題なく動いていた。</p>

<p><b>エラーメッセージ(抜粋)</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink><span class="synStatement">&gt;</span> vagrant up
The guest machine entered an invalid state <span class="synStatement">while waiting for</span> it to boot.
</pre>


<h1 id="解決策">解決策</h1>

<p>ほんとぉ？というぐらい自信がないのだけれども、いつもと違うプロセスが動いていないかなというところで、見てみたところGoogleドライブの同期が走っていた。</p>

<p>こちらを中止したところ、問題なく起動した。</p>

-----
--------
AUTHOR: konoemario
TITLE: Apache2.4 + php-fpm + php7.1 でLaravel環境を作成する
BASENAME: 2018/04/18/200112
STATUS: Draft
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 04/18/2018 14:14:01
-----
BODY:
<p>Apache.2.4系の最新、php7.1系の最新版でLaravelを動かせるようにする必要があったので作業記録をメモ。
開発環境なのでVagant上で設定しました。</p>

<p>最終的にはAnsibleを使って開発環境を自動でつくることを目標にするのですが、まずは手作業で必要なことを確認することにします。</p>

<p><br/></p>

<h2>事前準備</h2>

<p>Amazon Linux用のBoxを用意します。</p>

<p>といってもBoxに<code>mvbcoding/awslinux</code>を指定しただけ。</p>

<p><code>vagrant up</code>後に、バージョンを確認したところ、こんな感じでした。</p>

<p><b>Amazon Linuxのバージョン確認</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ cat /etc/system-release
Amazon Linux AMI release 2017.03
</pre>


<p><br/></p>

<h2>Apache</h2>

<p>何はともあれ、Apacheを用意することにします。
なんでnginxじゃないんだろうっていう疑問もありますが、nginxの方がいいよ！っていう明確な理由を答えることができないので、そのへんは置いておきます。</p>

<p>「Apache2.4系 インストール」で調べた結果、`yum install httpd24'を叩けば簡単にインストールできることがわかりました。</p>

<p>が、パッケージ情報を見るとバージョンが、<code>2.4.27</code>でした。</p>

<p><b>パッケージの確認</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ yum info httpd24
Loaded plugins: priorities, update-motd, upgrade-helper
Available Packages
Name        : httpd24
Arch        : x86_64
Version     : 2.4.27
Release     : 3.73.amzn1
Size        : 1.4 M
Repo        : amzn-updates/2017.03
Summary     : Apache HTTP Server
URL         : http://httpd.apache.org/
License     : ASL 2.0
Description : The Apache HTTP Server is a powerful, efficient, and extensible
            <span class="synComment">:</span> web server.
</pre>


<p>この記事を書いた(2018/4/18)時点の最新は、<code>2.4.33</code>が最新みたいです。</p>

<p>あれ、こういう場合ってどうしたらいいんだろう、とここで詰んでしまった感があります。</p>

<p>あきらめる、という選択肢もあったのですがもう少しがんばってみることにします。</p>

<p><br/></p>

<h3>リポジトリの追加</h3>

<p>Amazon Linuxにはamazon-mainなるパッケージを管理するリポジトリが存在するとのこと。</p>

<p><a href="https://docs.aws.amazon.com/ja_jp/AWSEC2/latest/UserGuide/add-repositories.html">&#x30EA;&#x30DD;&#x30B8;&#x30C8;&#x30EA;&#x306E;&#x8FFD;&#x52A0; - Amazon Elastic Compute Cloud</a></p>

<p><b>リポジトリの確認</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink><span class="synStatement">ls</span> /etc/yum.repos.d
</pre>


<p>このリポジトリに最新のApacheがないのであれば、他のリポジトリを追加すればいいじゃないの！ということで調べてみます。</p>

<p>すると、こんな素敵な記事がまとまっております。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fqiita.com%2Fbezeklik%2Fitems%2F9766003c19f9664602fe" title="yumリポジトリ追加リスト 完全版 - Qiita" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://qiita.com/bezeklik/items/9766003c19f9664602fe">qiita.com</a></cite></p>

<p>いろいろと勘違いしている可能性はあるのですが、どうもApacheの最新版を落とすんであれば、iusというリポジトリがよさそうです。</p>

<p>どれどれと<a href="https://ius.io/Packages/">パッケージ一覧</a>を見てたのですが、RedHat、CentOSとリストがあるなかで、そもそもAmazon Linuxはどれなんだろう、ということで絶望してしまいました。</p>

<p><a href="https://qiita.com/ksugawara61/items/70f5d1faf192c4ba6ca0">Apache2.4&#x7CFB;&#x3092;&#x30BD;&#x30FC;&#x30B9;&#x304B;&#x3089;&#x30A4;&#x30F3;&#x30B9;&#x30C8;&#x30FC;&#x30EB; - Qiita</a></p>

<p><b>Apacheビルドに必要なパッケージ</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ sudo yum <span class="synSpecial">-y</span> install pcre-devel expat-devel
</pre>


<p><b>Apacheビルドに必要なパッケージ</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink><span class="synStatement">cd</span> /usr/<span class="synStatement">local</span>/src/
sudo wget http://ftp.jaist.ac.jp/pub/apache//apr/apr-1.6.3.tar.gz
sudo tar xvzf apr-1.6.3.tar.gz
<span class="synStatement">cd</span> apr-1.6.3/
sudo ./configure
sudo make
sudo make install
</pre>




<pre class="code lang-sh" data-lang="sh" data-unlink><span class="synStatement">cd</span> /usr/<span class="synStatement">local</span>/src/
sudo wget http://ftp.jaist.ac.jp/pub/apache//apr/apr-util-1.6.1.tar.gz
sudo tar xvzf apr-util-1.6.1.tar.gz
<span class="synStatement">cd</span> apr-util-1.6.1/
sudo ./configure <span class="synSpecial">--with-apr=/usr/local/apr</span>
sudo make
sudo make install
</pre>




<pre class="code lang-sh" data-lang="sh" data-unlink><span class="synStatement">cd</span> /usr/<span class="synStatement">local</span>/src/
sudo wget http://ftp.jaist.ac.jp/pub/apache//httpd/httpd-2.4.33.tar.gz
sudo tar xvzf httpd-2.4.33.tar.gz
</pre>




<pre class="code lang-sh" data-lang="sh" data-unlink>sudo yum install mod_ssl openssl openssl-devel
</pre>




<pre class="code lang-sh" data-lang="sh" data-unlink>$ sudo ./configure <span class="synSpecial">--enable-rewrite</span> <span class="synSpecial">--enable-shared=yes</span> <span class="synSpecial">--enable-ssl</span>
$ sudo make
$ sudo make install
</pre>


<p><b>/usr/local/apache2/conf/httpd.conf</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ vim /usr/<span class="synStatement">local</span>/apache2/conf/httpd.conf 

//コメントアウトを解除
ServerName www.example.com:<span class="synConstant">80</span>
</pre>


<p><b>Apache起動<b/></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ sudo /usr/<span class="synStatement">local</span>/apache2/bin/apachectl  <span class="synStatement">start</span>
$ curl localhost
</pre>


-----
--------
AUTHOR: konoemario
TITLE: Dockerをさわってみる（3）：ちょっと振り返り
BASENAME: 2018/04/12/205328
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 04/12/2018 20:53:28
CATEGORY: プログラム
CATEGORY: docker
IMAGE: https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20180412/20180412204108.png
-----
BODY:
<h1 id="日記">日記</h1>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20180412/20180412204108.png" alt="f:id:konoemario:20180412204108p:plain:w500" title="f:id:konoemario:20180412204108p:plain:w500" class="hatena-fotolife" style="width:500px" itemprop="image"></span></p>

<p>春が来ました。<br/>
速攻で風邪を引きましたが、みなさまいかがお過ごしでしょうか。</p>

<p>お金を稼ぐエンジニアになるのか、お金を稼ぐビジネスマンになるのか、幸せなエンジニアになるのか、幸せな人間になるのか、いろいろと悩ましい今日この頃です。</p>

<p>ブログについても、アウプットするものをちゃんと考えないと無駄に時間がかかるわりに得るものが少ないと感じたりします。</p>

<p>そもそもなんのために書くのがはっきりしないからこんことになるんですが。</p>

<p><br/></p>

<h2 id="今までの振り返り">今までの振り返り</h2>

<p>以前、簡単にチュートリアルをやって、その際のメモを書きました。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=http%3A%2F%2Fwww.tohuandkonsome.site%2Fentry%2F2018%2F03%2F21%2F193730" title="Dockerをさわってみる（１）：HelloWorld - 豆腐とコンソメ" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://www.tohuandkonsome.site/entry/2018/03/21/193730">www.tohuandkonsome.site</a></cite></p>

<p><iframe src="https://hatenablog-parts.com/embed?url=http%3A%2F%2Fwww.tohuandkonsome.site%2Fentry%2F2018%2F03%2F26%2F101605" title="Dockerをさわってみる（２）：シンプルなWebアプリケーションを実行する - 豆腐とコンソメ" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://www.tohuandkonsome.site/entry/2018/03/26/101605">www.tohuandkonsome.site</a></cite></p>

<p><br/></p>

<p>基礎もそうなんですが、平行してやりたいことができないとなかなか定着しないので、先行してdocker-composeやらなんやらでつくたい環境をなんとなく作れるようになった気がしたところで、もう一回復習しようと思い、振り返りもかねて書くことにしました。</p>

<ul class="table-of-contents">
    <li><a href="#日記">日記</a><ul>
            <li><a href="#今までの振り返り">今までの振り返り</a><ul>
                    <li><a href="#イメージとコンテナの整理">イメージとコンテナの整理</a></li>
                    <li><a href="#コンテナに接続するということ">コンテナに接続するということ</a></li>
                    <li><a href="#コンテナ内の変更について">コンテナ内の変更について</a></li>
                    <li><a href="#イメージについて">イメージについて</a></li>
                </ul>
            </li>
        </ul>
    </li>
</ul>

<p><br/></p>

<h3 id="イメージとコンテナの整理">イメージとコンテナの整理</h3>

<p>初回は、なんだかよくわからないけれども<code>docker run</code>で<code>HelloWorld</code>を表示してみました。</p>

<p><b>HelloWorldをやってみた</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ docker run ubuntu:14.04 /bin/<span class="synStatement">echo</span><span class="synConstant"> </span><span class="synStatement">'</span><span class="synConstant">Hello world</span><span class="synStatement">'</span>
</pre>


<p><br/></p>

<p>これについて、もう少し掘り下げていきたいと思います。</p>

<p><a href="http://docs.docker.jp/engine/reference/run.html">公式</a>のリファレンスをみると<code>docker run</code>は以下のようになっています。  <br/>
（オプションとかもろもろは消しちゃってるよ！)</p>

<p><b>docker  run の形式</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ docker run <span class="synStatement">&lt;</span>イメージ名<span class="synStatement">&gt;</span> <span class="synStatement">&lt;</span>コマンド<span class="synStatement">&gt;</span> <span class="synStatement">&lt;</span>引数<span class="synStatement">&gt;</span>
</pre>


<p> <br/></p>

<p>ここで、もう一度、初回のHelloWorldの動きをみてみます。</p>

<p><b>HelloWorldをやってみた</b></p>

<pre class="code" data-lang="" data-unlink>$ docker run ubuntu:14.04 
Hello world</pre>


<p><br/></p>

<p>これは、イメージ<code>ubuntu:14.04</code>をとってきて<code>echo</code>コマンドに引数<code>Hello wolrd</code>を渡しています。<br/>
その結果、専用のコンテナが作成され、コンテナ内でechoが実行され、コンソールに<code>Hello world</code>と表示されています。</p>

<p>コンテナが実際の仮想マシンみたいなもので、イメージはその仮想マシンをつくるための元となるデータという感じでしょうか。</p>

<p><figure class="figure-image figure-image-fotolife" title="dockerイメージとdockerコンテナ"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20180412/20180412143622.png" alt="f:id:konoemario:20180412143622p:plain" title="f:id:konoemario:20180412143622p:plain" class="hatena-fotolife" itemprop="image"></span><figcaption>dockerイメージとdockerコンテナ</figcaption></figure></p>

<p><code>docker run</code>を実行した後に、<code>docker ps -a</code>を実行してみると、停止中のコンテナも含めてすべてのコンテナが表示されます。</p>

<p>以下は、さきほど<code>docker run</code>をした際にできたコンテナになります。</p>

<p><b>docker ps -a</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>CONTAINER ID        IMAGE                 COMMAND                  CREATED             STATUS                      PORTS               NAMES
8771e2a2a729        ubuntu:14.04          <span class="synStatement">&quot;</span><span class="synConstant">/bin/echo 'Hello ...</span><span class="synStatement">&quot;</span>   <span class="synConstant">10</span> minutes ago      Exited <span class="synPreProc">(</span><span class="synConstant">0</span><span class="synPreProc">)</span> <span class="synConstant">10</span> minutes ago                       amazing_yonath
</pre>


<p> <br/></p>

<p>このとき、おもむろに再度<code>docker run</code>をしてみます。
<b>もう一回挨拶する。</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ docker run ubuntu:14.04 /bin/<span class="synStatement">echo</span><span class="synConstant"> </span><span class="synStatement">'</span><span class="synConstant">Hello world</span><span class="synStatement">'</span>
Hello world
</pre>


<p> <br/></p>

<p>再度、`docker ps -a 'とするとコンテナが増えていることが確認できます。<br/>
<b>docker ps -a</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>CONTAINER ID        IMAGE                 COMMAND                  CREATED             STATUS                      PORTS               NAMES
8771e2a2a729        ubuntu:14.04          <span class="synStatement">&quot;</span><span class="synConstant">/bin/echo 'Hello ...</span><span class="synStatement">&quot;</span>   <span class="synConstant">10</span> minutes ago      Exited <span class="synPreProc">(</span><span class="synConstant">0</span><span class="synPreProc">)</span> <span class="synConstant">10</span> minutes ago                       amazing_yonath
76020fdd87aa        ubuntu:14.04          <span class="synStatement">&quot;</span><span class="synConstant">/bin/echo 'Hello ...</span><span class="synStatement">&quot;</span>   <span class="synConstant">10</span> minutes ago      Exited <span class="synPreProc">(</span><span class="synConstant">0</span><span class="synPreProc">)</span> <span class="synConstant">10</span> minutes ago                       cocky_wescoff
</pre>


<p> <br/></p>

<p>このことから、<code>docker run</code>は指定された<strong>イメージからコンテナを作成し起動する</strong>ことがわかります。</p>

<p>コンテナが毎回できると思うと、なんとなくディスク容量を圧迫するのかなぁと思ったので、コンテナそのもののサイズを確認ができそうな<code>docker ps -a -s</code>を実行してみました。</p>

<p><b>dockerコンテナのサイズ確認</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>CONTAINER ID        IMAGE                 COMMAND                  CREATED             STATUS                       PORTS               NAMES                   SIZE
8771e2a2a729        ubuntu:14.04          <span class="synStatement">&quot;</span><span class="synConstant">/bin/echo 'Hello ...</span><span class="synStatement">&quot;</span>   <span class="synConstant">36</span> minutes ago      Exited <span class="synPreProc">(</span><span class="synConstant">0</span><span class="synPreProc">)</span> <span class="synConstant">8</span> minutes ago                         amazing_yonath          <span class="synConstant">0</span> B <span class="synPreProc">(</span><span class="synSpecial">virtual </span><span class="synConstant">222</span><span class="synSpecial"> MB</span><span class="synPreProc">)</span>
76020fdd87aa        ubuntu:14.04          <span class="synStatement">&quot;</span><span class="synConstant">/bin/echo 'Hello ...</span><span class="synStatement">&quot;</span>   <span class="synConstant">36</span> minutes ago      Exited <span class="synPreProc">(</span><span class="synConstant">0</span><span class="synPreProc">)</span> <span class="synConstant">36</span> minutes ago                        cocky_wescoff           <span class="synConstant">0</span> B <span class="synPreProc">(</span><span class="synSpecial">virtual </span><span class="synConstant">222</span><span class="synSpecial"> MB</span><span class="synPreProc">)</span>
</pre>


<p> <br/></p>

<p>なんと0B！と思ったのですが、この0Bとはコンテナを作成する際に元となったイメージとの差分とのことで、実際のサイズは<code>virtual 222MB</code>みたい。</p>

<p>ということは、毎回コンテナをつくっていく、というのはちょっとどうかなというところです。</p>

<p>作成したコンテナを利用したい場合は、どうしたらいいんだろうと思い調べてみると、<code>docker strart</code>というものがありました。<br/>
<br/>
<b>docker strart</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ dokcer <span class="synStatement">start</span> <span class="synStatement">&lt;</span>コンテナ名<span class="synStatement">&gt;</span>
</pre>


<p><br/></p>

<p>試しに、実行してみます。</p>

<p><br/>
<b>実際にやってみる</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ docker <span class="synStatement">start</span> 8771e2a2a729<span class="synStatement">[</span>f:id:konoemario:20180412145913p:plain<span class="synStatement">]</span>
8771e2a2a729
</pre>


<p><br/></p>

<p>コンテナIDっぽいのが返ってくるだけで、挨拶もなにもないです。  <br/>
どうも<code>-a</code>オプションをつけることで、標準出力をアタッチすることができるみたいです。</p>

<p><b>標準出力をアタッチ</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ docker <span class="synStatement">start</span> <span class="synSpecial">-a</span> 8771e2a2a729
Hello world
</pre>


<p>（標準出力をアタッチってなんぞって感じなんですが、これだ！っていう説明ができないので、頭の中のイメージを図にしました。)</p>

<p><figure class="figure-image figure-image-fotolife" title="標準出力をアタッチする"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20180412/20180412145913.png" alt="f:id:konoemario:20180412145913p:plain" title="f:id:konoemario:20180412145913p:plain" class="hatena-fotolife" itemprop="image"></span><figcaption>標準出力をアタッチする</figcaption></figure></p>

<p><br/></p>

<h3 id="コンテナに接続するということ">コンテナに接続するということ</h3>

<p>前回、<code>docker run -i -t イメージ名</code>とすることで、コンテナの中に接続することができた。</p>

<p><b>dockerコンテナに接続する</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>docker run <span class="synSpecial">-i</span> <span class="synSpecial">-t</span> ubuntu:14.04  /bin/bash
root@be667a4efa85:/#
</pre>


<p>さきほど、つくったHelloWorldを返すコンテナにも接続してみたいと思ったんだけれども、どうしていいかわからない。</p>

<p>試しに以下のよう、<code>docker run</code>実行時に<code>-t</code>と`-t'オプションをつければいいんじゃろ！とやってみる。</p>

<p><b>オプションをつけてためしてみる</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>docker run <span class="synSpecial">-i</span> <span class="synSpecial">-t</span> ubuntu:14.04  /bin/<span class="synStatement">echo</span><span class="synConstant"> </span><span class="synStatement">'</span><span class="synConstant">Hello world</span><span class="synStatement">'</span>
Hello world
</pre>


<p>が、これを実行しても速攻で終了してしまう。</p>

<p>というのも、そもそもdockerは何かしらのプロセスがフォアグランドで動いている必要があるからみたい、<br/>
ここでいう何かしらというのは<code>echo HelloWorld</code>で、これが終わりしだいコンテナは終了してしまう。</p>

<p>一方、起動時に<code>/bin/bash</code>のみとしている以下のコンテナは、<code>bash</code>というプロセスがずっと実行されているので、コンテナは起動しっぱなしということなのかもしれない。</p>

<p>試しに<code>docker ps</code>でみてみると、起動中のコンテナとして存在していることがわかる。</p>

<p><b>docker ps</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ docker ps
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES
be667a4efa85        ubuntu:14.04        <span class="synStatement">&quot;</span><span class="synConstant">/bin/bash</span><span class="synStatement">&quot;</span>         <span class="synConstant">14</span> minutes ago      Up <span class="synConstant">13</span> minutes                           musing_carson
</pre>


<p>起動中のコンテナに接続するには、<code>docker attach</code>を用いることで接続することができる。</p>

<p><b>起動中のコンテナに接続する</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ docker attach be667a4efa85
root@be667a4efa85:/#
</pre>


<p><br/></p>

<p>ただ、attachの場合、コンテナから抜けようと、<code>exit</code>コマンドを打つと、コンテナが終了してしまう。
コンテナ起動時に実行しているbashプロセスに接続していて、exitをすることでそのbashプロセスが終了してしまうからなのかな？あんまりよくわからない。</p>

<p>もう一つの、起動中のコンテナを利用してコマンドを実行できる<code>exec</code>なるものがある。</p>

<p><b>起動中のコンテナに接続する</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink> <span class="synPreProc">$docker</span> <span class="synStatement">exec</span> <span class="synSpecial">-it</span> be667a4efa85 /bin/bash
root@be667a4efa85:/#
</pre>


<p><br/></p>

<p>こちらであれば、<code>exit</code>してもコンテナは終了しないので便利。<br/>
attachと違って、bashプロセスを新規に立ち上げてるのかな？</p>

<p><br/></p>

<h3 id="コンテナ内の変更について">コンテナ内の変更について</h3>

<p>イメージからコンテナをつくって、コンテナ内でパッケージをインストールしたり、ファイルをつくったりしたりしたらどうなるんだろう。</p>

<p>ということで、既存のコンテナに接続して、適当にファイルをつくってみます。</p>

<p><b>コンテナ内でファイルをつくる</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ docker <span class="synStatement">exec</span> <span class="synSpecial">-it</span> be667a4efa85 /bin/bash
root@be667a4efa85# <span class="synStatement">touch</span> buhiii
root@be667a4efa85:/# <span class="synStatement">ls</span> | <span class="synStatement">grep</span> bu
buhiii
</pre>


<p><br/></p>

<p>その後、コンテナを停止、起動として再度コンテナに接続してみます。</p>

<p><b>コンテナを再起動して接続する</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ docker <span class="synStatement">stop</span> be667a4efa85 
$ docker <span class="synStatement">exec</span> <span class="synSpecial">-it</span> be667a4efa85 /bin/bash
root@be667a4efa85:/# <span class="synStatement">ls</span> | <span class="synStatement">grep</span> bu
buhiii
</pre>


<p><br/></p>

<p>おお、ファイルが残ってますね。</p>

<p>ということは、コンテナを削除するまでは残っているということですね。</p>

<p>コンテナ内で作業したデータ状態を共有したい場合は、コンテナから再度イメージに固めてあげてあげればよさそうです。<br/>
このへんはまたどっかで試そうと思います。</p>

<p><figure class="figure-image figure-image-fotolife" title="コンテナを再度イメージに"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20180412/20180412173936.png" alt="f:id:konoemario:20180412173936p:plain" title="f:id:konoemario:20180412173936p:plain" class="hatena-fotolife" itemprop="image"></span><figcaption>コンテナを再度イメージに</figcaption></figure></p>

<p><br/></p>

<h3 id="イメージについて">イメージについて</h3>

<p>イメージを何かしら作成してみようと思ったとき、例えばnginxが動くイメージなんかをつくろうとおもったとき、大本となるものってなんだろうって思い手がとまっちゃいました。<br/>
いかにdockerをわかっていないかっていうだけの話なんですが、（そして今もわかっていない)イメージの大本は、何かしらのOSイメージが必要になります。</p>

<p>前回もPythonのWebフレームワークであるFlaskを動く既存イメージをもってきてコンテナを作成していました。</p>

<p><b>Flaskを動かすコンテナを起動</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>docker run <span class="synSpecial">-d</span> <span class="synSpecial">-p</span> <span class="synConstant">80</span>:<span class="synConstant">5000</span> training/webapp python app.py
</pre>


<p><code>trainig/webapp</code>というイメージをもとにコンテナを作成しているんですが、<code>trainig/webapp</code>というイメージは、Pythonが実行できるなにかぐらいの感覚しかなくっていろいろと混乱しました。<br/>
冷静に考えるとPythonがインストールされた、UbuntuだったりCentOSのイメージになります。</p>

<p>以降も気になることがあれば追記していきます。</p>

-----
--------
AUTHOR: konoemario
TITLE: 既存イメージの管理
BASENAME: 2018/04/13/094757
STATUS: Draft
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 04/12/2018 15:01:33
IMAGE: https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20180323/20180323105450.png
-----
BODY:
<h1></h1>

<h2>Node.jsを使用できるコンテナを用意できるようにする</h2>

<h3>Dockerfileをつくってみる</h3>

<p><br/>
<b>作業用ディレクトリを作成する</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink><span class="synStatement">mkdir</span> node-<span class="synStatement">test</span> <span class="synPreProc">$$</span> <span class="synStatement">cd</span> note-<span class="synStatement">test</span>
</pre>


<p><br/></p>

<p><br/>
<b>Dockerfileを用意する</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>vim Dockerfile
</pre>


<p><br/></p>

<p><b>Dockerfile</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>FROM alpine:latest
</pre>


<p><br/></p>

<h4>alpine</h4>

<p><br/></p>

<h4>イメージを作成する</h4>

<p><br/></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ docker build ./ <span class="synSpecial">-t</span> tohu/node
</pre>


<p><br/></p>

<p><br/>
<b>イメージの確認</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
tohu/node           latest              3fd9065eaf02        <span class="synConstant">3</span> months ago        4.15 MB
</pre>


<p><br/></p>

<p>イメージができたら、早速コンテナを作成する。</p>

<p><b>dockerコンテナの作成と起動</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ docker run <span class="synSpecial">-i</span> <span class="synSpecial">-t</span> tohu/node /bin/ash
<span class="synComment">#</span>
</pre>


<h3>既存イメージに対してcommitしてみる</h3>

<p><b>dockerコンテナの中でpyenvをインストールする</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>root@d20116a1ce97:/# curl <span class="synSpecial">-L</span> https://github.com/pyenv/pyenv-installer/raw/master/bin/pyenv-installer | bash
</pre>


<p><b>編集したimageを保存する</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ docker commit <span class="synSpecial">-m</span> <span class="synStatement">'</span><span class="synConstant">add pyenv</span><span class="synStatement">'</span> <span class="synSpecial">-a</span> <span class="synStatement">'</span><span class="synConstant">tohu</span><span class="synStatement">'</span> d20116a1ce97 tohu/mysintra:v2
sha256:f79371329012f5c00a78944e7ce295dfccfc5aa1fba865b36952922317ed1d88
</pre>


<p><b>作成したimageを実行する</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>docker run <span class="synSpecial">-t</span> <span class="synSpecial">-i</span> tohu/mysintra:v2 /bin/bash
root@16ada62cadde:/# <span class="synStatement">ls</span> <span class="synSpecial">-a</span>
<span class="synStatement">. </span>  .bash_history  .gem    bin   dev  home  lib64  mnt  proc  run   srv  tmp  var
..  .dockerenv     .pyenv  boot  etc  lib   media  opt  root  sbin  sys  usr
</pre>


<p><code>.pyenv</code>がちゃんと残ってることがわかる！</p>

<h3>Dockerfileを使う</h3>

<p>さて、さきほどつくったイメージを他の人に渡したい！って場合はどうしたらいいんだろう。</p>

<p>調べてみると、<code>docker save</code>なるコマンドがあって、作ったイメージをファイルとして扱うことができるようになるみたい。</p>

<p>ただ、公式チュートリアルをみると、</p>

<blockquote><p>docker commit コマンドを使う方法は、イメージを簡単に拡張します。しかし、少々面倒なものであり、チーム内の開発プロセスでイメージを共有するのは簡単ではありません。この方法ではなく、新しいコマンド docker build を使い構築する方法や、イメージをスクラッチ（ゼロ）から作成する方法があります。</p>

<p>この構築コマンドを使うには Dockerfile を作成します。この中に Docker がどのようにしてイメージを構築するのか、命令セットを記述します。</p></blockquote>

<p>Dockerfileなるものを作成するとあるので、こちらを試してみる。</p>

<p>前回のPythonのWebフレームワークであるFlaskが動くコンテナを作ろうと思ったのだけれども、やけに時間がかかってつらいなぁと思ってたら<br/>
こんな記事があった。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fqiita.com%2Fpottava%2Fitems%2F452bf80e334bc1fee69a" title="効率的に安全な Dockerfile を作るには - Qiita" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://qiita.com/pottava/items/452bf80e334bc1fee69a">qiita.com</a></cite></p>

<p>まずは、こまめにcommitしながら、作業をメモっておく。</p>

<p><a href="https://blog.stormcat.io/post/entry/alpine-entry-apk/">Alpine Linux&#x5165;&#x9580; -&#x5185;&#x90E8;&#x69CB;&#x9020;&#x3068;apk&#x3067;&#x30D1;&#x30C3;&#x30B1;&#x30FC;&#x30B8;&#x30A4;&#x30F3;&#x30B9;&#x30C8;&#x30FC;&#x30EB;&#x7DE8;- &middot; tehepero note(&#x30FB;&omega;&lt;) 2.0</a></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ docker run <span class="synSpecial">-it</span> alpine:3.7 /bin/sh
</pre>


<p>以下は、作業記録</p>

<pre class="code lang-sh" data-lang="sh" data-unlink><span class="synComment"># apk --update python</span>
<span class="synComment"># python -V</span>
Python 2.7.14
</pre>


<p>おお、Python2系になるのね。</p>

<p>ということでやりなおし。</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ docker run <span class="synSpecial">-it</span> alpine:3.7 /bin/sh
<span class="synComment"># python -V</span>
/bin/sh: python: not found
<span class="synComment"># </span>
</pre>


<p>すごい気軽だ。。。</p>

<pre class="code lang-sh" data-lang="sh" data-unlink><span class="synComment"># apk update</span>
<span class="synComment"># apk add python3</span>
<span class="synComment"># python3 -V</span>

<span class="synComment"># pip3 install flask</span>
</pre>


<p><b>最初のDockerfile</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>FROM alpine:3.7
RUN apk update <span class="synStatement">\</span>
    &amp;&amp; apk add python3 <span class="synStatement">\</span>
    &amp;&amp; pip3 install flask
</pre>


<p><br/></p>

<p>準備ができたら、Dockerfileをもとにイメージを作成してみる。<br/>
イメージの作成には<code>docker build</code>を使えばいいみたい。</p>

<p><b>dockerのbuild</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ docker build <span class="synStatement"> . </span>-t tohu/flask:v1
</pre>


<ul>
<li><code>.</code>は今いるディレクトリにある<code>Dockerfile</code>をみてねってことかな</li>
<li><code>-t</code> オプションはつけることで、作成したイメージのリポジトリ名と、タグをつけることができる。</li>
</ul>


<p>準備ができたら、コンテナを起動します。<br/>
例のごとく、<code>`-i、</code>-t<code>オプションをつけて対話型作業してみることにするよ。  
ちなみに、</code>-it`と一括で書くことができるみたい。</p>

<p><b>dockerを起動する</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ docker run <span class="synSpecial">-it</span> tohu/flask:v1 /bin/sh
</pre>


<p>無事、起動できましたかね！<br/>
とりあえず、pythonがインストールされているかと、Flaskモジュールがimportされているかを確認することにした。</p>

<p><b>動作確認</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink><span class="synComment"># python3</span>
Python 3.6.3 <span class="synPreProc">(</span><span class="synSpecial">default, Nov </span><span class="synConstant">21</span><span class="synSpecial"> </span><span class="synConstant">2017</span><span class="synSpecial">, </span><span class="synConstant">14</span><span class="synSpecial">:</span><span class="synConstant">55</span><span class="synSpecial">:</span><span class="synConstant">19</span><span class="synPreProc">)</span>
<span class="synStatement">[</span>GCC 6.4.0<span class="synStatement">]</span> on linux
Type <span class="synStatement">&quot;</span><span class="synConstant">help</span><span class="synStatement">&quot;</span>, <span class="synStatement">&quot;</span><span class="synConstant">copyright</span><span class="synStatement">&quot;</span>, <span class="synStatement">&quot;</span><span class="synConstant">credits</span><span class="synStatement">&quot;</span> or <span class="synStatement">&quot;</span><span class="synConstant">license</span><span class="synStatement">&quot;</span> <span class="synStatement">for</span> more information.
<span class="synStatement">&gt;&gt;&gt;</span> import flask;
<span class="synStatement">&gt;&gt;&gt;</span>
</pre>


<p><br/></p>

<p>大丈夫そう。</p>

<p>そうしたら、後は<code>app.py</code>を置いて、flaskを起動してあげればよさそう。</p>

<p>なんだけれども、例のごとく</p>

<p>どこにソースコード置けばいいんだろ</p>

<p>となりました。<br/>
なにも考えずに、dockerコンテナ内に直接flaskアプリケーションを置いてみて、起動してみます。<br/>
一旦、コンテナを終了して、ポートを割り当てた上で、再度起動してみます。</p>

<p><b>dockerコンテナを対話型でかつポートを割り当てた状態で起動</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink> docker run <span class="synSpecial">-it</span> <span class="synSpecial">-p</span> <span class="synConstant">80</span>:<span class="synConstant">5000</span> tohu/flask:v1  /bin/sh
</pre>


<p><code>/</code>直下にあれこれ置くのもどうなんだろうということで<code>/var/www/html/app</code>なるディレクトリを作成して<br/>
そこに<code>app.py</code>を置くことにします。</p>

<p><b>適当にディレクトリを作成してflaskアプリケーションを作成</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink><span class="synComment"># mkdir /var/www/html/app -p</span>
<span class="synComment"># cd /var/www/html/app</span>
<span class="synComment"># vi app.py</span>
</pre>


<p><br/></p>

<p><code>app.py</code>は今までと同じものをそのまま使っています。</p>

<p><b>app.py</b></p>

<pre class="code lang-python" data-lang="python" data-unlink><span class="synPreProc">from</span> flask <span class="synPreProc">import</span> Flask
app = Flask(__name__)

<span class="synPreProc">@</span><span class="synIdentifier">app.route</span>(<span class="synConstant">&quot;/&quot;</span>)
<span class="synStatement">def</span> <span class="synIdentifier">hello</span>():
    <span class="synStatement">return</span> <span class="synConstant">&quot;ohankyy&quot;</span>

<span class="synStatement">if</span> __name__ == <span class="synConstant">'__main__'</span>:
    app.run(host=<span class="synConstant">'0.0.0.0'</span>, port=<span class="synConstant">5000</span>)
</pre>


<p><br/></p>

<p>そしたら、flaskを起動してみます。</p>

<p><b>適当にディレクトリを作成してflaskアプリケーションを作成</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink><span class="synComment"># python3 app.py</span>
* Running on http://0.0.0.0:<span class="synConstant">5000</span>/ <span class="synPreProc">(</span><span class="synSpecial">Press CTRL+C to quit</span><span class="synPreProc">)</span>
</pre>


<p>この状態で「localhost:8000」にアクセスすると、無事以下の画面が表示されましたね。</p>

<p><figure class="figure-image figure-image-fotolife" title="コンテナに接続して直接起動したFlaskアプリケーション"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20180323/20180323105450.png" alt="f:id:konoemario:20180323105450p:plain" title="f:id:konoemario:20180323105450p:plain" class="hatena-fotolife" itemprop="image"></span><figcaption>コンテナに接続して直接起動したFlaskアプリケーション</figcaption></figure></p>

<p>やってやりました！</p>

<p><br/></p>

<h3>改善する</h3>

<p>とはいえ、このままだと</p>

<ul>
<li>app.pyを編集したい場合、毎回コンテナを起動して、保存したければdocker commitをする必要がある</li>
<li>毎回コンテナに対話型で接続して起動する必要がある。</li>
</ul>


<p>とかなり使いにくいです。</p>

<p>これらをまとめてなんとかしていこうと思います。</p>

<p>ということで、まずは先に改善した結果のDockerfileになります。</p>

<p><b>改善したDockerfile</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>FROM alpine:3.7
<span class="synComment">#flaskを起動するのに必要なパッケージ</span>
RUN apk update <span class="synStatement">\</span>
    &amp;&amp; apk add python3 <span class="synStatement">\</span>
    &amp;&amp; pip3 install flask

<span class="synComment">#flaskアプリケーションを置く場所</span>
RUN <span class="synStatement">mkdir</span> /var/www/html/app <span class="synSpecial">-p</span>

<span class="synComment">#dockerを起動しているマシンのapp.pyをコンテナ内にコピーする</span>
COPY ./app.py /var/www/html/app

<span class="synComment">#docker runをしたときにFlaskアプリケーション起動する</span>
CMD <span class="synStatement">[&quot;</span><span class="synConstant">python3</span><span class="synStatement">&quot;</span>, <span class="synStatement">&quot;</span><span class="synConstant">/var/www/html/app/app.py</span><span class="synStatement">&quot;]</span>
</pre>


<p>まず、 <code>COPY</code>を用いてVagrtant上の仮想マシンに<code>app.py</code>を置いて、それをコンテナに渡すようにしてみます。  <br/>
ついでに置く場所のディレクトリも、<code>RUN</code>を追加して作成するようにしてみました。</p>

<p>最後に、<code>docker run</code>をしたときに実行される<code>CMD</code>にflaskを起動させるようにしてみました。</p>

<p>ということで、早速ビルドして、実行してみます。</p>

<p><b>dockerのbuild</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ docker build <span class="synStatement"> . </span>-t tohu/flask:v2
$ docker run <span class="synSpecial">-p</span> <span class="synConstant">80</span>:<span class="synConstant">5000</span> tohu/flask:v2
 * Running on http://0.0.0.0:<span class="synConstant">5000</span>/ <span class="synPreProc">(</span><span class="synSpecial">Press CTRL+C to quit</span><span class="synPreProc">)</span>
</pre>


<p>おお、いい感じに起動していることがわかります。</p>

<p><br/></p>

<h3>さらなる問題</h3>

<p>ところで、<code>ohankyy</code>ではなくって<code>Pinkyy'って表示したい場合、Vagrant上の</code>app.py'を修正するわけです。</p>

<p><b>app.py(Pinkyyに修正)</b></p>

<pre class="code lang-python" data-lang="python" data-unlink><span class="synPreProc">from</span> flask <span class="synPreProc">import</span> Flask
app = Flask(__name__)

<span class="synPreProc">@</span><span class="synIdentifier">app.route</span>(<span class="synConstant">&quot;/&quot;</span>)
<span class="synStatement">def</span> <span class="synIdentifier">hello</span>():
    <span class="synStatement">return</span> <span class="synConstant">&quot;Pinkyy&quot;</span>

<span class="synStatement">if</span> __name__ == <span class="synConstant">'__main__'</span>:
    app.run(host=<span class="synConstant">'0.0.0.0'</span>, port=<span class="synConstant">5000</span>)
</pre>


<p><br/></p>

<p>修正したあとに、どれどれと、「<a href="http://localhost:8000">http://localhost:8000</a>」にアクセスしても、相変わらず「ohankyy」のままです。<br/>
あら、っとコンテナを再起動しなきゃいけないのかしらと、再度立ち上げても結果はかわりません。</p>

<p>というもの、Dockerfileに<code>COPY</code>を書きましたが、<code>docker build</code>したときにCOPYされているみたいなんですね。<br/>
ということは、`app.py'はイメージの中に含まれてしまっていて、変更を反映させたければ、再度ビルドする必要がありそうです。</p>

<p>これだと、イメージサイズの分、ディスク容量を圧迫しますし、何より手間です。</p>

<p>コンテナ起動時に、Vagrant上のファイルを読み込んでいただけないでしょうか。</p>

<h3>マウント</h3>

<p>Vagrantがホストマシンとディレクトリを共有できるようにdockerもコンテナとホストマシン間でディレクトリを共有したりできるみたいです。</p>

<p>参考にさせていただいた記事<br/>
<iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fqiita.com%2FYarimizu14%2Fitems%2F52f4859027165a805630" title="【Docker】Dockerでホストのディレクトリをマウントする - Qiita" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://qiita.com/Yarimizu14/items/52f4859027165a805630">qiita.com</a></cite></p>

<p>上記を参考に、試してみることにします。</p>

<p>まずは、Dockerfileが置いてあるディレクトリに<code>src</code>ディレクトリを置き、今まで<code>COPY</code>していたファイルをsrc配下に移動しました。</p>

<p><b>マウントするディレクトリを作成する</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ <span class="synStatement">mkdir</span> src
$ <span class="synStatement">mv</span> app.py src
</pre>


<p>この状態で、マウントを試してみます。</p>

<p><b>srcディレクトリをマウントして起動する</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ docker run <span class="synSpecial">-p</span> <span class="synConstant">80</span>:<span class="synConstant">5000</span> <span class="synSpecial">-v</span> /home/vagrant/docker-flask/src:/var/www/html/app tohu/flask:v2
 * Running on http://0.0.0.0:<span class="synConstant">5000</span>/ <span class="synPreProc">(</span><span class="synSpecial">Press CTRL+C to quit</span><span class="synPreProc">)</span>
</pre>


<p>これで、一度ブラウザから内容を確認した後に、<code>app.py</code>を修正の上、再度アクセスしてみます。</p>

<p>かわった！と思いきや変わってません。</p>

<p><figure class="figure-image figure-image-fotolife" title="かわったかな？"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20180323/20180323105450.png" alt="f:id:konoemario:20180323105450p:plain" title="f:id:konoemario:20180323105450p:plain" class="hatena-fotolife" itemprop="image"></span><figcaption>かわったかな？</figcaption></figure></p>

<p>というのも、flaskが一度アクセスしたページをキャッシュしているかなんかで、変更されてません。<br/>
試しに、flaskを<code>ctrl + c</code>で落としてコンテナが落ちた後に、再度コンテナを起動してみます。</p>

<p>今度はかわってることが確認できました！</p>

<p><figure class="figure-image figure-image-fotolife" title="かわった！"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20180323/20180323132244.png" alt="f:id:konoemario:20180323132244p:plain" title="f:id:konoemario:20180323132244p:plain" class="hatena-fotolife" itemprop="image"></span><figcaption>かわった！</figcaption></figure></p>

-----
--------
AUTHOR: konoemario
TITLE: 
BASENAME: 2018/03/28/205642
STATUS: Draft
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 03/28/2018 11:22:32
-----
BODY:
<p>debian-strechで環境構築</p>

<p>node.js導入</p>

<p><a href="https://7me.oji.0j0.jp/2017/stretch-npm-install.html">debian(stretch)&#x3067;npm&#x30D1;&#x30C3;&#x30B1;&#x30FC;&#x30B8;&#x304C;&#x7121;&#x304F;&#x306A;&#x3063;&#x3066;&#x305F;&#x8A71;</a></p>

<p><a href="https://qiita.com/horikeso/items/39beb56b81b321a03f31">Laravel5.5&#x3092;&#x30A4;&#x30F3;&#x30B9;&#x30C8;&#x30FC;&#x30EB;&#x3057;&#x3066;Laravel Mix&#x306E;&#x5B9F;&#x884C;&#x307E;&#x3067; - Qiita</a></p>

<p><a href="https://github.com/hamptonpaulk/php7-dockerized/issues/3">Docker-compose up fail &middot; Issue #3 &middot; hamptonpaulk/php7-dockerized &middot; GitHub</a></p>

<p>根本はnignxがキャッシュしてる</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=http%3A%2F%2Fpechokan.hatenablog.com%2Fentry%2F2016%2F12%2F03%2F163540" title="（初心者向け）JavaScript, cssのキャッシュ削除できないとき - アレっぽいやつ" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://pechokan.hatenablog.com/entry/2016/12/03/163540">pechokan.hatenablog.com</a></cite></p>

<p>リアルタイムHTMLプレビュー</p>

-----
--------
AUTHOR: konoemario
TITLE: 
BASENAME: 2018/03/26/115426
STATUS: Draft
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 03/26/2018 11:54:26
-----
BODY:

<pre class="code lang-sh" data-lang="sh" data-unlink><span class="synStatement">export</span><span class="synIdentifier"> COMPOSER_ALLOW_SUPERUSER=</span><span class="synConstant">1</span>
composer create-project <span class="synSpecial">--prefer-dist</span> laravel/laravel blog <span class="synStatement">&quot;</span><span class="synConstant">5.5.*</span>
</pre>


-----
--------
AUTHOR: konoemario
TITLE: Dockerをさわってみる（２）：シンプルなWebアプリケーションを実行する
BASENAME: 2018/03/26/101605
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 03/26/2018 10:16:05
CATEGORY: docker
IMAGE: https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20180322/20180322123752.png
-----
BODY:
<h1 id="前回からの続き">前回からの続き</h1>

<p><iframe src="https://hatenablog-parts.com/embed?url=http%3A%2F%2Fwww.tohuandkonsome.site%2Fentry%2F2018%2F03%2F21%2F193730" title="Dockerをさわってみる（１）：HelloWorld - 豆腐とコンソメ" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://www.tohuandkonsome.site/entry/2018/03/21/193730">www.tohuandkonsome.site</a></cite></p>

<p>引き続き、公式チュートリアルを進めていきたいと思います。</p>

<ul class="table-of-contents">
    <li><a href="#前回からの続き">前回からの続き</a><ul>
            <li><a href="#dockerでシンプルなWebアプリケーションを実行する">dockerでシンプルなWebアプリケーションを実行する</a><ul>
                    <li><a href="#起きたこと">起きたこと</a></li>
                    <li><a href="#横道にそれてFlaskを使う環境を用意してみる">横道にそれてFlaskを使う環境を用意してみる</a></li>
                    <li><a href="#道に戻りdockerのイメージをつくってみる">道に戻り、dockerのイメージをつくってみる</a></li>
                </ul>
            </li>
        </ul>
    </li>
</ul>

<h2 id="dockerでシンプルなWebアプリケーションを実行する">dockerでシンプルなWebアプリケーションを実行する</h2>

<p>早速、Webアプリケーションを実行するdockerのコンテナを起動してみようと思います。</p>

<p>公式のコマンドに従い、以下を実行します。</p>

<p><b>dockerでWebアプリケーションを実行する</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>docker run <span class="synSpecial">-d</span> <span class="synSpecial">-p</span> <span class="synConstant">80</span>:<span class="synConstant">5000</span> training/webapp python app.py
Unable to <span class="synStatement">find</span> image <span class="synStatement">'</span><span class="synConstant">training/webapp:latest</span><span class="synStatement">'</span> locally
latest: Pulling from training/webapp
e190868d63f8: Pull <span class="synStatement">complete</span>
909cd34c6fd7: Pull <span class="synStatement">complete</span>
0b9bfabab7c1: Pull <span class="synStatement">complete</span>
a3ed95caeb02: Pull <span class="synStatement">complete</span>
10bbbc0fc0ff: Pull <span class="synStatement">complete</span>
fca59b508e9f: Pull <span class="synStatement">complete</span>
e7ae2541b15b: Pull <span class="synStatement">complete</span>
9dd97ef58ce9: Pull <span class="synStatement">complete</span>
a4c1b0cb7af7: Pull <span class="synStatement">complete</span>
Digest: sha256:06e9c1983bd6d5db5fba376ccd63bfa529e8d02f23d5079b8f74a616308fb11d
Status: Downloaded newer image <span class="synStatement">for</span> training/webapp:latest
66d7c357bfa77920af4bd5c7fbc3082c70885afcdd6a2d01ed1122cb8028782e
</pre>


<p><br/>
実行した後に<code>http://localhost</code>にアクセスしてみると、「Hello World」がブラウザの表示されることが確認できます。</p>

<p><figure class="figure-image figure-image-fotolife" title="localhost:8000"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20180322/20180322123752.png" alt="f:id:konoemario:20180322123752p:plain" title="f:id:konoemario:20180322123752p:plain" class="hatena-fotolife" itemprop="image"></span><figcaption>localhost:8000</figcaption></figure></p>

<p>さて、何が起こったのでしょう。</p>

<p><br/></p>

<h3 id="起きたこと">起きたこと</h3>

<p>まず、<code>training/webapp</code>です。<br/>
ログをみると、そんなもんローカルにないから、リモートからとってくるぜ(pull)みたいな感じのことが書かれています。</p>

<p>どっからとってくるかというのは、「docker hub」というdockerのイメージ？を扱っているサイトです。</p>

<p>試しにdocker hubのアカウントを作って、<code>training/webapp</code>を検索してみました。</p>

<p><a href="https://hub.docker.com/r/training/webapp/">https://hub.docker.com/r/training/webapp/</a></p>

<p>それっぽいやつが見つかりましたね。こちらをとってきているみたいです。</p>

<p>これをとってきたあとに、<code>python app.py</code>を実行してます。<br/>
<code>python app.py</code>ですが、Pythonの軽量Webフレームワークである「Flask」を起動しているコマンドです。</p>

<p><br/>
※「Flask」そのものは、以前使ったことがあるんだよ！    <br/>
<iframe src="https://hatenablog-parts.com/embed?url=http%3A%2F%2Fwww.tohuandkonsome.site%2Fentry%2F2017%2F07%2F20%2F230249" title="RaspBerryPiでラジコンをつくる(11)：socket.ioをFlaskで実装する - 豆腐とコンソメ" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://www.tohuandkonsome.site/entry/2017/07/20/230249#Flask%E3%81%A8%E3%81%AF">www.tohuandkonsome.site</a></cite><br/>
<br/></p>

<p>このFlaskがポート5000番代で待ち受けていて、そこにリクエストを投げると、HelloWorldのレスポンスを返している感じですかね！</p>

<p><figure class="figure-image figure-image-fotolife" title="localhost:8000にアクセスしたときの流れ"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20180322/20180322143631.png" alt="f:id:konoemario:20180322143631p:plain" title="f:id:konoemario:20180322143631p:plain" class="hatena-fotolife" itemprop="image"></span><figcaption>localhost:8000にアクセスしたときの流れ</figcaption></figure></p>

<p>この状態を、dockerを使わずにVagrantで起動している仮想マシン上で実現しようとすると</p>

<ul>
<li>pythonのインストール</li>
<li>Flaskのインストール</li>
<li>Flaskのプロジェクト作成</li>
<li>Hello Wolrdをレスポンスで返すよう修正</li>
<li>Webアプリケーションの起動</li>
</ul>


<p>あたりの作業が必要になります。</p>

<p>せっかくなんでやってみますかね！</p>

<p><br/></p>

<h3 id="横道にそれてFlaskを使う環境を用意してみる">横道にそれてFlaskを使う環境を用意してみる</h3>

<p><figure class="figure-image figure-image-fotolife" title="横道にそれる豚"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20180322/20180322144751.png" alt="f:id:konoemario:20180322144751p:plain" title="f:id:konoemario:20180322144751p:plain" class="hatena-fotolife" itemprop="image"></span><figcaption>横道にそれる豚</figcaption></figure>
<br/></p>

<p>何はともあれ、Pythonが必要になります。
Vagrantで起動している仮想マシン(Amazon Linux)には既にPythonの2系が入っていました。   <br/>
<b>pythonのバージョンの確認</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ python <span class="synSpecial">-V</span>
Python 2.7.12
</pre>


<p><br/></p>

<p>が、せっかくなんでpyhon3系を導入しようと思います。</p>

<p>そして、python3系ど導入するにあたっては、pythonのバージョン管理を行うことができる<code>pyenv</code>を使ってpython3を導入したいと思います。<br/>
（どんどん横道に逸れていくね！)</p>

<p>インストールにあたって参考にさせていただいた記事。</p>

<p><a href="https://qiita.com/mogom625/items/b1b673f530a05ec6b423">Pyenv&#x306E;&#x4F7F;&#x3044;&#x65B9; - Qiita</a><br/>
<a href="https://qiita.com/michimani/items/fc64dcbe721d91579ccb">Amazon Linux&#x3067;Python3&#x7CFB;&#x3092;&#x4F7F;&#x3046; - Qiita</a></p>

<p>なんだかよくわかりませんが、必要なライブラリは突っ込んでおきます！</p>

<p><b>pyenvに必要なライブラリをインストールする</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink> $ sudo yum install gcc gcc-c++ make git openssl-devel bzip2-devel zlib-devel readline-devel sqlite-devel
</pre>


<p><br/></p>

<p>次にpyenvを導入します。</p>

<p><b>pyenvをインストールする</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>curl <span class="synSpecial">-L</span> https://github.com/pyenv/pyenv-installer/raw/master/bin/pyenv-installer | bash
WARNING: seems you still have not added <span class="synStatement">'</span><span class="synConstant">pyenv</span><span class="synStatement">'</span> to the load path.

<span class="synComment"># Load pyenv automatically by adding</span>
<span class="synComment"># the following to ~/.bash_profile:</span>

<span class="synStatement">export</span><span class="synIdentifier"> PATH=</span><span class="synStatement">&quot;</span><span class="synConstant">/home/vagrant/.pyenv/bin:</span><span class="synPreProc">$PATH</span><span class="synStatement">&quot;</span>
<span class="synStatement">eval</span> <span class="synStatement">&quot;</span><span class="synPreProc">$(</span><span class="synSpecial">pyenv init -</span><span class="synPreProc">)</span><span class="synStatement">&quot;</span>
<span class="synStatement">eval</span> <span class="synStatement">&quot;</span><span class="synPreProc">$(</span><span class="synSpecial">pyenv virtualenv-init -</span><span class="synPreProc">)</span><span class="synStatement">&quot;</span>
</pre>


<p><br/></p>

<p><code>.bash_profile</code>にパスを通してね！って言われるので、言う通りにします。</p>

<p><b>.bash_profileに追記する</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink><span class="synStatement">export</span><span class="synIdentifier"> PATH=</span><span class="synStatement">&quot;</span><span class="synConstant">/home/vagrant/.pyenv/bin:</span><span class="synPreProc">$PATH</span><span class="synStatement">&quot;</span>
<span class="synStatement">eval</span> <span class="synStatement">&quot;</span><span class="synPreProc">$(</span><span class="synSpecial">pyenv init -</span><span class="synPreProc">)</span><span class="synStatement">&quot;</span>
<span class="synStatement">eval</span> <span class="synStatement">&quot;</span><span class="synPreProc">$(</span><span class="synSpecial">pyenv virtualenv-init -</span><span class="synPreProc">)</span><span class="synStatement">&quot;</span>

<span class="synStatement">export</span><span class="synIdentifier"> PATH</span>
</pre>


<p><br/></p>

<p>そしたら変更を反映させます。</p>

<p><b>環境変数を反映させる</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ <span class="synStatement">source</span> ~/.bash_profile
</pre>


<p><br/></p>

<p>ここまできたら、pyenvを実行してみます。</p>

<p><b>pyenvの動作確認</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ pyenv <span class="synSpecial">-v</span>
pyenv 1.2.2
</pre>


<p><br/></p>

<p>ヒーハー！<br/>
大丈夫そうです。</p>

<p>続いて、Python3系をインストールします。<br/>
<code>pyenv install &lt;version&gt;</code>で指定したVersionをインストールすることができます。 <br/>
これはちょっと時間がかかりました。</p>

<p><b>Python3.6.1をインストールする</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ pyenv install 3.6.1
</pre>


<p><br/></p>

<p>最後に、使用するバージョンを指定します。</p>

<p><b>Python3.6.1を使用するようにする</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ pyenv global 3.6.1
</pre>


<p><br/></p>

<p>確認の意味を込めて、pythonのバージョンを確認します。</p>

<p><b>確認</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ python <span class="synSpecial">-V</span>
Python 2.7.12
</pre>


<p><br/></p>

<p>ありがとう！<br/>
ってかわってない！みたいなことがありました。</p>

<p>ぐぐってみますと、<code>pyenv rehash</code>なるコマンドを叩けばいいとのこと。</p>

<p><b>なんだかわからないけれども</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ pyenv rehash
$ python <span class="synSpecial">-V</span>
Python 3.6.1
</pre>


<p><br/></p>

<p>無事、変更されました。</p>

<p>次に、Flaskを準備してみます。<br/>
こちらも公式チュートリアルに則って、先にコードから書いちゃいます。</p>

<p><a href="http://flask.pocoo.org/">Welcome | Flask (A Python Microframework)</a></p>

<p><b>作業ディレクトリとapp.pyを作成</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ <span class="synStatement">mkdir</span> flask
$ <span class="synStatement">cd</span> flask
$ vim app.py
</pre>


<p><br/></p>

<p>唯一のPythonファイル<code>app.py</code>は公式そのまんまです。<br/>
<b>app.py</b></p>

<pre class="code lang-python" data-lang="python" data-unlink><span class="synPreProc">from</span> flask <span class="synPreProc">import</span> Flask
app = Flask(__name__)

<span class="synPreProc">@</span><span class="synIdentifier">app.route</span>(<span class="synConstant">&quot;/&quot;</span>)
<span class="synStatement">def</span> <span class="synIdentifier">hello</span>():
    <span class="synStatement">return</span> <span class="synConstant">&quot;Hello World!&quot;</span>

<span class="synStatement">if</span> __name__ == <span class="synConstant">'__main__'</span>:
    app.run(host=<span class="synConstant">'0.0.0.0'</span>)
</pre>


<p><br/></p>

<p>中身は、<code>/</code>にリクエストすると、<code>Hello World</code>をレスポンスとして返す、ってことがなんとなくわかるかと思います。</p>

<p>次に、Flaskをインストールします。<br/>
インストールにはpythonのパッケージ管理を行う<code>pip</code>を使います。Python3系なら？デフォルトで入ってるみたいです。</p>

<p><b>Flaskをインストール</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ pip install Flask
</pre>


<p>さくっとインストールしたら、起動してみましょう。</p>

<p><b>Flaskを起動する</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ python app.py
 * Running on http://0.0.0.0:<span class="synConstant">5000</span>/ <span class="synPreProc">(</span><span class="synSpecial">Press CTRL+C to quit</span><span class="synPreProc">)</span>
</pre>


<p>こんな感じで、Webアプリケーションが立ち上がることが確認できるかと思います。</p>

<p>さっそくアクセスしてみたいのですが、Vagrantで起動している仮想マシンのポート5000番を開ける必要があります。</p>

<p><b>Vagrantfileに一行追加する</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>config.vm.network <span class="synStatement">&quot;</span><span class="synConstant">forwarded_port</span><span class="synStatement">&quot;</span>, guest: <span class="synConstant">5000</span>, host: <span class="synConstant">5000</span>
</pre>


<p><b>Vagrantの再起動</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ vagrant <span class="synStatement">reload</span>
</pre>


<p>再度、<code>vagrant ssh</code>なりして仮想マシンに接続後、Flaskを立ち上げて、<br/>
「<a href="http://localhost:5000">http://localhost:5000</a>」にアクセスすると  、以下が表示されます！</p>

<p><figure class="figure-image figure-image-fotolife" title="http://localhost:5000にアクセス"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20180322/20180322142035.png" alt="f:id:konoemario:20180322142035p:plain" title="f:id:konoemario:20180322142035p:plain" class="hatena-fotolife" itemprop="image"></span><figcaption><a href="http://localhost:5000">http://localhost:5000</a>にアクセス</figcaption></figure></p>

<p><br/></p>

<h3 id="道に戻りdockerのイメージをつくってみる">道に戻り、dockerのイメージをつくってみる</h3>

<p>さて、dockerを調べてたのになぁみたいな状態になっちゃったのでもとに戻ります。</p>

<p>一から、Flaskを使用する環境を使うと結構面倒なのですが、dockerの用意されているイメージを使うと、一瞬で環境をつくることができました。</p>

<p>また、仮想マシンに直接pythonをインストールする際、pythonのバージョン管理ができるようにpyenvを導入したりもしました。  <br/>
これは、ひとつのサーバー上にバージョンが異なるアPythonプリケーションが動くようにという意図があります。<br/>
(とはいえひとつのサーバーに異なるバージョンのpythonアプリケーションが動いているっていうのはあんまり考えにくいかもしれませんが)</p>

<p>dockerであれば、pyenvを利用しなくともdockerで作成したコンテナ上に直接pythonをインストールしてもまったく問題なさそうです。<br/>
異なるバージョンのであれば、コンテナそのものを分けるってイメージですかね。</p>

<p>とはいえ、既存の<code>training/webapp</code>について、<code>Hello Wolrd</code>ではなく<code>Ohanky!</code>を返すようにするにはどうしたらいいのかとか、さっぱりわかりません。</p>

<p>なので、既存イメージを利用するだけではなく、イメージを作成する、ということをしていこうと思います。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=http%3A%2F%2Fwww.tohuandkonsome.site%2Fentry%2F2018%2F04%2F12%2F205328" title="Dockerをさわってみる（3）：ちょっと振り返り - 豆腐とコンソメ" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://www.tohuandkonsome.site/entry/2018/04/12/205328">www.tohuandkonsome.site</a></cite></p>

-----
--------
AUTHOR: konoemario
TITLE: 
BASENAME: 2018/03/22/105043
STATUS: Draft
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 03/22/2018 10:50:43
-----
BODY:
<h2>デーモン化したDocker</h2>

<p>デーモンと聞くと、こんな感じだけれども、</p>

<p>システムの世界だとバックグラウンドで動くプログラムを指すみたい。</p>

<p>とりあえず実行してみよう。</p>

<p><b>デーモンとして動かす</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>docker run <span class="synSpecial">-d</span> ubuntu:14.04 /bin/sh <span class="synSpecial">-c</span> <span class="synStatement">&quot;</span><span class="synConstant">while true; do echo hello world; sleep 1; done</span><span class="synStatement">&quot;</span>
4ce8869a2d56231998eae86cd339f42c30553f6abd35401f88e6d54ec507cc6a
</pre>


<p><br/></p>

<p>ポイントは'-d'オプション。これをつけることでバックグラウンドで実行してくれるみたい。<br/>
実行結果は、謎の文字列が表示されるんだけれども、どうやらコンテナIDみたい。</p>

<p><code>docker ps</code>でもコンテナIDが確認できるんだけれども、こちらのIDは短縮系みたい。</p>

<p><b>実行されているコンテナのIDを表示する</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ docker ps
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS               NAMES
4ce8869a2d56        ubuntu:14.04        <span class="synStatement">&quot;</span><span class="synConstant">/bin/sh -c 'while...</span><span class="synStatement">&quot;</span>   <span class="synConstant">15</span> seconds ago      Up <span class="synConstant">15</span> seconds                           quizzical_kowalevski
</pre>


<p><br/></p>

<p>試しに、オラ！オラ！と同じコマンドを叩いてみると、叩いた分だけコンテナがつくられることがわかった。　　</p>

<p><d>デーモンを3個つくる</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink><span class="synStatement">[</span>vagrant@localhost docker_test<span class="synStatement">]</span>$ docker run <span class="synSpecial">-d</span> ubuntu:14.04 /bin/sh <span class="synSpecial">-c</span> <span class="synStatement">&quot;</span><span class="synConstant">while true; do echo hello world; sleep 1; done</span><span class="synStatement">&quot;</span>
64c6f7dc5fc4b36753973971ceaa7e0b4f90ca7ee41dd0088f11dafc482f323c
<span class="synStatement">[</span>vagrant@localhost docker_test<span class="synStatement">]</span>$ docker run <span class="synSpecial">-d</span> ubuntu:14.04 /bin/sh <span class="synSpecial">-c</span> <span class="synStatement">&quot;</span><span class="synConstant">while true; do echo hello world; sleep 1; done</span><span class="synStatement">&quot;</span>
944b34729fc51c4fd3bfe4c6789edf5ff7f60c4baa8cc4036b16cd4a7ee12975
<span class="synStatement">[</span>vagrant@localhost docker_test<span class="synStatement">]</span>$ docker run <span class="synSpecial">-d</span> ubuntu:14.04 /bin/sh <span class="synSpecial">-c</span> <span class="synStatement">&quot;</span><span class="synConstant">while true; do echo hello world; sleep 1; done</span><span class="synStatement">&quot;</span>
5bc9a22c81a29a3c74af49ec8a445075b90845b1fc6bd91ffd716e462071d137
<span class="synStatement">[</span>vagrant@localhost docker_test<span class="synStatement">]</span>$ docker ps
CONTAINER ID        IMAGE               COMMAND                  CREATED              STATUS              PORTS               NAMES
5bc9a22c81a2        ubuntu:14.04        <span class="synStatement">&quot;</span><span class="synConstant">/bin/sh -c 'while...</span><span class="synStatement">&quot;</span>   <span class="synConstant">3</span> seconds ago        Up <span class="synConstant">2</span> seconds                            modest_goldwasser
944b34729fc5        ubuntu:14.04        <span class="synStatement">&quot;</span><span class="synConstant">/bin/sh -c 'while...</span><span class="synStatement">&quot;</span>   <span class="synConstant">4</span> seconds ago        Up <span class="synConstant">3</span> seconds                            romantic_wozniak
64c6f7dc5fc4        ubuntu:14.04        <span class="synStatement">&quot;</span><span class="synConstant">/bin/sh -c 'while...</span><span class="synStatement">&quot;</span>   <span class="synConstant">5</span> seconds ago        Up <span class="synConstant">4</span> seconds                            compassionate_visvesvaraya
4ce8869a2d56        ubuntu:14.04        <span class="synStatement">&quot;</span><span class="synConstant">/bin/sh -c 'while...</span><span class="synStatement">&quot;</span>   About a minute ago   Up About a minute                       quizzical_kowalevski
</pre>


<p><br/></p>

-----
--------
AUTHOR: konoemario
TITLE: Dockerをさわってみる（１）：HelloWorld
BASENAME: 2018/03/21/193730
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 03/21/2018 19:37:30
CATEGORY: docker
CATEGORY: プログラム
IMAGE: https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20180321/20180321184125.png
-----
BODY:
<h1 id="日記">日記</h1>

<p>久々の更新になります。<br/>
転職後初の案件が少し落ち着いたので、この機会に反省がてらいろいろと試したいと思っております。</p>

<p>わからないことだらけで足元が固まってない中で、自分の書いたコードが実際に運用されていくと思うと恐怖を感じている今日このごろです。</p>

<p><br/></p>

<h1 id="本題">本題</h1>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20180321/20180321184125.png" alt="f:id:konoemario:20180321184125p:plain" title="f:id:konoemario:20180321184125p:plain" class="hatena-fotolife" itemprop="image"></span></p>

<p><br/></p>

<p>と、いうことでdockerをさわってみたいと思います。</p>

<ul class="table-of-contents">
    <li><a href="#日記">日記</a></li>
    <li><a href="#本題">本題</a><ul>
            <li><a href="#Vagrantで仮想マシーンを作成する">Vagrantで仮想マシーンを作成する</a><ul>
                    <li><a href="#Vagrantの設定をする">Vagrantの設定をする</a></li>
                </ul>
            </li>
            <li><a href="#WindowsでAWS-Linixが起動しないとき">WindowsでAWS Linixが起動しないとき</a></li>
            <li><a href="#仮想マシーン上でdockerコンテナを使う">仮想マシーン上でdockerコンテナを使う</a><ul>
                    <li><a href="#dockerをインストールする">dockerをインストールする</a></li>
                    <li><a href="#さっそくためしてみる">さっそくためしてみる</a><ul>
                            <li><a href="#HelloWorld">HelloWorld</a></li>
                            <li><a href="#インタラクティブなコンテナ">インタラクティブなコンテナ</a></li>
                            <li><a href="#デーモン化したDocker">デーモン化したDocker</a><ul>
                                    <li><a href="#追記">追記</a></li>
                                </ul>
                            </li>
                        </ul>
                    </li>
                    <li><a href="#ここまでのまとめ">ここまでのまとめ</a></li>
                </ul>
            </li>
        </ul>
    </li>
</ul>

<h2 id="Vagrantで仮想マシーンを作成する">Vagrantで仮想マシーンを作成する</h2>

<p>あれ、dockerじゃないの？というところですが、お家のPCがMacだったり職場のPCがWindowsだったりとするので、とりあえずVagrantで仮想マシンをひとつ用意した上でdockerを使うことにしました。</p>

<p>イメージはこんな感じです！<br/>
わかりやすい！</p>

<p><figure class="figure-image figure-image-fotolife" title="わかりやすいイメージ"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20180321/20180321185641.png" alt="f:id:konoemario:20180321185641p:plain" title="f:id:konoemario:20180321185641p:plain" class="hatena-fotolife" itemprop="image"></span><figcaption>わかりやすいイメージ</figcaption></figure></p>

<p><br/></p>

<p>Vagrantはすでに導入済みなので、そのへんは省略するよ！</p>

<h3 id="Vagrantの設定をする">Vagrantの設定をする</h3>

<p>まずは、母体のホストマシンでの作業になります。<br/>
Macであればターミナル、WindowsであればPowerShellあたりになるのでしょうか。</p>

<p>お家ではMacなので、以降はMacでの作業になります。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20180321/20180321190334.png" alt="f:id:konoemario:20180321190334p:plain" title="f:id:konoemario:20180321190334p:plain" class="hatena-fotolife" itemprop="image"></span></p>

<p>最初に、作業ディレクトリを適当な場所に用意します。</p>

<p><b>作業ディレクトリを用意する</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ <span class="synStatement">mkdir</span> vagrant/aws-linux/vagrant <span class="synSpecial">-p</span>
</pre>


<p><br/>
後ほど、記載していますが、使用するOSはaws-linuxにするので、ディレクトリ名につけています。</p>

<p>また、必要になるかわかりませんが、あったら便利なので仮想OSと共有するディレクトリを作成しときます。  <br/>
<b>仮想OSと共有するディレクトリを作成</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ <span class="synStatement">mkdir</span> vagrant/aws-linux/data
</pre>


<p><br/></p>

<p>それでは、<code>Vagrantfile</code>を作成していきます。</p>

<p><b>Vagrantfileの作成</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ <span class="synStatement">cd</span> vagrant/aws-linux/vagrant 
$ vagrant init
$ <span class="synStatement">ls</span>
Vagrantfile
</pre>


<p><br/></p>

<p><code>Vagrantfile</code>が作成されましたかね？<br/>
このファイルにどのBox(OSみたいなものなのかな？)を使うか等、いろいろ書くことができるみたいです。</p>

<p>この時点でのディレクトリ構成はこんな感じです。</p>

<p><b>ディレクトリ構成</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>aws-linux/
├── data
└── vagrant
    └── Vagrantfile
</pre>


<p><br/></p>

<p>では、Vagrantfileを編集していきます。</p>

<p>以下は、修正した箇所のみ抜粋してます。</p>

<p><b>Vagrantfileの抜粋</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>config.vm.box <span class="synStatement">=</span> <span class="synStatement">&quot;</span><span class="synConstant">mvbcoding/awslinux</span><span class="synStatement">&quot;</span>
config.vm.network <span class="synStatement">&quot;</span><span class="synConstant">forwarded_port</span><span class="synStatement">&quot;</span>, guest: <span class="synConstant">80</span>, host: <span class="synConstant">8000</span>
config.vm.network <span class="synStatement">&quot;</span><span class="synConstant">private_network</span><span class="synStatement">&quot;</span>, ip: <span class="synStatement">&quot;</span><span class="synConstant">192.168.33.34</span><span class="synStatement">&quot;</span>
config.vm.synced_folder <span class="synStatement">&quot;</span><span class="synConstant">../data</span><span class="synStatement">&quot;</span>, <span class="synStatement">&quot;</span><span class="synConstant">/vagrant_data</span><span class="synStatement">&quot;</span>
</pre>


<p><br/></p>

<p>上から適当に見ていきましょう！</p>

<p>まず、使用するboxですが、「AWS Linux」にしています。  <br/>
<code>mvbcoding/awslinux</code>ってやつですね。<br/>
<code>vm.box</code>に書いてあげると、<code>Vagrant Cloud</code>なるサイトから対応するboxをとってきてくれるみたい。すごい。</p>

<p><a href="https://app.vagrantup.com/mvbcoding/boxes/awslinux">Vagrant box mvbcoding/awslinux - Vagrant Cloud</a></p>

<p>「AWS Linux」にした理由は、今後AWSも使っていきたいなぁという思いだけなので、CentOSでもUbuntuでもなんでもよかったりします。</p>

<p>続いて、「forwarded_port」ですが、ホストマシン（自分の場合だとMac)からブラウザで「<a href="http://localhost:8000">http://localhost:8000</a>」とした場合、仮想マシンのポート80を見に行ってね！という設定になります。</p>

<p>「private_network」は単純に仮想マシーンのIPアドレスになります。あんまり意味があるかはわかりませんが、とりあえず決め打ちで「192.168.33.34」としています。</p>

<p>最後の「vm.synced_folder 」ですが、ホストマシンと仮想マシンで共有するディレクトリを指定しています。</p>

<p>だいぶ適当ですが、ここまできたら仮想マシンを起動してみます。</p>

<p><b>仮想マシンの起動</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ vagrant up
Bringing machine <span class="synStatement">'</span><span class="synConstant">default</span><span class="synStatement">'</span> up with <span class="synStatement">'</span><span class="synConstant">virtualbox</span><span class="synStatement">'</span> provider...
<span class="synStatement">==&gt;</span> default: This machine used to live <span class="synError">in</span> /Users/konoe_mario/vagrant/aws-linux but it<span class="synStatement">'</span><span class="synConstant">s now at /Users/konoe_mario/vagrant/aws-linux/vagrant.</span>
<span class="synConstant">==&gt; default: Depending on your current provider you may need to change the name of</span>
<span class="synConstant">==&gt; default: the machine to run it as a different machine.</span>
<span class="synConstant">==&gt; default: Checking if box </span><span class="synStatement">'</span>mvbcoding/awslinux<span class="synStatement">'</span><span class="synConstant"> is up to date...</span>
<span class="synConstant">==&gt; default: Machine already provisioned. Run `vagrant provision` or use the `--provision`</span>
<span class="synConstant">==&gt; default: flag to force provisioning. Provisioners marked to run always will still run.</span>
</pre>


<p><br/></p>

<p>何やらいろいろと出てきますが、きっと起動しているはずだ、と信じて仮想マシンに接続してみます。</p>

<p><b>仮想マシンに接続</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ vagrant ssh
Last login: Wed Mar <span class="synConstant">21</span> <span class="synConstant">02</span>:<span class="synConstant">50</span>:<span class="synConstant">33</span> <span class="synConstant">2018</span> from 10.0.2.2

       __|  __|_  <span class="synError">)</span>
       _|  <span class="synPreProc">(</span><span class="synSpecial">     /   Amazon Linux AMI</span>
<span class="synSpecial">      ___</span><span class="synStatement">|</span><span class="synSpecial">\___</span><span class="synStatement">|</span><span class="synSpecial">___</span><span class="synStatement">|</span>

<span class="synSpecial">https://aws.amazon.com/amazon-linux-ami/2017.03-release-notes/</span>
<span class="synConstant">30</span><span class="synSpecial"> package</span><span class="synPreProc">(</span><span class="synSpecial">s</span><span class="synPreProc">)</span><span class="synSpecial"> needed for security, out of </span><span class="synConstant">39</span><span class="synSpecial"> available</span>
<span class="synSpecial">Run </span><span class="synStatement">&quot;</span><span class="synConstant">sudo yum update</span><span class="synStatement">&quot;</span><span class="synSpecial"> to apply all updates.</span>
<span class="synSpecial">Amazon Linux version 2017.09 is available.</span>
</pre>


<p><br/></p>

<p>おおう、無事接続できました。</p>

<p>Windowsの場合は、<code>vagrant ssh</code>できないので別途vagrantのプラグインを導入して<code>vagrant teraterm</code>すると便利かと思います。</p>

<p>参考にさせていただいた記事
<iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fblog.pg1x.com%2F2015%2F10%2F31%2F20151031233246%2F" title="vagrant teraterm が便利すぎてしょうがない件" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://blog.pg1x.com/2015/10/31/20151031233246/">blog.pg1x.com</a></cite></p>

<p><br/></p>

<p>とりあえず、これで仮想マシンを用意することができました。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20180321/20180321191110.png" alt="f:id:konoemario:20180321191110p:plain" title="f:id:konoemario:20180321191110p:plain" class="hatena-fotolife" itemprop="image"></span></p>

<p><br/></p>

<h2 id="WindowsでAWS-Linixが起動しないとき">WindowsでAWS Linixが起動しないとき</h2>

<p>そういえば起動しなかったことがあるので、以下を追記するよ！</p>

<p><a href="https://gist.github.com/gyohk/fa3deb4e850c697789b785d97bd5f605">mvbcoding/awslinux &#x306E;vagrant box&#x304C;Windows&#x3067;&#x8D77;&#x52D5;&#x3057;&#x306A;&#x3044;&#x554F;&#x984C; &middot; GitHub</a></p>

<p><br/></p>

<h2 id="仮想マシーン上でdockerコンテナを使う">仮想マシーン上でdockerコンテナを使う</h2>

<p>ようやく本題になります。</p>

<h3 id="dockerをインストールする">dockerをインストールする</h3>

<p>dockerの導入については、AWS公式のドキュメントがあったので、こちらを参考にしました。</p>

<p><a href="https://docs.aws.amazon.com/ja_jp/AmazonECS/latest/developerguide/docker-basics.html">Amazon ECS &#x306B;&#x304A;&#x3051;&#x308B; Docker &#x306E;&#x57FA;&#x672C; - Amazon Elastic Container Service</a></p>

<p><b>パッケージの更新</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ sudo yum update <span class="synSpecial">-y</span>
</pre>


<p><br/></p>

<p><b>dockerのインストール</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ sudo yum install <span class="synSpecial">-y</span> docker
</pre>


<p><br/></p>

<p><b>dockerのサービスを開始させる</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ sudo service docker <span class="synStatement">start</span>
</pre>


<p><br/></p>

<p><b>dockerの確認</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ docker <span class="synSpecial">--version</span>
Docker version 17.03.2-ce, build 7392c3b/17.03.2-ce
</pre>


<p><br/></p>

<p>また、sudoを毎回打つのも面倒なので、デフォルトのvagrantユーザーをdokerグループに追加してあげることにします。</p>

<p><b>vagrantユーザーをdockerグループに追加</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>sudo usermod <span class="synSpecial">-a</span> <span class="synSpecial">-G</span> docker vagrant
</pre>


<p><br/></p>

<p>グループに追加したら、一度ログアウトして、再度ログインすると反映されます。</p>

<p>ログインしたら、とりあえず<code>docker ps</code>と適当なdockerのコマンドを叩いて問題ないか確認します。</p>

<p>反映できてないと、<code>permission denied</code>で怒られます。</p>

<p><b>だめな例</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ docker images
docker: Got permission denied <span class="synStatement">while trying to connect to the Docker daemon socket at unix:///var/run/docker.sock: Post http://%2Fvar%2Frun%2Fdocker.sock/v1.27/containers/create: dial unix /var/run/docker.sock: connect: permission denied.</span>
</pre>


<p><br/></p>

<h3 id="さっそくためしてみる">さっそくためしてみる</h3>

<p>これでdockerを使う最低限の準備は整ったはず！</p>

<p>いざ！というところで、</p>

<p><figure class="figure-image figure-image-fotolife" title="顔色が悪い豚"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20180321/20180321191543.png" alt="f:id:konoemario:20180321191543p:plain" title="f:id:konoemario:20180321191543p:plain" class="hatena-fotolife" itemprop="image"></span><figcaption>顔色が悪い豚</figcaption></figure></p>

<p>という状態になってしまいます。</p>

<p>本を買おうかな、と思ったりもしたのですが増えていくだけの本に精神的にやられそうになっちゃいます。</p>

<p>なので、ここは公式チュートリアルをやってみることにします。</p>

<p><a href="http://docs.docker.jp/engine/tutorials/dockerizing.html">&#x30B3;&#x30F3;&#x30C6;&#x30CA;&#x3067; Hello world &mdash; Docker-docs-ja 17.06.Beta &#x30C9;&#x30AD;&#x30E5;&#x30E1;&#x30F3;&#x30C8;</a></p>

<p><br/></p>

<h4 id="HelloWorld">HelloWorld</h4>

<p>まずは恒例のHelloWolrdです。<br/>
いままで挨拶だけして二度とこなかったものはたくさんあるかと思いますが、そんなことは気にしちゃいけません！</p>

<p>公式に解説があるので、ここでは感想だけを述べるという暴挙にでています。</p>

<p>まずは、<code>docker run</code>をしてみます。</p>

<p><b>HelloWorld</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ docker run ubuntu:14.04 /bin/<span class="synStatement">echo</span><span class="synConstant"> </span><span class="synStatement">'</span><span class="synConstant">Hello world</span><span class="synStatement">'</span>

Unable to <span class="synStatement">find</span> image <span class="synStatement">'</span><span class="synConstant">ubuntu:14.04</span><span class="synStatement">'</span> locally
14.04: Pulling from library/ubuntu
99ad4e3ced4d: Pull <span class="synStatement">complete</span> 
ec5a723f4e2a: Pull <span class="synStatement">complete</span> 
2a175e11567c: Pull <span class="synStatement">complete</span> 
8d26426e95e0: Pull <span class="synStatement">complete</span> 
46e451596b7c: Pull <span class="synStatement">complete</span> 
Digest: sha256:ed49036f63459d6e5ed6c0f238f5e94c3a0c70d24727c793c48fded60f70aa96
Status: Downloaded newer image <span class="synStatement">for</span> ubuntu:14.04
Hello world
</pre>


<p><br/></p>

<p>Ubuntuのimageをとってきて、Ubuntu上でechoコマンドを実行させているイメージですかね。</p>

<p>毎回、OSイメージを落としてくるのかな？なんて思ったのですが、持ってきたイメージはローカルに保存されているみたいです。<br/>
<code>docker images</code>とたたくとイメージを確認することができました。</p>

<p><b>存在しているimageを確認する</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ docker images
ubuntu              14.04               a35e70164dfb        <span class="synConstant">2</span> weeks ago         <span class="synConstant">222</span> MB
</pre>


<p><br/></p>

<p>試しに、再度<code>docker run</code>とやってみるとダウンロードうんたらがなく、さくっと実行できることがわかります。</p>

<p><br/></p>

<h4 id="インタラクティブなコンテナ">インタラクティブなコンテナ</h4>

<p>インタラクティブってなんぞ、ということなんですが自分もよくわからないので公式そのままの表現になっています。</p>

<p>さきほどの<code>docker run</code>コマンドに <code>-t</code>と<code>-i</code>オプションをつけています。</p>

<p><b>インタラクティブななにか</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ docker run <span class="synSpecial">-t</span> <span class="synSpecial">-i</span> ubuntu:14.04 /bin/bash
root@b7b5fbe3408e:/# 
</pre>


<p><br/>
すると、ターミナルの様子が・・・
ここはもしかして、dockerが立ち上げたUbutunの中ではなかろうか・・・</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20180321/20180321192644.png" alt="f:id:konoemario:20180321192644p:plain" title="f:id:konoemario:20180321192644p:plain" class="hatena-fotolife" itemprop="image"></span>
<br/></p>

<p>とはいえ、Vagrantで仮想マシンにログインすることには慣れた身です。<br/>
勇気を出して、操作してみることにします。</p>

<p><b>勇気をだしてみる</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>root@b7b5fbe3408e:/# <span class="synStatement">cd</span> ~  
root@b7b5fbe3408e:~# <span class="synStatement">ls</span>
root@b7b5fbe3408e:~# <span class="synStatement">pwd</span>
/root
root@b7b5fbe3408e:~# <span class="synStatement">touch</span> uhyoooo.txt
root@b7b5fbe3408e:~# <span class="synStatement">ls</span>
uhyoooo.txt
</pre>


<p><br/>
適当にrootのホームディレクトリ配下にファイルを置いてみることにました。<br/>
やることやってやったぜと思ったので、exitして抜けましょう。</p>

<p><b>お家に帰る</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>root@b7b5fbe3408e:~# <span class="synStatement">exit</span>
<span class="synStatement">exit</span>
<span class="synStatement">[</span>vagrant@localhost ~<span class="synStatement">]</span>$ 
</pre>


<p><br/></p>

<p>Vagrantが暖かく迎えてくれました。</p>

<p>さて、一度帰れると思ったら、もう平気です。<br/>
再度、アクセスしてみます。</p>

<p><b>再訪問</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ docker run <span class="synSpecial">-t</span> <span class="synSpecial">-i</span> ubuntu:14.04 /bin/bash 
root@eabadc1d22c8:/# <span class="synStatement">cd</span> ~
root@eabadc1d22c8:~# <span class="synStatement">ls</span>
</pre>


<p><br/></p>

<p>あれ、<code>uhyoooo.txt</code>が消えちゃています。</p>

<p>僕の思い出が、、、という悲しみであふれるのですが、とりあえず悲しみは脇にに置いて続けます。</p>

<p><br/></p>

<h4 id="デーモン化したDocker">デーモン化したDocker</h4>

<p>デーモンと聞くと、こんな感じだけれども、</p>

<p><figure class="figure-image figure-image-fotolife" title="デーモン"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20180322/20180322115837.png" alt="f:id:konoemario:20180322115837p:plain" title="f:id:konoemario:20180322115837p:plain" class="hatena-fotolife" itemprop="image"></span><figcaption>デーモン</figcaption></figure></p>

<p><br/></p>

<p>システムの世界だとバックグラウンドで動くプログラムを指すみたい。</p>

<p>とりあえず実行してみよう。</p>

<p><b>デーモンとして動かす</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>docker run <span class="synSpecial">-d</span> ubuntu:14.04 /bin/sh <span class="synSpecial">-c</span> <span class="synStatement">&quot;</span><span class="synConstant">while true; do echo hello world; sleep 1; done</span><span class="synStatement">&quot;</span>
4ce8869a2d56231998eae86cd339f42c30553f6abd35401f88e6d54ec507cc6a
</pre>


<p><br/></p>

<p>ポイントは'-d'オプション。これをつけることでバックグラウンドで実行してくれるみたい。<br/>
実行結果は、謎の文字列が表示されるんだけれども、どうやらコンテナIDみたい。</p>

<p><code>docker ps</code>でもコンテナIDが確認できるんだけれども、こちらのIDは短縮系みたい。</p>

<p><b>実行されているコンテナのIDを表示する</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ docker ps
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS               NAMES
4ce8869a2d56        ubuntu:14.04        <span class="synStatement">&quot;</span><span class="synConstant">/bin/sh -c 'while...</span><span class="synStatement">&quot;</span>   <span class="synConstant">15</span> seconds ago      Up <span class="synConstant">15</span> seconds                           quizzical_kowalevski
</pre>


<p><br/></p>

<p>試しに、オラ！オラ！と同じコマンドを叩いてみると、叩いた分だけコンテナがつくられることがわかった。　　</p>

<p><d>デーモンを3個つくる</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink><span class="synStatement">[</span>vagrant@localhost docker_test<span class="synStatement">]</span>$ docker run <span class="synSpecial">-d</span> ubuntu:14.04 /bin/sh <span class="synSpecial">-c</span> <span class="synStatement">&quot;</span><span class="synConstant">while true; do echo hello world; sleep 1; done</span><span class="synStatement">&quot;</span>
64c6f7dc5fc4b36753973971ceaa7e0b4f90ca7ee41dd0088f11dafc482f323c
<span class="synStatement">[</span>vagrant@localhost docker_test<span class="synStatement">]</span>$ docker run <span class="synSpecial">-d</span> ubuntu:14.04 /bin/sh <span class="synSpecial">-c</span> <span class="synStatement">&quot;</span><span class="synConstant">while true; do echo hello world; sleep 1; done</span><span class="synStatement">&quot;</span>
944b34729fc51c4fd3bfe4c6789edf5ff7f60c4baa8cc4036b16cd4a7ee12975
<span class="synStatement">[</span>vagrant@localhost docker_test<span class="synStatement">]</span>$ docker run <span class="synSpecial">-d</span> ubuntu:14.04 /bin/sh <span class="synSpecial">-c</span> <span class="synStatement">&quot;</span><span class="synConstant">while true; do echo hello world; sleep 1; done</span><span class="synStatement">&quot;</span>
5bc9a22c81a29a3c74af49ec8a445075b90845b1fc6bd91ffd716e462071d137
<span class="synStatement">[</span>vagrant@localhost docker_test<span class="synStatement">]</span>$ docker ps
CONTAINER ID        IMAGE               COMMAND                  CREATED              STATUS              PORTS               NAMES
5bc9a22c81a2        ubuntu:14.04        <span class="synStatement">&quot;</span><span class="synConstant">/bin/sh -c 'while...</span><span class="synStatement">&quot;</span>   <span class="synConstant">3</span> seconds ago        Up <span class="synConstant">2</span> seconds                            modest_goldwasser
944b34729fc5        ubuntu:14.04        <span class="synStatement">&quot;</span><span class="synConstant">/bin/sh -c 'while...</span><span class="synStatement">&quot;</span>   <span class="synConstant">4</span> seconds ago        Up <span class="synConstant">3</span> seconds                            romantic_wozniak
64c6f7dc5fc4        ubuntu:14.04        <span class="synStatement">&quot;</span><span class="synConstant">/bin/sh -c 'while...</span><span class="synStatement">&quot;</span>   <span class="synConstant">5</span> seconds ago        Up <span class="synConstant">4</span> seconds                            compassionate_visvesvaraya
4ce8869a2d56        ubuntu:14.04        <span class="synStatement">&quot;</span><span class="synConstant">/bin/sh -c 'while...</span><span class="synStatement">&quot;</span>   About a minute ago   Up About a minute                       quizzical_kowalevski
</pre>


<p><br/></p>

<p>さて、たくさんのコンテナが生成されたわけだけれども、各コンテナは以下のシェルスクリプトを実行しているわけだけれども<br/>
実行結果はどうやってみたらいいんだろう。</p>

<p><b>実行されているシェルスクリプト</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink><span class="synComment">#!/bin/sh</span>
<span class="synComment"># 延々とhello worldを出力しつづけるシェルスクリプト</span>
<span class="synStatement">while true;</span>
<span class="synStatement">do</span>
        <span class="synStatement">echo</span><span class="synConstant"> hello world</span>;
        <span class="synStatement">sleep</span> <span class="synConstant">1</span>;
<span class="synStatement">done</span>;
</pre>


<p><br/></p>

<p>どうやら、<code>docker logs &lt;コンテナ名&gt;</code> で参照できるみたい。<br/>
<b>デーモン化されたdockerコンテナを参照する</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ docker logs modest_goldwasser
hello world
hello world
hello world
hello world
hello world
....
</pre>


<p>何かを訴えるような、おびただしい<code>hello world</code>を垣間見てしまった。</p>

<p>このままだと、何かがあふれちゃう！と心配になるので止めてあげます。</p>

<p><b>デーモンを止める</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ docker <span class="synStatement">stop</span>  modest_goldwasser
</pre>


<p><code>docker stop</code>で停止したコンテナは、<code>docker ps</code>の一覧からはいなくなっていることが確認できた。</p>

<p><b>デーモンが消えた(増やしたデーモンも含めstopさせた)</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ docker ps
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES
</pre>


<p>公式のチュートリアルをちゃんと読んでみると、<code>docker logs</code>は<strong>コンテナの標準出力を表示する</strong>って書かれている。<br/>
「標準出力」ってLinuxの標準入力・標準出力・標準エラー出力の標準出力のことだね！  <br/>
端的に説明できないのでこの辺はぐーぐる先生に頼んでみてね！</p>

<p><br/></p>

<h5 id="追記">追記</h5>

<p><code>docker stop</code>でコンテナを止めて一安心！としていたんだけれども、<code>docker ps -l</code>とすると、停止していたコンテナも表示されることがわかる。</p>

<p><b>コンテナの一覧を表示(ver詳細)</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ docker ps <span class="synSpecial">-l</span>
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                           PORTS               NAMES
944b34729fc5        ubuntu:14.04        <span class="synStatement">&quot;</span><span class="synConstant">/bin/sh -c 'while...</span><span class="synStatement">&quot;</span>   <span class="synConstant">2</span> hours ago         Exited <span class="synPreProc">(</span><span class="synConstant">137</span><span class="synPreProc">)</span> About an hour ago                       romantic_wozniak
</pre>


<p><br/>
なので、コンテナが削除されているわけではなく、停止しているだけだったみたい。<br/>
停止しているだけなので、もう一度動かしたければ、<code>docker start</code>で起動できる！</p>

<p><b>コンテナの再起動</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ docker <span class="synStatement">start</span> romantic_wozniak
</pre>


<p><br/></p>

<p>いらなくなったコンテナは<code>docker rm</code>とすることで削除できる。<br/>
チュートリアルには、</p>

<blockquote><p>常に、最後にコンテナを削除するのを忘れないでください。</p></blockquote>

<p>と書いてあるけれどもなぜだろう。</p>

<p><b>コンテナの削除</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ docker <span class="synStatement">rm</span> romantic_wozniak
</pre>


<p><br/></p>

<h3 id="ここまでのまとめ">ここまでのまとめ</h3>

<ul>
<li><code>docker run &lt;イメージ名&gt; &lt;コンテナ内で実行するコマンド&gt;</code> : イメージをもとにコンテナを起動してコマンドを実行する</li>
<li><code>docker ps</code> ：(起動している？)コンテナの一覧を表示する</li>
<li><p><code>docker stop &lt;コンテナ名&gt;</code>：コンテナを停止する</p></li>
<li><p><code>-t</code>  <code>-i</code> ：コンテナと対話する。'-t'オプションがターミナルの割り当て。 <br/>
<code>-i</code>オプションがコンテナの標準入力と標準エラー出力を得る。
<code>-t</code>と<code>-i</code>を別々に使うことはあるのだろうか。</p></li>
<li><code>-d</code>：コンテナをバックグラウンド(デーモン)として実行する</li>
</ul>


<p>次回も引き続き公式チュートリアルを進めていこうと思います。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=http%3A%2F%2Fwww.tohuandkonsome.site%2Fentry%2F2018%2F03%2F26%2F101605" title="Dockerをさわってみる（２）：シンプルなWebアプリケーションを実行する - 豆腐とコンソメ" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://www.tohuandkonsome.site/entry/2018/03/26/101605">www.tohuandkonsome.site</a></cite></p>

-----
--------
AUTHOR: konoemario
TITLE: dockerメモ
BASENAME: 2018/03/21/183213
STATUS: Draft
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 03/21/2018 18:32:13
-----
BODY:
<h4></h4>

<p><a href="https://github.com/KeitaMoromizato/docker-sample-1">https://github.com/KeitaMoromizato/docker-sample-1</a></p>

<h2>docker compose</h2>

<p>dockerのコンテナ同士を連携させるのは、結構大変みたい。
ところがcomposeを使うと楽になるという機能。</p>

<p><a href="https://qiita.com/y_hokkey/items/d51e69c6ff4015e85fce">https://qiita.com/y_hokkey/items/d51e69c6ff4015e85fce</a></p>

<p>インストールした。
<a href="https://docs.docker.com/compose/install/#prerequisites">Install Docker Compose | Docker Documentation</a></p>

<p>インストールを、vagrantユーザーでやったせいか、docker-composeのパスがsudoだと通らない。
sudoなしでできるようにdockerグループを追加した。</p>

<p><a href="https://qiita.com/DQNEO/items/da5df074c48b012152ee">Docker&#x30B3;&#x30DE;&#x30F3;&#x30C9;&#x3092;sudo&#x306A;&#x3057;&#x3067;&#x5B9F;&#x884C;&#x3059;&#x308B;&#x65B9;&#x6CD5; - Qiita</a></p>

<h3>docker-sample2</h3>

<p>localhost:8080 にアクセスすると表示されるとのことだけれども、vagrant上にdockerがのっかってるので、vagrantfileにportforwardの設定を追加する。</p>

<p>dokcer-compose down で落とせる</p>

<p>一回、Laravelでやったほうがわかりやすいかもしれないので。</p>

<p><a href="https://qiita.com/meidaimae/items/1b5902e2e520ece34b9a">Docker&#x3067;laravel&#x74B0;&#x5883;&#x69CB;&#x7BC9;(php-fpm,nginx,mysql,redis) - Qiita</a></p>

-----
--------
AUTHOR: konoemario
TITLE: 仮想ラズパイ環境をVagrantで構築する
BASENAME: 2018/03/21/105529
STATUS: Draft
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 03/21/2018 10:55:29
-----
BODY:
<p><a href="http://vdeep.net/vagrant-cloud">&#x300E;Vagrant Cloud&#x300F;&#x3092;&#x5229;&#x7528;&#x3057;&#x3066;Vagrant&#x306E;Box&#x3092;&#x8FFD;&#x52A0;&#x3057;&#x3066;&#x307F;&#x3088;&#x3046; | vdeep</a></p>

<p><b>VagrantのVersion</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ vagrant <span class="synSpecial">-v</span>
Vagrant 2.0.0
</pre>




<pre class="code lang-sh" data-lang="sh" data-unlink>$ <span class="synStatement">mkdir</span> debian
</pre>




<pre class="code lang-sh" data-lang="sh" data-unlink>$ vagrant init debian/jessie64 
A <span class="synSpecial">`Vagrantfile`</span> has been placed <span class="synError">in</span> this directory. You are now
ready to <span class="synSpecial">`vagrant up`</span> your first virtual environment! Please <span class="synStatement">read</span>
the comments <span class="synError">in</span> the Vagrantfile as well as documentation on
<span class="synSpecial">`vagrantup.com`</span> <span class="synStatement">for</span> more information on using Vagrant.
</pre>




<pre class="code lang-sh" data-lang="sh" data-unlink>config.vm.network <span class="synStatement">&quot;</span><span class="synConstant">private_network</span><span class="synStatement">&quot;</span>, ip: <span class="synStatement">&quot;</span><span class="synConstant">192.168.33.11</span><span class="synStatement">&quot;</span>
</pre>


-----
--------
AUTHOR: konoemario
TITLE: ラズパイにNode.js + NginxでWebサービスを公開するまで
BASENAME: 2018/03/20/182645
STATUS: Draft
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 02/24/2018 20:47:16
-----
BODY:
<h2>ユーザーを追加する</h2>

<p>参考にさせていただいた記事<br/>
<a href="https://eng-entrance.com/linux-user-add">&#x5B9F;&#x306F;&#x7C21;&#x5358;&#xFF01;Linux&#x30E6;&#x30FC;&#x30B6;&#x306E;&#x4F5C;&#x6210;&#x65B9;&#x6CD5;&#x3068;&#x8FFD;&#x52A0;&#x65B9;&#x6CD5;</a></p>

<p><a href="https://qiita.com/R-STYLE/items/b481ba2d695ddf8bcee4">RaspberryPi&#x3092;Raspbian&#x3067;&#x4F7F;&#x3046;&#x5834;&#x5408;&#x306E;&#x521D;&#x671F;&#x8A2D;&#x5B9A;&#x30E1;&#x30E2;&#xFF08;&#x30E6;&#x30FC;&#x30B6;&#x8FFD;&#x52A0;&#xFF09; - Qiita</a></p>

<p><a href="https://boel.jp/tips/vol63_nodejs2.html">node.js&#x30A2;&#x30D7;&#x30EA;&#x3092;Linux&#x30B5;&#x30FC;&#x30D0;&#x30FC;&#x3067;&#x516C;&#x958B;&#x3057;&#x3066;&#x307F;&#x3088;&#x3046; | TIPS | BOEL Inc. &#x30DC;&#x30A8;&#x30EB;</a></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ su -
</pre>




<pre class="code lang-sh" data-lang="sh" data-unlink>$ useradd <span class="synSpecial">-m</span> tohu
</pre>


<p>-mオプションはホームディレクトリを作ってくれる</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ groupadd app
</pre>




<pre class="code lang-sh" data-lang="sh" data-unlink>$ usermod <span class="synSpecial">-aG</span> app pi
</pre>


<p>変更するユーザー自身はログアウトしないと反映されないので注意。</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ chgrp <span class="synSpecial">-R</span> app html
</pre>




<pre class="code lang-sh" data-lang="sh" data-unlink>$ <span class="synStatement">ls</span> <span class="synSpecial">-l</span>
total <span class="synConstant">4</span>
drwxr-xr-x <span class="synConstant">3</span> root app <span class="synConstant">4096</span> Feb <span class="synConstant">24</span> <span class="synConstant">12</span>:<span class="synConstant">41</span> html
</pre>




<pre class="code lang-sh" data-lang="sh" data-unlink>pi@raspberrypi:/var/www$ sudo <span class="synStatement">chmod</span> <span class="synConstant">775</span> html
pi@raspberrypi:/var/www$ <span class="synStatement">ls</span> <span class="synSpecial">-l</span>
total <span class="synConstant">4</span>
drwxrwxr-x <span class="synConstant">3</span> root app <span class="synConstant">4096</span> Feb <span class="synConstant">24</span> <span class="synConstant">12</span>:<span class="synConstant">41</span> html
</pre>


<p><br/></p>

<h2>Node.js</h2>

<h3>Node.jsのバージョンを管理するnodebrewをインストール</h3>

<p><b>nodebrewのインストール</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ curl <span class="synSpecial">-L</span> git.io/nodebrew | perl - setup

<span class="synStatement">========================================</span>
Add path:

<span class="synStatement">export</span><span class="synIdentifier"> PATH=</span><span class="synPreProc">$HOME</span>/.nodebrew/current/bin:<span class="synPreProc">$PATH</span>
<span class="synStatement">========================================</span>
</pre>


<p>パスを追加してねといわれるので、<code>.bash_profile</code>にパスを追加する。</p>

<p><b>.bash_profile</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ vi .bash_profile


<span class="synStatement">export</span><span class="synIdentifier"> PATH=</span><span class="synPreProc">$HOME</span>/.nodebrew/current/bin:<span class="synPreProc">$PATH</span>
</pre>


<p>環境変数を再度読み込む。</p>

<p><b>環境変数読み込み</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ <span class="synStatement">source</span> ~/.bash_profile
</pre>


<p><code>nodebrew</code>を叩いて、バージョンやらなんやらでてきてるのでできたっぽい。<br/>
<b>確認</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ nodebrew

nodebrew 0.9.8
</pre>


<h3>Node.jsをインストールする</h3>

<p><b>インストールできるバージョンの一覧を確認</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$  nodebrew <span class="synStatement">ls</span>-remote
</pre>


<p>現在(2018/2/24)のCurrentは公式によると、<code>v9.6.1</code>だったのでこれにする。</p>

<p><a href="https://nodejs.org/en/blog/">Node.js</a></p>

<p><b>Nodeをインストール</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ nodebrew install-binary v9.6.1
</pre>


<p><code>binary</code>をつけるとコンパイル済み？の状態をとってくるので、速攻でインストールが終わる。</p>

<p><b>バージョン選択と確認</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ nodebrew use v9.6.1
use v9.6.1

$ node <span class="synSpecial">-v</span>
v9.6.1
</pre>


<p>Node.jsはこれでいけた。</p>

<p>Node.jsのパッケージ管理ツールの`npm'もインストールしょうと思ったら、Node.jsに含まれていたので、そのまま使えた。</p>

<p><b>npmの確認</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>npm <span class="synSpecial">-v</span>
5.6.0
</pre>


<h2>Express</h2>

<h2>アプリケーションを置くディレクトリを作成</h2>

<pre class="code lang-sh" data-lang="sh" data-unlink>sudo <span class="synStatement">mkdir</span> /var/www/html/app <span class="synSpecial">-p</span>
</pre>


<p>所有者、およびグループを変更する</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>chown <span class="synSpecial">-R</span> user:group file
</pre>




<pre class="code lang-sh" data-lang="sh" data-unlink>$ npm init
</pre>




<pre class="code lang-sh" data-lang="sh" data-unlink>$ npm install express-generator <span class="synSpecial">--save</span>
</pre>




<pre class="code lang-sh" data-lang="sh" data-unlink>$ ./node_modules/.bin/express <span class="synSpecial">--view=pug</span> <span class="synSpecial">--css=sass</span> app

   create : app
   create : app/package.json
   create : app/app.js
   create : app/public
   create : app/routes
   create : app/routes/index.js
   create : app/routes/users.js
   create : app/views
   create : app/views/index.pug
   create : app/views/layout.pug
   create : app/views/error.pug
   create : app/bin
   create : app/bin/www
   create : app/public/javascripts
   create : app/public/images
   create : app/public/stylesheets
   create : app/public/stylesheets/style.sass

   install dependencies:
     $ <span class="synStatement">cd</span> app &amp;&amp; npm install

   run the app:
     $ <span class="synIdentifier">DEBUG</span>=app:* npm <span class="synStatement">start</span>
</pre>




<pre class="code lang-sh" data-lang="sh" data-unlink>$ <span class="synStatement">cd</span> app &amp;&amp; npm install
</pre>


<p>expressのインストールが結構長い</p>

<h3>お試しで起動</h3>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ npm run <span class="synStatement">start</span>

<span class="synStatement">&gt;</span> app@0.0.0 <span class="synStatement">start</span> /var/www/html/app/app
<span class="synStatement">&gt;</span> node ./bin/www
</pre>


<p>「http://ラズパイのIP:3000」でアクセスすると参照できる。</p>

<h3>foreverのインストール</h3>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ npm install forever <span class="synSpecial">-g</span>
</pre>




<pre class="code lang-sh" data-lang="sh" data-unlink>$ forever <span class="synStatement">start</span> bin/www
</pre>


<p>これで再度3000ポートにアクセスして起動することを確認する。</p>

<h3>nginx のインストール</h3>

<p>debian系で確認しよう</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>
</pre>




<pre class="code lang-sh" data-lang="sh" data-unlink>$ nginx <span class="synSpecial">-v</span>
nginx version: nginx/1.12.1
</pre>




<pre class="code lang-sh" data-lang="sh" data-unlink>sudo service nginx <span class="synStatement">start</span>
</pre>


<p>80ポートにアクセスして、nginxのWelcomeページが表示されることを確認する。</p>

<p><a href="https://qiita.com/azk0305/items/1b11689516169e04041a">&#x3055;&#x304F;&#x3089;&#x306E;VPS&#x306B;nginx&#x3068;Node.js&#x306E;&#x74B0;&#x5883;&#x3092;&#x69CB;&#x7BC9;&#x3057;&#x305F;&#x30E1;&#x30E2; - Qiita</a></p>

<h3>nginx経由でexpressを起動する</h3>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ <span class="synStatement">cd</span> /etc/nginx
</pre>


<p>nginx.confが設定ファイル。nginx.confの中には個別設定ファイル、conf.dを読むようになってる。</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ <span class="synStatement">cd</span> conf.d
</pre>




<pre class="code lang-sh" data-lang="sh" data-unlink>$ <span class="synStatement">ls</span>
virtual.conf
</pre>


<p><code>default.conf</code>を参考にとあるんだけれども、virtual.confしかない。
とりあえず<code>virutal.conf</code>をコピーしてつくろう。
<code>virutal.conf</code>自体はコメントアウトされてる。</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>sudo cp virtual.conf  express.conf
</pre>




<pre class="code lang-sh" data-lang="sh" data-unlink>upstream backend<span class="synSpecial">{</span>
        server localhost:<span class="synConstant">3000</span><span class="synStatement">;</span>
<span class="synSpecial">}</span>

server <span class="synSpecial">{</span>
    listen       <span class="synConstant">80</span><span class="synStatement">;</span>
    server_name ec2<span class="synConstant">-13-231-108</span>-7.ap-northeast-1.compute.amazonaws.com<span class="synStatement">;</span>

    location / <span class="synSpecial">{</span>
        <span class="synComment">#root   html;</span>
        <span class="synComment">#index  index.html index.htm;</span>
        proxy_pass http://backend<span class="synStatement">;</span>
    <span class="synSpecial">}</span>
<span class="synSpecial">}</span>
</pre>


-----
--------
AUTHOR: konoemario
TITLE: 1時間くらいでラズパイ3の設定とカメラモジュールの起動確認まで行う
BASENAME: 2018/02/19/211723
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 02/19/2018 21:17:23
CATEGORY: ラジコンシリーズ
CATEGORY: ラズパイ
CATEGORY: プログラム
-----
BODY:
<p>1時間くらいで、ラズパイのインストール、SSH接続、カメラモジュールの起動をやるよ！</p>

<p>以下は、どうでもよい経緯。</p>

<p>ちょっとやりたいことがあって、ラズパイのカメラを起動しようとした。<br/>
過去にラズパイを公開鍵認証に設定したことがあったんだけれども、肝心のペアとなる鍵が見つからなくって、ssh接続できない、どうしようとなってしまった。<br/>
冷静に考えれば、ssh接続じゃなくってラズパイをディスプレイに接続して起動して、再度鍵を発行すればよかったんだけれども、なぜか再インストールをする選択をしてしまった。</p>

<p>過去記事を参考にしてみたんだけれども、自分にとって微妙に痒いところに手が届かない内容だったので、新しく書くことにした。</p>

<ul class="table-of-contents">
    <li><a href="#用意するもの">用意するもの</a></li>
    <li><a href="#ラズパイのOSRaspbianをダウンロードする所要時間-20分-ネットワーク環境によって幅あり">ラズパイのOS、Raspbianをダウンロードする(所要時間 20分 ※ネットワーク環境によって幅あり)</a></li>
    <li><a href="#ラズパイのOSイメージを書く-所要時間-8分">ラズパイのOSイメージを書く (所要時間 8分)</a></li>
    <li><a href="#WiFiの設定-1分">WiFiの設定 (1分)</a></li>
    <li><a href="#ログインパスワードを変更する-1分">ログインパスワードを変更する (1分)</a></li>
    <li><a href="#ラズパイにリモートで接続できるよう設定する10分">ラズパイにリモートで接続できるよう設定する　(10分)</a><ul>
            <li><a href="#SSHで接続する">SSHで接続する</a></li>
            <li><a href="#IPアドレスを固定する">IPアドレスを固定する</a></li>
        </ul>
    </li>
    <li><a href="#カメラを接続する-5分">カメラを接続する (5分)</a></li>
    <li><a href="#カメラモジュール用のソフトウェアをインストールする-5分">カメラモジュール用のソフトウェアをインストールする (5分)</a></li>
    <li><a href="#カメラを起動する-1分">カメラを起動する (1分)</a></li>
</ul>

<h3 id="用意するもの">用意するもの</h3>

<ul>
<li>ラズパイ3 + 電源コード + HDMIケーブル</li>
<li>HDMIケーブルがつなげるディスプレイ(テレビとか)</li>
<li>マイクロSDカード 32GB (8GBもあれば十分)</li>
<li><p>キーボード・マウス(一時的に使用するだけなので他から流用してもいいい)</p></li>
<li><p>SDカードに書き込むためのPC</p></li>
<li><p>カメラモジュール  (Raspberry Pi Camera V2)</p></li>
</ul>


<p><div class="hatena-asin-detail"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B01ER2SKFS/hatena-blog-22/"><img src="https://images-fe.ssl-images-amazon.com/images/I/41oaX6czzQL._SL160_.jpg" class="hatena-asin-detail-image" alt="Raspberry Pi Camera V2" title="Raspberry Pi Camera V2"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B01ER2SKFS/hatena-blog-22/">Raspberry Pi Camera V2</a></p><ul><li><span class="hatena-asin-detail-label">出版社/メーカー:</span> Raspberry Pi</li><li><span class="hatena-asin-detail-label">メディア:</span> Personal Computers</li><li><a href="http://d.hatena.ne.jp/asin/B01ER2SKFS/hatena-blog-22" target="_blank">この商品を含むブログを見る</a></li></ul></div><div class="hatena-asin-detail-foot"></div></div></p>

<h3 id="ラズパイのOSRaspbianをダウンロードする所要時間-20分-ネットワーク環境によって幅あり">ラズパイのOS、Raspbianをダウンロードする(所要時間 20分 ※ネットワーク環境によって幅あり)</h3>

<p>今回は、RaspberryPi 3 + 32GBのSDカードを使うのでディスク容量、パフォーマンスもそこそこ余裕がありそう。</p>

<p>なので、設定が簡単なデスクトップ版<code>RASPBIAN STRETCH WITH DESKTOP</code>を選択する。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fwww.raspberrypi.org%2Fdownloads%2Fraspbian%2F" title="Download Raspbian for Raspberry Pi" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://www.raspberrypi.org/downloads/raspbian/">www.raspberrypi.org</a></cite></p>

<p><br/></p>

<h3 id="ラズパイのOSイメージを書く-所要時間-8分">ラズパイのOSイメージを書く (所要時間 8分)</h3>

<p>ダウンロードしたzipファイルを解凍して、でてきたimgファイルを選択して、ラズパイ用のSSDに書き込む。</p>

<p>ラズパイ用のSSDをPCとつなぐには、100均で買った謎のUSBにつなぐ機器を使った。</p>

<p><figure class="figure-image figure-image-fotolife" title="謎の機器"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20180219/20180219201321.jpg" alt="f:id:konoemario:20180219201321j:plain" title="f:id:konoemario:20180219201321j:plain" class="hatena-fotolife" itemprop="image"></span><figcaption>謎の機器</figcaption></figure></p>

<p>書き込むの仕方はいろいろあるけれども、毎回使っている書き込み用のアプリ「Etcher」を使ってる。</p>

<p><figure class="figure-image figure-image-fotolife" title="OSイメージを書き込み"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20180219/20180219200154.png" alt="f:id:konoemario:20180219200154p:plain" title="f:id:konoemario:20180219200154p:plain" class="hatena-fotolife" itemprop="image"></span><figcaption>OSイメージを書き込み</figcaption></figure></p>

<p>SSDにOSファイルを書き込んだら、ラズパイにセットして、電源コードにつないで起動する。</p>

<p>このとき、キーボード、マウスもUSB経由でつけて、HDMIケーブルもディスプレイとラズパイに接続しておく。</p>

<p>ディスプレイにラズパイのデスクトップ画面が表示される。</p>

<p><br/></p>

<h3 id="WiFiの設定-1分">WiFiの設定 (1分)</h3>

<p>ラズパイを起動したら、画面右上のアンテナみたいなアイコンで、WiFiの設定を行う。</p>

<p>設定といっても、スマートフォンと同じで、つなぐSSID選択してパスワードを入力するだけ。</p>

<p><figure class="figure-image figure-image-fotolife" title="WiFiの設定"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20180219/20180219201802.jpg" alt="f:id:konoemario:20180219201802j:plain" title="f:id:konoemario:20180219201802j:plain" class="hatena-fotolife" itemprop="image"></span><figcaption>WiFiの設定</figcaption></figure></p>

<p>デスクトップ版じゃない場合、コンソールから設定がいろいろと必要だけれどもデスクトップ版はすごい簡単。</p>

<p><br/></p>

<h3 id="ログインパスワードを変更する-1分">ログインパスワードを変更する (1分)</h3>

<p>必須ではありませんが、やっておいたほうが無難。</p>

<p>ラズパイの左上のアイコンから「Terminal」を起動します。<br/>
（画像撮り忘れちゃった)</p>

<p>Terminalで以下のコマンドを叩くことで設定画面を起動します。</p>

<p><b>ラズパイの設定画面を起動</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ sudo rasip-config
</pre>


<p><figure class="figure-image figure-image-fotolife" title="ラズパイ設定画面"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20180219/20180219202604.png" alt="f:id:konoemario:20180219202604p:plain" title="f:id:konoemario:20180219202604p:plain" class="hatena-fotolife" itemprop="image"></span><figcaption>ラズパイ設定画面</figcaption></figure></p>

<p>一番上の「Change User Password」を選択して、好きなパスワードを入力します。</p>

<p><br/></p>

<h3 id="ラズパイにリモートで接続できるよう設定する10分">ラズパイにリモートで接続できるよう設定する　(10分)</h3>

<p>ラズパイを毎回ディスプレイに接続して、操作する場合はこのへんの設定は不要になります。<br/>
ノートPCからラズパイにリモート接続したい場合のみ、設定しましょう。</p>

<p>パスワード変更と同様に、設定画面を起動します。</p>

<p><b>ラズパイの設定画面を起動</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ sudo rasip-config
</pre>


<p>上から5番目の「interfacing option」を選択します。<br/>
次の画面の「SSH」を選択すると、有効にするか？と聞かれるのでYESを選択します。</p>

<p><figure class="figure-image figure-image-fotolife" title="SSHを有効化"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20180219/20180219203009.png" alt="f:id:konoemario:20180219203009p:plain" title="f:id:konoemario:20180219203009p:plain" class="hatena-fotolife" itemprop="image"></span><figcaption>SSHを有効化</figcaption></figure></p>

<p>また、その後に再度ターミナルを開いて、以下のコマンドを打ってラズパイのIPを確認しときます。</p>

<p><b>IPを確認する</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ ifconfig
</pre>


<p>上記コマンドを打つと、ずらずらとでてくるけでども、以下のwlan0とうのが、ラズパイ3に標準搭載されている無線のNICカードのIPみたい。</p>

<p>以下の例だと、「192.168.1.8」がラズパイのIPになります。</p>

<p><b>wlan0のIPを控えておく</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>wlan0: <span class="synIdentifier">flags</span>=<span class="synConstant">4163</span><span class="synStatement">&lt;</span>UP,BROADCAST,RUNNING,MULTICAST<span class="synStatement">&gt;</span>  mtu <span class="synConstant">1500</span>
        inet 192.168.1.8  netmask 255.255.255.0  broadcast 192.168.1.255
        inet6 <span class="synConstant">2408</span>:<span class="synConstant">210</span>:<span class="synConstant">9006</span>:<span class="synConstant">7500</span>:b6e2:cd5b:a921:338f  prefixlen <span class="synConstant">64</span>  scopeid 0x<span class="synStatement">0&lt;</span>global<span class="synStatement">&gt;</span>
        inet6 fe80::a537:ca1e:f1c3:745e  prefixlen <span class="synConstant">64</span>  scopeid 0x2<span class="synStatement">0&lt;</span>link<span class="synStatement">&gt;</span>
        ether b8:<span class="synConstant">27</span>:eb:1a:ab:2e  txqueuelen <span class="synConstant">1000</span>  <span class="synPreProc">(</span><span class="synSpecial">Ethernet</span><span class="synPreProc">)</span>
        RX packets <span class="synConstant">8325</span>  bytes <span class="synConstant">9798841</span> <span class="synPreProc">(</span><span class="synSpecial">9.3 MiB</span><span class="synPreProc">)</span>
        RX errors <span class="synConstant">0</span>  dropped <span class="synConstant">0</span>  overruns <span class="synConstant">0</span>  frame <span class="synConstant">0</span>
        TX packets <span class="synConstant">5293</span>  bytes <span class="synConstant">615893</span> <span class="synPreProc">(</span><span class="synSpecial">601.4 KiB</span><span class="synPreProc">)</span>
        TX errors <span class="synConstant">0</span>  dropped <span class="synConstant">0</span> overruns <span class="synConstant">0</span>  carrier <span class="synConstant">0</span>  collisions <span class="synConstant">0</span>
</pre>


<p><br/></p>

<h4 id="SSHで接続する">SSHで接続する</h4>

<p>自分のPCから、ラズパイに接続します。</p>

<p><b>MacのTerminalでssh接続</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ ssh pi@192.168.1.10
</pre>


<p>初めてつなげると、フィンガプリントーやらで本当につなぐの？みたいな確認がでてきますが、問題ないのでYesを入力しちゃいます。</p>

<p><br/></p>

<h4 id="IPアドレスを固定する">IPアドレスを固定する</h4>

<p>こちらも必須ではないのでオプションです。</p>

<p>SSHでつなぐ際に毎回IPアドレスがかわると、どこに繋げていいんだかわからなくなってしまうので、ラズパイのIPアドレスを固定します。</p>

<p>まずは、変更前のIPアドレスを<code>ifconfig</code>コマンドで確認しときます。</p>

<p><b>ifconfig</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>wlan0: <span class="synIdentifier">flags</span>=<span class="synConstant">4163</span><span class="synStatement">&lt;</span>UP,BROADCAST,RUNNING,MULTICAST<span class="synStatement">&gt;</span>  mtu <span class="synConstant">1500</span>
        inet 192.168.1.8  netmask 255.255.255.0  broadcast 192.168.1.255
        inet6 <span class="synConstant">2408</span>:<span class="synConstant">210</span>:<span class="synConstant">9006</span>:<span class="synConstant">7500</span>:b6e2:cd5b:a921:338f  prefixlen <span class="synConstant">64</span>  scopeid 0x<span class="synStatement">0&lt;</span>global<span class="synStatement">&gt;</span>
        inet6 fe80::a537:ca1e:f1c3:745e  prefixlen <span class="synConstant">64</span>  scopeid 0x2<span class="synStatement">0&lt;</span>link<span class="synStatement">&gt;</span>
        ether b8:<span class="synConstant">27</span>:eb:1a:ab:2e  txqueuelen <span class="synConstant">1000</span>  <span class="synPreProc">(</span><span class="synSpecial">Ethernet</span><span class="synPreProc">)</span>
        RX packets <span class="synConstant">8325</span>  bytes <span class="synConstant">9798841</span> <span class="synPreProc">(</span><span class="synSpecial">9.3 MiB</span><span class="synPreProc">)</span>
        RX errors <span class="synConstant">0</span>  dropped <span class="synConstant">0</span>  overruns <span class="synConstant">0</span>  frame <span class="synConstant">0</span>
        TX packets <span class="synConstant">5293</span>  bytes <span class="synConstant">615893</span> <span class="synPreProc">(</span><span class="synSpecial">601.4 KiB</span><span class="synPreProc">)</span>
        TX errors <span class="synConstant">0</span>  dropped <span class="synConstant">0</span> overruns <span class="synConstant">0</span>  carrier <span class="synConstant">0</span>  collisions <span class="synConstant">0</span>
</pre>


<p>次に、以下のファイルに固定したいIPと、ゲートウェイのIP（私の環境だと、ルーターのIP）やらなんやらを新しく追記します。</p>

<p>今回は「192.168.1.10」をラズパイのIPとします。</p>

<p><b>/etc/dhcpcd.conf</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>interface wlan0
static <span class="synIdentifier">ip_address</span>=192.168.1.10/<span class="synConstant">24</span>
static <span class="synIdentifier">routers</span>=192.168.1.1
staitc <span class="synIdentifier">domain_name_servers</span>=192.168.1.1                                      
</pre>


<p>設定がおわったらラズパイを再起動します。</p>

<p><b>ラズパイを再起動</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ sudo reboot
</pre>


<p>再起動が完了したら<code>ifconfig</code>を叩いて、wlanについて設定したIPアドレスが振られていることを確認します。</p>

<p><b>ifconfig</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>pi@raspberrypi:~ $ ifconfig
wlan0: <span class="synIdentifier">flags</span>=<span class="synConstant">4163</span><span class="synStatement">&lt;</span>UP,BROADCAST,RUNNING,MULTICAST<span class="synStatement">&gt;</span>  mtu <span class="synConstant">1500</span>
        inet 192.168.1.10  netmask 255.255.255.0  broadcast 192.168.1.255
        inet6 <span class="synConstant">2408</span>:<span class="synConstant">210</span>:<span class="synConstant">9006</span>:<span class="synConstant">7500</span>:b6e2:cd5b:a921:338f  prefixlen <span class="synConstant">64</span>  scopeid 0x<span class="synStatement">0&lt;</span>global<span class="synStatement">&gt;</span>
        inet6 fe80::a537:ca1e:f1c3:745e  prefixlen <span class="synConstant">64</span>  scopeid 0x2<span class="synStatement">0&lt;</span>link<span class="synStatement">&gt;</span>
        ether b8:<span class="synConstant">27</span>:eb:1a:ab:2e  txqueuelen <span class="synConstant">1000</span>  <span class="synPreProc">(</span><span class="synSpecial">Ethernet</span><span class="synPreProc">)</span>
        RX packets <span class="synConstant">213</span>  bytes <span class="synConstant">23086</span> <span class="synPreProc">(</span><span class="synSpecial">22.5 KiB</span><span class="synPreProc">)</span>
        RX errors <span class="synConstant">0</span>  dropped <span class="synConstant">0</span>  overruns <span class="synConstant">0</span>  frame <span class="synConstant">0</span>
        TX packets <span class="synConstant">206</span>  bytes <span class="synConstant">31290</span> <span class="synPreProc">(</span><span class="synSpecial">30.5 KiB</span><span class="synPreProc">)</span>
        TX errors <span class="synConstant">0</span>  dropped <span class="synConstant">0</span> overruns <span class="synConstant">0</span>  carrier <span class="synConstant">0</span>  collisions <span class="synConstant">0</span>
</pre>


<p><br/></p>

<h3 id="カメラを接続する-5分">カメラを接続する (5分)</h3>

<p>動画を見た方がわかりやすい！</p>

<p><iframe width="480" height="270" src="https://www.youtube.com/embed/ojJhLQBiv0I?start=273&feature=oembed" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe><cite class="hatena-citation"><a href="https://www.youtube.com/watch?v=ojJhLQBiv0I&t=273s">www.youtube.com</a></cite></p>

<p><br/></p>

<h3 id="カメラモジュール用のソフトウェアをインストールする-5分">カメラモジュール用のソフトウェアをインストールする (5分)</h3>

<p>再度、ラズパイの設定画面を起動します。</p>

<p><b>ラズパイの設定画面を起動</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ sudo rasip-config
</pre>


<p>上から5番目の「interfacing option」を選択します。<br/>
次の画面の「camera」を選択すると、有効にするか？と聞かれるのでYESを選択します。</p>

<p>これでカメラの使用が有効になりました。</p>

<p>さらに、以下のコマンドをたたくことでカメラをラズパイに認識させます。</p>

<p><b>カメラを認識させる</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ sudo modprobe bcm2835-v4l2
</pre>


<p>次に、カメラモジュール用のソフト「MJPG-streamer」をインストールします。</p>

<p>インストールにあたっては、全面的にこちらのサイトの、「動画ストリーミングソフトウェアのインストール」を参考にさせていただきましたので、こちらを参照ください。</p>

<p><a href="http://www.hiramine.com/physicalcomputing/raspberrypi/webcamstreaming.html">WEB&#x30AB;&#x30E1;&#x30E9;&#x3067;&#x52D5;&#x753B;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30DF;&#x30F3;&#x30B0;</a></p>

<h3 id="カメラを起動する-1分">カメラを起動する (1分)</h3>

<p>「MJPG-streamer」をインストールしたディレクトリに移動します。<br/>
私はホームディレクトリ配下にインストールしました。</p>

<p><b>ディレクトリに移動</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ <span class="synStatement">cd</span> /home/pi/mjpg-streamer
</pre>


<p>何も考えずに、以下のコマンドを叩きます。</p>

<p><b>カメラを起動</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>sudo ./mjpg_streamer <span class="synSpecial">-i</span> <span class="synStatement">&quot;</span><span class="synConstant">./input_uvc.so -f 10 -r 320x240 -d /dev/video0 -y -n</span><span class="synStatement">&quot;</span> <span class="synSpecial">-o</span> <span class="synStatement">&quot;</span><span class="synConstant">./output_http.so -w ./www -p 8080</span><span class="synStatement">&quot;</span>MJPG Streamer Version: svn rev: <span class="synConstant">3</span>:<span class="synConstant">172</span>
 i: Using V4L2 device.: /dev/video0
 i: Desired Resolution: <span class="synConstant">320</span> x <span class="synConstant">240</span>
 i: Frames Per Second.: <span class="synConstant">10</span>
 i: Format............: YUV
 i: JPEG Quality......: <span class="synConstant">80</span>
 o: www-folder-path...: ./www/
 o: HTTP TCP port.....: <span class="synConstant">8080</span>
 o: username:password.: disabled
 o: commands..........: enabled
</pre>


<p>ラズパイに接続しているディスプレイで参照する場合は、ラズパイのブラウザから「localhost:8080」を入力。</p>

<p>別のPCから参照する場合は「ラズパイのIP:8080」でMPJG-Streamerの画面が参照できる。</p>

<p>ここから、Streamを選択することでカメラのリアルタイム映像が参照することができる。</p>

<p><figure class="figure-image figure-image-fotolife" title="MPJG-Stremerの画面"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20180219/20180219210229.png" alt="f:id:konoemario:20180219210229p:plain" title="f:id:konoemario:20180219210229p:plain" class="hatena-fotolife" itemprop="image"></span><figcaption>MPJG-Stremerの画面</figcaption></figure></p>

-----
--------
AUTHOR: konoemario
TITLE: Vue.jsで画像スライドコンポーネントをつくる
BASENAME: 2018/02/18/222834
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 02/18/2018 22:28:34
CATEGORY: プログラム
CATEGORY: Vue.js
-----
BODY:
<h1>日記</h1>

<p>金曜の夜。
リファクタリングの本を買ったから、土日に読むぞ！そういえば最近走ってないから走りたいな！Skyrimもやりこむぞ！</p>

<p>土曜の昼から現在に至るまで。<br/>
なんだか眠いなぁ。Twitchでも寝ながらみるか。</p>

<p>こうして日々が過ぎていくと思うと悲しい。<br/>
そして、こうしたことを悲しいと思ってしまうのもまた悲しい。</p>

<p><br/></p>

<h2>作ったもの</h2>

<p>画像とかがスライドしていくUIをカルーセルというみたい。<br/>
それをVue.jsの単一ファイルコンポーネントで作ってみました。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20180218/20180218222125.gif" alt="f:id:konoemario:20180218222125g:plain" title="f:id:konoemario:20180218222125g:plain" class="hatena-fotolife" itemprop="image"></span></p>

<p>こちらをものすごく参考にさせていただきました。<br/>
<iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fqiita.com%2FWave7KN%2Fitems%2F5a18c9a6ed7d6fac940f" title="Vue.jsでカルーセルをつくる - Qiita" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://qiita.com/Wave7KN/items/5a18c9a6ed7d6fac940f">qiita.com</a></cite></p>

<p><br/></p>

<h2>Carousel.vue</h2>

<p>テンプレートはこんな感じで。</p>

<p><b>Carousel.vue</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>&lt;template&gt;
    &lt;div <span class="synStatement">class</span>=<span class="synConstant">&quot;carousel&quot;</span>&gt;
        &lt;div <span class="synStatement">class</span>=<span class="synConstant">&quot;carousel__main&quot;</span>&gt;
            &lt;div <span class="synStatement">class</span>=<span class="synConstant">&quot;carousel__left&quot;</span>&gt;
                &lt;button <span class="synStatement">class</span>=<span class="synConstant">&quot;carousel__button&quot;</span> type=<span class="synConstant">&quot;button&quot;</span> @click=<span class="synConstant">&quot;prev&quot;</span>&gt;prev&lt;/button&gt;
            &lt;/div&gt;
            &lt;div <span class="synStatement">class</span>=<span class="synConstant">&quot;carousel__center&quot;</span>&gt;
                &lt;transition-group tag=<span class="synConstant">&quot;div&quot;</span> <span class="synStatement">class</span>=<span class="synConstant">&quot;carousel__slider&quot;</span> :name=<span class="synConstant">&quot;style&quot;</span>&gt;
                    &lt;div v-<span class="synStatement">for</span>=<span class="synConstant">&quot;number in [currentImg]&quot;</span> v-bind:key=<span class="synConstant">&quot;number&quot;</span>&gt;
                      &lt;img :src=<span class="synConstant">&quot;imgList[Math.abs(currentImg) % imgList.length]&quot;</span> <span class="synStatement">class</span>=<span class="synConstant">&quot;carousel__img&quot;</span> width=<span class="synConstant">&quot;300&quot;</span> height=<span class="synConstant">&quot;200&quot;</span>/&gt;
                    &lt;/div&gt;
                &lt;/transition-group&gt;
            &lt;/div&gt;
            &lt;div <span class="synStatement">class</span>=<span class="synConstant">&quot;carousel__right&quot;</span>&gt;
                &lt;button  <span class="synStatement">class</span>=<span class="synConstant">&quot;carousel__button&quot;</span> type=<span class="synConstant">&quot;button&quot;</span> @click=<span class="synConstant">&quot;next&quot;</span>&gt;next&lt;/button&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div <span class="synStatement">class</span>=<span class="synConstant">&quot;carousel__footer&quot;</span>&gt;
            &lt;span <span class="synStatement">class</span>=<span class="synConstant">&quot;carousel__dot&quot;</span> v-<span class="synStatement">for</span>=<span class="synConstant">&quot;(number, index) in imgList.length&quot;</span> v-bind:<span class="synStatement">class</span>=<span class="synConstant">&quot;{'is-active':index == (Math.abs(currentImg) % imgList.length)}&quot;</span>&gt;●&lt;/span&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/template&gt;
</pre>


<p>スクリプトがこんな感じ。</p>

<p><b>Carousel.vue</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>&lt;script&gt;
    <span class="synStatement">export</span> <span class="synStatement">default</span> <span class="synIdentifier">{</span>
        props:<span class="synIdentifier">{</span>
            imgList:<span class="synType">Array</span>
        <span class="synIdentifier">}</span>,
        data: <span class="synIdentifier">function</span>()<span class="synIdentifier">{</span>
                <span class="synStatement">return</span> <span class="synIdentifier">{</span>

                    currentImg: 0,
                    style:<span class="synConstant">''</span>,
                <span class="synIdentifier">}</span>
        <span class="synIdentifier">}</span>,
        methods:<span class="synIdentifier">{</span>
            next:<span class="synIdentifier">function</span>()<span class="synIdentifier">{</span>
                <span class="synIdentifier">this</span>.currentImg++;
                <span class="synIdentifier">this</span>.style=<span class="synConstant">&quot;slide-next&quot;</span>
                console.log(Math.abs(<span class="synIdentifier">this</span>.currentImg) % <span class="synIdentifier">this</span>.imgList.length);
            <span class="synIdentifier">}</span>,
            prev:<span class="synIdentifier">function</span>()<span class="synIdentifier">{</span>
                <span class="synIdentifier">this</span>.currentImg--;
                <span class="synIdentifier">this</span>.style=<span class="synConstant">&quot;slide-prev&quot;</span>
            <span class="synIdentifier">}</span>
        <span class="synIdentifier">}</span>
    <span class="synIdentifier">}</span>
&lt;/script&gt;
</pre>


<p>スタイルはこんな感じ。</p>

<p><b>Carousel.vue</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>&lt;style lang=<span class="synConstant">&quot;scss&quot;</span>&gt;
.slide-next-leave-active,
.slide-next-enter-active, 
.slide-prev-leave-active,
.slide-prev-enter-active <span class="synIdentifier">{</span>
  transition: 1s;
<span class="synIdentifier">}</span>
.slide-next-enter, 
.slide-prev-leave-to <span class="synIdentifier">{</span>
  transform: translate(100%, 0);
<span class="synIdentifier">}</span>
.slide-next-leave-to,
.slide-prev-enter <span class="synIdentifier">{</span>
  transform: translate(-100%, 0);
<span class="synIdentifier">}</span>


.carousel<span class="synIdentifier">{</span>
    width:100%;

    &amp;__main<span class="synIdentifier">{</span>
        display:flex;
        justify-content: center;
        width:100%;
    <span class="synIdentifier">}</span>

    &amp;__left, &amp;__right<span class="synIdentifier">{</span>
        width:25%;
    <span class="synIdentifier">}</span>

    &amp;__button<span class="synIdentifier">{</span>
        width:100%;
        height:100%;
    <span class="synIdentifier">}</span>

    &amp;__center<span class="synIdentifier">{</span>
        width:50%;
        text-align:center;
    <span class="synIdentifier">}</span>

    &amp;__slider<span class="synIdentifier">{</span>
        overflow: hidden;
        position: relative;
        height:200px;
        margin:0 auto;
        background:white;
    <span class="synIdentifier">}</span>

    &amp;__img<span class="synIdentifier">{</span>
        position:absolute;
        <span class="synStatement">top</span>:0;
        bottom:0;
        left:0;
    <span class="synIdentifier">}</span>

    &amp;__footer<span class="synIdentifier">{</span>
        text-align:center;
    <span class="synIdentifier">}</span>

    &amp;__dot<span class="synIdentifier">{</span>
        &amp;.is-active<span class="synIdentifier">{</span>
            color:red;
        <span class="synIdentifier">}</span>
    <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>
&lt;/style&gt;
</pre>


<h2>コンポーネントを使ってみる</h2>

<p>使う側は、さきほどの<code>Carousel.vue</code>をコンポーネントとして登録して、表示する画像のURLを<code>dropImageUrls</code>に直接定義しています。</p>

<p>ファイルドロップしたときの画像を表示しようとおもったけれども、とりあえず。</p>

<p><b>main.js</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">window</span>.Vue = require(<span class="synConstant">'vue'</span>);
<span class="synComment">//カルーセルコンポーネント</span>
<span class="synStatement">const</span> Carousel = require(<span class="synConstant">'../components/Carousel'</span>);

<span class="synStatement">new</span> Vue(<span class="synIdentifier">{</span>
    el:<span class="synConstant">'.form'</span>,
    data:<span class="synIdentifier">{</span>
        dropImageUrls:<span class="synIdentifier">[</span>
            <span class="synConstant">'http://apopidols.org/static/img/CQ-milgUEAAp9g9.jpg'</span>,
            <span class="synConstant">'https://fujisan-marathon.jp/wp-content/uploads/2017/08/%E5%AF%8C%E5%A3%AB%E5%B1%B1.jpg'</span>,
            <span class="synConstant">'http://livedoor.blogimg.jp/oto_soku-densoku/imgs/8/d/8dd76f3f.jpg'</span>
        <span class="synIdentifier">]</span>
    <span class="synIdentifier">}</span>,
    components:<span class="synIdentifier">{</span>
        <span class="synConstant">'carousel'</span>:Carousel
    <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>)
</pre>


<p>最後に、使いたい箇所に以下のタグを埋め込むことで使えました。<br/>
<b>index.html</b></p>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span>carousel<span class="synIdentifier"> :img-list=</span><span class="synConstant">&quot;dropImageUrls&quot;</span><span class="synIdentifier">&gt;&lt;/</span>carousel<span class="synIdentifier">&gt;</span>
</pre>


-----
--------
AUTHOR: konoemario
TITLE: 書きたいもの
BASENAME: 2018/02/13/194459
STATUS: Draft
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 02/13/2018 19:44:59
-----
BODY:
<p>laravel uploaded file のテスト
aws php s3 署名
is-component</p>

<p>ネタがないがやりたい
vue-testing
nginx性能
cでwebサーバー</p>

<p>い</p>

-----
--------
AUTHOR: konoemario
TITLE: ちょっと立派なファイルアップロードコンポーネントをつくる
BASENAME: 2018/02/13/233015
STATUS: Draft
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 02/08/2018 21:52:01
IMAGE: https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20180208/20180208215137.png
-----
BODY:
<h2>前回の状態</h2>

<p><b>create.html</b></p>

<pre class="code lang-html" data-lang="html" data-unlink>    <span class="synIdentifier">&lt;</span><span class="synStatement">form</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;simple-form&quot;</span><span class="synIdentifier">&gt;</span>
        <span class="synIdentifier">&lt;</span><span class="synStatement">h2</span><span class="synIdentifier">&gt;</span>ファイルアップロード<span class="synIdentifier">&lt;/</span><span class="synStatement">h2</span><span class="synIdentifier">&gt;</span>
        <span class="synIdentifier">&lt;</span><span class="synStatement">label</span><span class="synIdentifier"> </span><span class="synType">for</span><span class="synIdentifier">=</span><span class="synConstant">&quot;title&quot;</span><span class="synIdentifier">&gt;</span>タイトル<span class="synIdentifier">&lt;/</span><span class="synStatement">label</span><span class="synIdentifier">&gt;</span>
        <span class="synIdentifier">&lt;</span><span class="synStatement">input</span><span class="synIdentifier"> </span><span class="synType">type</span><span class="synIdentifier">=</span><span class="synConstant">&quot;text&quot;</span><span class="synIdentifier"> </span><span class="synType">name</span><span class="synIdentifier">=</span><span class="synConstant">&quot;title&quot;</span><span class="synIdentifier"> v-model=</span><span class="synConstant">&quot;title&quot;</span><span class="synIdentifier">&gt;</span>
        <span class="synIdentifier">&lt;</span><span class="synStatement">button</span><span class="synIdentifier"> </span><span class="synType">type</span><span class="synIdentifier">=</span><span class="synConstant">&quot;button&quot;</span><span class="synIdentifier"> @click=</span><span class="synConstant">&quot;onSubmit&quot;</span><span class="synIdentifier">&gt;</span>投稿する<span class="synIdentifier">&lt;/</span><span class="synStatement">button</span><span class="synIdentifier">&gt;</span>
        <span class="synIdentifier">&lt;</span>drop<span class="synIdentifier"> @send-file=</span><span class="synConstant">&quot;sendFile&quot;</span><span class="synIdentifier">&gt;&lt;/</span>drop<span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;/</span><span class="synStatement">form</span><span class="synIdentifier">&gt;</span>
</pre>


<p><b>main.js</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synComment">//ファイル選択コンポーネント</span>
<span class="synStatement">const</span> Drop = require(<span class="synConstant">'./components/drop'</span>);

<span class="synStatement">new</span> Vue(<span class="synIdentifier">{</span>
    el:<span class="synConstant">'.form'</span>,
    data:<span class="synIdentifier">{</span>
        <span class="synComment">//タイトル</span>
        title:<span class="synConstant">''</span>,
        <span class="synComment">//ファイル</span>
        files:<span class="synIdentifier">[]</span>
    <span class="synIdentifier">}</span>,
    methods:<span class="synIdentifier">{</span>
        <span class="synComment">//ファイル送信処理</span>
        onSubmit:<span class="synIdentifier">function</span>()<span class="synIdentifier">{</span>
          <span class="synComment">//省略</span>
        <span class="synIdentifier">}</span>,    
        sendFile(files)<span class="synIdentifier">{</span>
            <span class="synIdentifier">this</span>.files = files;
        <span class="synIdentifier">}</span>
    <span class="synIdentifier">}</span>,
    components:<span class="synIdentifier">{</span>
        <span class="synComment">//コンポーネントを登録する！</span>
        <span class="synConstant">'drop'</span>:Drop
    <span class="synIdentifier">}</span>
</pre>


<p><b>drop.vue</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>&lt;template&gt;
    &lt;div <span class="synStatement">class</span>=<span class="synConstant">&quot;drop&quot;</span> @dragleave.prevent @dragover.prevent @drop.prevent=<span class="synConstant">&quot;onDrop&quot;</span>&gt;
        &lt;div <span class="synStatement">class</span>=<span class="synConstant">&quot;drop__default-container&quot;</span>&gt;
            &lt;label&gt; ファイルを選択
                &lt;input <span class="synStatement">class</span>=<span class="synConstant">&quot;drop__input&quot;</span> type=<span class="synConstant">&quot;file&quot;</span> multiple=<span class="synConstant">&quot;multiple&quot;</span> @change=<span class="synConstant">&quot;onDrop&quot;</span>&gt;
            &lt;/label&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/template&gt;
&lt;script&gt;
    <span class="synStatement">export</span> <span class="synStatement">default</span> <span class="synIdentifier">{</span>
        methods:<span class="synIdentifier">{</span>
        <span class="synComment">//inputタグとドラッグ&amp;ドロップから呼ばれる</span>
            onDrop:<span class="synIdentifier">function</span>(<span class="synStatement">event</span>)<span class="synIdentifier">{</span>
                <span class="synIdentifier">let</span> fileList = <span class="synStatement">event</span>.target.files ? 
                               <span class="synStatement">event</span>.target.files:
                               <span class="synStatement">event</span>.dataTransfer.files;

                <span class="synIdentifier">let</span> files = <span class="synIdentifier">[]</span>;

                <span class="synStatement">for</span>(<span class="synIdentifier">let</span> i = 0; i &lt; fileList.length; i++)<span class="synIdentifier">{</span>
                    files.push(fileList<span class="synIdentifier">[</span>i<span class="synIdentifier">]</span>);
                <span class="synIdentifier">}</span>

                <span class="synComment">//イベントsend-fileを発火させて、files変数を渡す</span>
                <span class="synIdentifier">this</span>.$emit(<span class="synConstant">'send-file'</span>, files);
            <span class="synIdentifier">}</span>
        <span class="synIdentifier">}</span>,
    <span class="synIdentifier">}</span>
&lt;/script&gt;
&lt;style lang=<span class="synConstant">&quot;scss&quot;</span>&gt;
<span class="synComment">//スタイルは省略</span>
&lt;/style&gt;
</pre>


<p><br/></p>

<h2>ファイルがドロップされたら見た目をかえよう</h2>

<p>今の状態だと、ファイルをドロップしても、本当にファイルが選ばれているのかまったくわかりません。<br/>
なので、まずはファイルをドロップしたら、見た目をかえてみます。</p>

<p>テンプレートに、<code>v-if</code>と、ファイルが存在しているかどうかを判断する機能<code>isFileExists</code>を使って、見た目を切り替えてみます。</p>

<p><b>Drop.vue</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>&lt;template&gt;
    &lt;div <span class="synStatement">class</span>=<span class="synConstant">&quot;drop&quot;</span> @dragleave.prevent @dragover.prevent @drop.prevent=<span class="synConstant">&quot;onDrop&quot;</span>&gt;
        &lt;div <span class="synStatement">class</span>=<span class="synConstant">&quot;drop__default-container&quot;</span> v-<span class="synStatement">if</span>=<span class="synConstant">&quot;isFileExists&quot;</span>&gt;
            &lt;label&gt; ファイルが選択されているよ &lt;/label&gt;
        &lt;/div&gt;
        &lt;div <span class="synStatement">class</span>=<span class="synConstant">&quot;drop__default-container&quot;</span> v-<span class="synStatement">else</span>&gt;
            &lt;label&gt; ファイルを選択
                &lt;input <span class="synStatement">class</span>=<span class="synConstant">&quot;drop__input&quot;</span> type=<span class="synConstant">&quot;file&quot;</span> multiple=<span class="synConstant">&quot;multiple&quot;</span> @change=<span class="synConstant">&quot;onDrop&quot;</span>&gt;
            &lt;/label&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/template&gt;
</pre>


<p>肝心の`isFileExists'ですが、methodsで定義してもいいのですが、今回はcomputedに書くことにします。</p>

<p><b>Drop.vue</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>&lt;script&gt;
    <span class="synStatement">export</span> <span class="synStatement">default</span> <span class="synIdentifier">{</span>
        data:<span class="synIdentifier">function</span>()<span class="synIdentifier">{</span>
            <span class="synComment">//Fileオブジェクトを格納する</span>
            <span class="synStatement">return</span> <span class="synIdentifier">{</span>
                files:<span class="synIdentifier">[]</span>
            <span class="synIdentifier">}</span>
        <span class="synIdentifier">}</span>,
        computed:<span class="synIdentifier">{</span>
         <span class="synComment">//Fileオブジェクトが存在するかどうか   </span>
         isFileExists:<span class="synIdentifier">function</span>()<span class="synIdentifier">{</span>
                <span class="synStatement">return</span> <span class="synIdentifier">this</span>.files.length &gt; 0;
            <span class="synIdentifier">}</span>
        <span class="synIdentifier">}</span>,
        methods:<span class="synIdentifier">{</span>
            <span class="synComment">//ドラッグ &amp; ドロップしたとき</span>
            onDrop:<span class="synIdentifier">function</span>(<span class="synStatement">event</span>)<span class="synIdentifier">{</span>
                <span class="synIdentifier">let</span> fileList = <span class="synStatement">event</span>.target.files ? 
                               <span class="synStatement">event</span>.target.files:
                               <span class="synStatement">event</span>.dataTransfer.files;

                <span class="synIdentifier">let</span> files = <span class="synIdentifier">[]</span>;

                <span class="synStatement">for</span>(<span class="synIdentifier">let</span> i = 0; i &lt; fileList.length; i++)<span class="synIdentifier">{</span>
                    files.push(fileList<span class="synIdentifier">[</span>i<span class="synIdentifier">]</span>);
                <span class="synIdentifier">}</span>

                 <span class="synIdentifier">this</span>.files = files;

                <span class="synComment">//イベントsend-fileを発火させて、files変数を渡す</span>
                <span class="synIdentifier">this</span>.$emit(<span class="synConstant">'send-file'</span>, <span class="synIdentifier">this</span>.files);
            <span class="synIdentifier">}</span>,
        <span class="synIdentifier">}</span>,
    <span class="synIdentifier">}</span>
&lt;/script&gt;
</pre>


<p>computedは、公式によると依存するものが更新されたときのみ再評価される、と書かれていていまいちわかりにくいのですが</p>

<ul>
<li>isFileExists内で参照している、this.filesの値に変更があった場合、再評価される</li>
<li>this.filesに変更がない場合、isFileExistsの結果はどこかにキャッシュされている（再計算を行わないのでちょっとはやい)</li>
</ul>


<p>ということでしょうか。</p>

<p>一方、methodsは常に再計算を行うみたいです。</p>

<p>とはいえ、テンプレート内に`v-if="isFileExists" 'と書くとそれがcomputedであれ、methodsであれ、依存している値（参照している値）に変更があればv-ifは再判定してくれるみたい。冷静に考えるとすごい。</p>

<p><figure class="figure-image figure-image-fotolife" title="ファイルをドロップした図"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20180208/20180208215137.png" alt="f:id:konoemario:20180208215137p:plain" title="f:id:konoemario:20180208215137p:plain" class="hatena-fotolife" itemprop="image"></span><figcaption>ファイルをドロップした図</figcaption></figure></p>

<p><br/></p>

<h2>ドロップしたファイルの一覧をつくる</h2>

<p>次に、ドロップしたファイルが一覧で見れて、取り消ししたりできるようにします。<br/>
ようやくVue.jsの真価がでてきます。</p>

<h3>一覧をベタで書いてみる</h3>

<p>とりあえず、一覧をベタで書いてみます。<br/>
こんな感じですね。</p>

<p><iframe id="cp_embed_RQgXog" src="https://codepen.io/tohu/embed/preview/RQgXog?height=300&amp;slug-hash=RQgXog&amp;default-tabs=html,result&amp;host=https://codepen.io&amp;embed-version=2" title="画像リストサンプル" scrolling="no" frameborder="0" height="300" allowtransparency="true" class="cp_embed_iframe" style="width: 100%; overflow: hidden;"></iframe><cite class="hatena-citation"><a href="https://codepen.io/tohu/pen/RQgXog">codepen.io</a></cite></p>

<p>（あれ、Vue.jsもCodepenで全部書いてしまえばいいのでは、、、という疑問は置いておきます。)</p>

<h3>単一ファイルコンポーネントに置き換える</h3>

<p><b>DropItem.vueのtemplate</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>&lt;template&gt;
    &lt;div <span class="synStatement">class</span>=<span class="synConstant">&quot;item&quot;</span>&gt;
        &lt;img src=<span class="synConstant">&quot;https://placehold.jp/150x150.png&quot;</span> alt=<span class="synConstant">&quot;&quot;</span> <span class="synStatement">class</span>=<span class="synConstant">&quot;item__img&quot;</span>&gt;
            &lt;div <span class="synStatement">class</span>=<span class="synConstant">&quot;info&quot;</span>&gt;
                &lt;p <span class="synStatement">class</span>=<span class="synConstant">&quot;info__title&quot;</span>&gt;ピンちゃんの画像&lt;/p&gt;
                &lt;div <span class="synStatement">class</span>=<span class="synConstant">&quot;info__detail&quot;</span>&gt;
                    &lt;span <span class="synStatement">class</span>=<span class="synConstant">&quot;info_size&quot;</span>&gt;10KB&lt;/span&gt;
                    &lt;span <span class="synStatement">class</span>=<span class="synConstant">&quot;info_type&quot;</span>&gt;image.png&lt;span/&gt;
                &lt;/div&gt;
            &lt;/div&gt;
        &lt;span <span class="synStatement">class</span>=<span class="synConstant">&quot;item__close&quot;</span>&gt;×&lt;/span&gt;
    &lt;/div&gt;
&lt;/template&gt;
</pre>


<p><b>DropItem.vueのtemplate</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>&lt;template&gt;
    &lt;div <span class="synStatement">class</span>=<span class="synConstant">&quot;item&quot;</span>&gt;
        &lt;img src=<span class="synConstant">&quot;https://placehold.jp/150x150.png&quot;</span> alt=<span class="synConstant">&quot;&quot;</span> <span class="synStatement">class</span>=<span class="synConstant">&quot;item__img&quot;</span>&gt;
            &lt;div <span class="synStatement">class</span>=<span class="synConstant">&quot;info&quot;</span>&gt;
                &lt;p <span class="synStatement">class</span>=<span class="synConstant">&quot;info__title&quot;</span>&gt;ピンちゃんの画像&lt;/p&gt;
                &lt;div <span class="synStatement">class</span>=<span class="synConstant">&quot;info__detail&quot;</span>&gt;
                    &lt;span <span class="synStatement">class</span>=<span class="synConstant">&quot;info_size&quot;</span>&gt;10KB&lt;/span&gt;
                    &lt;span <span class="synStatement">class</span>=<span class="synConstant">&quot;info_type&quot;</span>&gt;image.png&lt;span/&gt;
                &lt;/div&gt;
            &lt;/div&gt;
        &lt;span <span class="synStatement">class</span>=<span class="synConstant">&quot;item__close&quot;</span>&gt;×&lt;/span&gt;
    &lt;/div&gt;
&lt;/template&gt;
</pre>


<p><b>DropItem.vueのtemplateを置き換える</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>&lt;template&gt;
    &lt;div <span class="synStatement">class</span>=<span class="synConstant">&quot;item&quot;</span>&gt;
        &lt;img src=<span class="synConstant">&quot;https://placehold.jp/150x150.png&quot;</span> alt=<span class="synConstant">&quot;&quot;</span> <span class="synStatement">class</span>=<span class="synConstant">&quot;item__img&quot;</span>&gt;
            &lt;div <span class="synStatement">class</span>=<span class="synConstant">&quot;info&quot;</span>&gt;
                &lt;p <span class="synStatement">class</span>=<span class="synConstant">&quot;info__title&quot;</span>&gt;<span class="synIdentifier">{{</span> name <span class="synIdentifier">}}</span>&lt;/p&gt;
                &lt;div <span class="synStatement">class</span>=<span class="synConstant">&quot;info__detail&quot;</span>&gt;
                    &lt;span <span class="synStatement">class</span>=<span class="synConstant">&quot;info_size&quot;</span>&gt;<span class="synIdentifier">{{</span> size <span class="synIdentifier">}}</span>&lt;/span&gt;
                    &lt;span <span class="synStatement">class</span>=<span class="synConstant">&quot;info_type&quot;</span>&gt;<span class="synIdentifier">{{</span> type <span class="synIdentifier">}}</span>&lt;/span&gt;
                &lt;/div&gt;
            &lt;/div&gt;
        &lt;span <span class="synStatement">class</span>=<span class="synConstant">&quot;item__close&quot;</span>&gt;×&lt;/span&gt;
    &lt;/div&gt;
&lt;/template&gt;
</pre>


<p><b>DropItem.vueのscriptを追加</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>&lt;script&gt;
    <span class="synStatement">export</span> <span class="synStatement">default</span> <span class="synIdentifier">{</span>
        props:<span class="synIdentifier">{</span>
            file:File
        <span class="synIdentifier">}</span>,
        computed:<span class="synIdentifier">{</span>
            name:<span class="synIdentifier">function</span>()<span class="synIdentifier">{</span>
                <span class="synStatement">return</span> <span class="synIdentifier">this</span>.file.name;
            <span class="synIdentifier">}</span>,
            size:<span class="synIdentifier">function</span>()<span class="synIdentifier">{</span>
                <span class="synStatement">return</span> <span class="synIdentifier">this</span>.file.size;
            <span class="synIdentifier">}</span>,
            type:<span class="synIdentifier">function</span>()<span class="synIdentifier">{</span>
                <span class="synStatement">return</span> <span class="synIdentifier">this</span>.file.type;
            <span class="synIdentifier">}</span>
        <span class="synIdentifier">}</span>,
    <span class="synIdentifier">}</span>
</pre>


<h2>DropItem.vueを使ってみる</h2>

<p>前回作ったコンポーネントから、さきほどつくったDropItem.vueを読み込みます。<br/>
また、前回はコンポーネントの<code>data</code>である<code>files</code>変数を毎回リセットしていましたが、何度も追加できるようにするため、リセットしないようにしています。</p>

<p><b>RichDrop.vueにコンポーネントを追加</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>&lt;script&gt;
<span class="synComment">//ドロップしたアイテムを表示するコンポーネント</span>
<span class="synIdentifier">let</span> dropItem = require(<span class="synConstant">'./DropItem'</span>);

    <span class="synStatement">export</span> <span class="synStatement">default</span> <span class="synIdentifier">{</span>
        data:<span class="synIdentifier">function</span>()<span class="synIdentifier">{</span>
            <span class="synComment">//Fileオブジェクトを格納する</span>
            <span class="synStatement">return</span> <span class="synIdentifier">{</span>
                files:<span class="synIdentifier">[]</span>
            <span class="synIdentifier">}</span>
        <span class="synIdentifier">}</span>,
        computed:<span class="synIdentifier">{</span>
            <span class="synComment">//Fileオブジェクトが存在するかどうか</span>
            isFileExists:<span class="synIdentifier">function</span>()<span class="synIdentifier">{</span>
                <span class="synStatement">return</span> <span class="synIdentifier">this</span>.files.length &gt; 0;
            <span class="synIdentifier">}</span>
        <span class="synIdentifier">}</span>,
        methods:<span class="synIdentifier">{</span>
            <span class="synComment">//ドラッグ &amp; ドロップしたとき</span>
            onDrop:<span class="synIdentifier">function</span>(<span class="synStatement">event</span>)<span class="synIdentifier">{</span>
                <span class="synIdentifier">let</span> fileList = <span class="synStatement">event</span>.target.files ? 
                               <span class="synStatement">event</span>.target.files:
                               <span class="synStatement">event</span>.dataTransfer.files;

                <span class="synStatement">for</span>(<span class="synIdentifier">let</span> i = 0; i &lt; fileList.length; i++)<span class="synIdentifier">{</span>
                    <span class="synIdentifier">this</span>.files.push(fileList<span class="synIdentifier">[</span>i<span class="synIdentifier">]</span>);
                <span class="synIdentifier">}</span>

                <span class="synComment">//イベントsend-fileを発火させて、files変数を渡す</span>
                <span class="synIdentifier">this</span>.$emit(<span class="synConstant">'send-file'</span>, <span class="synIdentifier">this</span>.files);

            <span class="synIdentifier">}</span>,
        <span class="synIdentifier">}</span>,
        components:<span class="synIdentifier">{</span>
           <span class="synConstant">'drop-item'</span>:dropItem
        <span class="synIdentifier">}</span>
    <span class="synIdentifier">}</span>
&lt;/script&gt;
</pre>


<h2>ドロップしたアイテムを消せるようにする</h2>

<p><b>DropItem.vueのtemplateを置き換える</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>&lt;template&gt;
    &lt;div <span class="synStatement">class</span>=<span class="synConstant">&quot;item&quot;</span>&gt;
        &lt;img src=<span class="synConstant">&quot;https://placehold.jp/150x150.png&quot;</span> alt=<span class="synConstant">&quot;&quot;</span> <span class="synStatement">class</span>=<span class="synConstant">&quot;item__img&quot;</span>&gt;
            &lt;div <span class="synStatement">class</span>=<span class="synConstant">&quot;info&quot;</span>&gt;
                &lt;p <span class="synStatement">class</span>=<span class="synConstant">&quot;info__title&quot;</span>&gt;<span class="synIdentifier">{{</span> name <span class="synIdentifier">}}</span>&lt;/p&gt;
                &lt;div <span class="synStatement">class</span>=<span class="synConstant">&quot;info__detail&quot;</span>&gt;
                    &lt;span <span class="synStatement">class</span>=<span class="synConstant">&quot;info_size&quot;</span>&gt;<span class="synIdentifier">{{</span> size <span class="synIdentifier">}}</span>&lt;/span&gt;
                    &lt;span <span class="synStatement">class</span>=<span class="synConstant">&quot;info_type&quot;</span>&gt;<span class="synIdentifier">{{</span> type <span class="synIdentifier">}}</span>&lt;/span&gt;
                &lt;/div&gt;
            &lt;/div&gt;
        &lt;span <span class="synStatement">class</span>=<span class="synConstant">&quot;item__close&quot;</span> v-on:click=<span class="synConstant">&quot;$emit('delete-item', index)&quot;</span>&gt;×&lt;/span&gt;
    &lt;/div&gt;
&lt;/template&gt;
</pre>


<p><b>RichDrop.vueにコンポーネントを追加</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>&lt;template&gt;
            &lt;drop-item v-<span class="synStatement">for</span>=<span class="synConstant">&quot;(file, index) in files&quot;</span>
                                          key=<span class="synConstant">&quot;index&quot;</span>
                                          :index=<span class="synConstant">&quot;index&quot;</span>
                                          :file=<span class="synConstant">&quot;file&quot;</span>
                                          v-on:<span class="synStatement">delete</span>-item=<span class="synConstant">&quot;deleteItem(index)&quot;</span>&gt;
            &lt;/drop-item&gt;

&lt;/template&gt;
&lt;script&gt;
<span class="synComment">//ドロップしたアイテムを表示するコンポーネント</span>
<span class="synIdentifier">let</span> dropItem = require(<span class="synConstant">'./DropItem'</span>);

    <span class="synStatement">export</span> <span class="synStatement">default</span> <span class="synIdentifier">{</span>

            <span class="synComment">//ドロップしたアイテム削除する</span>
            deleteItem:<span class="synIdentifier">function</span>(index)<span class="synIdentifier">{</span>
               <span class="synIdentifier">this</span>.files.splice(index, 1);
            <span class="synIdentifier">}</span>
    <span class="synIdentifier">}</span>
&lt;/script&gt;
</pre>


<h2>イメージを表示する</h2>

-----
--------
AUTHOR: konoemario
TITLE: component
BASENAME: 2018/02/15/231434
STATUS: Draft
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 02/07/2018 20:01:22
-----
BODY:

<pre class="code lang-javascript" data-lang="javascript" data-unlink>
<span class="synComment">//ドラッグドロップでドロップしたファイル</span>
<span class="synStatement">const</span> dropitem = require(<span class="synConstant">'./dropItem'</span>);

<span class="synComment">/**</span>
<span class="synComment"> * ドラッグ&amp;ドロップ,またはファイル選択で選択したファイルを保持するコンポーネント</span>
<span class="synComment"> * 複数ファイルのドラッグ &amp; ドロップが可能</span>
<span class="synComment"> * ドラッグ &amp; ドロップしたデータは、子コンポーネントであるdropitemにfileを渡すことで、各種情報(ファイル名、サイズ等)を表示している。</span>
<span class="synComment"> *</span>
<span class="synComment"> * 親コンポートでの使用方法は以下を想定している。</span>
<span class="synComment"> *</span>
<span class="synComment"> *      ex:親コンポートかの定義</span>
<span class="synComment"> *          &lt;multidrop extension=&quot;png, jpg&quot; ref=&quot;multidrop&quot;&gt;&lt;/multidrop&gt;</span>
<span class="synComment"> *</span>
<span class="synComment"> * ドラッグドロップしたファイルを親コンポートから使用する場合、残念ながらref属性を用いて直接参照するようにしてほしい。</span>
<span class="synComment"> *</span>
<span class="synComment"> *      ex:親コンポートからドラッグドロップしたファイルを参照</span>
<span class="synComment"> *          this.$refs.multidrop.files</span>
<span class="synComment"> *</span>
<span class="synComment"> * また、ドラッグドロップしたファイルを親コンポートのdataにバインドさせる場合、以下のように@sync-fileイベントを定義して</span>
<span class="synComment"> * syncFileメソッド内で設定してほしい。</span>
<span class="synComment"> * this.$refs.mulutidrop.filesは、ファイルをドロップしない限り作成されないので、初期値としてバインドしてもうまくいかない。</span>
<span class="synComment"> *</span>
<span class="synComment"> *      ex:ドロップしたファイルを親コンポートのdataにバインド</span>
<span class="synComment"> *          &lt;multidrop extension=&quot;.png,.jpg&quot; ref=&quot;multidrop&quot; @sync-file=&quot;syncFile&quot;&gt;&lt;/multidrop&gt;</span>
<span class="synComment"> *</span>
<span class="synComment"> *          methods:{</span>
<span class="synComment"> *              //子コンポーネントのドロップファイルと同期をとる</span>
<span class="synComment"> *              syncFile:function(){</span>
<span class="synComment"> *                  this.imgs = this.$refs.multidrop.files:</span>
<span class="synComment"> *              }</span>
<span class="synComment"> *          }</span>
<span class="synComment"> */</span>
module.exports = Vue.extend(<span class="synIdentifier">{</span>
   props:<span class="synIdentifier">{</span>
       <span class="synComment">//ファイル選択、ドロップで受け入れるファイルの拡張子 extension=&quot;.png,.jpg&quot;　等複数の拡張子を設定できる</span>
       extension:<span class="synType">String</span>|<span class="synType">Array</span>
   <span class="synIdentifier">}</span>,
   computed:<span class="synIdentifier">{</span>
       <span class="synComment">/**</span>
<span class="synComment">        * method内では拡張子にピリオドが不要なので除去した状態にする。</span>
<span class="synComment">        * ※template内のinputタグ内ではピリオドが必要になる。</span>
<span class="synComment">        */</span>
       getExtension()<span class="synIdentifier">{</span>
           <span class="synIdentifier">let</span> array = <span class="synIdentifier">this</span>.extension.split(<span class="synConstant">','</span>);
           <span class="synStatement">return</span> array.map(value =&gt; <span class="synIdentifier">{</span>
               <span class="synComment">//ピリオドの除去</span>
               value = value.replace(<span class="synStatement">new</span> <span class="synType">RegExp</span>(<span class="synConstant">'</span><span class="synSpecial">\\</span><span class="synConstant">.'</span>, <span class="synConstant">'g'</span>), <span class="synConstant">''</span>);
               <span class="synComment">//スペースの除去</span>
               value.trim();
               <span class="synStatement">return</span> value;
            <span class="synIdentifier">}</span>);
       <span class="synIdentifier">}</span>
   <span class="synIdentifier">}</span>,
   template:`
               &lt;div <span class="synStatement">class</span>=<span class="synConstant">&quot;drop&quot;</span>&gt;
                 &lt;div <span class="synStatement">class</span>=<span class="synConstant">&quot;drop__area&quot;</span> v-on:dragleave.prevent v-on:dragover.prevent v-on:drop.prevent=<span class="synConstant">&quot;onDropFile&quot;</span>&gt;
                    &lt;!--ファイル選択前の表示--&gt;
                    &lt;div v-<span class="synStatement">if</span>=<span class="synConstant">&quot;!fileExists()&quot;</span>&gt;
                        &lt;div <span class="synStatement">class</span>=<span class="synConstant">&quot;drop__control&quot;</span>&gt;
                            &lt;img <span class="synStatement">class</span>=<span class="synConstant">&quot;drop__img&quot;</span> src=<span class="synConstant">&quot;/img/upload.png&quot;</span>&gt;
                            &lt;p&gt;ここにドラッグ&amp;ドロップ、または&lt;/p&gt;
                            &lt;label <span class="synStatement">class</span>=<span class="synConstant">&quot;drop__select&quot;</span>&gt;ファイルを選択
                              &lt;input <span class="synStatement">class</span>=<span class="synConstant">&quot;drop__input--none&quot;</span> type=<span class="synConstant">&quot;file&quot;</span> name=<span class="synConstant">&quot;file&quot;</span> v-bind:accept=<span class="synConstant">&quot;extension&quot;</span> v-on:change=<span class="synConstant">&quot;onDropFile&quot;</span> multiple=<span class="synConstant">&quot;multiple&quot;</span>&gt;
                            &lt;/label&gt;
                        &lt;/div&gt;
                    &lt;/div&gt;
                    &lt;!--ファイル選択後の表示--&gt;
                    &lt;div v-<span class="synStatement">if</span>=<span class="synConstant">&quot;fileExists()&quot;</span>&gt;
                        &lt;label <span class="synStatement">class</span>=<span class="synConstant">&quot;drop__add&quot;</span>&gt;さらにファイルを追加
                            &lt;input <span class="synStatement">class</span>=<span class="synConstant">&quot;drop__input--none&quot;</span> type=<span class="synConstant">&quot;file&quot;</span> name=<span class="synConstant">&quot;file&quot;</span> v-bind:accept=<span class="synConstant">&quot;extension&quot;</span> v-on:change=<span class="synConstant">&quot;onDropFile&quot;</span> multiple=<span class="synConstant">&quot;multiple&quot;</span>&gt;
                        &lt;/label&gt;
                        &lt;dropitem v-<span class="synStatement">for</span>=<span class="synConstant">&quot;(file, index) in files&quot;</span> key=<span class="synConstant">&quot;index&quot;</span>
                                                                 :index=<span class="synConstant">&quot;index&quot;</span>
                                                                 :file=<span class="synConstant">&quot;file.file&quot;</span>
                                                                 v-on:remove=<span class="synConstant">&quot;removeItem&quot;</span>&gt;
                        &lt;/dropitem&gt;
                    &lt;/div&gt;
                 &lt;/div&gt;
               &lt;/div&gt;
   `,
   methods:<span class="synIdentifier">{</span>
       <span class="synComment">/**</span>
<span class="synComment">        * ファイルをドロップ、またはinputコントロールからファイル選択をした際に発生する</span>
<span class="synComment">        * イベントから呼ばれるメソッド</span>
<span class="synComment">        * 選択されたファイルはFileオブジェクトとして、dataに設定する。</span>
<span class="synComment">        */</span>
       onDropFile:<span class="synIdentifier">function</span>(<span class="synStatement">event</span>)<span class="synIdentifier">{</span>

        <span class="synIdentifier">let</span> fileList = <span class="synStatement">event</span>.dataTransfer ?
        <span class="synStatement">event</span>.dataTransfer.files:
        <span class="synStatement">event</span>.target.files;

        <span class="synStatement">for</span>(<span class="synIdentifier">let</span> i = 0; i &lt; fileList.length ; i++)<span class="synIdentifier">{</span>
            <span class="synComment">//拡張子のチェックを行い、チェックが通ったものだけをfilesに格納する</span>
            <span class="synStatement">if</span>(<span class="synIdentifier">this</span>.validateExtension(fileList<span class="synIdentifier">[</span>i<span class="synIdentifier">]</span>.name, <span class="synIdentifier">this</span>.getExtension))<span class="synIdentifier">{</span>
                <span class="synComment">//要素に追加する</span>
                <span class="synIdentifier">this</span>.files.push( <span class="synIdentifier">{</span>file:fileList<span class="synIdentifier">[</span>i<span class="synIdentifier">]}</span> );
            <span class="synIdentifier">}</span>
        <span class="synIdentifier">}</span>

        <span class="synIdentifier">this</span>.$emit(<span class="synConstant">'sync-files'</span>, <span class="synIdentifier">this</span>.files);
       <span class="synIdentifier">}</span>,
       <span class="synComment">/**</span>
<span class="synComment">        * プロパティに設定されたextensionをもとに拡張子のチェックを行う。</span>
<span class="synComment">        */</span>
       validateExtension:<span class="synIdentifier">function</span>(fileName, extensions)<span class="synIdentifier">{</span>
           <span class="synComment">//ファイル名から拡張子を取得</span>
           fileExtension = fileName.split(<span class="synConstant">'.'</span>).pop()

           <span class="synStatement">for</span>(<span class="synIdentifier">let</span> i <span class="synStatement">in</span> extensions)<span class="synIdentifier">{</span>
                <span class="synComment">//拡張子が引数で指定したものと異なる場合、falseを返す</span>
                <span class="synStatement">if</span>( fileExtension === extensions<span class="synIdentifier">[</span>i<span class="synIdentifier">]</span>) <span class="synStatement">return</span> <span class="synConstant">true</span>;
           <span class="synIdentifier">}</span>

           <span class="synStatement">return</span> <span class="synConstant">false</span>;
       <span class="synIdentifier">}</span>,
       <span class="synComment">/**</span>
<span class="synComment">        * indexに指定されたfilesの要素を削除する。</span>
<span class="synComment">        * 子コンポーネントである、dropItemからデータを削除するイベントが発生した場合に呼ばれる。</span>
<span class="synComment">        */</span>
       removeItem:<span class="synIdentifier">function</span>(index)<span class="synIdentifier">{</span>
            <span class="synIdentifier">this</span>.files.splice(index, 1);
            <span class="synIdentifier">this</span>.$emit(<span class="synConstant">'sync-files'</span>, <span class="synIdentifier">this</span>.files);
       <span class="synIdentifier">}</span>,
       <span class="synComment">/**</span>
<span class="synComment">        * filesにデータが存在するかをチェックする。</span>
<span class="synComment">        * multiDropコンポーネントでデータの有無によって表示を変更するため、この処理を使用している。</span>
<span class="synComment">        */</span>
       fileExists:<span class="synIdentifier">function</span>()<span class="synIdentifier">{</span>
            <span class="synStatement">if</span>(<span class="synIdentifier">this</span>.files.length &gt; 0)<span class="synIdentifier">{</span>
                <span class="synStatement">return</span> <span class="synConstant">true</span>;
            <span class="synIdentifier">}</span>

            <span class="synStatement">return</span> <span class="synConstant">false</span>;
       <span class="synIdentifier">}</span>
   <span class="synIdentifier">}</span>,
   data: <span class="synIdentifier">function</span>()<span class="synIdentifier">{</span>
       <span class="synStatement">return</span> <span class="synIdentifier">{</span>
           files:<span class="synIdentifier">[]</span>,
       <span class="synIdentifier">}</span>
   <span class="synIdentifier">}</span>,
   components:<span class="synIdentifier">{</span>
       <span class="synComment">//ドロップしたアイテムを表示するコンポーネント</span>
       dropitem:dropitem
   <span class="synIdentifier">}</span>,
<span class="synIdentifier">}</span>)

````

</pre>


<p>//FileAPIのreadAsDataURLをPromsieでラッパーした関数
const ReadFileAsUrl = require('./readFileAsUrl');</p>

<p>/<em>*
 * ドロップしたファイルの情報を表示するコンポーネント
 </em>/
module.exports = Vue.extend({
   props:{
       index:Number,
       file:File,
   },
   template:<code>
               &lt;div class="drop-item"&gt;
                    &lt;img class="drop-item__img" :src="url" width="30" height="30" alt="failed"&gt;&lt;/img&gt;
                    &lt;div class="drop-item__fileinfo"&gt;
                        &lt;label class="drop-item__fileName"&gt;{{ fileName }}&lt;/label&gt;
                        &lt;div class="drop-item__detail"&gt;
                            &lt;label class="drop-item__size"&gt;{{ sizeKB }}&lt;/label&gt;
                            &lt;label class="drop-item__type"&gt;{{ type }}&lt;/label&gt;
                        &lt;/div&gt;
                    &lt;/div&gt;
                    &lt;img class="drop-item__close" src="/img/close.png" width="10" height="10" v-on:click="$emit('remove', index)"&gt;&lt;/img&gt;
               &lt;/div&gt;
  </code>,
   computed:{
       //ファイル名
       fileName:function(){
           if(this.file.name.length > 30){
                return this.file.name.slice(0, 30) + '...';
           }</p>

<pre><code>       return this.file.name;
   },
   //ファイルのサイズ
   sizeKB:function(){
       if(this.file.size === 0) return '0 KB'

       return Math.ceil(this.file.size / 1024) + ' KB';
   },
   //ファイルのMIMEタイプ
   type:function(){
       return this.file.type;
   },
</code></pre>

<p>   },
   data: function(){
       return {
           //base64 エンコーディングされた data: URL の文字列
           url:''
       }
   },
   mounted:function(){
        /<em>*
         * ファイルからdata:URLの文字列を生成する
         * urlについてもcomputedに定義したかったが、FileReaderが非同期であるため
         * mountされたタイミングで処理を行うようにしている。
         *
         * 非同期の処理もcomputedで書ける方法があれば、平仄を合わせるという観点でそちらに記載したい。
         </em>/
        ReadFileAsUrl(this.file)
        .then((url) =>{
            this.url = url;
        })
   }
});</p>

<pre class="code" data-lang="" data-unlink>
</pre>


<p>/<em><em>
 * FileReadをPromiseでラップしただけのクラス
 * @param {</em>} file
 </em>/
module.exports  = function(url){
    return new Promise(function(resolve, reject){</p>

<pre><code>    axios.get(url,{responseType:'blob'})
    .then((res)=&gt;{
      let type = res.headers['content-type'];
      let lastModified = res.headers['last-modified'];
      let property = {
        type: type,
        lastModified:lastModified
      }

      let file = new File([res.data],'あとで出す', property)

      resolve(file);

    })
    .catch((error)=&gt;{
      reject(error)
    })


});
</code></pre>

<p>}</p>

<pre class="code" data-lang="" data-unlink>

</pre>


<p>/<em>*
 * チケット登録画面
 </em>/</p>

<p>'use strict';</p>

<p>//Vueインスタンスのベース
let coupon = require('../mixins/post');
//ドラッグ&amp;ドロップコンポーネント
let drop = require('../mixins/drop');
let multidrop = require('../mixins/multiDrop');
//更新する際のコンポーネント
const Edit = require('../mixins/edit');
//AJAXで取得したイメージからFileオブジェクトを生成する
const createFile = require('../mixins/createFile');
//フォーム用のクラス
const Form = require('../mixins/form');</p>

<p>coupon('#createForm', {}, [{
  data: {
    form: new Form({
      //チケット名
      couponName: '',
      //商品名
      productName: '',
      //加盟店ID
      storeId: '',
      //進呈ポイント数
      point: '',
      //有効期間開始日
      ticketStart: '',
      //有効期間終了日
      ticketEnd: '',
      //特集チケット
      recommend: '0',
      //上限枚数
      upper: '0',
      //サムネイル画像
      thumbnail: '',
      //カスタムターゲット
      customTarget: '',
      //商品画像
      imgs: <span data-unlink>,
      //JANコード
      janCode: '',
      //チケット説明
      description: '',
      //セグメント
      segment: </span>,
    }),
    targetUrl: '/ticket',
    thumbnailUrl: '',
    imageUrl: <span data-unlink>,
    files: </span>,
  },
  computed:{
     storeName:function(){
      return  this.form.storeId.split('_')[1];
    }
  },
  methods: {
    /<em>*
     * クーポンの画像の設定を行う
     </em>/
    setCoupon: function(file) {</p>

<pre><code>  if(file !== ''){
    this.form.thumbnail = file;
    //URL生成をする
    this.thumbnailUrl = window.URL.createObjectURL(file);
  }else{
    //リセットの場合
    this.form.thumbnail = '';
    this.thumbnailUrl = '';
  }
},
/**
 * カスタムターゲットの設定を行う
 */
setCustomTarget: function(file) {
  this.form.customTarget = file;
},
/**
 * 商品画像の設定を行う
 * 子コンポーネントのドロップファイルと同期をとる
 */
setProductImages: function(files) {
  //ファイルを入れなおした際に配列のリセット
  this.imageUrl = [];
  this.form.imgs = [];

  for (let i = 0; i &lt; files.length; i++) {
    this.imageUrl.push(window.URL.createObjectURL(files[i].file));
    this.form.imgs.push(files[i].file);
  }

},
/**
 *登録ではなく編集に切り替えるメソッド
 *更新用コンポーネントから呼ばれる
 */
toEditMode:function(data){

    //JANコードは、JSON形式で格納されているものを、改行付きの文字列にする。
    let jancode_json = JSON.parse(data.jan_code);
    let jancode = '';

    for(let i in jancode_json){
        jancode += jancode_json[i] + '\n';
    }

    //セグメントIDは、JSON形式で格納されているものを、配列にする。
    let segment_json = JSON.parse(data.segment_id);
    let segment = [];
    for(let i in segment_json){
       segment.push(segment_json[i]);
    }

    //商品画像は、JSON形式で格納されているものを配列にする。
    let imgs_json = JSON.parse(data.imgs);
    let imgs = [];
    let imgsUrl = [];

    for(let i in imgs_json){

      imgs.push(imgs_json[i]);
      imgsUrl.push('//' + imgs_json[i]);

      createFile(imgsUrl[i])
      .then((file)=&gt;{
        this.$refs.multidrop.files.push({
          file:file
        });

        this.imageUrl.push(imgsUrl[i]);
      })
      .catch((error)=&gt;{
        console.log(error);
      })
    }

    //既に登済みのデータをformに設定する
    let value = {
      couponName: data.managed_name,
      productName: data.name,
      storeId: data.stores_id + '_' + data.store_name,
      point: data.point,
      ticketStart: data.start_date.substring(0, 10),
      ticketEnd: data.expiration_date.substring(0, 10),
      recommend: data.recommend_flg,
      upper: data.upper_limit,
      thumbnail: data.thumbnail,
      customTarget: '',
      imgs: imgs,
      janCode: jancode,
      description: data.description,
      segment: segment
    }

    //フォームにデータをセット
    this.form.setRegistredValue(value);

    let thumbnailUrl = '//' + data.thumbnail;
    this.thumbnailUrl = thumbnailUrl;

    //子コンポーネントにセット
    this.$refs.drop.url = thumbnailUrl;
    this.$refs.drop.file = data.thumbnail;

    //submit時のリクエストタイプ、リクエスト先を変更する
    this.requestType = 'put';
    this.targetUrl = '/ticket/'+data.id;
}
</code></pre>

<p>  },
  components: {
    dropfile: drop,
    multidropfile: multidrop,
    //更新用コンポーネント
    Edit
  }
}]);</p>

<pre class="code" data-lang="" data-unlink>
</pre>


<p>.drop-item{
    display: flex;
    border-bottom:1px solid #efefef;
    padding:2px;
    align-items: center;</p>

<pre><code>//ファイルの情報
&amp;__fileinfo{
    margin-left: 10px;
    width: 70%;
}    

//size type等の詳細
&amp;__detail{
    font-size:10px
}


//削除ボタン
&amp;__close{
    margin-left: auto;
    margin-right: 10px;
}
</code></pre>

<p>}</p>

-----
--------
AUTHOR: konoemario
TITLE: Laravelメモ
BASENAME: 2018/01/29/180304
STATUS: Draft
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 01/25/2018 07:34:03
-----
BODY:
<p><iframe src="https://hatenablog-parts.com/embed?url=http%3A%2F%2Frecipes.laravel.jp%2Frecipe%2F96" title="Laravel Recipes日本語版 | リクエストのライフサイクルについて理解する" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://recipes.laravel.jp/recipe/96">recipes.laravel.jp</a></cite></p>

<p><a href="https://www.craneto.co.jp/archives/1264/">https://www.craneto.co.jp/archives/1264/</a></p>

-----
--------
AUTHOR: konoemario
TITLE: ファイルアップロード機能で学ぶVue.js(2)
BASENAME: 2018/01/22/223224
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 01/22/2018 22:32:24
CATEGORY: Vue.js
CATEGORY: javascript
CATEGORY: プログラム
IMAGE: https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20180118/20180118222045.png
-----
BODY:
<h1 id="日記">日記</h1>

<p>なんかこう人生に対してやる気がでないときってあるよね！  <br/>
今、そんな感じ。</p>

<p>よくあるのであまり気にしてないのだけれども、もしこれが続くようなことがあった場合、フリーランスだと怖いなぁって思う。<br/>
小説の死のロングウォークを思い出したりするよ。</p>

<p>よくよく考えれば、会社員でも同じかもしれないけれども。</p>

<h1 id="前回の続き">前回の続き</h1>

<p>前回は<code>drop.vue</code>コンポーネントを作成して、<code>main.js</code>に登録したところまでを行いました。</p>

<p><figure class="figure-image figure-image-fotolife" title="前回の様子"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20180118/20180118222045.png" alt="f:id:konoemario:20180118222045p:plain" title="f:id:konoemario:20180118222045p:plain" class="hatena-fotolife" itemprop="image"></span><figcaption>前回の様子</figcaption></figure></p>

<p>その続きを書いていくんだよ！</p>

<ul class="table-of-contents">
    <li><a href="#日記">日記</a></li>
    <li><a href="#前回の続き">前回の続き</a><ul>
            <li><a href="#dropvueにドラッグ--ドロップでファイル選択を追加する">drop.vueにドラッグ &amp; ドロップでファイル選択を追加する</a></li>
            <li><a href="#onDropの処理を書く">onDropの処理を書く</a></li>
            <li><a href="#ちょっと前回を振りかえる">ちょっと前回を振りかえる</a></li>
            <li><a href="#子のdropvueから親にデータを渡す">子のdrop.vueから親にデータを渡す</a></li>
        </ul>
    </li>
</ul>

<p><br/></p>

<h2 id="dropvueにドラッグ--ドロップでファイル選択を追加する">drop.vueにドラッグ &amp; ドロップでファイル選択を追加する</h2>

<p>前回は、inputタグだけを使ってファイル選択のみがてきていた状態でしたが、当初の予定通りドラッグ&amp;ドロップ機能もつけていきます。</p>

<p>まずはテンプレートですが、以下のように、ドラッグ&amp;ドロップができるエリアを用意してあげます。<br/>
スタイルは、ここには記載しませんが、<code>drop</code>クラスに対してpaddingなりwidth、heightを指定して、エリアを確保しています。</p>

<p><b>drop.vue</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>&lt;template&gt;
    &lt;div <span class="synStatement">class</span>=<span class="synConstant">&quot;drop&quot;</span> @dragleave.prevent @dragover.prevent @drop.prevent=<span class="synConstant">&quot;onDrop&quot;</span>&gt;
    &lt;/div&gt;
&lt;/template&gt;
</pre>


<p><code>@dragleave.prevent</code>あたりはドラッグ&amp;ドロップでファイル選択するにあたって定番の処理でしょうか。<br/>
ブラウザにドラッグ&amp;ドロップをしてしまうと、ブラウザがファイルを表示しようとしてくれます。<br/>
Vue.jsではイベント名の後に<code>.prevent</code>と書くこと、デフォルトのイベントの処理をキャンセルすることができます。</p>

<p>ドラッグ&amp;ドロップを行ったときのファイルは<code>@drop</code>イベントが発生したときの<code>onDrop</code>に書くことにします。</p>

<p>さて、<code>onDrop</code>の処理を書く前に、ドラッグ&amp;ドロップのエリアの中にinputタグもいれることにします。</p>

<p><b>drop.vue</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>&lt;template&gt;
    &lt;div <span class="synStatement">class</span>=<span class="synConstant">&quot;drop&quot;</span> @dragleave.prevent @dragover.prevent @drop.prevent=<span class="synConstant">&quot;onDrop&quot;</span>&gt;
        &lt;div <span class="synStatement">class</span>=<span class="synConstant">&quot;drop__default-container&quot;</span>&gt;
            &lt;label&gt; ファイルを選択
                &lt;input <span class="synStatement">class</span>=<span class="synConstant">&quot;drop__input&quot;</span> type=<span class="synConstant">&quot;file&quot;</span> multiple=<span class="synConstant">&quot;multiple&quot;</span> @change=<span class="synConstant">&quot;onDrop&quot;</span>&gt;
            &lt;/label&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/template&gt;
</pre>


<p>こんな感じになりました。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20180122/20180122222838.png" alt="f:id:konoemario:20180122222838p:plain" title="f:id:konoemario:20180122222838p:plain" class="hatena-fotolife" itemprop="image"></span></p>

<h2 id="onDropの処理を書く">onDropの処理を書く</h2>

<p>つづいて<code>onDrop</code>の処理を書いていきます。</p>

<p>といっても大した内容ではないのでさくっといきます。</p>

<p><b>drop.vue</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>
&lt;script&gt;
    <span class="synStatement">export</span> <span class="synStatement">default</span> <span class="synIdentifier">{</span>
        methods:<span class="synIdentifier">{</span>
        <span class="synComment">//inputタグとドラッグ&amp;ドロップから呼ばれる</span>
            onDrop:<span class="synIdentifier">function</span>(<span class="synStatement">event</span>)<span class="synIdentifier">{</span>
                <span class="synIdentifier">let</span> fileList = <span class="synStatement">event</span>.target.files ? 
                               <span class="synStatement">event</span>.target.files:
                               <span class="synStatement">event</span>.dataTransfer.files;

                <span class="synIdentifier">let</span> files = <span class="synIdentifier">[]</span>;

                <span class="synStatement">for</span>(<span class="synIdentifier">let</span> i = 0; i &lt; fileList.length; i++)<span class="synIdentifier">{</span>
                    files.push(fileList<span class="synIdentifier">[</span>i<span class="synIdentifier">]</span>);
                <span class="synIdentifier">}</span>
            <span class="synIdentifier">}</span>
        <span class="synIdentifier">}</span>,
    <span class="synIdentifier">}</span>
&lt;/script&gt;
</pre>


<p><code>onDrop</code>はファイル選択とドラッグ&amp;ドロップから呼ばれます。<br/>
ファイル選択から呼ばれた場合、<code>event.target.files</code>からファイルを取得することができます。</p>

<p>一方、ドラッグ&amp;ドロップの場合は、<code>event.dataTransfer.files</code>で取得することができます。</p>

<p>その後に、取得したファイルを<code>files</code>変数に格納しています。</p>

<p>これだけでとりあえず、ファイルを取得するコンポーネントdropが完成しました！</p>

<p><br/></p>

<h2 id="ちょっと前回を振りかえる">ちょっと前回を振りかえる</h2>

<p>前回は、dropコンポーネントをもつ<code>main.js</code>がいました。<br/>
<code>main.js</code>は<code>create.html</code>のフォームの内容をaxiosでサーバーに送信する処理を担っています。</p>

<p><b>main.js</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synComment">//ファイル選択コンポーネント</span>
<span class="synStatement">const</span> Drop = require(<span class="synConstant">'./components/drop'</span>);

<span class="synStatement">new</span> Vue(<span class="synIdentifier">{</span>
    el:<span class="synConstant">'.form'</span>,
    data:<span class="synIdentifier">{</span>
        <span class="synComment">//タイトル</span>
        title:<span class="synConstant">''</span>,
        <span class="synComment">//ファイル</span>
        files:<span class="synIdentifier">[]</span>
    <span class="synIdentifier">}</span>,
    methods:<span class="synIdentifier">{</span>
        <span class="synComment">//ファイル送信処理</span>
        onSubmit:<span class="synIdentifier">function</span>()<span class="synIdentifier">{</span>
            <span class="synComment">//送信データはFormDataを使うよ！</span>
            <span class="synIdentifier">let</span> data = <span class="synStatement">new</span> FormData;

            <span class="synComment">//titleを追加</span>
            data.append(<span class="synConstant">'title'</span>, <span class="synIdentifier">this</span>.title);

            <span class="synComment">//filesは複数ファイルを選択できる想定なのでループで追加するよ！</span>
            <span class="synStatement">for</span>(<span class="synIdentifier">let</span> i = 0; i &lt; <span class="synIdentifier">this</span>.files.length; i++)<span class="synIdentifier">{</span>
                data.append(<span class="synConstant">'files[]'</span>, <span class="synIdentifier">this</span>.files<span class="synIdentifier">[</span>i<span class="synIdentifier">]</span>);
            <span class="synIdentifier">}</span>

            <span class="synComment">//axiosでサーバーに送るよ！</span>
            axios.post(<span class="synConstant">'/file'</span>,data)
            .then((response) =&gt; <span class="synIdentifier">{</span>
                console.log(response.data);
            <span class="synIdentifier">}</span>)
            .<span class="synStatement">catch</span>((error) =&gt; <span class="synIdentifier">{</span>
                console.log(error);
            <span class="synIdentifier">}</span>)
        <span class="synIdentifier">}</span>,    
    <span class="synIdentifier">}</span>,
    components:<span class="synIdentifier">{</span>
        <span class="synComment">//コンポーネントを登録する！</span>
        <span class="synConstant">'drop'</span>:Drop
    <span class="synIdentifier">}</span>
</pre>


<p><code>create.html</code>はこんな感じで、省略しちゃってますがさきほどの<code>main.js</code>を読み込んでおります。</p>

<p><b>create.html</b></p>

<pre class="code lang-html" data-lang="html" data-unlink>    <span class="synIdentifier">&lt;</span><span class="synStatement">form</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;simple-form&quot;</span><span class="synIdentifier">&gt;</span>
        <span class="synIdentifier">&lt;</span><span class="synStatement">h2</span><span class="synIdentifier">&gt;</span>ファイルアップロード<span class="synIdentifier">&lt;/</span><span class="synStatement">h2</span><span class="synIdentifier">&gt;</span>
        <span class="synIdentifier">&lt;</span><span class="synStatement">label</span><span class="synIdentifier"> </span><span class="synType">for</span><span class="synIdentifier">=</span><span class="synConstant">&quot;title&quot;</span><span class="synIdentifier">&gt;</span>タイトル<span class="synIdentifier">&lt;/</span><span class="synStatement">label</span><span class="synIdentifier">&gt;</span>
        <span class="synIdentifier">&lt;</span><span class="synStatement">input</span><span class="synIdentifier"> </span><span class="synType">type</span><span class="synIdentifier">=</span><span class="synConstant">&quot;text&quot;</span><span class="synIdentifier"> </span><span class="synType">name</span><span class="synIdentifier">=</span><span class="synConstant">&quot;title&quot;</span><span class="synIdentifier"> v-model=</span><span class="synConstant">&quot;title&quot;</span><span class="synIdentifier">&gt;</span>
        <span class="synIdentifier">&lt;</span><span class="synStatement">button</span><span class="synIdentifier"> </span><span class="synType">type</span><span class="synIdentifier">=</span><span class="synConstant">&quot;button&quot;</span><span class="synIdentifier"> @click=</span><span class="synConstant">&quot;onSubmit&quot;</span><span class="synIdentifier">&gt;</span>投稿する<span class="synIdentifier">&lt;/</span><span class="synStatement">button</span><span class="synIdentifier">&gt;</span>
        <span class="synIdentifier">&lt;</span>drop<span class="synIdentifier">&gt;&lt;/</span>drop<span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;/</span><span class="synStatement">form</span><span class="synIdentifier">&gt;</span>
</pre>


<p>図にするとこんな感じでしょうか。</p>

<p><figure class="figure-image figure-image-fotolife" title="わかりにくい関係図"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20180122/20180122215656.png" alt="f:id:konoemario:20180122215656p:plain" title="f:id:konoemario:20180122215656p:plain" class="hatena-fotolife" itemprop="image"></span><figcaption>わかりにくい関係図</figcaption></figure></p>

<p>それでですね、今<code>drop.vue</code>にファイル選択とドラッグ&amp;ドロップでファイルを取得することができるようになりました。</p>

<p><figure class="figure-image figure-image-fotolife" title="今の状態"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20180122/20180122220034.png" alt="f:id:konoemario:20180122220034p:plain" title="f:id:konoemario:20180122220034p:plain" class="hatena-fotolife" itemprop="image"></span><figcaption>今の状態</figcaption></figure></p>

<p>今回、この取得したファイルをmain.jsに渡して、サーバーに送信したいわけです。</p>

<p><br/></p>

<h2 id="子のdropvueから親にデータを渡す">子のdrop.vueから親にデータを渡す</h2>

<p>ということで、Vue.jsのコンポーネントで避けて通れないemitを使うことにします。</p>

<p>このへんについては、以前も書いたのでここでは割愛します。<br/>
<iframe src="https://hatenablog-parts.com/embed?url=http%3A%2F%2Fwww.tohuandkonsome.site%2Fentry%2F2017%2F10%2F09%2F004525" title="3連休だしVue.jsをはじめよう：コンポーネントを使ってみる - 豆腐とコンソメ" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://www.tohuandkonsome.site/entry/2017/10/09/004525">www.tohuandkonsome.site</a></cite></p>

<p>イメージはものっそい汚い絵ですが、こんな感じになります。<br/>
<figure class="figure-image figure-image-fotolife" title="汚い絵"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20180122/20180122221122.png" alt="f:id:konoemario:20180122221122p:plain" title="f:id:konoemario:20180122221122p:plain" class="hatena-fotolife" itemprop="image"></span><figcaption>汚い絵</figcaption></figure></p>

<p>コードはこんな感じになります。</p>

<p><b>drop.vue</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>&lt;script&gt;
    <span class="synStatement">export</span> <span class="synStatement">default</span> <span class="synIdentifier">{</span>
        methods:<span class="synIdentifier">{</span>
        <span class="synComment">//inputタグとドラッグ&amp;ドロップから呼ばれる</span>
            onDrop:<span class="synIdentifier">function</span>(<span class="synStatement">event</span>)<span class="synIdentifier">{</span>
                <span class="synIdentifier">let</span> fileList = <span class="synStatement">event</span>.target.files ? 
                               <span class="synStatement">event</span>.target.files:
                               <span class="synStatement">event</span>.dataTransfer.files;

                <span class="synIdentifier">let</span> files = <span class="synIdentifier">[]</span>;

                <span class="synStatement">for</span>(<span class="synIdentifier">let</span> i = 0; i &lt; fileList.length; i++)<span class="synIdentifier">{</span>
                    files.push(fileList<span class="synIdentifier">[</span>i<span class="synIdentifier">]</span>);
                <span class="synIdentifier">}</span>

                <span class="synComment">//イベントsend-fileを発火させて、files変数を渡す</span>
                <span class="synIdentifier">this</span>.$emit(<span class="synConstant">'send-file'</span>, files);
            <span class="synIdentifier">}</span>
        <span class="synIdentifier">}</span>,
    <span class="synIdentifier">}</span>
&lt;/script&gt;
</pre>


<p><code>create.html</code>では、ややこしいですがdrop.vueが発生するイベント<code>send-file</code>をキャッチして、<code>sendFile</code>関数を呼びます。</p>

<p><b>create.html</b></p>

<pre class="code lang-html" data-lang="html" data-unlink>    <span class="synIdentifier">&lt;</span><span class="synStatement">form</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;simple-form&quot;</span><span class="synIdentifier">&gt;</span>
        <span class="synIdentifier">&lt;</span><span class="synStatement">h2</span><span class="synIdentifier">&gt;</span>ファイルアップロード<span class="synIdentifier">&lt;/</span><span class="synStatement">h2</span><span class="synIdentifier">&gt;</span>
        <span class="synIdentifier">&lt;</span><span class="synStatement">label</span><span class="synIdentifier"> </span><span class="synType">for</span><span class="synIdentifier">=</span><span class="synConstant">&quot;title&quot;</span><span class="synIdentifier">&gt;</span>タイトル<span class="synIdentifier">&lt;/</span><span class="synStatement">label</span><span class="synIdentifier">&gt;</span>
        <span class="synIdentifier">&lt;</span><span class="synStatement">input</span><span class="synIdentifier"> </span><span class="synType">type</span><span class="synIdentifier">=</span><span class="synConstant">&quot;text&quot;</span><span class="synIdentifier"> </span><span class="synType">name</span><span class="synIdentifier">=</span><span class="synConstant">&quot;title&quot;</span><span class="synIdentifier"> v-model=</span><span class="synConstant">&quot;title&quot;</span><span class="synIdentifier">&gt;</span>
        <span class="synIdentifier">&lt;</span><span class="synStatement">button</span><span class="synIdentifier"> </span><span class="synType">type</span><span class="synIdentifier">=</span><span class="synConstant">&quot;button&quot;</span><span class="synIdentifier"> @click=</span><span class="synConstant">&quot;onSubmit&quot;</span><span class="synIdentifier">&gt;</span>投稿する<span class="synIdentifier">&lt;/</span><span class="synStatement">button</span><span class="synIdentifier">&gt;</span>
        <span class="synIdentifier">&lt;</span>drop<span class="synIdentifier"> @send-file=</span><span class="synConstant">&quot;sendFile&quot;</span><span class="synIdentifier">&gt;&lt;/</span>drop<span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;/</span><span class="synStatement">form</span><span class="synIdentifier">&gt;</span>
</pre>


<p>最後に<code>sendFile</code>関数を<code>main.js</code>に書いてあげます。</p>

<p><b>main.js</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synComment">//ファイル選択コンポーネント</span>
<span class="synStatement">const</span> Drop = require(<span class="synConstant">'./components/drop'</span>);

<span class="synStatement">new</span> Vue(<span class="synIdentifier">{</span>
    el:<span class="synConstant">'.form'</span>,
    data:<span class="synIdentifier">{</span>
        <span class="synComment">//タイトル</span>
        title:<span class="synConstant">''</span>,
        <span class="synComment">//ファイル</span>
        files:<span class="synIdentifier">[]</span>
    <span class="synIdentifier">}</span>,
    methods:<span class="synIdentifier">{</span>
        <span class="synComment">//ファイル送信処理</span>
        onSubmit:<span class="synIdentifier">function</span>()<span class="synIdentifier">{</span>
          <span class="synComment">//省略</span>
        <span class="synIdentifier">}</span>,    
        sendFile(files)<span class="synIdentifier">{</span>
            <span class="synIdentifier">this</span>.files = files;
        <span class="synIdentifier">}</span>
    <span class="synIdentifier">}</span>,
    components:<span class="synIdentifier">{</span>
        <span class="synComment">//コンポーネントを登録する！</span>
        <span class="synConstant">'drop'</span>:Drop
    <span class="synIdentifier">}</span>
</pre>


<p><code>senfFile</code>は、<code>drop.vue</code>が発火させるイベントからfiles変数を受け取っています。この中身を<code>main.js</code>のデータである<code>this.files</code>に格納することで無事、子から親にデータを渡すことができました。</p>

<p>あとは、前回書きました<code>onSubmit</code>の処理を書くことで選択したファイルをサーバーに送信することができるようになりました。</p>

<p>やりたかったことは以上になります。</p>

<p>他にもdrop.vueコンポーネントは、ファイル選択したあとも見た目がかわらなかったりするので、もう少し使い勝手のよいコンポーネントに直したりとかも宿題はあるのですが、こちらは気がむいたら書いていこうと思います。</p>

-----
--------
AUTHOR: konoemario
TITLE: vuetesting
BASENAME: 2018/01/19/160931
STATUS: Draft
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 01/19/2018 10:53:51
-----
BODY:
<h1>vue testing</h1>

<p><a href="https://laracasts.com/series/testing-vue/episodes/1">Testing Vue: TDD Your First Vue Component From Scratch</a></p>

<p><a href="https://vue-test-utils.vuejs.org/ja/guides/testing-SFCs-with-mocha-webpack.html">Mocha + webpack &#x306B;&#x3088;&#x308B;&#x5358;&#x4E00;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x30B3;&#x30F3;&#x30DD;&#x30FC;&#x30CD;&#x30F3;&#x30C8;&#x306E;&#x30C6;&#x30B9;&#x30C8; &middot; vue-test-utils</a></p>

<p>作業ディレクトリ
git/testingvue</p>

<p>npmの初期設定</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ npm init <span class="synSpecial">-y</span>
</pre>


<p>何はともあれvue</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ npm install vue
</pre>


<p>testing-vue</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ npm install vue-<span class="synStatement">test</span>-utils <span class="synSpecial">--save-dev</span>
</pre>


<p>謎のmocha</p>

<p><a href="https://vue-test-utils.vuejs.org/ja/guides/testing-SFCs-with-mocha-webpack.html">Mocha + webpack &#x306B;&#x3088;&#x308B;&#x5358;&#x4E00;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x30B3;&#x30F3;&#x30DD;&#x30FC;&#x30CD;&#x30F3;&#x30C8;&#x306E;&#x30C6;&#x30B9;&#x30C8; &middot; vue-test-utils</a></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ npm install mocha mocha-webpack <span class="synSpecial">--save-dev</span>
</pre>


<p>サンプルプログラムを作成</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ <span class="synStatement">mkdir</span> <span class="synSpecial">-p</span> src/compontents
$ <span class="synStatement">touch</span> src/components/Counter.js
</pre>


<p>テストコードっぽいものを同時に作成</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ <span class="synStatement">mkdir</span> <span class="synStatement">test</span>
$ <span class="synStatement">touch</span> counter.spec.js
</pre>


<p>テスト実行、エラーっぽくなる。</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ npm <span class="synStatement">test</span>
<span class="synStatement">&gt;</span> testingvue@1.0.0 <span class="synStatement">test</span> /mnt/c/Users/yamauchi.ryoji/home/tohu/git/ryomasao/testingvue
<span class="synStatement">&gt;</span> <span class="synStatement">echo</span><span class="synConstant"> </span><span class="synStatement">&quot;</span><span class="synConstant">Error: no test specified</span><span class="synStatement">&quot;</span><span class="synConstant"> </span>&amp;&amp; <span class="synStatement">exit</span> <span class="synConstant">1</span>

Error: no <span class="synStatement">test</span> specified
npm ERR! Test failed.  See above <span class="synStatement">for</span> more 
</pre>


<p>npm test はpackage.jsonのtestを実行してるんだった。</p>

<pre class="code lang-json" data-lang="json" data-unlink><span class="synSpecial">{</span>
  &quot;<span class="synStatement">name</span>&quot;: &quot;<span class="synConstant">testingvue</span>&quot;,
  &quot;<span class="synStatement">version</span>&quot;: &quot;<span class="synConstant">1.0.0</span>&quot;,
  &quot;<span class="synStatement">description</span>&quot;: &quot;&quot;,
  &quot;<span class="synStatement">main</span>&quot;: &quot;<span class="synConstant">index.js</span>&quot;,
  &quot;<span class="synStatement">scripts</span>&quot;: <span class="synSpecial">{</span>
    &quot;<span class="synStatement">test</span>&quot;: &quot;<span class="synConstant">echo </span><span class="synSpecial">\&quot;</span><span class="synConstant">Error: no test specified</span><span class="synSpecial">\&quot;</span><span class="synConstant"> &amp;&amp; exit 1</span>&quot;
  <span class="synSpecial">}</span>,
  &quot;<span class="synStatement">keywords</span>&quot;: <span class="synSpecial">[]</span>,
  &quot;<span class="synStatement">author</span>&quot;: &quot;&quot;,
  &quot;<span class="synStatement">license</span>&quot;: &quot;<span class="synConstant">ISC</span>&quot;,
  &quot;<span class="synStatement">devDependencies</span>&quot;: <span class="synSpecial">{</span>
    &quot;<span class="synStatement">mocha</span>&quot;: &quot;<span class="synConstant">^5.0.0</span>&quot;,
    &quot;<span class="synStatement">mocha-webpack</span>&quot;: &quot;<span class="synConstant">^1.0.1</span>&quot;,
    &quot;<span class="synStatement">vue-test-utils</span>&quot;: &quot;<span class="synConstant">^1.0.0-beta.11</span>&quot;
  <span class="synSpecial">}</span>
<span class="synSpecial">}</span>
</pre>


<p>testの内容を謎のmocha-webpackを使用するように修正
<b>package.json(抜粋)</b></p>

<pre class="code lang-json" data-lang="json" data-unlink><span class="synSpecial">{</span>
   &quot;<span class="synStatement">scripts</span>&quot;: <span class="synSpecial">{</span>
    &quot;<span class="synStatement">test</span>&quot;: &quot;<span class="synConstant">mocha-webpack --webpack-config webpack.config.js</span>&quot;
  <span class="synSpecial">}</span><span class="synError">,</span>

}
</pre>


<p>webpack.configはないので作成する必要がある。</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ <span class="synStatement">touch</span> webpack.config.js
</pre>


<p>そもそもwebpackが入ってなかった</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ npm install webpack <span class="synSpecial">--save-dev</span>
</pre>


<p>test対象を追記
<b>package.json(抜粋)</b></p>

<pre class="code lang-json" data-lang="json" data-unlink><span class="synSpecial">{</span>
   &quot;<span class="synStatement">scripts</span>&quot;: <span class="synSpecial">{</span>
    &quot;<span class="synStatement">test</span>&quot;: &quot;<span class="synConstant">mocha-webpack --webpack-config webpack.config.js  test/*.spec.js</span>&quot;
  <span class="synSpecial">}</span><span class="synError">,</span>

}
</pre>


<p>おお、なんか動いた</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ npm <span class="synStatement">test</span>
  <span class="synConstant">0</span> passing <span class="synPreProc">(</span><span class="synSpecial">0ms</span><span class="synPreProc">)</span>

 MOCHA  Tests completed successfully
</pre>


<p>assert機能みたいなものかしら。expectをインストール。
'''sh
npm install expect --save-dev</p>

<pre class="code" data-lang="" data-unlink>

</pre>


<p>import { mount } from 'vue-test-utils';
// let mount = require('vue-test-utils').mount</p>

<p>import Counter from '../src/components/Counter.js';
// let Counter = require('')</p>

<p>import expect from 'expect';</p>

<p>describe('Counter', ()=>{</p>

<pre><code>it('default to a count of 0', ()=&gt;{
    let wrapper = mount(Counter);
    expect(wrapper.vm.count).toBe(0);
});
</code></pre>

<p>});</p>

<pre class="code" data-lang="" data-unlink>
</pre>


<p>$npm test
vue-template-compilerがないって怒られる</p>

<pre class="code" data-lang="" data-unlink>
インストール</pre>


<p>$ npm install vue-template-compiler --save-dev</p>

<pre class="code" data-lang="" data-unlink></pre>


<p>npm install --save-dev jsdom jsdom-global</p>

<pre class="code" data-lang="" data-unlink>
ここまでやった</pre>


-----
--------
AUTHOR: konoemario
TITLE: ファイルアップロード機能で学ぶVue.js(1)
BASENAME: 2018/01/18/222857
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 01/18/2018 22:28:57
CATEGORY: Vue.js
CATEGORY: javascript
CATEGORY: プログラム
IMAGE: https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20180116/20180116232953.png
-----
BODY:
<h1 id="日記">日記</h1>

<p>会社で有料セミナーにいってもいいと言われると、お高い普段なかなかいけないような勉強会を探したりしています。</p>

<p>これいいな！と思ったらちょっと高かったりして敬遠したことが何度かあったのに、いざ探すとなるとなかなか見つからないものですね。</p>

<h1 id="本題">本題</h1>

<p>Vue.jsでファイルアップロード処理をつくった際にいろいろと勉強になったので、作成の過程を残しておくよ！</p>

<p>正直なところ、バッドプラクティスみたいなものもいっぱいあるかもしれないし、未だにいろいろ悩んでるんだ。</p>

<p>なので指摘をいだけるととすごくうれしいです！</p>

<p><br/></p>

<h2 id="今回つくりたいもの">今回つくりたいもの</h2>

<p>ファイルとテキスト項目をボタンを押下することで、サーバに送る処理をVueコンポーネントを使ってつくるよ！</p>

<h2 id="環境">環境</h2>

<p>Vue.jsはwebpack(laravel-mix)を使ってコンパイルしているよ！</p>

<ul class="table-of-contents">
    <li><a href="#日記">日記</a></li>
    <li><a href="#本題">本題</a><ul>
            <li><a href="#今回つくりたいもの">今回つくりたいもの</a></li>
            <li><a href="#環境">環境</a></li>
            <li><a href="#まずはHTML">まずはHTML</a></li>
            <li><a href="#最初のmainjs">最初のmain.js</a><ul>
                    <li><a href="#サーバーにデータを送信する処理を書く">サーバーにデータを送信する処理を書く</a></li>
                    <li><a href="#dataを追加する">dataを追加する</a></li>
                    <li><a href="#filesを送る">filesを送る</a></li>
                </ul>
            </li>
            <li><a href="#ようやく本題-コンポートを作成する">ようやく本題 コンポートを作成する</a><ul>
                    <li><a href="#dropvueをつくる">drop.vueをつくる</a></li>
                </ul>
            </li>
        </ul>
    </li>
</ul>

<p><br/></p>

<h2 id="まずはHTML">まずはHTML</h2>

<p>Vue.jsではコンポートとしてHTMLをがりがり書けるだけに、どこまでをVue.jsで書くのか、というのは悩みどころですね。</p>

<p>今回、大まかなレイアウトはHTMLファイルとして、直接書くことにします。
「タイトル」のテキスト入力欄があるだけのシンプルなフォームになります。</p>

<p><figure class="figure-image figure-image-fotolife" title="HTMLの初期イメージ"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20180116/20180116232953.png" alt="f:id:konoemario:20180116232953p:plain" title="f:id:konoemario:20180116232953p:plain" class="hatena-fotolife" itemprop="image"></span><figcaption>HTMLの初期イメージ</figcaption></figure></p>

<p><b>シンプルフォーム「create.html」</b></p>

<pre class="code lang-html" data-lang="html" data-unlink>    <span class="synIdentifier">&lt;</span><span class="synStatement">form</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;simple-form&quot;</span><span class="synIdentifier">&gt;</span>
        <span class="synIdentifier">&lt;</span><span class="synStatement">h2</span><span class="synIdentifier">&gt;</span>ファイルアップロード<span class="synIdentifier">&lt;/</span><span class="synStatement">h2</span><span class="synIdentifier">&gt;</span>
        <span class="synIdentifier">&lt;</span><span class="synStatement">label</span><span class="synIdentifier"> </span><span class="synType">for</span><span class="synIdentifier">=</span><span class="synConstant">&quot;title&quot;</span><span class="synIdentifier">&gt;</span>タイトル<span class="synIdentifier">&lt;/</span><span class="synStatement">label</span><span class="synIdentifier">&gt;</span>
        <span class="synIdentifier">&lt;</span><span class="synStatement">input</span><span class="synIdentifier"> </span><span class="synType">type</span><span class="synIdentifier">=</span><span class="synConstant">&quot;text&quot;</span><span class="synIdentifier"> </span><span class="synType">name</span><span class="synIdentifier">=</span><span class="synConstant">&quot;title&quot;</span><span class="synIdentifier">&gt;</span>
        <span class="synIdentifier">&lt;</span><span class="synStatement">button</span><span class="synIdentifier">&gt;</span>投稿する<span class="synIdentifier">&lt;/</span><span class="synStatement">button</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;/</span><span class="synStatement">form</span><span class="synIdentifier">&gt;</span>
</pre>


<p>上記のHTMLにはコードを見やすくするため、スタイルのためのDOM要素だったり、classは一切書いていません。</p>

<p>ここに、ファイルをドラッグ&amp;ドロップでファイル選択を行うことのできる部品を追加する予定です。</p>

<p><b>未来のcreate.html</b></p>

<pre class="code lang-html" data-lang="html" data-unlink>    <span class="synIdentifier">&lt;</span><span class="synStatement">form</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;simple-form&quot;</span><span class="synIdentifier">&gt;</span>
        <span class="synIdentifier">&lt;</span><span class="synStatement">h2</span><span class="synIdentifier">&gt;</span>ファイルアップロード<span class="synIdentifier">&lt;/</span><span class="synStatement">h2</span><span class="synIdentifier">&gt;</span>
        <span class="synIdentifier">&lt;</span><span class="synStatement">label</span><span class="synIdentifier"> </span><span class="synType">for</span><span class="synIdentifier">=</span><span class="synConstant">&quot;title&quot;</span><span class="synIdentifier">&gt;</span>タイトル<span class="synIdentifier">&lt;/</span><span class="synStatement">label</span><span class="synIdentifier">&gt;</span>
        <span class="synIdentifier">&lt;</span><span class="synStatement">input</span><span class="synIdentifier"> </span><span class="synType">type</span><span class="synIdentifier">=</span><span class="synConstant">&quot;text&quot;</span><span class="synIdentifier"> </span><span class="synType">name</span><span class="synIdentifier">=</span><span class="synConstant">&quot;title&quot;</span><span class="synIdentifier">&gt;</span>
        <span class="synComment">&lt;!-- こんなかんじのVueコンポーネントをつくりたい --&gt;</span>
        <span class="synIdentifier">&lt;</span>drop<span class="synIdentifier">&gt;&lt;/</span>drop<span class="synIdentifier">&gt;</span>
        <span class="synIdentifier">&lt;</span><span class="synStatement">button</span><span class="synIdentifier">&gt;</span>投稿する<span class="synIdentifier">&lt;/</span><span class="synStatement">button</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;/</span><span class="synStatement">form</span><span class="synIdentifier">&gt;</span>
</pre>


<p>ドラッグ&amp;ドロップをしたタイミングでアップロードする機能はサンプルが結構あったりするのですが、今回は「タイトル」と「ファイル」を投稿するボタンを押したタイミングで合わせてサーバーに送信するところが厄介な部分になります。</p>

<p><figure class="figure-image figure-image-fotolife" title="タイトルとファイルをサーバーにおくる"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20180116/20180116234306.png" alt="f:id:konoemario:20180116234306p:plain" title="f:id:konoemario:20180116234306p:plain" class="hatena-fotolife" itemprop="image"></span><figcaption>タイトルとファイルをサーバーにおくる</figcaption></figure></p>

<p><br/></p>

<h2 id="最初のmainjs">最初のmain.js</h2>

<p>さて、早速最初のプログラム<code>main.js</code>を書いていきます。</p>

<p><code>main.js</code>には、ドラッグ&amp;ドロップのコードは書かずに、ファイルをサーバーにAjaxで送る処理を書くことにします。</p>

<p>まずは、いつも通りにVueインスタンスを生成します。<br/>
生成する際には、<code>simple-form</code>クラスを要素に指定します。</p>

<p><b>main.js</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">new</span> Vue(<span class="synIdentifier">{</span>
    el:<span class="synConstant">'.form'</span>,
<span class="synIdentifier">}</span>)
</pre>


<p>これだけですが、大きな一歩になります。<br/>
さきほどの<code>create.html</code>から<code>main.js</code>を読み込めるようにして置くのを忘れないようにします。</p>

<p><br/></p>

<h3 id="サーバーにデータを送信する処理を書く">サーバーにデータを送信する処理を書く</h3>

<p>では、サーバーにデータを送信する処理を先に書いていきます。</p>

<p>まずは、<code>button</code>タグに<code>@click</code>を追記してボタンをクリックしたときの処理を書くことにします。</p>

<p><code>button</code>タグのtype属性を「button」にすることを忘れて、たまにあれーとなるので気をつけてください。<br/>
Ajaxではなく普通のpostを行ったりします。</p>

<p><b>create.html</b></p>

<pre class="code lang-html" data-lang="html" data-unlink>    <span class="synIdentifier">&lt;</span><span class="synStatement">form</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;simple-form&quot;</span><span class="synIdentifier">&gt;</span>
        <span class="synIdentifier">&lt;</span><span class="synStatement">h2</span><span class="synIdentifier">&gt;</span>ファイルアップロード<span class="synIdentifier">&lt;/</span><span class="synStatement">h2</span><span class="synIdentifier">&gt;</span>
        <span class="synIdentifier">&lt;</span><span class="synStatement">label</span><span class="synIdentifier"> </span><span class="synType">for</span><span class="synIdentifier">=</span><span class="synConstant">&quot;title&quot;</span><span class="synIdentifier">&gt;</span>タイトル<span class="synIdentifier">&lt;/</span><span class="synStatement">label</span><span class="synIdentifier">&gt;</span>
        <span class="synIdentifier">&lt;</span><span class="synStatement">input</span><span class="synIdentifier"> </span><span class="synType">type</span><span class="synIdentifier">=</span><span class="synConstant">&quot;text&quot;</span><span class="synIdentifier"> </span><span class="synType">name</span><span class="synIdentifier">=</span><span class="synConstant">&quot;title&quot;</span><span class="synIdentifier">&gt;</span>
        <span class="synIdentifier">&lt;</span><span class="synStatement">button</span><span class="synIdentifier"> </span><span class="synType">type</span><span class="synIdentifier">=</span><span class="synConstant">&quot;button&quot;</span><span class="synIdentifier"> @click=</span><span class="synConstant">&quot;onSubmit&quot;</span><span class="synIdentifier">&gt;</span>投稿する<span class="synIdentifier">&lt;/</span><span class="synStatement">button</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;/</span><span class="synStatement">form</span><span class="synIdentifier">&gt;</span>
</pre>


<p>続いて<code>main.js</code>です。<br/>
とりあえずclickイベントが発生できているか確認するため、<code>console.log</code>を行うだけの処理<code>onSubmit</code>を書くことにします。</p>

<p><b>main.js</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">new</span> Vue(<span class="synIdentifier">{</span>
    el:<span class="synConstant">'.form'</span>,
    methods:<span class="synIdentifier">{</span>
        <span class="synComment">//ファイル送信処理</span>
        onSubmit:<span class="synIdentifier">function</span>()<span class="synIdentifier">{</span>
            console.log(<span class="synConstant">'test'</span>);
        <span class="synIdentifier">}</span>,        
    <span class="synIdentifier">}</span>,
</pre>


<p>問題がなければ、サーバー送信処理を書くことにします。<br/>
<code>this.title</code>と<code>this.files</code>はこの後に追加するよ！</p>

<p><b>main.js</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">new</span> Vue(<span class="synIdentifier">{</span>
    el:<span class="synConstant">'.form'</span>,
    methods:<span class="synIdentifier">{</span>
        <span class="synComment">//ファイル送信処理</span>
        onSubmit:<span class="synIdentifier">function</span>()<span class="synIdentifier">{</span>
            console.log(<span class="synConstant">'test'</span>);

            <span class="synComment">//送信データはFormDataを使うよ！</span>
            <span class="synIdentifier">let</span> data = <span class="synStatement">new</span> FormData;

            <span class="synComment">//titleを追加</span>
            data.append(<span class="synConstant">'title'</span>, <span class="synIdentifier">this</span>.title);

            <span class="synComment">//filesは複数ファイルを選択できる想定なのでループで追加するよ！</span>
            <span class="synStatement">for</span>(<span class="synIdentifier">let</span> i = 0; i &lt; <span class="synIdentifier">this</span>.files.length; i++)<span class="synIdentifier">{</span>
                data.append(<span class="synConstant">'files[]'</span>, <span class="synIdentifier">this</span>.files<span class="synIdentifier">[</span>i<span class="synIdentifier">]</span>);
            <span class="synIdentifier">}</span>

            <span class="synComment">//axiosでサーバーに送るよ！</span>
            axios.post(<span class="synConstant">'/file'</span>,data)
            .then((response) =&gt; <span class="synIdentifier">{</span>
                console.log(response.data);
            <span class="synIdentifier">}</span>)
            .<span class="synStatement">catch</span>((error) =&gt; <span class="synIdentifier">{</span>
                console.log(error);
            <span class="synIdentifier">}</span>)
        <span class="synIdentifier">}</span>,        
    <span class="synIdentifier">}</span>,
</pre>


<p>サーバー送信処理は、FormDataとaxiosを使っておこなっています。</p>

<p>ファイルを送る際に<code>Content-Type=multipart/form-data</code>　を指定しよう！とか気にしなきゃいけないのですが、FormDataを使うとそのへんを勝手にやってくれるみたいです。</p>

<p>axiosの詳細な説明はあまりできないので、ググってほしいんだ！</p>

<p><br/></p>

<h3 id="dataを追加する">dataを追加する</h3>

<p>さきほど、サーバーに送信する処理を書きましたが、<code>this.title</code>と<code>this.files</code>を何も定義してないので、値が入ってくることがありません。</p>

<p>なので、データバインディングを使って、フォームの項目とひも付けてあげます。</p>

<p><code>main.js</code>に、こんな感じでdataを追加します。</p>

<p><b>main.js</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">new</span> Vue(<span class="synIdentifier">{</span>
    el:<span class="synConstant">'.form'</span>,
    data:<span class="synIdentifier">{</span>
        <span class="synComment">//タイトル</span>
        title:<span class="synConstant">''</span>,
        <span class="synComment">//ファイル</span>
        files:<span class="synIdentifier">[]</span>
    <span class="synIdentifier">}</span>,
    methods:<span class="synIdentifier">{</span>
        <span class="synComment">//ファイル送信処理</span>
        onSubmit:<span class="synIdentifier">function</span>()<span class="synIdentifier">{</span>
           <span class="synComment">//省略</span>
        <span class="synIdentifier">}</span>,        
    <span class="synIdentifier">}</span>,
</pre>


<p>タイトルを<code>v-model</code>でひも付けてあげます。</p>

<p><b>create.html</b></p>

<pre class="code lang-html" data-lang="html" data-unlink>    <span class="synIdentifier">&lt;</span><span class="synStatement">form</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;simple-form&quot;</span><span class="synIdentifier">&gt;</span>
        <span class="synIdentifier">&lt;</span><span class="synStatement">h2</span><span class="synIdentifier">&gt;</span>ファイルアップロード<span class="synIdentifier">&lt;/</span><span class="synStatement">h2</span><span class="synIdentifier">&gt;</span>
        <span class="synIdentifier">&lt;</span><span class="synStatement">label</span><span class="synIdentifier"> </span><span class="synType">for</span><span class="synIdentifier">=</span><span class="synConstant">&quot;title&quot;</span><span class="synIdentifier">&gt;</span>タイトル<span class="synIdentifier">&lt;/</span><span class="synStatement">label</span><span class="synIdentifier">&gt;</span>
        <span class="synIdentifier">&lt;</span><span class="synStatement">input</span><span class="synIdentifier"> </span><span class="synType">type</span><span class="synIdentifier">=</span><span class="synConstant">&quot;text&quot;</span><span class="synIdentifier"> </span><span class="synType">name</span><span class="synIdentifier">=</span><span class="synConstant">&quot;title&quot;</span><span class="synIdentifier"> v-model=</span><span class="synConstant">&quot;title&quot;</span><span class="synIdentifier">&gt;</span>
        <span class="synIdentifier">&lt;</span><span class="synStatement">button</span><span class="synIdentifier"> </span><span class="synType">type</span><span class="synIdentifier">=</span><span class="synConstant">&quot;button&quot;</span><span class="synIdentifier"> @click=</span><span class="synConstant">&quot;onSubmit&quot;</span><span class="synIdentifier">&gt;</span>投稿する<span class="synIdentifier">&lt;/</span><span class="synStatement">button</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;/</span><span class="synStatement">form</span>
</pre>


<p>これで、タイトルに何かを入力すれば、<code>this.title</code>に値が反映され、<code>投稿ボタン</code>を押したときにサーバーにタイトルを送るようになります。</p>

<p><br/></p>

<h3 id="filesを送る">filesを送る</h3>

<p>肝心のファイルですが、ドラッグ&amp;ドロップの機能はコンポートに記載するので、現段階でひも付ける対象がなかったりします。</p>

<p>後ほどコンポーネントで作成していくのですが、作成する前にファイルを取得するにあたって、特殊なことがあるのでここに記載します。</p>

<p>以下は、コンポーネントではなく<code>create.html</code>に、直接ファイル選択を書いた例になります。</p>

<p><b>create.html</b></p>

<pre class="code lang-html" data-lang="html" data-unlink>    <span class="synIdentifier">&lt;</span><span class="synStatement">form</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;simple-form&quot;</span><span class="synIdentifier">&gt;</span>
        <span class="synIdentifier">&lt;</span><span class="synStatement">h2</span><span class="synIdentifier">&gt;</span>ファイルアップロード<span class="synIdentifier">&lt;/</span><span class="synStatement">h2</span><span class="synIdentifier">&gt;</span>
        <span class="synIdentifier">&lt;</span><span class="synStatement">label</span><span class="synIdentifier"> </span><span class="synType">for</span><span class="synIdentifier">=</span><span class="synConstant">&quot;title&quot;</span><span class="synIdentifier">&gt;</span>タイトル<span class="synIdentifier">&lt;/</span><span class="synStatement">label</span><span class="synIdentifier">&gt;</span>
        <span class="synIdentifier">&lt;</span><span class="synStatement">input</span><span class="synIdentifier"> </span><span class="synType">type</span><span class="synIdentifier">=</span><span class="synConstant">&quot;text&quot;</span><span class="synIdentifier"> </span><span class="synType">name</span><span class="synIdentifier">=</span><span class="synConstant">&quot;title&quot;</span><span class="synIdentifier"> v-model=</span><span class="synConstant">&quot;title&quot;</span><span class="synIdentifier">&gt;</span>
　　  <span class="synComment">&lt;!-- ファイルもここに書くとしたら--&gt;</span>
        <span class="synIdentifier">&lt;</span><span class="synStatement">input</span><span class="synIdentifier"> </span><span class="synType">type</span><span class="synIdentifier">=</span><span class="synConstant">&quot;file&quot;</span><span class="synIdentifier"> mulitple=</span><span class="synConstant">&quot;multiple&quot;</span><span class="synIdentifier">&gt;</span> 
        <span class="synIdentifier">&lt;</span><span class="synStatement">button</span><span class="synIdentifier"> </span><span class="synType">type</span><span class="synIdentifier">=</span><span class="synConstant">&quot;button&quot;</span><span class="synIdentifier"> @click=</span><span class="synConstant">&quot;onSubmit&quot;</span><span class="synIdentifier">&gt;</span>投稿する<span class="synIdentifier">&lt;/</span><span class="synStatement">button</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;/</span><span class="synStatement">form</span>
</pre>


<p>このように書くと、<code>title</code>と同様に、v-modelを使ってデータバインディングじゃ！となるに違いありません。</p>

<p><b>create.html</b></p>

<pre class="code lang-html" data-lang="html" data-unlink>        <span class="synComment">&lt;!-- だめな例 --&gt;</span>
        <span class="synIdentifier">&lt;</span><span class="synStatement">input</span><span class="synIdentifier"> </span><span class="synType">type</span><span class="synIdentifier">=</span><span class="synConstant">&quot;file&quot;</span><span class="synIdentifier"> mulitple=</span><span class="synConstant">&quot;multiple&quot;</span><span class="synIdentifier"> v-model=</span><span class="synConstant">&quot;file&quot;</span><span class="synIdentifier">&gt;</span>  
</pre>


<p>しかし、<code>input type="file"</code>に対しては、v-modelでデータバインディングすることはできないです。<br/>
理由はわからないけれども、公式でいってるんだよ！</p>

<p>なので、<code>inpuy type="file"</code>の値が何かしらかわったときに発生する<code>change</code>イベントを使う必要があります。</p>

<p><b>create.html</b></p>

<pre class="code lang-html" data-lang="html" data-unlink>        <span class="synComment">&lt;!-- changeイベントで対応する--&gt;</span>
        <span class="synIdentifier">&lt;</span><span class="synStatement">input</span><span class="synIdentifier"> </span><span class="synType">type</span><span class="synIdentifier">=</span><span class="synConstant">&quot;file&quot;</span><span class="synIdentifier"> mulitple=</span><span class="synConstant">&quot;multiple&quot;</span><span class="synIdentifier"> @change=</span><span class="synConstant">&quot;onDrop&quot;</span><span class="synIdentifier"> &gt;</span>  
</pre>


<p>そして、Vueには以下のように<code>onDrop</code>メソッドを追加することでデータが取得できるようになります。</p>

<p><b>main.js</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">new</span> Vue(<span class="synIdentifier">{</span>
    el:<span class="synConstant">'.form'</span>,
    data:<span class="synIdentifier">{</span>
        <span class="synComment">//タイトル</span>
        title:<span class="synConstant">''</span>,
        <span class="synComment">//ファイル</span>
        files:<span class="synIdentifier">[]</span>
    <span class="synIdentifier">}</span>,
    methods:<span class="synIdentifier">{</span>
        <span class="synComment">//ファイル送信処理</span>
        onSubmit:<span class="synIdentifier">function</span>()<span class="synIdentifier">{</span>
           <span class="synComment">//省略</span>
        <span class="synIdentifier">}</span>, 
        <span class="synComment">//ファイル選択で選んだファイルを取得する  </span>
        onDrop:<span class="synIdentifier">function</span>(<span class="synStatement">event</span>)<span class="synIdentifier">{</span>
                <span class="synIdentifier">let</span> file = <span class="synStatement">event</span>.target.files
       <span class="synIdentifier">}</span>       
    <span class="synIdentifier">}</span>,
`
</pre>


<p><br/></p>

<h2 id="ようやく本題-コンポートを作成する">ようやく本題 コンポートを作成する</h2>

<p>さてさて、ようやく本題です。<br/>
前述の通り、<code>create.html</code>に<code>input</code>タグを直接書いていくのももちろんいいんだけれどもコンポートにしていくよ。</p>

<p>コンポートにすることで、  いろんなページで使い回せたりするんだよ！</p>

<p><br/></p>

<h3 id="dropvueをつくる">drop.vueをつくる</h3>

<p>Vue.jsのコンポートですが、生成方法だったり書き方がいろいろあったりします。</p>

<p>※以前、こちらで生成方法を書いたりしました。<br/>
<iframe src="https://hatenablog-parts.com/embed?url=http%3A%2F%2Fwww.tohuandkonsome.site%2Fentry%2F2017%2F10%2F09%2F004525" title="3連休だしVue.jsをはじめよう：コンポーネントを使ってみる - 豆腐とコンソメ" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://www.tohuandkonsome.site/entry/2017/10/09/004525">www.tohuandkonsome.site</a></cite></p>

<p>ここでは、レイアウトもDOM要素も、Vueも部品ごとにひとつのファイルにかける方法で書いてみるよ！</p>

<p><b>drop.vue</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synComment">//テンプレートにはDOM要素を書く</span>
&lt;template&gt;
    &lt;div&gt;
         &lt;input type=<span class="synConstant">&quot;file&quot;</span> @change=<span class="synConstant">&quot;onDrop&quot;</span>&gt;
    &lt;/div&gt;
&lt;/template&gt;
<span class="synComment">//sciprtにはVueインスタンスで書いたときのような処理を書く</span>
&lt;script&gt;
    <span class="synStatement">export</span> <span class="synStatement">default</span> <span class="synIdentifier">{</span>
        methods:<span class="synIdentifier">{</span>
            <span class="synComment">//ファイルを選択したときの処理</span>
            onDrop:<span class="synIdentifier">function</span>(<span class="synStatement">event</span>)<span class="synIdentifier">{</span>
                <span class="synIdentifier">let</span> fileList = <span class="synStatement">event</span>.target.files 
            <span class="synIdentifier">}</span>
        <span class="synIdentifier">}</span>,
    <span class="synIdentifier">}</span>
&lt;/script&gt;
<span class="synComment">//styleにcssを書いていくんだけれども省略</span>
&lt;style lang=<span class="synConstant">&quot;scss&quot;</span>&gt;
&lt;/style&gt;
</pre>


<p>まずは、シンプルにファイル選択だけができる処理を書きました。</p>

<p><code>main.js</code>側にコンポーネントとして<code>drop.vue</code>を登録してあげます。</p>

<p><b>main.js</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synComment">//ファイル選択コンポーネント</span>
<span class="synStatement">const</span> Drop = require(<span class="synConstant">'./components/drop'</span>);

<span class="synStatement">new</span> Vue(<span class="synIdentifier">{</span>
    el:<span class="synConstant">'.form'</span>,
    data:<span class="synIdentifier">{</span>
        <span class="synComment">//タイトル</span>
        title:<span class="synConstant">''</span>,
        <span class="synComment">//ファイル</span>
        files:<span class="synIdentifier">[]</span>
    <span class="synIdentifier">}</span>,
    methods:<span class="synIdentifier">{</span>
        <span class="synComment">//ファイル送信処理</span>
        onSubmit:<span class="synIdentifier">function</span>()<span class="synIdentifier">{</span>
           <span class="synComment">//省略</span>
        <span class="synIdentifier">}</span>,        
    <span class="synIdentifier">}</span>,
    components:<span class="synIdentifier">{</span>
        <span class="synComment">//コンポーネントを登録する！</span>
        <span class="synConstant">'drop'</span>:Drop
    <span class="synIdentifier">}</span>
</pre>


<p>こうすることで、<code>create.html</code>でdropタグが使えるようになります。</p>

<p><b>create.html</b></p>

<pre class="code lang-html" data-lang="html" data-unlink>    <span class="synIdentifier">&lt;</span><span class="synStatement">form</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;simple-form&quot;</span><span class="synIdentifier">&gt;</span>
        <span class="synIdentifier">&lt;</span><span class="synStatement">h2</span><span class="synIdentifier">&gt;</span>ファイルアップロード<span class="synIdentifier">&lt;/</span><span class="synStatement">h2</span><span class="synIdentifier">&gt;</span>
        <span class="synIdentifier">&lt;</span><span class="synStatement">label</span><span class="synIdentifier"> </span><span class="synType">for</span><span class="synIdentifier">=</span><span class="synConstant">&quot;title&quot;</span><span class="synIdentifier">&gt;</span>タイトル<span class="synIdentifier">&lt;/</span><span class="synStatement">label</span><span class="synIdentifier">&gt;</span>
        <span class="synIdentifier">&lt;</span><span class="synStatement">input</span><span class="synIdentifier"> </span><span class="synType">type</span><span class="synIdentifier">=</span><span class="synConstant">&quot;text&quot;</span><span class="synIdentifier"> </span><span class="synType">name</span><span class="synIdentifier">=</span><span class="synConstant">&quot;title&quot;</span><span class="synIdentifier"> v-model=</span><span class="synConstant">&quot;title&quot;</span><span class="synIdentifier">&gt;</span>
        <span class="synIdentifier">&lt;</span><span class="synStatement">button</span><span class="synIdentifier"> </span><span class="synType">type</span><span class="synIdentifier">=</span><span class="synConstant">&quot;button&quot;</span><span class="synIdentifier"> @click=</span><span class="synConstant">&quot;onSubmit&quot;</span><span class="synIdentifier">&gt;</span>投稿する<span class="synIdentifier">&lt;/</span><span class="synStatement">button</span><span class="synIdentifier">&gt;</span>
        <span class="synIdentifier">&lt;</span>drop<span class="synIdentifier">&gt;&lt;/</span>drop<span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;/</span><span class="synStatement">form</span>
</pre>


<p>これでブラウザでみてみると、以下のように表示されることが確認できます。</p>

<p><figure class="figure-image figure-image-fotolife" title="drop.vueコンポーネントが表示される"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20180118/20180118222045.png" alt="f:id:konoemario:20180118222045p:plain" title="f:id:konoemario:20180118222045p:plain" class="hatena-fotolife" itemprop="image"></span><figcaption>drop.vueコンポーネントが表示される</figcaption></figure></p>

<p>いつも肝心なところまでたどり着かないので不甲斐ないのですが、次回に続きます。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=http%3A%2F%2Fwww.tohuandkonsome.site%2Fentry%2F2018%2F01%2F22%2F223224" title="ファイルアップロード機能で学ぶVue.js(2) - 豆腐とコンソメ" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://www.tohuandkonsome.site/entry/2018/01/22/223224">www.tohuandkonsome.site</a></cite></p>

-----
--------
AUTHOR: konoemario
TITLE: コールバック地獄を体験したいんじゃ~Promiseへの道~(2)
BASENAME: 2018/01/14/221433
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 01/14/2018 22:14:33
CATEGORY: Vue.js
CATEGORY: javascript
CATEGORY: プログラム
-----
BODY:
<h1 id="日記">日記</h1>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20180114/20180114221306.png" alt="f:id:konoemario:20180114221306p:plain:w300" title="f:id:konoemario:20180114221306p:plain:w300" class="hatena-fotolife" style="width:300px" itemprop="image"></span></p>

<p>風邪が長引いてランニングも勉強もちょっとさぼりぎみ。</p>

<p>ぐうたら寝てばかり。</p>

<p>こういう時期ってあるよね。</p>

<h1 id="前回の続き">前回の続き</h1>

<p>前回、以下の処理をcallback関数を使って実現しました。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=http%3A%2F%2Fwww.tohuandkonsome.site%2Fentry%2F2018%2F01%2F11%2F231116" title="コールバック地獄を体験したいんじゃ~Promiseへの道~ - 豆腐とコンソメ" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://www.tohuandkonsome.site/entry/2018/01/11/231116">www.tohuandkonsome.site</a></cite></p>

<ul>
<li>ファイルを読み込む</li>
<li>読み込んだファイルの内容のチェックをする</li>
<li>チェックが通れば、<code>/sample</code>にGETリクエストを飛ばす</li>
<li>上記のリクエストが終わったら、<code>/other</code>にリクエストを飛ばす</li>
</ul>


<p>実際、書いてみると、どの処理が実行されるのかがわかりにくい、という問題を実感することができました。</p>

<p>なので、Promiseを使って書き直したいと思います。</p>

<ul class="table-of-contents">
    <li><a href="#日記">日記</a></li>
    <li><a href="#前回の続き">前回の続き</a><ul>
            <li><a href="#前回のファイル読み込み">前回のファイル読み込み</a></li>
            <li><a href="#Promiseを使ったファイル読み込み">Promiseを使ったファイル読み込み</a></li>
            <li><a href="#ファイルのチェック">ファイルのチェック</a></li>
            <li><a href="#サーバーにリクエストを投げる">サーバーにリクエストを投げる</a></li>
            <li><a href="#サーバーリクエストにaxiosを使う">サーバーリクエストにaxiosを使う</a></li>
        </ul>
    </li>
</ul>

<p><br/></p>

<h2 id="前回のファイル読み込み">前回のファイル読み込み</h2>

<p>前回は、こんな感じでファイルを読み込む<code>ReadFile</code>関数を作成していました。<br/>
ファイル読み込みが終わった後の処理は、callback関数を渡すことで実現していました。</p>

<p><b>ReadFile.js(Promise使用前) </b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>module.exports = <span class="synIdentifier">function</span>(file, callback)<span class="synIdentifier">{</span>
    <span class="synIdentifier">let</span> reader = <span class="synStatement">new</span> FileReader();

    <span class="synComment">//読み込み終わったあとのイベント</span>
    reader.onload = <span class="synIdentifier">function</span>()<span class="synIdentifier">{</span>
        text = reader.result

        <span class="synComment">//callbackを使う</span>
        callback(text)
    <span class="synIdentifier">}</span>
    <span class="synComment">//読み込み開始</span>
    reader.readAsText(file)
<span class="synIdentifier">}</span>
</pre>


<p><code>ReadFile.js</code>を実際に使っている処理はこんな感じでした。</p>

<p><b>app.js</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>        <span class="synComment">//ファイルを選択またはドロップ</span>
        onDrop:<span class="synIdentifier">function</span>(<span class="synStatement">event</span>)<span class="synIdentifier">{</span>
            <span class="synComment">//ファイルを取得</span>
            <span class="synIdentifier">let</span> file = <span class="synStatement">event</span>.target.files<span class="synIdentifier">[</span>0<span class="synIdentifier">]</span>;

            <span class="synComment">//ReadFile.jsの中でやってほしいことを書く</span>
            <span class="synStatement">const</span> callback = <span class="synIdentifier">function</span>(text)<span class="synIdentifier">{</span>
                <span class="synComment">//ファイルの中の「おはんき」の出現回数を数える</span>
                <span class="synIdentifier">let</span> count = (text.match(<span class="synStatement">new</span> <span class="synType">RegExp</span>(<span class="synConstant">'おはんき'</span>,<span class="synConstant">'g'</span>)) || <span class="synIdentifier">[]</span>).length

                <span class="synComment">//チェックがOKだったら</span>
                <span class="synStatement">if</span>(count &gt; 0)<span class="synIdentifier">{</span>
                    <span class="synComment">//サーバーにリクエストを飛ばす</span>
                    <span class="synComment">//リクエストが成功した後の処理を書く</span>
                <span class="synIdentifier">}</span>
            <span class="synIdentifier">}</span>

            <span class="synComment">//定義した関数を渡す</span>
            <span class="synIdentifier">let</span> text =  ReadFile(file, callback);
        <span class="synIdentifier">}</span>,
</pre>


<p><br/></p>

<h2 id="Promiseを使ったファイル読み込み">Promiseを使ったファイル読み込み</h2>

<p>さっそくPromiseを使ってみます。<br/>
といっても簡単で、Promiseオブジェクトを返すようにしてあげるだけです。<br/>
実際の処理は、Promiseオブジェクトの引数として書きます。</p>

<p>処理が正常に終わったときに<code>resolve()</code>を書いてあげます。<br/>
処理がエラーの場合は<code>reject()</code>を書くのですが、今回は面倒なので省略しちゃってます。</p>

<p><b>ReadFile.js(Promise使用) </b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>module.exports = <span class="synIdentifier">function</span>(file)<span class="synIdentifier">{</span>
    <span class="synStatement">return</span> <span class="synStatement">new</span> Promise(<span class="synIdentifier">function</span>(resolve, reject)<span class="synIdentifier">{</span>
        <span class="synIdentifier">let</span> reader = <span class="synStatement">new</span> FileReader();

        <span class="synComment">//読み込み終わったあとのイベント</span>
        reader.onload = <span class="synIdentifier">function</span>()<span class="synIdentifier">{</span>
            <span class="synIdentifier">let</span> text = reader.result
            resolve(text);
        <span class="synIdentifier">}</span>

        <span class="synComment">//読み込み開始</span>
        reader.readAsText(file)

        <span class="synIdentifier">}</span>)
<span class="synIdentifier">}</span>
</pre>


<p>上記の関数を実際に呼んでみます。</p>

<p>以下のように、<code>ReadFile</code>を呼んだ後に<code>.then()</code>と<code>.catch()</code>を使います。</p>

<p><b>app.js</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>        <span class="synComment">//ファイルを選択またはドロップ</span>
        onDrop:<span class="synIdentifier">function</span>(<span class="synStatement">event</span>)<span class="synIdentifier">{</span>
            <span class="synComment">//ファイルを取得</span>
            <span class="synIdentifier">let</span> file = <span class="synStatement">event</span>.target.files<span class="synIdentifier">[</span>0<span class="synIdentifier">]</span>;

            <span class="synComment">//ファイル読込</span>
            ReadFile(file)
            .then((text) =&gt;<span class="synIdentifier">{</span>
                console.log(text);
            <span class="synIdentifier">}</span>)
            .<span class="synStatement">catch</span>((error) =&gt;<span class="synIdentifier">{</span>
                console.log(error);
            <span class="synIdentifier">}</span>);
        <span class="synIdentifier">}</span>,
</pre>


<p><code>.then()</code>は<code>ReadFile</code>関数内で<code>resolve</code>した場合に実行される処理を書きます。<br/>
一方、<code>.catch</code>は<code>ReafFile</code>関数内で<code>reject</code>した場合に呼ばれる処理になります。</p>

<p><br/></p>

<h2 id="ファイルのチェック">ファイルのチェック</h2>

<p>ファイルのチェックは、以下のように<code>.then()</code>に続けて書くこともできます。  <br/>
ですが、ここではファイルのチェック処理もPromiseを使うことで、さらに見通しをよくしようと思います。</p>

<p><b>app.js</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>        <span class="synComment">//ファイルを選択またはドロップ</span>
        onDrop:<span class="synIdentifier">function</span>(<span class="synStatement">event</span>)<span class="synIdentifier">{</span>
            <span class="synComment">//ファイルを取得</span>
            <span class="synIdentifier">let</span> file = <span class="synStatement">event</span>.target.files<span class="synIdentifier">[</span>0<span class="synIdentifier">]</span>;

            <span class="synComment">//ファイル読込</span>
            ReadFile(file)
            .then((text) =&gt;<span class="synIdentifier">{</span>
                 <span class="synComment">//ここにtextの内容をチェックする処理を書く。  </span>
            <span class="synIdentifier">}</span>)
            .<span class="synStatement">catch</span>((error) =&gt;<span class="synIdentifier">{</span>
                console.log(error);
            <span class="synIdentifier">}</span>);
        <span class="synIdentifier">}</span>,
</pre>


<p>まず、ファイルのチェック処理もファイル読み込みと同様の形でモジュール化しておきます。</p>

<p><b>Validate.js</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>module.exports = <span class="synIdentifier">function</span>(text)<span class="synIdentifier">{</span>
    <span class="synStatement">return</span> <span class="synStatement">new</span> Promise(<span class="synIdentifier">function</span>(resolve, reject)<span class="synIdentifier">{</span>
        <span class="synIdentifier">let</span> count = (text.match(<span class="synStatement">new</span> <span class="synType">RegExp</span>(<span class="synConstant">'おはんき'</span>,<span class="synConstant">'g'</span>)) || <span class="synIdentifier">[]</span>).length

        <span class="synComment">//チェックがOKだったら</span>
        <span class="synStatement">if</span>(count &gt; 0)<span class="synIdentifier">{</span>
            resolve();
        <span class="synIdentifier">}</span><span class="synStatement">else</span><span class="synIdentifier">{</span>
            reject(<span class="synConstant">'ファイルの内容がおかしいよ'</span>);
        <span class="synIdentifier">}</span>

    <span class="synIdentifier">}</span>)
<span class="synIdentifier">}</span>
</pre>


<p>そうしたら、以下のように<code>ReafFile</code>関数の<code>.then()</code>内で呼ぶことにします。</p>

<p><b>app.js</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>        <span class="synComment">//ファイルを選択またはドロップ</span>
        onDrop:<span class="synIdentifier">function</span>(<span class="synStatement">event</span>)<span class="synIdentifier">{</span>
            <span class="synComment">//ファイルを取得</span>
            <span class="synIdentifier">let</span> file = <span class="synStatement">event</span>.target.files<span class="synIdentifier">[</span>0<span class="synIdentifier">]</span>;

            <span class="synComment">//ファイル読込</span>
            ReadFile(file)
            .then((text) =&gt;<span class="synIdentifier">{</span>
                 <span class="synComment">//チェック処理</span>
                    <span class="synStatement">return</span> Validate(text);
            <span class="synIdentifier">}</span>)
            .then(() =&gt;<span class="synIdentifier">{</span>
                <span class="synComment">//チェック処理が終わったあとの処理を書く</span>
            <span class="synIdentifier">}</span>)
            .<span class="synStatement">catch</span>((error) =&gt;<span class="synIdentifier">{</span>
                console.log(error);
            <span class="synIdentifier">}</span>);
        <span class="synIdentifier">}</span>,
</pre>


<p>ポイントは、<code>Validate</code>ではなく <code>return Validate</code>するところになります。<br/>
Promiseオブジェクトをreturnしないとその後の<code>then()</code>が順番通りに動いてくれません。</p>

<p><br/></p>

<h2 id="サーバーにリクエストを投げる">サーバーにリクエストを投げる</h2>

<p>ここまでくると後は作業になります。
前回作った<code>Xhr.js</code>もPromiseを使います。</p>

<p>こんな感じにしました。</p>

<p><b>Xhr.js</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>module.exports = <span class="synIdentifier">function</span>(url)<span class="synIdentifier">{</span>
    <span class="synStatement">return</span> <span class="synStatement">new</span> Promise(<span class="synIdentifier">function</span>(resolve, reject)<span class="synIdentifier">{</span>
        <span class="synIdentifier">var</span> xhr= <span class="synStatement">new</span> XMLHttpRequest();
        xhr.open(<span class="synConstant">&quot;GET&quot;</span>, url);
        xhr.send(); 

        <span class="synComment">//リクエストを受信したときのイベント</span>
        xhr.onload = <span class="synIdentifier">function</span>()<span class="synIdentifier">{</span>
            <span class="synStatement">if</span>(xhr.readyState === 4 &amp;&amp; xhr.<span class="synStatement">status</span> === 200) <span class="synIdentifier">{</span>
                resolve(xhr.responseText);
            <span class="synIdentifier">}</span><span class="synStatement">else</span><span class="synIdentifier">{</span>
                reject(<span class="synConstant">'リクエストに失敗しているよ'</span>);
            <span class="synIdentifier">}</span>
        <span class="synIdentifier">}</span>;
    <span class="synIdentifier">}</span>)
<span class="synIdentifier">}</span>
</pre>


<p>使う際も以下のような形になります。</p>

<p><b>app.js</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>        <span class="synComment">//ファイルを選択またはドロップ</span>
        onDrop:<span class="synIdentifier">function</span>(<span class="synStatement">event</span>)<span class="synIdentifier">{</span>
            <span class="synComment">//ファイルを取得</span>
            <span class="synIdentifier">let</span> file = <span class="synStatement">event</span>.target.files<span class="synIdentifier">[</span>0<span class="synIdentifier">]</span>;

            <span class="synComment">//ファイル読み込み</span>
            ReadFile(file)
            .then((text) =&gt;<span class="synIdentifier">{</span>
                <span class="synComment">//ファイルチェック</span>
                <span class="synStatement">return</span> Validate(text);
            <span class="synIdentifier">}</span>)
            .then(() =&gt;<span class="synIdentifier">{</span>
                <span class="synComment">//サーバーリクエスト</span>
                <span class="synStatement">return</span> Xhr(<span class="synConstant">'/sample'</span>);
            <span class="synIdentifier">}</span>)
            .then((text) =&gt;<span class="synIdentifier">{</span>
                <span class="synComment">//サーバーリクエスト</span>
                console.log(text);
                <span class="synStatement">return</span> Xhr(<span class="synConstant">'/other'</span>);
            <span class="synIdentifier">}</span>)
            .then((text) =&gt;<span class="synIdentifier">{</span>
                console.log(text);
            <span class="synIdentifier">}</span>)
            .<span class="synStatement">catch</span>((error) =&gt;<span class="synIdentifier">{</span>
                console.log(error);
            <span class="synIdentifier">}</span>);

        <span class="synIdentifier">}</span>,
</pre>


<p>これで、上から下に処理が流れるということが前回よりもだいぶはっきりしました！</p>

<p><br/></p>

<h2 id="サーバーリクエストにaxiosを使う">サーバーリクエストにaxiosを使う</h2>

<p>axiosはPromiseオブジェクトを返す便利なAjaxリクエストができるモジュールになります。<br/>
使い方も、今まで使っていた<code>Xhr.js</code>を置き換える以下のように置き換えるだけで使うことができます。</p>

<p><b>app.js</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>        onDrop:<span class="synIdentifier">function</span>(<span class="synStatement">event</span>)<span class="synIdentifier">{</span>
            <span class="synComment">//ファイルを取得</span>
            <span class="synIdentifier">let</span> file = <span class="synStatement">event</span>.target.files<span class="synIdentifier">[</span>0<span class="synIdentifier">]</span>;

            <span class="synComment">//ファイル読み込み</span>
            ReadFile(file)
            .then((text) =&gt;<span class="synIdentifier">{</span>
                <span class="synComment">//ファイルチェック</span>
                <span class="synStatement">return</span> Validate(text);
            <span class="synIdentifier">}</span>)
            .then(() =&gt;<span class="synIdentifier">{</span>
                <span class="synComment">//サーバーリクエスト</span>
                <span class="synStatement">return</span> axios.get(<span class="synConstant">'/sample'</span>);
            <span class="synIdentifier">}</span>)
            .then((text) =&gt;<span class="synIdentifier">{</span>
                <span class="synComment">//サーバーリクエスト</span>
                console.log(text);
                <span class="synStatement">return</span> axios.get(<span class="synConstant">'/other'</span>);
            <span class="synIdentifier">}</span>)
            .then((text) =&gt;<span class="synIdentifier">{</span>
                console.log(text);
            <span class="synIdentifier">}</span>)
            .<span class="synStatement">catch</span>((error) =&gt;<span class="synIdentifier">{</span>
                console.log(error);
            <span class="synIdentifier">}</span>);

        <span class="synIdentifier">}</span>,
</pre>


<p>だいぶなげやりな感じになってしまいましたが、なんとなくPromiseを使うことができるようになりました！</p>

<p>この調子でasync/awaitも使えるようになりたいですね！</p>

-----
--------
AUTHOR: konoemario
TITLE: コールバック地獄を体験したいんじゃ~Promiseへの道~(1)
BASENAME: 2018/01/11/231116
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 01/11/2018 23:11:16
CATEGORY: Laravel
CATEGORY: Vue.js
CATEGORY: Express
CATEGORY: javascript
CATEGORY: 雑談
IMAGE: https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20180110/20180110224157.png
-----
BODY:
<h2 id="日記">日記</h2>

<p>2018年明けましておめでとうございます。</p>

<p>更新が滞ってました。<br/>
年末にかけて仕事が多少忙しくなったこともあり、なかなかまとまって書く時間が取れなかったです。</p>

<p>新年は、39度の熱を出すという散々なスタートとなってしまいましたが、なんとか良い年にすべくがんばっていきたいと思います。</p>

<p>新年ということで、こっそり今年の目標を掲げることにしました。</p>

<p>年末にいくつクリアできたかな！とわくわくできるようにしたいです。</p>

<p>やることリスト</p>

<ul>
<li><p>スキルセットにLaravel+Vue.jsと書けるようになる。  <br/>
どれくらいできれば書いていいのかわからないのですが。なんかそろそろ書いてもいいかなという自信を持てるようになりたいです。</p></li>
<li><p>C言語で簡易Webサーバーを構築する  <br/>
ずっと前からやろうやろうと思って、なかなか手がつけられてないです。
NginxとApacheであげられるC10k問題とかに対してもう少しちゃんと理解できるようにしておきたいです。</p></li>
<li><p>SPAで簡単なサイトをつくる
SPAである必要ってなんもないかもしれないんですが、ちょっとやってみたいです。</p></li>
<li><p>ChefやらDockerやらをちょっと使えるようにしておく。
Vagrantで仮想環境構築が少しだけわかるようになったので、もう一歩先にいきたいところです。</p></li>
<li><p>Go言語をさわってみる <br/>
理由はあんまりない。パラダイムシフトみたいなものを感じられらたらいいな。</p></li>
<li><p>ラズパイで2.4GHz帯のパケット解析<br/>
ドローンも買ったんだけれども自律飛行を目指す企画が頓挫しちゃってる。<br/>
これも進めたい。</p></li>
<li><p>ブログのアクセス数を倍にしたい
1日あたり200アクセスのところを目指せ400アクセスじゃ！</p></li>
<li><p>個人で案件を請け負ってみたい  <br/>
一度くらいやってみたい。</p></li>
<li><p>LPICかAWSの資格あたりを一個とりたい</p></li>
<li><p>ピンキーと付き合いたい</p></li>
</ul>


<h2 id="本題">本題</h2>

<p>前回、オブジェクト指向フォームを作成しよう、でこんなかんじにaxiosを使って、データを送るコードを書きました。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=http%3A%2F%2Fwww.tohuandkonsome.site%2Fentry%2F2017%2F12%2F13%2F205504" title="Vue.jsでつくるオブジェクト指向フォーム(1) - 豆腐とコンソメ" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://www.tohuandkonsome.site/entry/2017/12/13/205504">www.tohuandkonsome.site</a></cite></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>   <span class="synComment">/**</span>
<span class="synComment">    * Formのデータをサーバーに送信するよ！</span>
<span class="synComment">    */</span>
   submit()<span class="synIdentifier">{</span>
        <span class="synComment">//プロパティの値を再設定する</span>
        <span class="synStatement">for</span>(<span class="synIdentifier">let</span> field <span class="synStatement">in</span> <span class="synIdentifier">this</span>.originalData)<span class="synIdentifier">{</span>
            <span class="synIdentifier">this</span>.originalData<span class="synIdentifier">[</span>field<span class="synIdentifier">]</span> = <span class="synIdentifier">this[</span>field<span class="synIdentifier">]</span>;
        <span class="synIdentifier">}</span>
        axios.post(<span class="synConstant">'/thread'</span>, <span class="synIdentifier">this</span>.originalData)
        <span class="synComment">//HTTPリクエストが成功したとき</span>
        .then(response =&gt; <span class="synIdentifier">this</span>.onSuccess(response.data))
        <span class="synComment">//HTTPリクエエストが失敗した時</span>
        .<span class="synStatement">catch</span>(error =&gt; <span class="synIdentifier">this</span>.onFail(error.response.data.errors));
   <span class="synIdentifier">}</span>
</pre>


<p>このコードをベースにして、ファイルをサーバーに送る必要がでてきて、非同期やらコールバックやらPromiseやらaxiosやらasync/awaitやらでてきたので、備忘録がてら綴っていきたいと思います。</p>

<p><br/></p>

<h3 id="やりたいこと">やりたいこと</h3>

<ul>
<li>ブラウザからファイルを選択して、ファイルを読み込む</li>
<li>ファイルの内容に問題がなければ、AWSのS3にアップロードする署名付きURLを発行する</li>
<li>署名付きURLに対してアップロードを行う</li>
</ul>


<p>こんな感じのことをする必要がでてきました。</p>

<p>PHPでAWSの署名付きURLを発行するのも、いろいろと調べたのでいずれ書いておきたいのですが、ここでは以下のように非同期処理を順次処理をする、という点に注目して書いていきたいと思います。</p>

<ul>
<li>ブラウザからファイルを選択してファイルを読み込む</li>
<li>post処理を行う</li>
<li>別のpost処理を行う</li>
</ul>


<p><br/></p>

<ul class="table-of-contents">
    <li><a href="#日記">日記</a></li>
    <li><a href="#本題">本題</a><ul>
            <li><a href="#やりたいこと">やりたいこと</a></li>
            <li><a href="#さっそくファイルを読み込む">さっそくファイルを読み込む</a><ul>
                    <li><a href="#ファイルの内容をチェックする">ファイルの内容をチェックする</a><ul>
                            <li><a href="#コールバック関数">コールバック関数</a></li>
                            <li><a href="#コールバック関数地獄を体験する">コールバック関数地獄を体験する</a></li>
                        </ul>
                    </li>
                </ul>
            </li>
        </ul>
    </li>
</ul>

<h3 id="さっそくファイルを読み込む">さっそくファイルを読み込む</h3>

<p>まずは、ファイル読み込み処理を書いてみます。</p>

<p>ここでは、モジュールとして使いまわせるように`ReadFile.js'として切り出しておきます。</p>

<p><b>ReadFile.js</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>module.exports = <span class="synIdentifier">function</span>(file)<span class="synIdentifier">{</span>
    <span class="synIdentifier">let</span> reader = <span class="synStatement">new</span> FileReader();

    <span class="synComment">//読み込み終わったあとのイベント</span>
    reader.onload = <span class="synIdentifier">function</span>()<span class="synIdentifier">{</span>
        text = reader.result
        console.log(<span class="synConstant">'text:'</span>+ text);
    <span class="synIdentifier">}</span>
    <span class="synComment">//読み込み開始</span>
    reader.readAsText(file)
<span class="synIdentifier">}</span>
</pre>


<p>FileReaderを使った読み込みですね。<br/>
そして、このFileReaderですが当然のように非同期で読み込みを行います。<br/>
なので、読み込みが完了したときにやっておきたいことは、<code>reader.onload</code>に関数として書いておけばいけますね！</p>

<p>ここでは、単純に読み込んだテキストの内容をコンソールに出力しているだけです。</p>

<p>では、実際に<code>ReadFile.js</code>を使ってファイルを読み込んでみます。<br/>
前回に引き続き、Vueインスタンスから<code>ReadFile.js</code>を使うことにします。</p>

<p>こんな感じの画面で、ファイル選択を押下すると</p>

<p><figure class="figure-image figure-image-fotolife" title="ファイル選択"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20180110/20180110224157.png" alt="f:id:konoemario:20180110224157p:plain" title="f:id:konoemario:20180110224157p:plain" class="hatena-fotolife" itemprop="image"></span><figcaption>ファイル選択</figcaption></figure></p>

<p>以下の<code>app.js</code>のonDropイベントが呼ばれて、コンソールにファイルの内容が出力される流れになっています。</p>

<p><b>app.js</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">const</span> ReadFile = require(<span class="synConstant">'./components/ReadFile'</span>);

<span class="synStatement">window</span>.Vue = require(<span class="synConstant">'vue'</span>);

<span class="synStatement">const</span> app = <span class="synStatement">new</span> Vue(<span class="synIdentifier">{</span>
    el: <span class="synConstant">'.simple-form'</span>,
    methods:<span class="synIdentifier">{</span>
        <span class="synComment">//ファイルを選択またはドロップ</span>
        onDrop:<span class="synIdentifier">function</span>(<span class="synStatement">event</span>)<span class="synIdentifier">{</span>
            <span class="synComment">//ファイルを取得</span>
            <span class="synIdentifier">let</span> file = <span class="synStatement">event</span>.target.files<span class="synIdentifier">[</span>0<span class="synIdentifier">]</span>;

            <span class="synComment">//読み込み</span>
            ReadFile(file);
        <span class="synIdentifier">}</span>
    <span class="synIdentifier">}</span>,
<span class="synIdentifier">}</span>);
</pre>


<p><br/></p>

<h4 id="ファイルの内容をチェックする">ファイルの内容をチェックする</h4>

<p>ファイルを読み込めたので、ファイルの内容をチェックします。</p>

<p>まず、普通に考えるとReadFileが読み込んだテキストの内容を返してくれて、それをもとにチェックするのがわかりやすいですよね！</p>

<p>なんだけれども、ReadFileはtextも返すようにはなっていません。</p>

<p><b>app.js</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">const</span> ReadFile = require(<span class="synConstant">'./components/ReadFile'</span>);

<span class="synStatement">window</span>.Vue = require(<span class="synConstant">'vue'</span>);

<span class="synStatement">const</span> app = <span class="synStatement">new</span> Vue(<span class="synIdentifier">{</span>
    el: <span class="synConstant">'.simple-form'</span>,
    methods:<span class="synIdentifier">{</span>
        <span class="synComment">//ファイルを選択またはドロップ</span>
        onDrop:<span class="synIdentifier">function</span>(<span class="synStatement">event</span>)<span class="synIdentifier">{</span>
            <span class="synComment">//ファイルを取得</span>
            <span class="synIdentifier">let</span> file = <span class="synStatement">event</span>.target.files<span class="synIdentifier">[</span>0<span class="synIdentifier">]</span>;

            <span class="synComment">//読み込み</span>
           <span class="synComment">//読み込んだファイルの内容を取得したいんだけれども、、、</span>
            <span class="synIdentifier">let</span> text = ReadFile(file);
        
            <span class="synComment">//textの内容を出力したりチェックしたり</span>
            console.log(text);
        <span class="synIdentifier">}</span>
    <span class="synIdentifier">}</span>,
<span class="synIdentifier">}</span>);
</pre>


<p>ちょっと`ReadFile.js'に視線を戻して、こんな感じにtextを返してよ！ってやっても返してはくれません。</p>

<p><b>ReadFile.js</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>module.exports = <span class="synIdentifier">function</span>(file)<span class="synIdentifier">{</span>
    <span class="synIdentifier">let</span> reader = <span class="synStatement">new</span> FileReader();

    <span class="synComment">//読み込み終わったあとのイベント</span>
    reader.onload = <span class="synIdentifier">function</span>()<span class="synIdentifier">{</span>
        text = reader.result
        console.log(<span class="synConstant">'text:'</span>+ text);
        <span class="synComment">//textをかえしてよ！</span>
        <span class="synStatement">return</span> text
    <span class="synIdentifier">}</span>
    <span class="synComment">//読み込み開始</span>
    reader.readAsText(file)
<span class="synIdentifier">}</span>
</pre>


<p>というのも、<code>ReadFile.js</code>の中の関数は、<code>reader.readAsText(file)'が終わったら処理を戻してしまって、</code>reader.onload`は待たないからです。</p>

<p>（たぶんあってるんだけれども、シングルスレッドとかマルチスレッドとか、ちゃん理解できてないんだ。<br/>
<code>reader.readAsText()</code>はファイルIOを行うのでIOを行っている間CPUは、別の処理を行っていて、ファイルIOが終わったら割り込みが走って、処理していたことを止めるなりなんやらして、<code>reader.onload</code>で書かれていることが動いて、それが終わったら元の処理に戻る、みたいな感じなのかな。 ）</p>

<p>全てはFileReaderが非同期で実装されているせいで、いろいろと頭を悩ませることになっています。<br/>
javascript以外の言語、C言語とかCOBOLとかだと同期(直列)処理が当たり前で、効率的に非同期でやりたい、って話がでてきてあれこれと悩むことがあると思うのですが、javascriptなんかは、非同期で実装されているものを、順番に実行したいみたいな逆の悩みがあって、どうしてこう違いがでるんだろう、みたいに思ってます。<br/>
javascriptのイベント駆動というワードに引っかかっていますが、未だにイベント駆動の意味がしっくりきません。.NETをさわってるときもイベント駆動みたいな話があったんだけれどもイベントってなんだろうなぁと。。。</p>

<p>話がそれました。</p>

<p>とりあえず、<code>ReadFile.js</code>が読み込んだ値を返してくれない！チェック処理が書けない！という状態になってしまいます。</p>

<p>ええい、ままよ！と以下のように書くこともできます。</p>

<p>ここでは、ファイルの中に特定の文字が含まれるかを検査する処理を追加しています。</p>

<p><b>ReadFile.js</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>module.exports = <span class="synIdentifier">function</span>(file)<span class="synIdentifier">{</span>
    <span class="synIdentifier">let</span> reader = <span class="synStatement">new</span> FileReader();

    <span class="synComment">//読み込み終わったあとのイベント</span>
    reader.onload = <span class="synIdentifier">function</span>()<span class="synIdentifier">{</span>
        text = reader.result
        
        <span class="synComment">//ええいままよ！とチェック処理を直に書く</span>
        <span class="synComment">//ファイルの中の「おはんき」の出現回数を数える</span>
        <span class="synIdentifier">let</span> count = (text.match(<span class="synStatement">new</span> <span class="synType">RegExp</span>(<span class="synConstant">'おはんき'</span>,<span class="synConstant">'g'</span>)) || <span class="synIdentifier">[]</span>).length

        <span class="synComment">//チェックがOKだったら</span>
        <span class="synStatement">if</span>(count &gt; 0)<span class="synIdentifier">{</span>
            console.log(count)

            <span class="synComment">//ファイルをサーバーに送る</span>
            <span class="synComment">//送信がエラーだったらどうしよう</span>
            <span class="synComment">//そういえばリクエストは2回なげるんだった</span>
        <span class="synIdentifier">}</span>

    <span class="synIdentifier">}</span>
    <span class="synComment">//読み込み開始</span>
    reader.readAsText(file)
<span class="synIdentifier">}</span>
</pre>


<p>途中までは、なんだいけるじゃん！と希望にあふれた船出でしたが、チェックがOKだった場合に続けざまに書いていく処理が、サーバー送信だったりして、ここに全部書くのか、、と不安になること間違いありません。</p>

<p>どうしよう、ということでまずとる手法がコールバック関数になります。</p>

<h5 id="コールバック関数">コールバック関数</h5>

<p>コールバック聞いた当初は、やけに小難しいイメージがありましたが最近は少し慣れました。</p>

<p>単に関数を引数として渡すだけと思えば、そう大したことはありません。</p>

<p>さきほど、<code>ReadFile.js</code>に書いた機能を関数として、<code>app.js</code>に書いて、それを'ReadFile.js'に渡してあげます。</p>

<p><b>app.js</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">const</span> ReadFile = require(<span class="synConstant">'./components/ReadFile'</span>);

<span class="synStatement">window</span>.Vue = require(<span class="synConstant">'vue'</span>);

<span class="synStatement">const</span> app = <span class="synStatement">new</span> Vue(<span class="synIdentifier">{</span>
    el: <span class="synConstant">'.simple-form'</span>,
    methods:<span class="synIdentifier">{</span>
        <span class="synComment">//ファイルを選択またはドロップ</span>
        onDrop:<span class="synIdentifier">function</span>(<span class="synStatement">event</span>)<span class="synIdentifier">{</span>
            <span class="synComment">//ファイルを取得</span>
            <span class="synIdentifier">let</span> file = <span class="synStatement">event</span>.target.files<span class="synIdentifier">[</span>0<span class="synIdentifier">]</span>;

            <span class="synComment">//ReadFile.jsの中でやってほしいことを書く</span>
            <span class="synStatement">const</span> callback = <span class="synIdentifier">function</span>(text)<span class="synIdentifier">{</span>
                <span class="synComment">//ファイルの中の「おはんき」の出現回数を数える</span>
                <span class="synIdentifier">let</span> count = (text.match(<span class="synStatement">new</span> <span class="synType">RegExp</span>(<span class="synConstant">'おはんき'</span>,<span class="synConstant">'g'</span>)) || <span class="synIdentifier">[]</span>).length

                <span class="synComment">//チェックがOKだったら</span>
                <span class="synStatement">if</span>(count &gt; 0)<span class="synIdentifier">{</span>
                    console.log(count)
                <span class="synIdentifier">}</span>
            <span class="synIdentifier">}</span>

            <span class="synComment">//定義した関数を渡す</span>
            <span class="synIdentifier">let</span> text =  ReadFile(file, callback);

    <span class="synIdentifier">}</span>,
<span class="synIdentifier">}</span>);
</pre>


<p><code>ReadFile.js</code>では、受け取った関数を、<code>reader.onload</code>が呼ばれるタイミングで実行してあげます。</p>

<p><b>ReadFile.js</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>module.exports = <span class="synIdentifier">function</span>(file)<span class="synIdentifier">{</span>
    <span class="synIdentifier">let</span> reader = <span class="synStatement">new</span> FileReader();

    <span class="synComment">//読み込み終わったあとのイベント</span>
    reader.onload = <span class="synIdentifier">function</span>()<span class="synIdentifier">{</span>
        text = reader.result
        <span class="synComment">//callbackを使う</span>
        callback(text)  
        <span class="synIdentifier">}</span>

    <span class="synIdentifier">}</span>
    <span class="synComment">//読み込み開始</span>
    reader.readAsText(file)
<span class="synIdentifier">}</span>
</pre>


<p>こうすることで、<code>ReadFile.js'に書いていた処理を渡してあげることで、全部の処理を</code>ReadFile.js`に書く必要はなくなりましたね。</p>

<p><br/></p>

<p>でも、ちょっとまってください。
これって結局、書く場所が変わっただけで、この後にサーバー送信をしたいってなったらどうなるんでしょう。</p>

<p>せっかくなんで書いてみることにしましょう。<br/>
AjaxでHTTPリクエストを行う<code>xhr.js</code>を以下のように書いてみました。</p>

<p><b>xhr.js</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>module.exports = <span class="synIdentifier">function</span>()<span class="synIdentifier">{</span>
     <span class="synIdentifier">var</span> xhr= <span class="synStatement">new</span> XMLHttpRequest();
     xhr.open(<span class="synConstant">&quot;GET&quot;</span>,<span class="synConstant">&quot;/sample&quot;</span>);
     xhr.send(); 

     <span class="synComment">//リクエストを受信したときのイベント</span>
     xhr.onload = <span class="synIdentifier">function</span>()<span class="synIdentifier">{</span>
         <span class="synStatement">if</span>(xhr.readyState === 4 &amp;&amp; xhr.<span class="synStatement">status</span> === 0) <span class="synIdentifier">{</span>
             console.log(xhr.responseText);
           <span class="synIdentifier">}</span>
     <span class="synIdentifier">}</span>;
<span class="synIdentifier">}</span>
</pre>


<p>本来はPOST処理を書くべきところなんですが、いろいろと面倒なのでシンプルにとあるAPIにGETリクエストを呼ぶだけになっています。</p>

<p><code>/samle</code>をGETすると、<code>ohanky!</code>という文字列が返ってくるだけの素敵なAPIです。</p>

<p>xhrは例のごとく、当然のように非同期で処理がされるため、リクエストが受信し終わった場合の処理は、<code>xhr.onload</code>に書いてあげます。</p>

<p>さて、こちらのサーバーリクエストは、さきほどのファイル読み込みのチェックが終わった場合に実行したい、としたとき、単純に考えるとこうなりますかね。</p>

<p><b>app.js</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">const</span> ReadFile = require(<span class="synConstant">'./components/ReadFile'</span>);
<span class="synStatement">const</span> Xhr = require(<span class="synConstant">'./components/Xhr'</span>);

<span class="synStatement">window</span>.Vue = require(<span class="synConstant">'vue'</span>);

<span class="synStatement">const</span> app = <span class="synStatement">new</span> Vue(<span class="synIdentifier">{</span>
    el: <span class="synConstant">'.simple-form'</span>,
    methods:<span class="synIdentifier">{</span>
        <span class="synComment">//ファイルを選択またはドロップ</span>
        onDrop:<span class="synIdentifier">function</span>(<span class="synStatement">event</span>)<span class="synIdentifier">{</span>
            <span class="synComment">//ファイルを取得</span>
            <span class="synIdentifier">let</span> file = <span class="synStatement">event</span>.target.files<span class="synIdentifier">[</span>0<span class="synIdentifier">]</span>;

            <span class="synComment">//ReadFile.jsの中でやってほしいことを書く</span>
            <span class="synStatement">const</span> callback = <span class="synIdentifier">function</span>(text)<span class="synIdentifier">{</span>
                <span class="synComment">//ファイルの中の「おはんき」の出現回数を数える</span>
                <span class="synIdentifier">let</span> count = (text.match(<span class="synStatement">new</span> <span class="synType">RegExp</span>(<span class="synConstant">'おはんき'</span>,<span class="synConstant">'g'</span>)) || <span class="synIdentifier">[]</span>).length

                <span class="synComment">//チェックがOKだったら</span>
                <span class="synStatement">if</span>(count &gt; 0)<span class="synIdentifier">{</span>
                    <span class="synComment">//サーバーにリクエストを飛ばす</span>
                    Xhr();
                <span class="synIdentifier">}</span>
            <span class="synIdentifier">}</span>

            <span class="synComment">//定義した関数を渡す</span>
            <span class="synIdentifier">let</span> text =  ReadFile(file, callback);

    <span class="synIdentifier">}</span>,
<span class="synIdentifier">}</span>);
</pre>


<p>callback関数の中に、サーバーリクエストを行う<code>Xhr()</code>を追加しています。</p>

<p>これで、ファイルを読み込んで内容に問題がなかったらサーバーリクエストを行う、ことができるようになりました。</p>

<p><br/></p>

<h5 id="コールバック関数地獄を体験する">コールバック関数地獄を体験する</h5>

<p>さて、</p>

<ul>
<li>ファイルを読み込んで内容の確認を行う</li>
<li>内容に問題がなければサーバーリクエストを行う</li>
</ul>


<p>ときたので、さらに</p>

<ul>
<li>ファイルを読み込んで内容の確認を行う</li>
<li>内容に問題がなければサーバーリクエストを行う</li>
<li>サーバーリクエストに成功したら、別のサーバーリクエストを行う</li>
</ul>


<p>といってみます。<br/>
サーバーリクエストの内容をファイルに書き込む、のほうがそれっぽいのですが、そもそもやりたかったことは、別のサーバーリクエストになるので、このままいきます。</p>

<p>今までのやり方を踏襲するのであれば、こんな感じでしょうか。</p>

<p>まずは、<code>xhr.js</code>をcallback関数を受け取って実行するようにしときます。<br/>
（もちろんcallbackではなく<code>xhr.onload</code>に書いてもいいんだけれども)<br/>
<b>xhr.js</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>module.exports = <span class="synIdentifier">function</span>(callback)<span class="synIdentifier">{</span>
     <span class="synIdentifier">var</span> xhr= <span class="synStatement">new</span> XMLHttpRequest();
     xhr.open(<span class="synConstant">&quot;GET&quot;</span>,<span class="synConstant">&quot;/sample&quot;</span>);
     xhr.send(); 

     <span class="synComment">//リクエストを受信したときのイベント</span>
     xhr.onload = <span class="synIdentifier">function</span>()<span class="synIdentifier">{</span>
         <span class="synStatement">if</span>(xhr.readyState === 4 &amp;&amp; xhr.<span class="synStatement">status</span> === 0) <span class="synIdentifier">{</span>
             console.log(xhr.responseText);

             <span class="synComment">//成功したらあとにコールバック関数を実行する</span>
             callback();
           <span class="synIdentifier">}</span>
     <span class="synIdentifier">}</span>;
<span class="synIdentifier">}</span>
</pre>


<p>次に、<code>xhr.js</code>に処理させたい関数を<code>callbackAfterRequest</code>という微妙な名前で作成しておき、<code>Xhr()</code>関数に渡してあげます。</p>

<p><b>app.js</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">const</span> ReadFile = require(<span class="synConstant">'./components/ReadFile'</span>);
<span class="synStatement">const</span> Xhr = require(<span class="synConstant">'./components/Xhr'</span>);

<span class="synStatement">window</span>.Vue = require(<span class="synConstant">'vue'</span>);

<span class="synStatement">const</span> app = <span class="synStatement">new</span> Vue(<span class="synIdentifier">{</span>
    el: <span class="synConstant">'.simple-form'</span>,
    methods:<span class="synIdentifier">{</span>
        <span class="synComment">//ファイルを選択またはドロップ</span>
        onDrop:<span class="synIdentifier">function</span>(<span class="synStatement">event</span>)<span class="synIdentifier">{</span>
            <span class="synComment">//ファイルを取得</span>
            <span class="synIdentifier">let</span> file = <span class="synStatement">event</span>.target.files<span class="synIdentifier">[</span>0<span class="synIdentifier">]</span>;

            <span class="synComment">/// GET /sample1 した後の処理を書く</span>
            <span class="synStatement">const</span> callbackAfterRequest = <span class="synIdentifier">function</span>()<span class="synIdentifier">{</span>
                <span class="synIdentifier">var</span> xhr= <span class="synStatement">new</span> XMLHttpRequest();
                xhr.open(<span class="synConstant">&quot;GET&quot;</span>,<span class="synConstant">&quot;/other&quot;</span>);
                xhr.send(); 

                <span class="synComment">//リクエストを受信したときのイベント</span>
                xhr.onload = <span class="synIdentifier">function</span>()<span class="synIdentifier">{</span>
                    <span class="synStatement">if</span>(xhr.readyState === 4 &amp;&amp; xhr.<span class="synStatement">status</span> === 200) <span class="synIdentifier">{</span>
                        console.log(xhr.responseText);
                      <span class="synIdentifier">}</span>
                <span class="synIdentifier">}</span>;
            <span class="synIdentifier">}</span>

            <span class="synComment">//ReadFile.jsの中でやってほしいことを書く</span>
            <span class="synStatement">const</span> callback = <span class="synIdentifier">function</span>(text)<span class="synIdentifier">{</span>
                <span class="synComment">//ファイルの中の「おはんき」の出現回数を数える</span>
                <span class="synIdentifier">let</span> count = (text.match(<span class="synStatement">new</span> <span class="synType">RegExp</span>(<span class="synConstant">'おはんき'</span>,<span class="synConstant">'g'</span>)) || <span class="synIdentifier">[]</span>).length

                <span class="synComment">//チェックがOKだったら</span>
                <span class="synStatement">if</span>(count &gt; 0)<span class="synIdentifier">{</span>
                    <span class="synComment">//サーバーにリクエストを飛ばす</span>
                    Xhr(callbackAfterRequest);
                <span class="synIdentifier">}</span>
            <span class="synIdentifier">}</span>

            <span class="synComment">//定義した関数を渡す</span>
            <span class="synIdentifier">let</span> text =  ReadFile(file, callback);

    <span class="synIdentifier">}</span>,
<span class="synIdentifier">}</span>);
</pre>


<p>これぐらいであれば、なんだ全然いけるじゃないか！と思うかもしれませんが、パッと見てどこがらどう処理が流れているのかがすごいわかりにくいです。</p>

<p>プログラムは上から下に流れると思いきや、後で動く処理が延々と書かれており、それがどのような順序で動くのかってなかなかわかりづらい印象を受けます。</p>

<p>ということで長くなったので次回Promise、そしてHTTPリクエストはaxiosを使って書いていきたいと思います。</p>

-----
--------
AUTHOR: konoemario
TITLE: 
BASENAME: 2018/01/07/205442
STATUS: Draft
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 01/07/2018 20:54:42
-----
BODY:
<p><b>laundry.py</b></p>

<pre class="code lang-python" data-lang="python" data-unlink><span class="synStatement">def</span> <span class="synIdentifier">goToStore</span>():
    <span class="synIdentifier">print</span>(<span class="synConstant">'洗剤を買いに行く'</span>)

<span class="synStatement">def</span> <span class="synIdentifier">doTheLaundry</span>():
    <span class="synIdentifier">print</span>(<span class="synConstant">'洗濯機を回す'</span>)

<span class="synStatement">def</span> <span class="synIdentifier">hangTheLaundry</span>():
    <span class="synIdentifier">print</span>(<span class="synConstant">'洗濯ものを干す'</span>)

    
<span class="synConstant">'''</span>
<span class="synConstant">処理は上からしたに流れる</span>
<span class="synConstant">'''</span>
goToStore()
doTheLaundry()
hangTheLaundry()
</pre>


<p><b>実行結果</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ python async.py
洗剤を買いに行く
洗濯機を回す
洗濯ものを干す
</pre>


<p><b>laundry.py</b></p>

<pre class="code lang-python" data-lang="python" data-unlink><span class="synPreProc">from</span> time <span class="synPreProc">import</span> sleep

<span class="synStatement">def</span> <span class="synIdentifier">goToStore</span>():
    <span class="synIdentifier">print</span>(<span class="synConstant">'洗剤を買いに行く'</span>)
    sleep(<span class="synConstant">3</span>)

<span class="synStatement">def</span> <span class="synIdentifier">doTheLaundry</span>():
    <span class="synIdentifier">print</span>(<span class="synConstant">'洗濯機を回す'</span>)
    sleep(<span class="synConstant">1</span>)

<span class="synStatement">def</span> <span class="synIdentifier">hangTheLaundry</span>():
    <span class="synIdentifier">print</span>(<span class="synConstant">'洗濯ものを干す'</span>)
    sleep(<span class="synConstant">2</span>)
    
<span class="synConstant">'''</span>
<span class="synConstant">処理は上からしたに流れる</span>
<span class="synConstant">'''</span>
goToStore()
doTheLaundry()
hangTheLaundry()
</pre>


<p><b>実行結果</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ python async.py
洗剤を買いに行く
洗濯機を回す
洗濯ものを干す
</pre>


-----
--------
AUTHOR: konoemario
TITLE: 
BASENAME: 2017/12/28/165204
STATUS: Draft
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 12/27/2017 20:09:41
-----
BODY:
<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fqiita.com%2Fgaogao_9%2Fitems%2F5417d01b4641357900c7" title="JavaScriptは如何にしてAsync/Awaitを獲得したのか Qiita版 - Qiita" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://qiita.com/gaogao_9/items/5417d01b4641357900c7">qiita.com</a></cite></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synComment">//すぐに動く!</span>
console.log(<span class="synConstant">'hello'</span>);

<span class="synComment">//2秒後に動く これは非同期</span>
setTimeout(<span class="synIdentifier">function</span>()<span class="synIdentifier">{</span>
    console.log(<span class="synConstant">'ugoita?'</span>)
<span class="synIdentifier">}</span>,2000);

console.log(<span class="synConstant">'hello again!'</span>);
</pre>




<pre class="code lang-sh" data-lang="sh" data-unlink>$ node test.js
hello
hello again!
ugoita?
</pre>


<p>apiでやろう
XMLhttprequestを用意</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=http%3A%2F%2Fitemy.net%2F%3Fp%3D386" title="Node.jsでXMLHttpRequestを使う" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://itemy.net/?p=386">itemy.net</a></cite></p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fqiita.com%2Fsirone%2Fitems%2F412b2a171dccb11e1bb6" title="XMLHttpRequest についてのメモ - Qiita" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://qiita.com/sirone/items/412b2a171dccb11e1bb6">qiita.com</a></cite></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>module.exports = <span class="synIdentifier">function</span>(<span class="synIdentifier">{</span>file, _chunk_size = 1024, callback<span class="synIdentifier">}</span>)<span class="synIdentifier">{</span>
        <span class="synStatement">return</span> <span class="synStatement">new</span> Promise(<span class="synIdentifier">function</span>(resolve, reject)<span class="synIdentifier">{</span>
            <span class="synIdentifier">let</span> offset = 0;
            <span class="synIdentifier">let</span> chunk_size = _chunk_size;
            console.log(<span class="synConstant">'chunk:'</span>+chunk_size);
            console.log(<span class="synConstant">'file:'</span>+file);
            <span class="synIdentifier">let</span> reader = <span class="synStatement">new</span> FileReader();
            <span class="synIdentifier">let</span> text = <span class="synConstant">''</span>;

            <span class="synComment">//file.slice(開始位置、終了位置)でファイルの指定バイト位置のデータを取得する</span>
            slice = file.slice(offset, offset + chunk_size)

            <span class="synComment">//取得したデータを読みこむ</span>
            reader.readAsArrayBuffer(slice);

            <span class="synComment">//読込が成功した場合のイベント</span>
            reader.onload = (<span class="synStatement">event</span>) =&gt;<span class="synIdentifier">{</span>
                <span class="synComment">//reader.resultはArrayBufferでバイナリデータが並んでいる</span>
                <span class="synComment">//最後まで読み込むと、ファイルのデータを示すArrayBufferが格納されるとあるが謎。</span>

                <span class="synComment">//console.log('readerResult'+this.toHex(reader.result));</span>

                <span class="synComment">//Uint8Arrayは、8bit単位の配列をつくってくれる。</span>
                <span class="synIdentifier">let</span> view = <span class="synStatement">new</span> Uint8Array(reader.result)
            
                <span class="synComment">//console.log('viewLength'+view.length);</span>
                
                <span class="synComment">//view.lengthは、8bit単位の要素数の数になるので、バイト数と同じになる。</span>
                <span class="synStatement">for</span>(<span class="synIdentifier">let</span> i = 0; i &lt; view.length; i++ )<span class="synIdentifier">{</span>
                    console.log(<span class="synConstant">'HEX:'</span>+toHex(view<span class="synIdentifier">[</span>i<span class="synIdentifier">]</span>));
                    console.log(<span class="synConstant">'toString:'</span>+view<span class="synIdentifier">[</span>i<span class="synIdentifier">]</span>.toString(16));
                    console.log(<span class="synConstant">'number:'</span>+view<span class="synIdentifier">[</span>i<span class="synIdentifier">]</span>);

                    <span class="synComment">//改行コードLFを探す</span>
                    <span class="synStatement">if</span>(view<span class="synIdentifier">[</span>i<span class="synIdentifier">]</span> === 10)<span class="synIdentifier">{</span>
                        <span class="synStatement">break</span>;
                    <span class="synIdentifier">}</span><span class="synStatement">else</span><span class="synIdentifier">{</span>
                        text += <span class="synType">String</span>.fromCharCode(view<span class="synIdentifier">[</span>i<span class="synIdentifier">]</span>);
                    <span class="synIdentifier">}</span>
                <span class="synIdentifier">}</span>

                console.log(<span class="synConstant">'text:'</span>+ text);

                result = callback.validate(text);

                <span class="synStatement">if</span>(result)<span class="synIdentifier">{</span>
                    resolve(<span class="synConstant">'finish!'</span>)
                <span class="synIdentifier">}</span><span class="synStatement">else</span><span class="synIdentifier">{</span>
                    reject(<span class="synConstant">'ファイルの内容がおかしい'</span>)
                <span class="synIdentifier">}</span>
            <span class="synIdentifier">}</span>

            reader.onerror = ()=&gt;<span class="synIdentifier">{</span>
                console.log(<span class="synConstant">'fail'</span>);
                reject(<span class="synConstant">'ファイル読み込みに失敗した'</span>);
            <span class="synIdentifier">}</span>

            <span class="synComment">//読込が成功・失敗にかかわらず終了したときのイベント</span>
            reader.onloadend = () =&gt;<span class="synIdentifier">{</span>
            <span class="synIdentifier">}</span>


            <span class="synComment">//16進数で表示用 普通にやると10進数で表示されてしまう。</span>
            <span class="synIdentifier">function</span>
            toHex(v) <span class="synIdentifier">{</span>
                <span class="synStatement">return</span> <span class="synConstant">'0x'</span> + ((<span class="synConstant">'0000'</span> + v.toString(16).toUpperCase()).substr(-4));
            <span class="synIdentifier">}</span>

        <span class="synIdentifier">}</span>);

<span class="synIdentifier">}</span>




</pre>


-----
--------
AUTHOR: konoemario
TITLE: ラズパイで大人のモーターを操作する
BASENAME: 2017/09/28/222322
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 09/28/2017 22:23:22
CATEGORY: ラジコンシリーズ
CATEGORY: プログラム
CATEGORY: Python
CATEGORY: Flask
IMAGE: https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170928/20170928222240.png
-----
BODY:
<p>この記事は、Raspberry Pi Advent Calendar 2017 25日目の記事として、いろいろと手直しを行いました。</p>

<p>メリークリスマス！</p>

<p>クリスマス当日の今日 25日、みなさんいかがお過ごしでしょうか。</p>

<p>今年のクリスマスは、残念ながら25日が平日で、イブの日になんか次の日仕事じゃねえか！と悲しんだ方もきっと多かったはず。</p>

<p>そこで今回は、時間がなくて会えないカップルや、まだクリスマスプレゼントあげてない！という人にぴったりな電子工作に挑戦します。</p>

<p>何ができるかは最後のお楽しみだよ！</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170928/20170928222240.png" alt="f:id:konoemario:20170928222240p:plain:w500" title="f:id:konoemario:20170928222240p:plain:w500" class="hatena-fotolife" style="width:500px" itemprop="image"></span></p>

<ul class="table-of-contents">
    <li><a href="#購入するもの">購入するもの</a></li>
    <li><a href="#ラズペリーパイZeroの設定をしよう">ラズペリーパイZeroの設定をしよう</a></li>
    <li><a href="#大人のモーターを電子工作に使えるようにする">大人のモーターを電子工作に使えるようにする</a></li>
    <li><a href="#ラズパイと大人のモーターをつなげる">ラズパイと大人のモーターをつなげる</a></li>
    <li><a href="#モーターを動かすシンプルなコード">モーターを動かすシンプルなコード</a></li>
    <li><a href="#操作画面を作成する">操作画面を作成する</a><ul>
            <li><a href="#Flaskを準備する">Flaskを準備する</a></li>
            <li><a href="#さきほどのdc_motorpyを呼ぶ処理を書こう">さきほどのdc_motor.pyを呼ぶ処理を書こう</a></li>
            <li><a href="#画面をつくろう">画面をつくろう</a></li>
        </ul>
    </li>
    <li><a href="#最後に">最後に</a></li>
</ul>

<p><br/></p>

<h3 id="購入するもの">購入するもの</h3>

<p>今回、使うものは以下の通りです。</p>

<ul>
<li>ラズペリーパイZeroセット</li>
<li>モータードライバー(DRV8835)</li>
<li>ジャンパワイヤ数本</li>
<li>ブレッドボード</li>
<li>電池ケース（4本入るやつ)と単三電池4本</li>
<li>大人のモーター</li>
</ul>


<p>ラズパイZeroから、電池ケースについては、モーターを動かす際に必要となる一般的なキットだね。<br/>
詳しく知りたい！っていう方は、以前、DCモーターを動かした記事があるのでこちらを見てね。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fwww.tohuandkonsome.site%2Fentry%2F2017%2F03%2F05%2F200409" title="RaspBerryPiでモーターを動かす(1) - 豆腐とコンソメ" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://www.tohuandkonsome.site/entry/2017/03/05/200409">www.tohuandkonsome.site</a></cite></p>

<p><br/></p>

<p>大人のモーターについては、好きなものを購入しよう！<br/>
自分はこんな感じのやつを購入しました。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170927/20170927225900.jpg" alt="f:id:konoemario:20170927225900j:plain:w500" title="f:id:konoemario:20170927225900j:plain:w500" class="hatena-fotolife" style="width:500px" itemprop="image"></span></p>

<p>さあ、何ができるのかな！</p>

<p><br/></p>

<h3 id="ラズペリーパイZeroの設定をしよう">ラズペリーパイZeroの設定をしよう</h3>

<p>何はともあれ、まずはラズパイを用意しよう。<br/>
とはいえ、ラズパイの初期設定については、こちらの記事にも書いたので、ここでは省略しちゃうよ。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fwww.tohuandkonsome.site%2Fentry%2F2017%2F04%2F29%2F223718" title="RaspBerry Pi Zeroの初期設定メモ  - 豆腐とコンソメ" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://www.tohuandkonsome.site/entry/2017/04/29/223718">www.tohuandkonsome.site</a></cite></p>

<p>PythonとラズパイのGPIOをコントロールするWiringPiまで使えるようなれば大丈夫！</p>

<p><br/></p>

<h3 id="大人のモーターを電子工作に使えるようにする">大人のモーターを電子工作に使えるようにする</h3>

<p>ブレッドボードに接続しやすいように、ハサミでケーブルを途中で切っちゃうよ。</p>

<p>カッターでビニール部分を削ると、プラスとマイナスの導線がでてきた。</p>

<p>ちなみに行き当たりばったりでやってるから、ここでどうしよもなかったらこの企画は、ここで中止だったよ！</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170927/20170927230234.jpg" alt="f:id:konoemario:20170927230234j:plain:w500" title="f:id:konoemario:20170927230234j:plain:w500" class="hatena-fotolife" style="width:500px" itemprop="image"></span></p>

<p><br/></p>

<h3 id="ラズパイと大人のモーターをつなげる">ラズパイと大人のモーターをつなげる</h3>

<p>そしたら、ラズパイと大人のモーター、電池、モータードライバたちをブレッドボード上でつなげます。<br/>
なんだかごちゃごちゃしているけれども、こんな感じでつなげてみたよ！</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170927/20170927231758.jpg" alt="f:id:konoemario:20170927231758j:plain:w500" title="f:id:konoemario:20170927231758j:plain:w500" class="hatena-fotolife" style="width:500px" itemprop="image"></span></p>

<p>写真には、DRV8835以外のモータードライバと、普通のDCモーターが写っているけれども、これは気にしないで大丈夫！</p>

<p>最初にいろんなモータードライバーと、DCモーターでテストしてたんだ。</p>

<p>モータードライバーの制御は、以下のサイトが一番わかりやすいです！ <br/>
英語なのでなんとなくしかわからないのですが、それでもなんとなくわかる、わかりやすさです！</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fwww.pololu.com%2Fproduct%2F2135" title="Pololu - DRV8835 Dual Motor Driver Carrier" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://www.pololu.com/product/2135">www.pololu.com</a></cite></p>

<p>今回は、シンプルなPHASE/ENABLEモードで設定を行っているよ！</p>

<p>余談ですが、同じDRV8835でもピンの数が少ないやつがあったりして混乱したことがあります。</p>

<h3 id="モーターを動かすシンプルなコード">モーターを動かすシンプルなコード</h3>

<p>とりあえずモーターが動くか確認します。</p>

<p><script src="https://gist.github.com/1db63b77f6037df39147be6aba43ff55.js"> </script></p>

<p><a href="https://gist.github.com/1db63b77f6037df39147be6aba43ff55">DRV8835を使ったモータ制御</a></p>

<p>うまくいけば、激しく動くはずです。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170928/20170928212140.jpg" alt="f:id:konoemario:20170928212140j:plain:w500" title="f:id:konoemario:20170928212140j:plain:w500" class="hatena-fotolife" style="width:500px" itemprop="image"></span></p>

<h3 id="操作画面を作成する">操作画面を作成する</h3>

<p>コマンドラインからも動かせるのですが、せっかくなので、操作画面を用意しましょう。</p>

<p>そのほうがきっと盛り上がるはずです！</p>

<h4 id="Flaskを準備する">Flaskを準備する</h4>

<p>操作画面は、一番シンプルなpythonのWebフレームワーク「Flask」を使用します。</p>

<p>ラズパイにさっそくFlaskをインストールします。</p>

<p><b>Flaskをインストールするよ</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>pi@raspberrypi:~ $ sudo pip install Flask
Collecting Flask
</pre>


<p>インストールが終わったら、小さいWebアプリであるapp.pyを書こう。</p>

<p><b>最小限のFlaskアプリケーション app.py</b></p>

<pre class="code lang-python" data-lang="python" data-unlink><span class="synPreProc">from</span> flask <span class="synPreProc">import</span> Flask
app = Flask(__name__)

<span class="synPreProc">@</span><span class="synIdentifier">app.route</span>(<span class="synConstant">'/'</span>)
<span class="synStatement">def</span> <span class="synIdentifier">hello_world</span>():
    <span class="synStatement">return</span> <span class="synConstant">&quot;Hello World!&quot;</span>

<span class="synStatement">if</span> __name__ == <span class="synConstant">'__main__'</span>:
    app.run(host=<span class="synConstant">'0.0.0.0'</span>)
</pre>


<p>書き終わったら、さっそく起動してみよう。</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ python app.py
python app.py
 * Running on http://0.0.0.0:<span class="synConstant">5000</span>/ <span class="synPreProc">(</span><span class="synSpecial">Press CTRL+C to quit</span><span class="synPreProc">)</span>
</pre>


<p>無事、起動したかな？</p>

<p>起動したら、PCで「http://ラズパイのIP:5000」にアクセスしてみよう。<br/>
こんな画面が見れるはず。</p>

<p><figure class="figure-image figure-image-fotolife"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170924/20170924112442.png" alt="f:id:konoemario:20170924112442p:plain:w300" title="f:id:konoemario:20170924112442p:plain:w300" class="hatena-fotolife" style="width:300px" itemprop="image"></span><figcaption>こんな画面</figcaption></figure></p>

<p>無事見れたら、Webアプリケーションを止める。<br/>
コマンドライン上で、「Crtl + c 」で終了させよう。</p>

<h4 id="さきほどのdc_motorpyを呼ぶ処理を書こう">さきほどのdc_motor.pyを呼ぶ処理を書こう</h4>

<p>それでは、さきほどのdc_motor.pyを、app.pyと同じディレクトリに置こう。</p>

<p><b>app.pyとdc.motorを同じところに</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ tree
.
├── app.py
├── dc_motor.py
</pre>


<p><br/></p>

<p>次にapp.pyを修正します。</p>

<p><b>app.py</b></p>

<pre class="code lang-python" data-lang="python" data-unlink><span class="synPreProc">from</span> flask <span class="synPreProc">import</span> Flask
<span class="synPreProc">from</span> flask <span class="synPreProc">import</span> render_template
<span class="synComment">#dc_motorを使えるように</span>
<span class="synPreProc">import</span> dc_motor

app = Flask(__name__)

<span class="synPreProc">@</span><span class="synIdentifier">app.route</span>(<span class="synConstant">'/'</span>)
<span class="synStatement">def</span> <span class="synIdentifier">hello_world</span>():
    <span class="synStatement">return</span> <span class="synConstant">&quot;Hello World!&quot;</span>


<span class="synComment">#URL「http://ラズパイのIP:5000/start」にアクセスがあった場合の処理</span>
<span class="synPreProc">@</span><span class="synIdentifier">app.route</span>(<span class="synConstant">'/start'</span>)
<span class="synStatement">def</span> <span class="synIdentifier">start_motor</span>():
    dcmotor = dc_motor.DC_Motor_DRV8835(a_phase=<span class="synConstant">14</span>, a_enbl=<span class="synConstant">15</span>)
    dcmotor.start()
    <span class="synStatement">return</span> <span class="synConstant">&quot;start&quot;</span>


<span class="synComment">#URL「http://ラズパイのIP:5000/stop」にアクセスがあった場合の処理</span>
<span class="synPreProc">@</span><span class="synIdentifier">app.route</span>(<span class="synConstant">'/stop'</span>)
<span class="synStatement">def</span> <span class="synIdentifier">stop_motor</span>():
    dcmotor = dc_motor.DC_Motor_DRV8835(a_phase=<span class="synConstant">14</span>, a_enbl=<span class="synConstant">15</span>)
    dcmotor.stop()
    <span class="synStatement">return</span> <span class="synConstant">&quot;stop&quot;</span>

<span class="synStatement">if</span> __name__ == <span class="synConstant">'__main__'</span>:
    app.run(host=<span class="synConstant">'0.0.0.0'</span>)
</pre>


<p>ここでは、「/start」「/stop」それぞれにアクセスがあった場合、さきほどのクラス「DC_Motor_DRV8835」のモーターを回転させるstartメソッドと、止めるstopメソッドを呼ぶようにします。</p>

<p>試しにこの段階で、「http://ラズパイのIP:5000/start」にアクセスすると、モーターが動きます。</p>

<h4 id="画面をつくろう">画面をつくろう</h4>

<p>最後に、シンプルな操作画面をhtml、css、javascriptでつくっちゃいましょう。</p>

<p>完成イメージはこんな感じです。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170928/20170928221402.png" alt="f:id:konoemario:20170928221402p:plain:w300" title="f:id:konoemario:20170928221402p:plain:w300" class="hatena-fotolife" style="width:300px" itemprop="image"></span></p>

<p>せっかくなのでHerokuにもデプロイしました。</p>

<p><a href="https://sample-basic-css.herokuapp.com/sample/2/toggle3">https://sample-basic-css.herokuapp.com/sample/2/toggle3</a></p>

<p>ただですね、<span style="color: #ff0000">スマホとかの小さい画面でみることを一切考慮していない残念な画面</span>になってます。</p>

<p>まず、リソースを置くディレクトリをそれぞれ作成します。</p>

<p><b>ディレクトリを新規につくる</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ <span class="synStatement">mkdir</span> templates static
</pre>


<p>ディレクトリ構成はこんな感じになるよ。</p>

<p><b>こんな感じになる</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ tree
.
├── app.py
├── dc_motor.py
├── static
└── templates
</pre>


<p>そうしたら、htmlファイルをtemplates配下に、cssとjavascriptをstatic配下に置きます。<br/>
ついでにapp.pyのルートディレクトリにアクセスがあった場合（つまりトップ画面)の処理を以下のように修正します。</p>

<p><b>app.py</b></p>

<pre class="code lang-python" data-lang="python" data-unlink><span class="synPreProc">@</span><span class="synIdentifier">app.route</span>(<span class="synConstant">'/'</span>)
<span class="synStatement">def</span> <span class="synIdentifier">hello_world</span>():
    <span class="synComment">#テンプレートエンジンを使うよ。デフォルトでtemplates配下を探しに行くよ。  </span>
    <span class="synStatement">return</span> render_template(<span class="synConstant">'index.html'</span>, title=<span class="synConstant">&quot;大人のモーター&quot;</span>)
</pre>


<p> <br/></p>

<p>それぞれのファイルはこんな感じにしました。</p>

<p><b>index.html</b></p>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synComment">&lt;!doctype html&gt;</span>
<span class="synIdentifier">&lt;</span><span class="synStatement">head</span><span class="synIdentifier">&gt;</span>
<span class="synPreProc">   </span><span class="synIdentifier">&lt;</span><span class="synStatement">link</span><span class="synIdentifier"> </span><span class="synType">rel</span><span class="synIdentifier">=</span><span class="synConstant">&quot;stylesheet&quot;</span><span class="synIdentifier"> </span><span class="synType">href</span><span class="synIdentifier">=</span><span class="synConstant">&quot;{{ url_for('static', filename='style.css') }}&quot;</span><span class="synIdentifier">&gt;</span>
<span class="synPreProc">   </span><span class="synIdentifier">&lt;</span><span class="synStatement">script</span><span class="synIdentifier"> </span><span class="synType">type</span><span class="synIdentifier">=</span><span class="synConstant">&quot;text/javascript&quot;</span><span class="synIdentifier"> </span><span class="synType">src</span><span class="synIdentifier">=</span><span class="synConstant">&quot;{{ url_for('static', filename='motor.js') }}&quot;</span><span class="synIdentifier">&gt;&lt;/</span><span class="synStatement">script</span><span class="synIdentifier">&gt;</span>
<span class="synPreProc">   </span><span class="synIdentifier">&lt;</span><span class="synStatement">link</span><span class="synIdentifier"> </span><span class="synType">rel</span><span class="synIdentifier">=</span><span class="synConstant">&quot;stylesheet&quot;</span><span class="synIdentifier"> </span><span class="synType">href</span><span class="synIdentifier">=</span><span class="synConstant">&quot;https://fonts.googleapis.com/earlyaccess/hannari.css&quot;</span><span class="synIdentifier">&gt;</span>
<span class="synPreProc">   </span><span class="synIdentifier">&lt;</span><span class="synStatement">title</span><span class="synIdentifier">&gt;</span> {{ title }} <span class="synIdentifier">&lt;/</span><span class="synStatement">title</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">head</span><span class="synIdentifier">&gt;</span>

<span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;container&quot;</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">input</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;toggle&quot;</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;left-toggle&quot;</span><span class="synIdentifier"> </span><span class="synType">type</span><span class="synIdentifier">=</span><span class="synConstant">&quot;radio&quot;</span><span class="synIdentifier"> </span><span class="synType">name</span><span class="synIdentifier">=</span><span class="synConstant">&quot;toggle&quot;</span><span class="synIdentifier"> &gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">label</span><span class="synIdentifier"> </span><span class="synType">for</span><span class="synIdentifier">=</span><span class="synConstant">&quot;left-toggle&quot;</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;left-label&quot;</span><span class="synIdentifier">&gt;</span>うごく<span class="synIdentifier">&lt;/</span><span class="synStatement">label</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">input</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;toggle&quot;</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;right-toggle&quot;</span><span class="synIdentifier"> </span><span class="synType">type</span><span class="synIdentifier">=</span><span class="synConstant">&quot;radio&quot;</span><span class="synIdentifier"> </span><span class="synType">name</span><span class="synIdentifier">=</span><span class="synConstant">&quot;toggle&quot;</span><span class="synIdentifier"> </span><span class="synType">checked</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">label</span><span class="synIdentifier"> </span><span class="synType">for</span><span class="synIdentifier">=</span><span class="synConstant">&quot;right-toggle&quot;</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;right-label&quot;</span><span class="synIdentifier">&gt;</span>とまる<span class="synIdentifier">&lt;/</span><span class="synStatement">label</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
</pre>


<p>また、以下のcssファイルもstaticディレクトリ配下に置きます。</p>

<p><b>style.css</b></p>

<pre class="code lang-css" data-lang="css" data-unlink><span class="synStatement">*</span><span class="synSpecial">,</span><span class="synStatement">*</span>:<span class="synPreProc">before</span><span class="synSpecial">,</span><span class="synStatement">*</span>:<span class="synPreProc">after</span><span class="synIdentifier">{</span>
  <span class="synType">box-sizing</span>: <span class="synConstant">border-box</span>;
<span class="synIdentifier">}</span>

<span class="synStatement">html</span><span class="synSpecial">,</span><span class="synStatement">body</span><span class="synIdentifier">{</span>
  <span class="synType">height</span>: <span class="synConstant">100%</span>;
  <span class="synType">font-family</span>: <span class="synConstant">&quot;Hannari&quot;</span>;
<span class="synIdentifier">}</span>
<span class="synIdentifier">.container{</span>
  <span class="synType">position</span>:<span class="synConstant">relative</span>;
  <span class="synType">z-index</span>:<span class="synConstant">0</span>;
  <span class="synType">display</span>: flex;
  justify-<span class="synType">content</span>: <span class="synConstant">center</span>;
  align-items: <span class="synConstant">center</span>;
  <span class="synType">height</span>: <span class="synConstant">100%</span>;
<span class="synIdentifier">}</span>

<span class="synStatement">input</span><span class="synSpecial">[</span><span class="synConstant">type</span><span class="synSpecial">=</span><span class="synConstant">&quot;radio&quot;</span><span class="synSpecial">]</span><span class="synIdentifier">{</span>
  <span class="synType">display</span>: <span class="synConstant">none</span>;
<span class="synIdentifier">}</span>

<span class="synStatement">label</span><span class="synIdentifier">{</span>
  <span class="synType">border</span>:<span class="synConstant">3px</span> <span class="synConstant">solid</span> <span class="synConstant">#ff99cc</span>;
  <span class="synType">padding</span>:<span class="synConstant">10px</span>;
  <span class="synType">width</span>: <span class="synConstant">50%</span>;
  <span class="synType">max-width</span>:<span class="synConstant">500px</span>;
  <span class="synType">max-height</span>:<span class="synConstant">300px</span>;
  <span class="synType">min-width</span>: <span class="synConstant">100px</span>;
  <span class="synType">min-height</span>: <span class="synConstant">60px</span>;
  <span class="synType">height</span>: <span class="synConstant">50%</span>;
  <span class="synComment">/*</span>
<span class="synComment">  font-size:4.375 vw;</span>
<span class="synComment">  */</span>
  <span class="synType">font-size</span>:<span class="synConstant">150px</span>;
  <span class="synType">display</span>: flex;
  align-items: <span class="synConstant">center</span>;
  justify-<span class="synType">content</span>: <span class="synConstant">center</span>;
  <span class="synType">position</span>: <span class="synConstant">relative</span>;
  <span class="synType">transition</span>: <span class="synType">background</span> <span class="synConstant">600ms</span> <span class="synConstant">ease</span><span class="synSpecial">,</span> <span class="synType">color</span> <span class="synConstant">600ms</span> <span class="synConstant">ease</span>;
  <span class="synType">min-width</span>:<span class="synConstant">61px</span>;
  <span class="synType">cursor</span>:<span class="synConstant">pointer</span>;
<span class="synIdentifier">}</span>

<span class="synIdentifier">#left-label</span>:<span class="synPreProc">after</span><span class="synIdentifier">{</span>
  <span class="synType">top</span>:<span class="synConstant">0</span>;
  <span class="synType">left</span>:<span class="synConstant">0</span>;
  <span class="synType">position</span>:<span class="synConstant">absolute</span>;
  <span class="synType">content</span>:<span class="synConstant">&quot;&quot;</span>;
  <span class="synType">height</span>: <span class="synConstant">100%</span>;
  <span class="synType">width</span>: <span class="synConstant">100%</span>;
  <span class="synType">background-color</span>:<span class="synConstant">#ff99cc</span>;
  <span class="synType">transition</span>: <span class="synConstant">left</span> <span class="synConstant">200ms</span> <span class="synIdentifier">cubic-bezier(</span><span class="synConstant">0.77</span><span class="synIdentifier">,</span><span class="synConstant"> 0</span><span class="synIdentifier">,</span><span class="synConstant"> 0.175</span><span class="synIdentifier">,</span><span class="synConstant"> 1</span><span class="synIdentifier">)</span>;
  <span class="synType">z-index</span>: <span class="synConstant">-1</span>;
<span class="synIdentifier">}</span>

<span class="synIdentifier">#left-label{</span>
  <span class="synType">border-right</span>:<span class="synConstant">0</span>;
<span class="synIdentifier">}</span>

<span class="synComment">/*疑似要素afterを右のラベルの上にかぶせる。*/</span>
<span class="synIdentifier">#left-label</span>:<span class="synPreProc">after</span><span class="synIdentifier">{</span>
  <span class="synType">left</span>:<span class="synConstant">100%</span>;
<span class="synIdentifier">}</span>

<span class="synStatement">input</span><span class="synSpecial">[</span><span class="synConstant">type</span><span class="synSpecial">=</span><span class="synConstant">&quot;radio&quot;</span><span class="synSpecial">]</span>:<span class="synPreProc">checked</span> <span class="synSpecial">+</span> <span class="synStatement">label</span><span class="synIdentifier">{</span>
  <span class="synType">color</span>: <span class="synConstant">#fff</span>;
  <span class="synType">transition</span>: <span class="synType">color</span> <span class="synConstant">200ms</span>;
<span class="synIdentifier">}</span>

<span class="synStatement">input</span><span class="synSpecial">[</span><span class="synConstant">type</span><span class="synSpecial">=</span><span class="synConstant">&quot;radio&quot;</span><span class="synSpecial">]</span>:<span class="synPreProc">checked</span> <span class="synSpecial">+</span> <span class="synStatement">label</span>:<span class="synPreProc">after</span><span class="synIdentifier">{</span>
  <span class="synType">left</span>:<span class="synConstant">0%</span> <span class="synSpecial">!important</span>;
<span class="synIdentifier">}</span>
</pre>


<p><b>motor.js</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>console.log(<span class="synConstant">&quot;motor.js&quot;</span>);

<span class="synIdentifier">function</span> requestMotorControll(message)<span class="synIdentifier">{</span>
    <span class="synStatement">const</span> request =  <span class="synStatement">new</span> XMLHttpRequest();
    request.open(<span class="synConstant">&quot;GET&quot;</span>, <span class="synConstant">&quot;http://localhost:5000/&quot;</span> + message);

    request.addEventListener(<span class="synConstant">&quot;load&quot;</span>, (<span class="synStatement">event</span>) =&gt; <span class="synIdentifier">{</span>
        console.log(<span class="synStatement">event</span>.target.<span class="synStatement">status</span>);
        console.log(<span class="synStatement">event</span>.target.responseText);
    <span class="synIdentifier">}</span>);

    request.send();
<span class="synIdentifier">}</span>

<span class="synComment">//DOMの解析が全部終わってからじゃないと、要素が取得できないことがあるんだねぇ</span>
<span class="synStatement">document</span>.addEventListener(<span class="synConstant">&quot;DOMContentLoaded&quot;</span>, <span class="synIdentifier">function</span>(<span class="synStatement">event</span>) <span class="synIdentifier">{</span>
    console.log(<span class="synConstant">&quot;DOM fully loaded and parsed&quot;</span>);

        
    <span class="synIdentifier">var</span> leftToggle =  <span class="synStatement">document</span>.querySelector(<span class="synConstant">&quot;#left-toggle&quot;</span>);
    leftToggle.addEventListener(<span class="synConstant">&quot;click&quot;</span>, <span class="synIdentifier">function</span>( <span class="synStatement">event</span> )<span class="synIdentifier">{</span>
        <span class="synComment">//console.log(&quot;left toggle&quot;);</span>
        requestMotorControll(<span class="synConstant">&quot;start&quot;</span>);

    <span class="synIdentifier">}</span>);
    
    <span class="synIdentifier">var</span> rightToggle =  <span class="synStatement">document</span>.querySelector(<span class="synConstant">&quot;#right-toggle&quot;</span>);
    rightToggle.addEventListener(<span class="synConstant">&quot;click&quot;</span>, <span class="synIdentifier">function</span>( <span class="synStatement">event</span> )<span class="synIdentifier">{</span>
        <span class="synComment">//console.log(&quot;right toggle&quot;);</span>
        requestMotorControll(<span class="synConstant">&quot;stop&quot;</span>);
    <span class="synIdentifier">}</span>);
    
<span class="synIdentifier">}</span>);
</pre>


<p>画面に関しては、CodePenで素敵なトグルボタンを探していたのですが、シンプルなトグルという言葉を信じて見てたのですが、ある程度理解するのにものすごく時間がかかりました。<br/>
HTMLとCSSになんだかとても苦手意識があります。</p>

<p data-height="265" data-theme-id="0" data-slug-hash="ojYJJP" data-default-tab="css,result" data-user="magnificode" data-embed-version="2" data-pen-title="Simple Toggle" class="codepen">See the Pen <a href="https://codepen.io/magnificode/pen/ojYJJP/">Simple Toggle</a> by Dominic Magnifico (<a href="https://codepen.io/magnificode">@magnificode</a>) on <a href="https://codepen.io">CodePen</a>.</p>


<script async src="https://production-assets.codepen.io/assets/embed/ei.js"></script>


<h3 id="最後に">最後に</h3>

<p>ここまできたら、あとはラッピングしてプレゼントするだけです！</p>

<p>あれ、プレゼント相手の家でラズパイのWifiの設定しないといけないとか、外部からアクセスするときはルーターの設定しなきゃとかあるんですが、<span style="color: #ff0000">二人の愛の間にはきっとささいな問題です！</span></p>

<p>僕には何に使うかわかりませんが、カメラをつけてボタンの画面からみても面白いかもしれませんね！</p>

<p>それでは、素敵なクリスマスを！</p>

-----
--------
AUTHOR: konoemario
TITLE: Vue.jsでつくるオブジェクト指向フォーム(2)
BASENAME: 2017/12/16/150440
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 12/16/2017 15:04:40
CATEGORY: Vue.js
CATEGORY: プログラム
CATEGORY: Laravel
IMAGE: https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20171216/20171216135133.png
-----
BODY:
<h1 id="前回の続き">前回の続き</h1>

<p><iframe src="https://hatenablog-parts.com/embed?url=http%3A%2F%2Fwww.tohuandkonsome.site%2Fentry%2F2017%2F12%2F13%2F205504" title="Vue.jsでつくるオブジェクト指向フォーム(1) - 豆腐とコンソメ" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://www.tohuandkonsome.site/entry/2017/12/13/205504">www.tohuandkonsome.site</a></cite></p>

<p>さて投げやりになってしまった前回だけど、気をとりなおしていくよ！</p>

<p>前回は、</p>

<p><b>Vue.jsのフォーム入力バインディング(v-model)を利用してaxiosでサーバーにpostする  </b></p>

<p>ところまでやりました。</p>

<p>javascriptはこんな感じでしたね。</p>

<p><b>app.js</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">const</span> app = <span class="synStatement">new</span> Vue(<span class="synIdentifier">{</span>
    el: <span class="synConstant">'.simple-form'</span>,
    data:<span class="synIdentifier">{</span>
        title:<span class="synConstant">''</span>,
        body:<span class="synConstant">''</span>,
    <span class="synIdentifier">}</span>,
    methods:<span class="synIdentifier">{</span>
        <span class="synComment">//Formのsubmitイベントが発生したとき</span>
        onSubmit:<span class="synIdentifier">function</span>()<span class="synIdentifier">{</span>
            <span class="synComment">//$dataは上記のdataのことだよ！  </span>
            axios.post(<span class="synConstant">'/thread'</span>, <span class="synIdentifier">this</span>.$data)
            <span class="synComment">//HTTPリクエストが成功したとき</span>
            .then(response =&gt; console.log(response.data))
            <span class="synComment">//HTTPリクエエストが失敗した時</span>
            .<span class="synStatement">catch</span>(error =&gt; console.log(error.response));
        <span class="synIdentifier">}</span>,
    <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>);
</pre>


<p>それでは、この次に、エラーが発生したときにフォームのコントロールにエラーがでるようにしてあげましょう。</p>

<ul class="table-of-contents">
    <li><a href="#前回の続き">前回の続き</a><ul>
            <li><a href="#フォームコントロールにエラーを表示する">フォームコントロールにエラーを表示する</a><ul>
                    <li><a href="#エラーを格納するクラスErrorsをつくろう">エラーを格納するクラスErrorsをつくろう</a></li>
                    <li><a href="#テキストボックスに値を入力したらエラーを消すようにする">テキストボックスに値を入力したらエラーを消すようにする</a></li>
                </ul>
            </li>
        </ul>
    </li>
    <li><a href="#フォームクラスをつくろう">フォームクラスをつくろう</a><ul>
            <li><a href="#フォームクラスに合わせていろいろと修正する">フォームクラスに合わせていろいろと修正する</a></li>
            <li><a href="#フォームクラスに機能を移管する">フォームクラスに機能を移管する</a></li>
        </ul>
    </li>
</ul>

<p><br/></p>

<h3 id="フォームコントロールにエラーを表示する">フォームコントロールにエラーを表示する</h3>

<h5 id="エラーを格納するクラスErrorsをつくろう">エラーを格納するクラスErrorsをつくろう</h5>

<p>さて、エラーのチェックですが、ベーシックに<code>body</code>と<code>title</code>の必須チェックを行います。<br/>
また、チェックはサーバ側で行います。</p>

<p>Laravelでバリデーションチェックをすると、以下のようなレスポンスを返してくれます。</p>

<p><b>Laravelがバリデーションエラーで返してくれるレスポンス</b></p>

<pre class="code lang-json" data-lang="json" data-unlink><span class="synSpecial">{</span>
    &quot;<span class="synStatement">errors</span>&quot;: <span class="synSpecial">{</span>
        &quot;<span class="synStatement">body</span>&quot;: <span class="synSpecial">[</span>
            &quot;<span class="synConstant">本文が未入力だよ</span>&quot;
        <span class="synSpecial">]</span>, 
        &quot;<span class="synStatement">title</span>&quot;: <span class="synSpecial">[</span>
            &quot;<span class="synConstant">タイトルが未入力だよ</span>&quot;
        <span class="synSpecial">]</span>
    <span class="synSpecial">}</span>, 
    &quot;<span class="synStatement">message</span>&quot;: &quot;<span class="synConstant">The given data was invalid.</span>&quot;
<span class="synSpecial">}</span>
</pre>


<p>なので、このレスポンスを格納するErrorsクラスをつくってみましょう。</p>

<p>javascriptでもクラスをつくれるんだなぁという語弊のある感想はさておき、以下のようなerrorsプロパティをもつクラスをつくってあげます。</p>

<p>また、エラーを設定するセッター的なメソッド<code>record</code>も用意しています。</p>

<p><b>app.js(抜粋)</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">class</span> Errors<span class="synIdentifier">{</span>
   constructor() <span class="synIdentifier">{</span>
    <span class="synComment">//エラー情報を管理するプロパティ</span>
    <span class="synIdentifier">this</span>.errors = <span class="synIdentifier">{}</span>
   <span class="synIdentifier">}</span>

   <span class="synComment">//エラーを設定するメソッド</span>
   record(errors)<span class="synIdentifier">{</span>
        <span class="synIdentifier">this</span>.errors = errors
   <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>
</pre>


<p>クラスなのでerrors.jsをつくって管理すべきな気もしますが、面倒なのでここではapp.jsにそのまま書いちゃいます。</p>

<p>一方のVueインスタンスでは以下のようにErrorクラスをインスタンス化しておいてdataに用意しておきます。</p>

<p><b>app.js(抜粋)</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">const</span> app = <span class="synStatement">new</span> Vue(<span class="synIdentifier">{</span>
    el: <span class="synConstant">'.simple-form'</span>,
    data:<span class="synIdentifier">{</span>
        title:<span class="synConstant">''</span>,
        body:<span class="synConstant">''</span>,
        <span class="synComment">//Errorクラスをつくっておく</span>
        errors: <span class="synStatement">new</span> Errors()
    <span class="synIdentifier">}</span>,
</pre>


<p>そうしたら、エラーが発生したときにErrorインスタンスにさきほどのレスポンスをつっこむようにしてあげましょう。</p>

<p><b>app.js(抜粋)</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>    methods:<span class="synIdentifier">{</span>
        <span class="synComment">//Formのsubmitイベントが発生したとき</span>
        onSubmit:<span class="synIdentifier">function</span>()<span class="synIdentifier">{</span>
            axios.post(<span class="synConstant">'/thread'</span>, <span class="synIdentifier">this</span>.$data)
            <span class="synComment">//HTTPリクエストが成功したとき</span>
            .then(response =&gt; console.log(response.data))
            <span class="synComment">//HTTPリクエエストが失敗した時</span>
            .<span class="synStatement">catch</span>(error =&gt; <span class="synIdentifier">{</span>
                <span class="synComment">//エラーを設定する</span>
                <span class="synIdentifier">this</span>.errors.record(error.response.data.errors);
            <span class="synIdentifier">}</span>);
</pre>


<p>axiosのレスポンスデータの取得の仕方は、<code>errors.response.data</code>ですが、ここではさらにその配下のネストである、<code>errors.response.data.errors</code>のほうが何かと都合がいいので、こうしています。</p>

<p>さて、エラーが設定できたので、これをhtml側から参照できるようにしてあげましょう。</p>

<p><b>create_ajxa.blade.php(抜粋)</b></p>

<pre class="code lang-html" data-lang="html" data-unlink>    <span class="synIdentifier">&lt;</span><span class="synStatement">form</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;simple-form&quot;</span><span class="synIdentifier"> </span><span class="synType">action</span><span class="synIdentifier">=</span><span class="synConstant">&quot;/thread&quot;</span><span class="synIdentifier"> </span><span class="synType">method</span><span class="synIdentifier">=</span><span class="synConstant">&quot;post&quot;</span><span class="synIdentifier"> v-on:submit.prevent=</span><span class="synConstant">&quot;onSubmit&quot;</span><span class="synIdentifier">&gt;</span>
        {{csrf_field()}}
       <span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;simple-form__group&quot;</span><span class="synIdentifier">&gt;</span>
            <span class="synIdentifier">&lt;</span><span class="synStatement">label</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;simple-form__title&quot;</span><span class="synIdentifier"> </span><span class="synType">for</span><span class="synIdentifier">=</span><span class="synConstant">&quot;title&quot;</span><span class="synIdentifier">&gt;</span>タイトル<span class="synIdentifier">&lt;/</span><span class="synStatement">label</span><span class="synIdentifier">&gt;</span> 
            <span class="synComment">&lt;!-- v-modelで、フォームのinput系(select、textareaとかも)の要素とVueインスタンスの変数をバインディングする --&gt;</span>
            <span class="synIdentifier">&lt;</span><span class="synStatement">input</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;simple-form__input&quot;</span><span class="synIdentifier"> </span><span class="synType">type</span><span class="synIdentifier">=</span><span class="synConstant">&quot;text&quot;</span><span class="synIdentifier"> </span><span class="synType">name</span><span class="synIdentifier">=</span><span class="synConstant">&quot;title&quot;</span><span class="synIdentifier"> v-model=</span><span class="synConstant">&quot;title&quot;</span><span class="synIdentifier">&gt;</span>
            //エラーの情報を表示する
            <span class="synIdentifier">&lt;</span><span class="synStatement">p</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;simple-form__error&quot;</span><span class="synIdentifier"> v-if=</span><span class="synConstant">&quot;errors.has('title')&quot;</span><span class="synIdentifier"> v-</span><span class="synType">text</span><span class="synIdentifier">=</span><span class="synConstant">&quot;errors.get('title')&quot;</span><span class="synIdentifier">&gt;&lt;/</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span> 
</pre>


<p>上記のように、<code>errros.get()'でエラーメッセージを取得してあげます。  
また、表示する際の条件として</code>errors.has()`も追加しています。</p>

<p>実装の方は以下の通りです。</p>

<p><b>app.js(抜粋)</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synComment">/**</span>
<span class="synComment"> * エラー情報を管理するクラスだよ！</span>
<span class="synComment"> */</span>
<span class="synStatement">class</span> Errors<span class="synIdentifier">{</span>
   constructor() <span class="synIdentifier">{</span>
    <span class="synComment">//エラー情報を管理するプロパティ</span>
    console.log(<span class="synConstant">&quot;im created&quot;</span>)
    <span class="synIdentifier">this</span>.errors = <span class="synIdentifier">{}</span>
   <span class="synIdentifier">}</span>

   <span class="synComment">/**</span>
<span class="synComment">    * @param {*} errors :axiosのerror.response.data、つまりエラー時のレスポンスのbodyが入るんだよ</span>
<span class="synComment">    */</span>
   record(errors)<span class="synIdentifier">{</span>
        <span class="synIdentifier">this</span>.errors = errors
   <span class="synIdentifier">}</span>

   <span class="synComment">/**</span>
<span class="synComment">    * レスポンスデータのbody部分のエラーメッセージを返すよ</span>
<span class="synComment">    *</span>
<span class="synComment">    * @param {string} field  コントロールの名前</span>
<span class="synComment">    * @returns {string}</span>
<span class="synComment">    */</span>
   get(field)<span class="synIdentifier">{</span>
        <span class="synStatement">if</span>(<span class="synIdentifier">this</span>.errors<span class="synIdentifier">[</span>field<span class="synIdentifier">]</span>)<span class="synIdentifier">{</span>
            <span class="synStatement">return</span> <span class="synIdentifier">this</span>.errors<span class="synIdentifier">[</span>field<span class="synIdentifier">][</span>0<span class="synIdentifier">]</span>;
        <span class="synIdentifier">}</span>
   <span class="synIdentifier">}</span>

   <span class="synComment">/**</span>
<span class="synComment">    * </span>
<span class="synComment">    * @param {string} field  コントロールの名前</span>
<span class="synComment">    * @returns {boolean}</span>
<span class="synComment">    */</span>
   has(field)<span class="synIdentifier">{</span>
      <span class="synStatement">return</span>  <span class="synIdentifier">this</span>.errors.hasOwnProperty(field)
   <span class="synIdentifier">}</span>
</pre>


<p><code>get</code>メソッドですが、jsonを取得する際に、this.errors[filed]とするのか、this.errors.fieldどっちが正しいのかと混乱しました。</p>

<p>結論としては、オブジェクトのプロパティにアクセスする場合であればどっちでもいいみたいです。
とはいえ、上記のようにプロパティ名が変数になっている場合、配列のようにthis.errors[field]としないとだめみたいですが。</p>

<p>参考にさせていただいた記事<br/>
<a href="https://qiita.com/masarufuruya/items/d29a567d0ca4bbfb00cb">JavaScript&#x306E;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x306E;&#x30AD;&#x30FC;&#x306B;&#x5909;&#x6570;&#x306E;&#x5024;&#x3092;&#x4F7F;&#x3046;Tips - Qiita</a></p>

<p>もう一方の<code>has</code>メソッドですが、こちらも大事な役割も担っています。<br/>
<code>hasOwnProperty</code>はすべてのオブジェクトが持っているメソッドで、オブジェクト内に引数で指定されたプロパティが存在するかをチェックする機能をもっています。</p>

<p>当初、axiosから設定するエラーデータを、<code>errors.response.data</code>としていて、Errorクラス内部で<code>this.errors.errros.hasOwnProperty</code>とやっていました。</p>

<p>しかし、これだと、  エラーが発生していない場合、this.errors.errorsは存在しておらず、<code>hasOwnProperty</code>なんてないよ！と怒られてしまいます。</p>

<p>あたりまえのことですが、いろいろはまってしまいました。</p>

<p><br/>
ここまできたら、試しにエラーが表示されるか試してみます。<br/>
何も入力されていない状態で、postをすると、以下のようにエラーが表示されました。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20171216/20171216135133.png" alt="f:id:konoemario:20171216135133p:plain" title="f:id:konoemario:20171216135133p:plain" class="hatena-fotolife" itemprop="image"></span></p>

<p>いい感じです。</p>

<p><br/></p>

<h5 id="テキストボックスに値を入力したらエラーを消すようにする">テキストボックスに値を入力したらエラーを消すようにする</h5>

<p>エラーを表示することができたので、今度はエラーを消していきます。</p>

<p>消すタイミングは、タイトルの通りテキストボックスに値が入力されたら消していきたいと思います。</p>

<p>イメージとしては、以下のようにコントロールにキー入力されたらというイベントを<code>@keydown</code>で捉えてあげます。<br/>
そして実行するメソッドは<code>errors.clear()</code>になります。</p>

<p><b>create_ajxa.blade.php(抜粋)</b></p>

<pre class="code lang-html" data-lang="html" data-unlink>       <span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;simple-form__group&quot;</span><span class="synIdentifier">&gt;</span>
            <span class="synIdentifier">&lt;</span><span class="synStatement">label</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;simple-form__title&quot;</span><span class="synIdentifier"> </span><span class="synType">for</span><span class="synIdentifier">=</span><span class="synConstant">&quot;title&quot;</span><span class="synIdentifier">&gt;</span>タイトル<span class="synIdentifier">&lt;/</span><span class="synStatement">label</span><span class="synIdentifier">&gt;</span> 
            <span class="synComment">&lt;!-- v-modelで、フォームのinput系(select、textareaとかも)の要素とVueインスタンスの変数をバインディングする --&gt;</span>
            <span class="synIdentifier">&lt;</span><span class="synStatement">input</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;simple-form__input&quot;</span><span class="synIdentifier"> </span><span class="synType">type</span><span class="synIdentifier">=</span><span class="synConstant">&quot;text&quot;</span><span class="synIdentifier"> </span><span class="synType">name</span><span class="synIdentifier">=</span><span class="synConstant">&quot;title&quot;</span><span class="synIdentifier"> v-model=</span><span class="synConstant">&quot;title&quot;</span><span class="synIdentifier"> @keydown=</span><span class="synConstant">&quot;errors.clear('title')&quot;</span><span class="synIdentifier">&gt;</span>
       <span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
</pre>


<p>Errorsクラスはシンプルに<code>delete</code>演算子を使って、プロパティを削除してしまいます。</p>

<p><b>app.js(抜粋)</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">class</span> Errors<span class="synIdentifier">{</span>
<span class="synComment">//省略</span>
   <span class="synComment">/**</span>
<span class="synComment">    * filedで指定されたプロパティを削除する</span>
<span class="synComment">    * @param {string} field </span>
<span class="synComment">    */</span>
   clear(field)<span class="synIdentifier">{</span>
    <span class="synStatement">delete</span> <span class="synIdentifier">this</span>.errors<span class="synIdentifier">[</span>field<span class="synIdentifier">]</span>;
   <span class="synIdentifier">}</span>

<span class="synIdentifier">}</span>
</pre>


<p>これだけでも、やりたいことは実現できました。</p>

<p>ですが、以下のようにフォームの@keydownイベントして書いてあげると、コントロールごとに記載しなくてもいいのでさらにシンプルになります。</p>

<p><b>create_ajxa.blade.php(抜粋)</b></p>

<pre class="code" data-lang="" data-unlink>    &lt;!--Submitのデフォルトイベントをキャンセルして、VueインスタンスのonSubmitメソッドを呼ぶ--&gt;
    &lt;form class=&#34;simple-form&#34; action=&#34;/thread&#34; method=&#34;post&#34; v-on:submit.prevent=&#34;onSubmit&#34; @keydown=&#34;errors.clear($event.target.name)&#34;&gt;</pre>


<p><br/></p>

<h3 id="フォームクラスをつくろう">フォームクラスをつくろう</h3>

<p>ここまでの内容で、以下のことができるようになりました。</p>

<ul>
<li>ブラウザで入力した値をaxiosでサーバーにpostする</li>
<li>サーバから返却されたエラーメッセージをコントロールにひも付けて表示する</li>
<li>コントロールに入力すことでエラーメッセージを消す</li>
</ul>


<p>とはいえ、現時点で気になる点があります。</p>

<p>Vueインスタンスの、データを送信する部分ですが<code>this.$data</code>を送っています。<br/>
<code>$data</code>には<code>title</code>、<code>body</code>以外にもerrorsも含まれてしまっていてちょっと気持ちが悪いです。</p>

<p><b>app.js(抜粋)</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>    data:<span class="synIdentifier">{</span>
        title:<span class="synConstant">''</span>,
        body:<span class="synConstant">''</span>,
        errors: <span class="synStatement">new</span> Errors()
    <span class="synIdentifier">}</span>,
    methods:<span class="synIdentifier">{</span>
        <span class="synComment">//Formのsubmitイベントが発生したとき</span>
        onSubmit:<span class="synIdentifier">function</span>()<span class="synIdentifier">{</span>
            axios.post(<span class="synConstant">'/thread'</span>, <span class="synIdentifier">this</span>.$data)
</pre>


<p>なので、ここらでタイトル通りのフォームクラスを作っていきたいと思います。</p>

<p><b>app.js(抜粋)</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synComment">/**</span>
<span class="synComment"> * フォームクラスだよ！</span>
<span class="synComment"> */</span>
<span class="synStatement">class</span> Form<span class="synIdentifier">{</span>
   constructor(data) <span class="synIdentifier">{</span>

    <span class="synComment">//フォームのデータ </span>
    <span class="synIdentifier">this</span>.originalData = data;

    <span class="synComment">//エラー情報を管理するプロパティ</span>
    <span class="synIdentifier">this</span>.errors = <span class="synStatement">new</span> Errors();
   <span class="synIdentifier">}</span>

<span class="synIdentifier">}</span>
</pre>


<p><code>Form</code>クラスには<code>erros</code>プロパティとフォーム内のコントロール要素とバインディングされるデータ<code>originagData</code>プロパティを持ちます。</p>

<p>Vueインスタンス側では、こんな感じにしてあげます。</p>

<p><b>app.js(抜粋)</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">const</span> app = <span class="synStatement">new</span> Vue(<span class="synIdentifier">{</span>
    el: <span class="synConstant">'.simple-form'</span>,
    data:<span class="synIdentifier">{</span>
        form: <span class="synStatement">new</span> Form(<span class="synIdentifier">{</span>
            title:<span class="synConstant">''</span>,
            body:<span class="synConstant">''</span>,
        <span class="synIdentifier">}</span>)
    <span class="synIdentifier">}</span>,
</pre>


<p>こうすることで、VueインスタンスがFormクラスをもっていて、Formの中には<code>title</code>や<code>body</code>というコントロールがあってというなんとなくオブジェクト指向っぽくなってきた気がしませんか！（頭が悪い)</p>

<p>この方針で、コードを修正していきたいと思います。</p>

<p><br/></p>

<h4 id="フォームクラスに合わせていろいろと修正する">フォームクラスに合わせていろいろと修正する</h4>

<p>フォームクラスを作った弊害として、html側ではデータをバインディングする際に以下のように<code>v-model="form.originalData.title"</code>としてあげなければいけません。</p>

<p><b>create_ajxa.blade.php(抜粋)</b></p>

<pre class="code lang-html" data-lang="html" data-unlink>       <span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;simple-form__group&quot;</span><span class="synIdentifier">&gt;</span>
            <span class="synIdentifier">&lt;</span><span class="synStatement">label</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;simple-form__title&quot;</span><span class="synIdentifier"> </span><span class="synType">for</span><span class="synIdentifier">=</span><span class="synConstant">&quot;title&quot;</span><span class="synIdentifier">&gt;</span>タイトル<span class="synIdentifier">&lt;/</span><span class="synStatement">label</span><span class="synIdentifier">&gt;</span> 
            <span class="synComment">&lt;!-- v-modelで、フォームのinput系(select、textareaとかも)の要素とVueインスタンスの変数をバインディングする --&gt;</span>
            <span class="synIdentifier">&lt;</span><span class="synStatement">input</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;simple-form__input&quot;</span><span class="synIdentifier"> </span><span class="synType">type</span><span class="synIdentifier">=</span><span class="synConstant">&quot;text&quot;</span><span class="synIdentifier"> </span><span class="synType">name</span><span class="synIdentifier">=</span><span class="synConstant">&quot;title&quot;</span><span class="synIdentifier"> v-model=</span><span class="synConstant">&quot;form.originalData.title&quot;</span><span class="synIdentifier">&gt;</span>
       <span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
</pre>


<p>ですが、さすがのLaracastさんです。<br/>
以下のようにすることで、Formクラスのプロパティとして扱えるようになります。</p>

<p><b>app.js(抜粋)</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">class</span> Form<span class="synIdentifier">{</span>
   constructor(data) <span class="synIdentifier">{</span>

    <span class="synComment">//フォームのデータ </span>
    <span class="synIdentifier">this</span>.originalData = data;

    <span class="synComment">//dataの各要素をFormクラスのプロパティとして登録する</span>
    <span class="synStatement">for</span>(<span class="synIdentifier">let</span> field <span class="synStatement">in</span> <span class="synIdentifier">this</span>.originalData)<span class="synIdentifier">{</span>
        <span class="synIdentifier">this[</span>field<span class="synIdentifier">]</span> = <span class="synIdentifier">this</span>.originalData<span class="synIdentifier">[</span>field<span class="synIdentifier">]</span>;
    <span class="synIdentifier">}</span>
</pre>


<p>これで、以下のように<code>form.title</code>という形でアクセスできるようになりました。 <br/>
<b>create_ajxa.blade.php(抜粋)</b></p>

<pre class="code lang-html" data-lang="html" data-unlink>       <span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;simple-form__group&quot;</span><span class="synIdentifier">&gt;</span>
            <span class="synIdentifier">&lt;</span><span class="synStatement">label</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;simple-form__title&quot;</span><span class="synIdentifier"> </span><span class="synType">for</span><span class="synIdentifier">=</span><span class="synConstant">&quot;title&quot;</span><span class="synIdentifier">&gt;</span>タイトル<span class="synIdentifier">&lt;/</span><span class="synStatement">label</span><span class="synIdentifier">&gt;</span> 
            <span class="synComment">&lt;!-- v-modelで、フォームのinput系(select、textareaとかも)の要素とVueインスタンスの変数をバインディングする --&gt;</span>
            <span class="synIdentifier">&lt;</span><span class="synStatement">input</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;simple-form__input&quot;</span><span class="synIdentifier"> </span><span class="synType">type</span><span class="synIdentifier">=</span><span class="synConstant">&quot;text&quot;</span><span class="synIdentifier"> </span><span class="synType">name</span><span class="synIdentifier">=</span><span class="synConstant">&quot;title&quot;</span><span class="synIdentifier"> v-model=</span><span class="synConstant">&quot;form.title&quot;</span><span class="synIdentifier">&gt;</span>
       <span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
</pre>


<p>また、formに書いたエラーをクリアする処理も、Errorsクラスはフォームクラスのプロパティになったので、以下のように修正します。</p>

<p><b>create_ajxa.blade.php(抜粋)</b></p>

<pre class="code lang-html" data-lang="html" data-unlink>  <span class="synIdentifier">&lt;</span><span class="synStatement">form</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;simple-form&quot;</span><span class="synIdentifier"> </span><span class="synType">action</span><span class="synIdentifier">=</span><span class="synConstant">&quot;/thread&quot;</span><span class="synIdentifier"> </span><span class="synType">method</span><span class="synIdentifier">=</span><span class="synConstant">&quot;post&quot;</span><span class="synIdentifier"> v-on:submit.prevent=</span><span class="synConstant">&quot;onSubmit&quot;</span><span class="synIdentifier"> @keydown=</span><span class="synConstant">&quot;form.errors.clear($event.target.name)&quot;</span><span class="synIdentifier">&gt;</span>
</pre>


<p>エラーを表示する部分も同様に修正しておきます。</p>

<p><b>create_ajxa.blade.php(抜粋)</b></p>

<pre class="code lang-html" data-lang="html" data-unlink>       <span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;simple-form__group&quot;</span><span class="synIdentifier">&gt;</span>
            <span class="synIdentifier">&lt;</span><span class="synStatement">p</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;simple-form__error&quot;</span><span class="synIdentifier"> v-if=</span><span class="synConstant">&quot;form.errors.has('title')&quot;</span><span class="synIdentifier"> v-</span><span class="synType">text</span><span class="synIdentifier">=</span><span class="synConstant">&quot;form.errors.get('title')&quot;</span><span class="synIdentifier">&gt;&lt;/</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span> 
       <span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
</pre>


<p><br/></p>

<h4 id="フォームクラスに機能を移管する">フォームクラスに機能を移管する</h4>

<p>次に、フォームの内容を送信する機能もフォームクラスに移しちゃいましょう！</p>

<p>下記のように、<code>submit</code>メソッドを追加してあげます。<br/>
<b>app.js(抜粋)</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">class</span> Form<span class="synIdentifier">{</span>
<span class="synComment">//省略</span>
   <span class="synComment">/**</span>
<span class="synComment">    * Formのデータをサーバーに送信するよ！</span>
<span class="synComment">    */</span>
   submit()<span class="synIdentifier">{</span>
        <span class="synComment">//プロパティの値を再設定する</span>
        <span class="synStatement">for</span>(<span class="synIdentifier">let</span> field <span class="synStatement">in</span> <span class="synIdentifier">this</span>.originalData)<span class="synIdentifier">{</span>
            <span class="synIdentifier">this</span>.originalData<span class="synIdentifier">[</span>field<span class="synIdentifier">]</span> = <span class="synIdentifier">this[</span>field<span class="synIdentifier">]</span>;
        <span class="synIdentifier">}</span>

        axios.post(<span class="synConstant">'/thread'</span>, <span class="synIdentifier">this</span>.originalData)
        <span class="synComment">//HTTPリクエストが成功したとき</span>
        .then(response =&gt; <span class="synIdentifier">this</span>.onSuccess(response.data))
        <span class="synComment">//HTTPリクエエストが失敗した時</span>
        .<span class="synStatement">catch</span>(error =&gt; <span class="synIdentifier">this</span>.onFail(error.response.data.errors));
   <span class="synIdentifier">}</span>

   <span class="synComment">/**</span>
<span class="synComment">    * フォームデータの送信が成功した場合</span>
<span class="synComment">    */</span>
   onSuccess(response)<span class="synIdentifier">{</span>
        console.log(response);
   <span class="synIdentifier">}</span>

   <span class="synComment">/**</span>
<span class="synComment">    * フォームデータの送信が失敗した場合</span>
<span class="synComment">    */</span>
   onFail(error)<span class="synIdentifier">{</span>
        <span class="synIdentifier">this</span>.errors.record(error);
   <span class="synIdentifier">}</span>

<span class="synIdentifier">}</span>
</pre>


<p>基本的に、Vueインスタンスに書いてあった処理をまるっともってくるだけです。<br/>
axiosで送信するデータの<code>originalData</code>はコントロールにバインディングされていないので、keyだけあって、値は空っぽです。<br/>
なので送信する前に、データバインディングしてあるフォームクラスのプロパティの値を設定してあげています。</p>

<p>そろそろ長くなってきたので次回に回します！</p>

-----
--------
AUTHOR: konoemario
TITLE: Vue.jsでつくるオブジェクト指向フォーム(1)
BASENAME: 2017/12/13/205504
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 12/13/2017 20:55:04
CATEGORY: Vue.js
CATEGORY: Laravel
CATEGORY: プログラム
IMAGE: https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20171211/20171211235836.png
-----
BODY:
<p>Laravelで掲示板を作成している途中だけれども、その素材をもとにVue.jsでオブジェクト指向フォームを作ってみるよ。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=http%3A%2F%2Fwww.tohuandkonsome.site%2Fentry%2F2017%2F12%2F04%2F215550" title="Laravelで始めるTDD開発 (5):登録ページを作成する - 豆腐とコンソメ" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://www.tohuandkonsome.site/entry/2017/12/04/215550">www.tohuandkonsome.site</a></cite></p>

<p>オブジェクト指向フォームってなによ？と思われたあなた。自分もよくわからないんだ。</p>

<p>でも、おお！ってなったので振り返りながら書いていこうと思います。</p>

<p>教材は毎度お世話になっております、Laracastになります。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Flaracasts.com%2Fseries%2Flearn-vue-2-step-by-step%2Fepisodes%2F19" title="Object-Oriented Forms: Part 1" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://laracasts.com/series/learn-vue-2-step-by-step/episodes/19">laracasts.com</a></cite></p>

<p><br/></p>

<ul class="table-of-contents">
    <li><a href="#準備">準備　</a></li>
    <li><a href="#とりあえずAjaxでPostするようにしていくよ">とりあえずAjaxでPostするようにしていくよ　</a></li>
    <li><a href="#フォームのデータをとってくるv-model">フォームのデータをとってくる：v-model</a><ul>
            <li><a href="#v-modelを使う">v-modelを使う。</a><ul>
                    <li><a href="#axiosを使ってサーバにpostする">axiosを使ってサーバにpostする</a><ul>
                            <li><a href="#ちょっと横道に入る">ちょっと横道に入る</a></li>
                        </ul>
                    </li>
                    <li><a href="#レスポンスを受け取ろう">レスポンスを受け取ろう</a></li>
                </ul>
            </li>
        </ul>
    </li>
</ul>

<p><br/></p>

<h3 id="準備">準備　</h3>

<p>自分は、Laravelをサーバー側のアプリケーションとして用意しています。<br/>
そして、以下のような、「タイトル」と「本文」をサーバー側にpostするhtmlを用意しています。
（Laravelなので正確にはbladeだよ！)</p>

<p><b>create_ajax.blade.php(抜粋)</b></p>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synComment">&lt;!-- ここには書いてないけれども、後述のapp.jsを読み込んでいるよ！--&gt;</span>
<span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;container justfy-center&quot;</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">form</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;simple-form&quot;</span><span class="synIdentifier"> </span><span class="synType">action</span><span class="synIdentifier">=</span><span class="synConstant">&quot;/thread&quot;</span><span class="synIdentifier"> </span><span class="synType">method</span><span class="synIdentifier">=</span><span class="synConstant">&quot;post&quot;</span><span class="synIdentifier">&gt;</span>
        {{csrf_field()}}
       <span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;simple-form__group&quot;</span><span class="synIdentifier">&gt;</span>
            <span class="synIdentifier">&lt;</span><span class="synStatement">label</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;simple-form__title&quot;</span><span class="synIdentifier"> </span><span class="synType">for</span><span class="synIdentifier">=</span><span class="synConstant">&quot;title&quot;</span><span class="synIdentifier">&gt;</span>タイトル<span class="synIdentifier">&lt;/</span><span class="synStatement">label</span><span class="synIdentifier">&gt;</span> 
            <span class="synIdentifier">&lt;</span><span class="synStatement">input</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;simple-form__input&quot;</span><span class="synIdentifier"> </span><span class="synType">type</span><span class="synIdentifier">=</span><span class="synConstant">&quot;text&quot;</span><span class="synIdentifier"> </span><span class="synType">name</span><span class="synIdentifier">=</span><span class="synConstant">&quot;title&quot;</span><span class="synIdentifier">&gt;</span>
       <span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
       <span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;simple-form__group&quot;</span><span class="synIdentifier">&gt;</span>
            <span class="synIdentifier">&lt;</span><span class="synStatement">label</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;simple-form__title&quot;</span><span class="synIdentifier"> </span><span class="synType">for</span><span class="synIdentifier">=</span><span class="synConstant">&quot;title&quot;</span><span class="synIdentifier">&gt;</span>本文<span class="synIdentifier">&lt;/</span><span class="synStatement">label</span><span class="synIdentifier">&gt;</span> 
            <span class="synIdentifier">&lt;</span><span class="synStatement">input</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;simple-form__input&quot;</span><span class="synIdentifier"> </span><span class="synType">type</span><span class="synIdentifier">=</span><span class="synConstant">&quot;text&quot;</span><span class="synIdentifier"> </span><span class="synType">name</span><span class="synIdentifier">=</span><span class="synConstant">&quot;body&quot;</span><span class="synIdentifier">&gt;</span>
       <span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
       <span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;simple-form__footer&quot;</span><span class="synIdentifier">&gt;</span>
            <span class="synIdentifier">&lt;</span><span class="synStatement">button</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;simple-form__submit-btn&quot;</span><span class="synIdentifier">&gt;</span>Post<span class="synIdentifier">&lt;/</span><span class="synStatement">button</span><span class="synIdentifier">&gt;</span>
       <span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;/</span><span class="synStatement">form</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
</pre>


<p>このhtmlをブラウザでみてみると、こんな感じの画面になります。</p>

<p><figure class="figure-image figure-image-fotolife" title="今回利用するフォームのイメージ"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20171212/20171212213323.png" alt="f:id:konoemario:20171212213323p:plain" title="f:id:konoemario:20171212213323p:plain" class="hatena-fotolife" itemprop="image"></span><figcaption>今回利用するフォームのイメージ</figcaption></figure></p>

<p>続いては、肝心のVue.jsになります。<br/>
さきほどのhtml内の.simple-formをエレメントとしてVueインスタンスを作成しています。</p>

<p><b>app.js</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">const</span> app = <span class="synStatement">new</span> Vue(<span class="synIdentifier">{</span>
    el: <span class="synConstant">'.simple-form'</span>
<span class="synIdentifier">}</span>);
</pre>


<p>また、Laravelなので<code>require('vue')</code>してwebpackでコンパイルしていたりしますが、そのへんは割愛しているよ。</p>

<p><br/></p>

<h3 id="とりあえずAjaxでPostするようにしていくよ">とりあえずAjaxでPostするようにしていくよ　</h3>

<p>なにはともあれ？とりあえずAjaxでサーバにpostしてみるよ！</p>

<p>まずは、フォームでボタンを押下したときに発生するデフォルトのイベント<code>submit</code>をキャンセルして、Vueインスタンスのメソッドを呼ぶ様にしよう。<br/>
<b>create_ajax.blade.php(抜粋)</b></p>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;container justfy-center&quot;</span><span class="synIdentifier">&gt;</span>
    <span class="synComment">&lt;!--Submitのデフォルトイベントをキャンセルして、VueインスタンスのonSubmitメソッドを呼ぶ--&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">form</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;simple-form&quot;</span><span class="synIdentifier"> </span><span class="synType">action</span><span class="synIdentifier">=</span><span class="synConstant">&quot;/thread&quot;</span><span class="synIdentifier"> </span><span class="synType">method</span><span class="synIdentifier">=</span><span class="synConstant">&quot;post&quot;</span><span class="synIdentifier"> v-on:submit.prevent=</span><span class="synConstant">&quot;onSubmit&quot;</span><span class="synIdentifier">&gt;</span>
</pre>


<p>Vueインスタンス側には、試しにメソッドが呼べているかどうか確認するために、<code>console.log()</code>で何かしらだしてみる。</p>

<p><b>app.js</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">const</span> app = <span class="synStatement">new</span> Vue(<span class="synIdentifier">{</span>
    el: <span class="synConstant">'.simple-form'</span>,
    methods:<span class="synIdentifier">{</span>
        onSubmit:<span class="synIdentifier">function</span>()<span class="synIdentifier">{</span>
            console.log(<span class="synConstant">&quot;submit!!!&quot;</span>);
        <span class="synIdentifier">}</span>
    <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>);
</pre>


<p>そうすると、こんな感じでボタンを押すたびに、ブラウザのコンソールに文字列が出力されるね！</p>

<p><figure class="figure-image figure-image-fotolife" title="submitしたとき"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20171212/20171212214222.png" alt="f:id:konoemario:20171212214222p:plain" title="f:id:konoemario:20171212214222p:plain" class="hatena-fotolife" itemprop="image"></span><figcaption>submitしたとき</figcaption></figure></p>

<p>これで、submitのイベントをVueインスタンスのメソッド<code>onSubmit</code>に置き換えることができました。<br/>
<code>onSubmit</code>をしたらフォームの入力データを取ってきて、リクエストデータをつくってサーバーにpostするんだな！ってなんとなく見えてきました。</p>

<p><br/></p>

<h3 id="フォームのデータをとってくるv-model">フォームのデータをとってくる：v-model</h3>

<p>では、さっそくフォームの入力データをとってきます。</p>

<p>入力データをjavascriptでとってくる場合、formにname属性をつけて、それをdocumentオブジェクトから見て〜みたいなことをしますよね！（今日知った。)</p>

<p>参考にさせていただいたサイト<br/>
<a href="http://phiary.me/js-form-value-accessor/#post-h2-id-4">&#x30D4;&#x30E5;&#x30A2;&#x306A; JavaScript &#x3067;&#x30D5;&#x30A9;&#x30FC;&#x30E0;(form)&#x7CFB;&#x8981;&#x7D20;&#x306E;&#x5024;&#x3092;&#x53D6;&#x5F97;, &#x8A2D;&#x5B9A;&#x3059;&#x308B;&#x65B9;&#x6CD5;&#x4E00;&#x89A7; | phiary</a></p>

<p>Vue.jsの場合はv-modelを使って、データバインディングをしていきます。</p>

<p><br/></p>

<h4 id="v-modelを使う">v-modelを使う。</h4>

<p>では、さっそくv-modelをつかってフォームバインディングをしていくよ!
html側はこんな感じにフォームのコントロール系のタグと、Vueインスタンスの変数をバインディングしてあげます。</p>

<p><b>create_ajax.blade.php</b></p>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;container justfy-center&quot;</span><span class="synIdentifier">&gt;</span>
    <span class="synComment">&lt;!--Submitのデフォルトイベントをキャンセルして、VueインスタンスのonSubmitメソッドを呼ぶ--&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">form</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;simple-form&quot;</span><span class="synIdentifier"> </span><span class="synType">action</span><span class="synIdentifier">=</span><span class="synConstant">&quot;/thread&quot;</span><span class="synIdentifier"> </span><span class="synType">method</span><span class="synIdentifier">=</span><span class="synConstant">&quot;post&quot;</span><span class="synIdentifier"> v-on:submit.prevent=</span><span class="synConstant">&quot;onSubmit&quot;</span><span class="synIdentifier">&gt;</span>
        {{csrf_field()}}
       <span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;simple-form__group&quot;</span><span class="synIdentifier">&gt;</span>
            <span class="synIdentifier">&lt;</span><span class="synStatement">label</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;simple-form__title&quot;</span><span class="synIdentifier"> </span><span class="synType">for</span><span class="synIdentifier">=</span><span class="synConstant">&quot;title&quot;</span><span class="synIdentifier">&gt;</span>タイトル<span class="synIdentifier">&lt;/</span><span class="synStatement">label</span><span class="synIdentifier">&gt;</span> 
             <span class="synComment">&lt;!-- v-modelで、フォームのinput系(select、textareaとかも)の要素とVueインスタンスの変数をバインディングする --&gt;</span>
            <span class="synIdentifier">&lt;</span><span class="synStatement">input</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;simple-form__input&quot;</span><span class="synIdentifier"> </span><span class="synType">type</span><span class="synIdentifier">=</span><span class="synConstant">&quot;text&quot;</span><span class="synIdentifier"> </span><span class="synType">name</span><span class="synIdentifier">=</span><span class="synConstant">&quot;title&quot;</span><span class="synIdentifier"> v-model=</span><span class="synConstant">&quot;title&quot;</span><span class="synIdentifier">&gt;</span>
       <span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
       <span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;simple-form__group&quot;</span><span class="synIdentifier">&gt;</span>
            <span class="synIdentifier">&lt;</span><span class="synStatement">label</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;simple-form__title&quot;</span><span class="synIdentifier"> </span><span class="synType">for</span><span class="synIdentifier">=</span><span class="synConstant">&quot;title&quot;</span><span class="synIdentifier"> &gt;</span>本文<span class="synIdentifier">&lt;/</span><span class="synStatement">label</span><span class="synIdentifier">&gt;</span> 
            <span class="synIdentifier">&lt;</span><span class="synStatement">input</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;simple-form__input&quot;</span><span class="synIdentifier"> </span><span class="synType">type</span><span class="synIdentifier">=</span><span class="synConstant">&quot;text&quot;</span><span class="synIdentifier"> </span><span class="synType">name</span><span class="synIdentifier">=</span><span class="synConstant">&quot;body&quot;</span><span class="synIdentifier"> v-model=</span><span class="synConstant">&quot;body&quot;</span><span class="synIdentifier">&gt;</span>
       <span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
       <span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;simple-form__footer&quot;</span><span class="synIdentifier">&gt;</span>
            <span class="synIdentifier">&lt;</span><span class="synStatement">button</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;simple-form__submit-btn&quot;</span><span class="synIdentifier">&gt;</span>Post<span class="synIdentifier">&lt;/</span><span class="synStatement">button</span><span class="synIdentifier">&gt;</span>
       <span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;/</span><span class="synStatement">form</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
</pre>


<p>一方の<code>app.js</code>には、バインドするデータを<code>data</code>配下に定義してあげます。<br/>
また、中身を確認するために、さきほどの<code>onSubmit</code>メソッド内にバインドするデータを表示する処理を追加しておきます。</p>

<p><b>app.js</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">const</span> app = <span class="synStatement">new</span> Vue(<span class="synIdentifier">{</span>
    el: <span class="synConstant">'.simple-form'</span>,
    data:<span class="synIdentifier">{</span>
        title:<span class="synConstant">''</span>,
        body:<span class="synConstant">''</span>,
    <span class="synIdentifier">}</span>,
    methods:<span class="synIdentifier">{</span>
        <span class="synComment">//Formのsubmitイベントが発生したとき</span>
        onSubmit:<span class="synIdentifier">function</span>()<span class="synIdentifier">{</span>
            console.log(<span class="synConstant">'title='</span>+ <span class="synIdentifier">this</span>.title);
            console.log(<span class="synConstant">'body='</span>+ <span class="synIdentifier">this</span>.body);
        <span class="synIdentifier">}</span>
    <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>);
</pre>


<p>この状態で、ブラウザを開いて、フォームに値を入力してボタンを押してみましょう。</p>

<p>こんな感じで、コンソールに入力された内容が出力されると思うんだ！</p>

<p><figure class="figure-image figure-image-fotolife" title="フォームの入力内容がVueインスタンスのdataに反映されている"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20171212/20171212220058.png" alt="f:id:konoemario:20171212220058p:plain" title="f:id:konoemario:20171212220058p:plain" class="hatena-fotolife" itemprop="image"></span><figcaption>フォームの入力内容がVueインスタンスのdataに反映されている</figcaption></figure></p>

<p>イメージにするとこんな感じだね！</p>

<p><figure class="figure-image figure-image-fotolife"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20171211/20171211235836.png" alt="f:id:konoemario:20171211235836p:plain" title="f:id:konoemario:20171211235836p:plain" class="hatena-fotolife" itemprop="image"></span><figcaption>v-modelのイメージ(1)</figcaption></figure></p>

<p><br/></p>

<p>逆にVueインスタンスのdataの値を変更したら、その内容がブラウザに表示されるのかしら。<br/>
試しにやってみよう。</p>

<p><code>submit</code>を行う以外にもうひとつ確認用のボタンを追加すると、</p>

<p><b>create_ajax.blade.php(抜粋)</b></p>

<pre class="code lang-html" data-lang="html" data-unlink>       <span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;simple-form__footer&quot;</span><span class="synIdentifier">&gt;</span>
            <span class="synComment">&lt;!--試しに、titleの値を変更するmethod、changeTitleをボタンクリックのイベントでよんでみる --&gt;</span>
            <span class="synIdentifier">&lt;</span><span class="synStatement">button</span><span class="synIdentifier"> button=</span><span class="synConstant">&quot;button&quot;</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;simple-form__submit-btn&quot;</span><span class="synIdentifier"> v-on:click=</span><span class="synConstant">&quot;changeTitle&quot;</span><span class="synIdentifier">&gt;</span>change!<span class="synIdentifier">&lt;/</span><span class="synStatement">button</span><span class="synIdentifier">&gt;</span>
            <span class="synIdentifier">&lt;</span><span class="synStatement">button</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;simple-form__submit-btn&quot;</span><span class="synIdentifier">&gt;</span>Post<span class="synIdentifier">&lt;/</span><span class="synStatement">button</span><span class="synIdentifier">&gt;</span>
       <span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
</pre>


<p>ブラウザはこんな感じになって、</p>

<p><figure class="figure-image figure-image-fotolife" title="確認用の画面"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20171212/20171212220952.png" alt="f:id:konoemario:20171212220952p:plain" title="f:id:konoemario:20171212220952p:plain" class="hatena-fotolife" itemprop="image"></span><figcaption>確認用の画面</figcaption></figure></p>

<p><code>app.js</code>に値をかえるメソッド<code>changeTitle</code>を書いてあげます。</p>

<p><b>app.js</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>    el: <span class="synConstant">'.simple-form'</span>,
    data:<span class="synIdentifier">{</span>
        title:<span class="synConstant">''</span>,
        body:<span class="synConstant">''</span>,
    <span class="synIdentifier">}</span>,
    methods:<span class="synIdentifier">{</span>
        <span class="synComment">//Formのsubmitイベントが発生したとき</span>
        onSubmit:<span class="synIdentifier">function</span>()<span class="synIdentifier">{</span>
            console.log(<span class="synConstant">'title='</span>+ <span class="synIdentifier">this</span>.title);
            console.log(<span class="synConstant">'body='</span>+ <span class="synIdentifier">this</span>.body);
        <span class="synIdentifier">}</span>,
        <span class="synComment">//titleの値を変えてみる(あとで消す)</span>
        changeTitle:<span class="synIdentifier">function</span>()<span class="synIdentifier">{</span>
            <span class="synIdentifier">this</span>.title=<span class="synConstant">&quot;change!&quot;</span>
        <span class="synIdentifier">}</span>
    <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>);
</pre>


<p>これで、ブラウザで確認用のボタンを押すと、</p>

<p><figure class="figure-image figure-image-fotolife" title="確認用の画面の結果"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20171212/20171212221130.png" alt="f:id:konoemario:20171212221130p:plain" title="f:id:konoemario:20171212221130p:plain" class="hatena-fotolife" itemprop="image"></span><figcaption>確認用の画面の結果</figcaption></figure></p>

<p>こんな感じで、ブラウザ側の表示もちゃんとかわることがわかるね！</p>

<p>こちらもくどいですが、イメージにするとこんな感じですかね。</p>

<p><figure class="figure-image figure-image-fotolife" title="v-modelのイメージ(2)"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20171212/20171212212359.png" alt="f:id:konoemario:20171212212359p:plain" title="f:id:konoemario:20171212212359p:plain" class="hatena-fotolife" itemprop="image"></span><figcaption>v-modelのイメージ(2)</figcaption></figure></p>

<p><br/></p>

<h5 id="axiosを使ってサーバにpostする">axiosを使ってサーバにpostする</h5>

<p>フォームの入力データがバインディグで簡単に取得できることがわかったので、さっそくデータをサーバーにpostしてみよう。</p>

<p>純粋なjavascriptだとXMLHttpRequestオブジェクトを使って〜みたいなことをするかと思います。</p>

<p>ためになる記事<br/>
<a href="https://qiita.com/katsunory/items/9bf9ee49ee5c08bf2b3d">Javascript&#x306E;Ajax&#x306B;&#x3064;&#x3044;&#x3066;&#x306E;&#x57FA;&#x672C;&#x307E;&#x3068;&#x3081; - Qiita</a></p>

<p>が、ここではより簡単にAjaxを利用できるaxiosを使っていきます。</p>

<p>axiosの導入自体は割愛しちゃうんだよ！<br/>
とりあえずだったらCDNを使っちゃえばいいからね！Laravelだと標準で用意されているよ！</p>

<p>こんな感じで、<code>axios.post</code>で送信先のurlと送信するデータを書いていくよ。<br/>
ここでは固定の文字列<code>hello</code>と<code>pinky</code>を送ってるね。</p>

<p><b>app.js</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>    el: <span class="synConstant">'.simple-form'</span>,
    data:<span class="synIdentifier">{</span>
        title:<span class="synConstant">''</span>,
        body:<span class="synConstant">''</span>,
    <span class="synIdentifier">}</span>,
    methods:<span class="synIdentifier">{</span>
        <span class="synComment">//Formのsubmitイベントが発生したとき</span>
        onSubmit:<span class="synIdentifier">function</span>()<span class="synIdentifier">{</span>
            axios.post(<span class="synConstant">'/thread'</span>,<span class="synIdentifier">{</span>
                title:<span class="synConstant">'hello!'</span>,
                body:<span class="synConstant">'pinky!'</span>
            <span class="synIdentifier">}</span>)
        <span class="synIdentifier">}</span>,
    <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>);
</pre>


<p>データバインディングしたデータを送るのであれば、`this.title'みたいに定義しちゃえばいいね！</p>

<p><b>app.js</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>    el: <span class="synConstant">'.simple-form'</span>,
    data:<span class="synIdentifier">{</span>
        title:<span class="synConstant">''</span>,
        body:<span class="synConstant">''</span>,
    <span class="synIdentifier">}</span>,
    methods:<span class="synIdentifier">{</span>
        <span class="synComment">//Formのsubmitイベントが発生したとき</span>
        onSubmit:<span class="synIdentifier">function</span>()<span class="synIdentifier">{</span>
            axios.post(<span class="synConstant">'/thread'</span>,<span class="synIdentifier">{</span>
                title: <span class="synIdentifier">this</span>.title,
                body: <span class="synIdentifier">this</span>.body
            <span class="synIdentifier">}</span>)
        <span class="synIdentifier">}</span>,
    <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>);
</pre>


<p>ええい、定義してあるものは全部送るんじゃ！というのであればthis.$dataってしとくと、dataで定義しているデータを全部送っちゃうよ。<br/>
恐ろしい子！</p>

<p><b>app.js</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>    el: <span class="synConstant">'.simple-form'</span>,
    data:<span class="synIdentifier">{</span>
        title:<span class="synConstant">''</span>,
        body:<span class="synConstant">''</span>,
    <span class="synIdentifier">}</span>,
    methods:<span class="synIdentifier">{</span>
        <span class="synComment">//Formのsubmitイベントが発生したとき</span>
        onSubmit:<span class="synIdentifier">function</span>()<span class="synIdentifier">{</span>
            axios.post(<span class="synConstant">'/thread'</span>, <span class="synIdentifier">this</span>.$data);
        <span class="synIdentifier">}</span>,
    <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>);
</pre>


<p><br/></p>

<h6 id="ちょっと横道に入る">ちょっと横道に入る</h6>

<p>データを送るっていってるけど、何を送ってるんだよ！と思った方がもしかしたらいるかもしれません。<br/>
Chromeをデペロッパーツールで開いて、Networkをみるとリクエストだったりレスポンスの中身が見れるから、ぜひ見てみよう！</p>

<p>簡単に抜粋すると、サーバーにはこんな感じでリクエストを送っているよ。</p>

<p><b>HTTPリクエストの中身</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>//HTTPリクエストヘッダーがあって
POST /thread HTTP/1.1
Host: homestead.app
Connection: keep-alive
Content-Length: <span class="synConstant">34</span>
Pragma: no-cache
Cache-Control: no-cache
//<span class="synPreProc">(</span><span class="synSpecial">省略</span><span class="synPreProc">)</span>

//ヘッダーに一行あけて、リクエストbodyの内容がセットされているね。
<span class="synSpecial">{</span><span class="synStatement">&quot;</span><span class="synConstant">title</span><span class="synStatement">&quot;</span>:<span class="synStatement">&quot;</span><span class="synConstant">hello!</span><span class="synStatement">&quot;</span>,<span class="synStatement">&quot;</span><span class="synConstant">body</span><span class="synStatement">&quot;</span>:<span class="synStatement">&quot;</span><span class="synConstant">pinky!</span><span class="synStatement">&quot;</span><span class="synSpecial">}</span>
</pre>


<p>本当に参考程度だったね！</p>

<p><br/></p>

<h5 id="レスポンスを受け取ろう">レスポンスを受け取ろう</h5>

<p>今、axiosでpostするぜ！って処理になってるんだけれども、リクエストを投げっぱなしで結果がわからないね、</p>

<p><figure class="figure-image figure-image-fotolife" title="レスポンスを処理しよう"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20171213/20171213194952.png" alt="f:id:konoemario:20171213194952p:plain" title="f:id:konoemario:20171213194952p:plain" class="hatena-fotolife" itemprop="image"></span><figcaption>レスポンスを処理しよう</figcaption></figure></p>

<p>なので、こんな感じにレスポンスを受け取ってあげよう。</p>

<p><b>app.js(抜粋)</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>        onSubmit:<span class="synIdentifier">function</span>()<span class="synIdentifier">{</span>
            axios.post(<span class="synConstant">'/thread'</span>, <span class="synIdentifier">this</span>.$data)
            <span class="synComment">//HTTPリクエストが成功したとき</span>
            .then(response =&gt; console.log(response.data))
            <span class="synComment">//HTTPリクエエストが失敗した時</span>
            .<span class="synStatement">catch</span>(error =&gt; console.log(error.response));
        <span class="synIdentifier">}</span>,
</pre>


<p>ちなみにHTTPリクエストが失敗って、何をもって失敗なんだろうかという点だけれども、公式ドキュメントをさらっと読むと、デフォルトだとHTTPステータスコートが200番台のときは成功みたい（あってるかな？）</p>

<p>やばい！最後がなんか投げやりになってる、ちっとも話が進まない！というところで次回に回します。</p>

-----
--------
AUTHOR: konoemario
TITLE: BEMでフォームのスタイルを作成する
BASENAME: 2017/12/08/201334
STATUS: Draft
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 12/08/2017 20:13:34
-----
BODY:
<p>ここにとあるHTMLがある。</p>

<p><b>とあるhtml</b></p>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span><span class="synStatement">label</span><span class="synIdentifier"> </span><span class="synType">for</span><span class="synIdentifier">=</span><span class="synConstant">&quot;title&quot;</span><span class="synIdentifier">&gt;</span>タイトル<span class="synIdentifier">&lt;/</span><span class="synStatement">label</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;</span><span class="synStatement">input</span><span class="synIdentifier"> </span><span class="synType">type</span><span class="synIdentifier">=</span><span class="synConstant">&quot;text&quot;</span><span class="synIdentifier"> </span><span class="synType">name</span><span class="synIdentifier">=</span><span class="synConstant">&quot;title&quot;</span><span class="synIdentifier"> placeholder=</span><span class="synConstant">&quot;title&quot;</span><span class="synIdentifier">&gt;</span>
</pre>


<p>これは、掲示板を作成するページの入力欄で、「タイトル」と「入力欄」がセットで考えていきたい。
なので、「タイトル」と「入力欄」は「入力ブロック」という考え方で使っていきたいと思う。</p>

<p>なので、「タイトル」と「入力欄」をラップするdiv要素を作成し、クラス名を<code>input</code>とした。</p>

<p><b>inputを追加</b></p>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synComment">&lt;!--入力ブロック--&gt;</span>
<span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;input&quot;</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">label</span><span class="synIdentifier"> </span><span class="synType">for</span><span class="synIdentifier">=</span><span class="synConstant">&quot;title&quot;</span><span class="synIdentifier">&gt;</span>タイトル<span class="synIdentifier">&lt;/</span><span class="synStatement">label</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">input</span><span class="synIdentifier"> </span><span class="synType">type</span><span class="synIdentifier">=</span><span class="synConstant">&quot;text&quot;</span><span class="synIdentifier"> </span><span class="synType">name</span><span class="synIdentifier">=</span><span class="synConstant">&quot;title&quot;</span><span class="synIdentifier"> placeholder=</span><span class="synConstant">&quot;title&quot;</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
</pre>


<p>クラス名<code>input</code>はブロックで、要素(Element)である<code>label</code>と<code>input</code>は以下それぞれ、クラス名<code>input__title</code>、<code>input__input</code>とした。</p>

<p><b>inputを追加</b></p>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synComment">&lt;!--入力ブロック--&gt;</span>
<span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;input&quot;</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">label</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;input__title&quot;</span><span class="synIdentifier"> </span><span class="synType">for</span><span class="synIdentifier">=</span><span class="synConstant">&quot;title&quot;</span><span class="synIdentifier">&gt;</span>タイトル<span class="synIdentifier">&lt;/</span><span class="synStatement">label</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">input</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;input__input&quot;</span><span class="synType">type</span><span class="synIdentifier">=</span><span class="synConstant">&quot;text&quot;</span><span class="synIdentifier"> </span><span class="synType">name</span><span class="synIdentifier">=</span><span class="synConstant">&quot;title&quot;</span><span class="synIdentifier"> placeholder=</span><span class="synConstant">&quot;title&quot;</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
</pre>


<p>この状態で、以下の要望があった場合</p>

<ul>
<li>タイトル、入力欄を少し大きくしたい</li>
<li>入力欄を角丸に</li>
<li>タイトルと入力欄の間をもうすこしあけたい</li>
</ul>


<p>スタイルは、こうしてみる。</p>

<p><b>スタイル</b></p>

<pre class="code lang-css" data-lang="css" data-unlink><span class="synIdentifier">.input{</span>
    &amp;<span class="synComment">__</span>title<span class="synIdentifier">{</span>
       <span class="synType">padding</span>:<span class="synConstant">10px</span>; 
       <span class="synType">margin-right</span>:<span class="synConstant">10px</span>
    <span class="synIdentifier">}</span>

    &amp;__input<span class="synIdentifier">{</span>
        <span class="synType">border</span>: <span class="synConstant">1px</span> <span class="synConstant">solid</span>;
        <span class="synType">border-radius</span>:<span class="synConstant">1px</span>;
        <span class="synType">padding</span>:<span class="synConstant">10px</span>; 
    <span class="synIdentifier">}</span>
<span class="synError">}</span>
</pre>


<p>ブラウザでみるとこんな感じ。</p>

<p>未だにブラウザの左上にぴったりとくっついているので、無性に<code>input</code>に<code>margin:10px</code>とかやりたくなるかもしれない。<br/>
<b>スタイル</b></p>

<pre class="code lang-css" data-lang="css" data-unlink><span class="synIdentifier">.input{</span>
    //見にくいから<span class="synType">margin</span>いれるんだよおお
　<span class="synType">margin</span>:<span class="synConstant">10px</span>
    &amp;__title{
       <span class="synConstant">padding</span>:<span class="synConstant">10px</span>; 
       <span class="synType">margin-right</span>:<span class="synConstant">10px</span>
    <span class="synIdentifier">}</span>

    &amp;__input<span class="synIdentifier">{</span>
        <span class="synType">border</span>: <span class="synConstant">1px</span> <span class="synConstant">solid</span>;
        <span class="synType">border-radius</span>:<span class="synConstant">1px</span>;
        <span class="synType">padding</span>:<span class="synConstant">10px</span>; 
    <span class="synIdentifier">}</span>
<span class="synError">}</span>
</pre>


<p>でも、これはやめたほうがいい。</p>

<p>「入力ブロック」をどこにどう置くのか、という情報は入力ブロックではなく、それを使う側が決めよう。</p>

<p>具体的な話を書く前に、入力ブロックをもうすこし増やしてみる</p>

-----
--------
AUTHOR: konoemario
TITLE: Laravelで始めるTDD開発 (5):登録ページを作成する
BASENAME: 2017/12/04/215550
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 12/04/2017 21:55:50
CATEGORY: プログラム
CATEGORY: Laravel
IMAGE: https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20171202/20171202160125.png
-----
BODY:
<h1 id="前回の続き">前回の続き</h1>

<p><iframe src="https://hatenablog-parts.com/embed?url=http%3A%2F%2Fwww.tohuandkonsome.site%2Fentry%2F2017%2F12%2F02%2F005231" title="Laravelで始めるTDD開発 (4):個別ページを作成する - 豆腐とコンソメ" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://www.tohuandkonsome.site/entry/2017/12/02/005231">www.tohuandkonsome.site</a></cite></p>

<ul class="table-of-contents">
    <li><a href="#前回の続き">前回の続き</a><ul>
            <li><a href="#やること">やること</a><ul>
                    <li><a href="#テストコード">テストコード</a></li>
                    <li><a href="#実装">実装</a></li>
                    <li><a href="#テストの前に">テストの前に</a></li>
                </ul>
            </li>
            <li><a href="#登録ページをつくる">登録ページをつくる</a></li>
            <li><a href="#バリデーションを作成する">バリデーションを作成する</a></li>
            <li><a href="#実装-1">実装</a></li>
            <li><a href="#ここまでの実装">ここまでの実装　</a></li>
        </ul>
    </li>
</ul>

<h2 id="やること">やること</h2>

<p>登録ページを作成して、Threadを新規に登録できるようにする。</p>

<p><br/></p>

<h3 id="テストコード">テストコード</h3>

<p>こんな感じのコードを書いてみるよ。</p>

<p><b>ThreadTest.php</b></p>

<pre class="code lang-php" data-lang="php" data-unlink><span class="synSpecial">&lt;?php</span>
    <span class="synComment">/**</span>
<span class="synComment">     * （本当はログインした）ユーザは、Threadを作成することができる。</span>
<span class="synComment">     *</span>
<span class="synComment">     * </span><span class="synPreProc">@return </span><span class="synComment">void</span>
<span class="synComment">     */</span>
    <span class="synType">public</span> <span class="synPreProc">function</span> test_user_can_post_thread<span class="synSpecial">()</span>
    <span class="synSpecial">{</span>
        <span class="synComment">//Threadがあって</span>
        <span class="synStatement">$</span><span class="synIdentifier">thread</span> <span class="synStatement">=</span> factory<span class="synSpecial">(</span>'<span class="synConstant">App\Thread</span>'<span class="synSpecial">)</span><span class="synType">-&gt;</span>make<span class="synSpecial">()</span>;

        <span class="synComment">//Threadを表示するURLにアクセスすると</span>
        <span class="synStatement">$</span><span class="synIdentifier">this</span><span class="synType">-&gt;</span>post<span class="synSpecial">(</span>'<span class="synConstant">/thread</span>', <span class="synStatement">$</span><span class="synIdentifier">thread</span><span class="synType">-&gt;</span>toArray<span class="synSpecial">())</span>;

       <span class="synComment">//あれ、何をassertをすればいんだろうというのは後半で</span>
        
    <span class="synSpecial">}</span>
</pre>


<p><code>factory('App\Thread')-&gt;make()</code>は、createと違って、データベースに保存はされないけれども、テストデータのインスタンスを作成してくれる。</p>

<p>そのインスタンスを<code>toArray()</code>でpostの第二引数に渡してあげることで、postリクエストとして渡すことができるみたい。</p>

<p>また、本当はログインしたユーザーが作成できること、というテストを行うんだけれども、認証周りは後回しにすることにしたよ。</p>

<p><br/></p>

<h3 id="実装">実装</h3>

<p>ルーティングの定義はこんな感じ。</p>

<p><code>ThreadController@show</code>より下に投稿の定義を持ってちゃうと、<code>{thread}</code>のせいかうまくいかなかったりする。</p>

<p><b>web.php</b></p>

<pre class="code lang-php" data-lang="php" data-unlink><span class="synSpecial">&lt;?php</span>
<span class="synComment">//Threadの一覧を表示する</span>
Route<span class="synStatement">::</span>get<span class="synSpecial">(</span>'<span class="synConstant">/thread</span>', '<span class="synConstant">ThreadController@index</span>'<span class="synSpecial">)</span>;

<span class="synComment">//Threadを投稿する(今回新規で作成)</span>
Route<span class="synStatement">::</span>post<span class="synSpecial">(</span>'<span class="synConstant">/thread</span>', '<span class="synConstant">ThreadController@store</span>'<span class="synSpecial">)</span>;

<span class="synComment">//Threadを表示する</span>
Route<span class="synStatement">::</span>get<span class="synSpecial">(</span>'<span class="synConstant">/thread/{thread}</span>', '<span class="synConstant">ThreadController@show</span>'<span class="synSpecial">)</span>;
</pre>


<p>コントローラーはこんな感じ。</p>

<p>ものすごくシンプルだね。</p>

<p><b>ThreadController.php</b></p>

<pre class="code lang-php" data-lang="php" data-unlink><span class="synSpecial">&lt;?php</span>
    <span class="synType">public</span> <span class="synPreProc">function</span> store<span class="synSpecial">(</span>Request <span class="synStatement">$</span><span class="synIdentifier">request</span>, Thread <span class="synStatement">$</span><span class="synIdentifier">thread</span><span class="synSpecial">)</span>
    <span class="synSpecial">{</span>

        <span class="synStatement">$</span><span class="synIdentifier">thread</span><span class="synType">-&gt;</span>create<span class="synSpecial">(</span><span class="synStatement">$</span><span class="synIdentifier">request</span><span class="synType">-&gt;</span>all<span class="synSpecial">())</span>;

        <span class="synStatement">return</span> redirect<span class="synSpecial">(</span>'<span class="synConstant">/thread</span>'<span class="synSpecial">)</span>;
    <span class="synSpecial">}</span>
</pre>


<p>そして、忘れがちだけれどもモデルについても、マスアサイントメント機能を有効にしておくよ。</p>

<p><code>ThreadContoroller@store</code>のようにリクエストの内容全部をcreateみたいにしていると、リクエストの中に本来さわっちゃいけないname属性をこっそりいれられちゃったりした場合に、意図せずデータがつくられたり、更新されたりやべーよ！ということでこういった機能があるみたいだね。</p>

<p><b>Thread.php</b></p>

<pre class="code lang-php" data-lang="php" data-unlink><span class="synSpecial">&lt;?php</span>

<span class="synType">namespace</span> App;

<span class="synPreProc">use</span> Illuminate\Database\Eloquent\Model;

<span class="synType">class</span> Thread <span class="synType">extends</span> Model
<span class="synSpecial">{</span>
   <span class="synComment">//マスアサイントメント機能を有効にしておく </span>
   <span class="synComment">//guardedするカラムはなにもない！</span>
   <span class="synType">protected</span> <span class="synStatement">$</span><span class="synIdentifier">guarded</span> <span class="synStatement">=</span> <span class="synSpecial">[]</span>;
<span class="synSpecial">}</span>
</pre>


<p><br/></p>

<h3 id="テストの前に">テストの前に</h3>

<p>実装が終えたので、テストを実行するよ！とする前に、ちょっと寄り道。</p>

<p>今回のテストは何をもって成功とればいいんだろう。</p>

<p>少し考えてみると、こんなような候補があがってくるね！</p>

<ul>
<li><code>$thread()-&gt;create()</code>でデータが保存されていること</li>
<li>エラーでなければ、<code>return redirect()</code>リダイレクトしているから、リダイレクトされること</li>
<li>いっそのことHTTPステータスコード200ってのも</li>
</ul>


<p>正解はなんだろう、というところだけれども自分もよくわからないんだ。</p>

<p>そもそもホワイトボックス的に、最終的なアウトプットだけをみればいいのか、ブラックボックス的なことが必要なのかとかそのへんがまだあんまりわかってないです。</p>

<p>今回に関していえば、Laracastの動画に則り、</p>

<ul>
<li>作成したThreadが個別ページで見れること</li>
</ul>


<p>というアプローチで成功かどうかを判断するよ。</p>

<p>ということで直したテストコードはこんな感じ。</p>

<p><b>ThreadTest.php</b></p>

<pre class="code lang-php" data-lang="php" data-unlink><span class="synSpecial">&lt;?php</span>
    <span class="synComment">/**</span>
<span class="synComment">     * （本当はログインした）ユーザは、Threadを作成することができる。</span>
<span class="synComment">     *</span>
<span class="synComment">     * </span><span class="synPreProc">@return </span><span class="synComment">void</span>
<span class="synComment">     */</span>
    <span class="synType">public</span> <span class="synPreProc">function</span> test_user_can_post_thread<span class="synSpecial">()</span>
    <span class="synSpecial">{</span>
        <span class="synComment">//Threadがあって</span>
        <span class="synStatement">$</span><span class="synIdentifier">thread</span> <span class="synStatement">=</span> factory<span class="synSpecial">(</span>'<span class="synConstant">App\Thread</span>'<span class="synSpecial">)</span><span class="synType">-&gt;</span>make<span class="synSpecial">()</span>;

        <span class="synComment">//Threadを表示するURLにアクセスすると、threadが作成されて</span>
        <span class="synStatement">$</span><span class="synIdentifier">this</span><span class="synType">-&gt;</span>post<span class="synSpecial">(</span>'<span class="synConstant">/thread</span>', <span class="synStatement">$</span><span class="synIdentifier">thread</span><span class="synType">-&gt;</span>toArray<span class="synSpecial">())</span>;

        <span class="synComment">//thread/thread_id にアクセスすると個別ページがみえる</span>
        <span class="synStatement">$</span><span class="synIdentifier">this</span><span class="synType">-&gt;</span>get<span class="synSpecial">(</span>'<span class="synConstant">/thread/</span>'<span class="synStatement">.$</span><span class="synIdentifier">thread</span><span class="synType">-&gt;</span>id<span class="synSpecial">)</span>
             <span class="synType">-&gt;</span>assertSee<span class="synSpecial">(</span><span class="synStatement">$</span><span class="synIdentifier">thread</span><span class="synType">-&gt;</span><span class="synIdentifier">title</span><span class="synSpecial">)</span>
             <span class="synType">-&gt;</span>assertSee<span class="synSpecial">(</span><span class="synStatement">$</span><span class="synIdentifier">thread</span><span class="synType">-&gt;</span>body<span class="synSpecial">)</span>;
        
    <span class="synSpecial">}</span>
</pre>


<p>テストを実行すると、問題なく通りました。</p>

<p><br/></p>

<h2 id="登録ページをつくる">登録ページをつくる</h2>

<p>さて、なんとなくThreadを登録する機能ができあがってきたので、画面をつくっていきます。</p>

<p>このへんは慣れてきたのでさくっといきます。</p>

<p>ルーティングを書いて、</p>

<p><b>web.php</b></p>

<pre class="code lang-php" data-lang="php" data-unlink><span class="synSpecial">&lt;?php</span>
<span class="synComment">//Threadの一覧を表示する</span>
Route<span class="synStatement">::</span>get<span class="synSpecial">(</span>'<span class="synConstant">/thread</span>', '<span class="synConstant">ThreadController@index</span>'<span class="synSpecial">)</span>;

<span class="synComment">//Threadを投稿するページを表示する(今回新規で追加)</span>
Route<span class="synStatement">::</span>get<span class="synSpecial">(</span>'<span class="synConstant">/thread/create</span>', '<span class="synConstant">ThreadController@create</span>'<span class="synSpecial">)</span>;

<span class="synComment">//Threadを投稿する</span>
Route<span class="synStatement">::</span>post<span class="synSpecial">(</span>'<span class="synConstant">/thread</span>', '<span class="synConstant">ThreadController@store</span>'<span class="synSpecial">)</span>;

<span class="synComment">//Threadを表示する</span>
Route<span class="synStatement">::</span>get<span class="synSpecial">(</span>'<span class="synConstant">/thread/{thread}</span>', '<span class="synConstant">ThreadController@show</span>'<span class="synSpecial">)</span>;
</pre>


<p>コントローラーに定義を追加して</p>

<p><b>ThreadController.php(抜粋)</b></p>

<pre class="code lang-php" data-lang="php" data-unlink><span class="synSpecial">&lt;?php</span>
    <span class="synType">public</span> <span class="synPreProc">function</span> create<span class="synSpecial">()</span>
    <span class="synSpecial">{</span>
        <span class="synStatement">return</span> view<span class="synSpecial">(</span>'<span class="synConstant">thread.create</span>'<span class="synSpecial">)</span>;
    <span class="synSpecial">}</span>
</pre>


<p>画面を作成しよう。<br/>
スタイルをいろいろあてているけれども、scssは省略しちゃうよ。<br/>
需要はまったくないだろうけれどもgithubに上げておくよ！</p>

<p><b>create.blade.php</b></p>

<pre class="code lang-html" data-lang="html" data-unlink>@extends('layouts.app')
@section('content')
<span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;container justfy-center&quot;</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">form</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;form&quot;</span><span class="synIdentifier"> </span><span class="synType">action</span><span class="synIdentifier">=</span><span class="synConstant">&quot;/thread&quot;</span><span class="synIdentifier"> </span><span class="synType">method</span><span class="synIdentifier">=</span><span class="synConstant">&quot;post&quot;</span><span class="synIdentifier">&gt;</span>
        {{ csrf_field() }}
        <span class="synIdentifier">&lt;</span><span class="synStatement">h2</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;form-header&quot;</span><span class="synIdentifier">&gt;</span>何かを投稿しよう<span class="synIdentifier">&lt;/</span><span class="synStatement">h2</span><span class="synIdentifier">&gt;</span>
        <span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;form-group&quot;</span><span class="synIdentifier">&gt;</span>
            <span class="synIdentifier">&lt;</span><span class="synStatement">label</span><span class="synIdentifier"> </span><span class="synType">for</span><span class="synIdentifier">=</span><span class="synConstant">&quot;title&quot;</span><span class="synIdentifier">&gt;</span>タイトル<span class="synIdentifier">&lt;/</span><span class="synStatement">label</span><span class="synIdentifier">&gt;</span>
            <span class="synIdentifier">&lt;</span><span class="synStatement">input</span><span class="synIdentifier"> </span><span class="synType">type</span><span class="synIdentifier">=</span><span class="synConstant">&quot;text&quot;</span><span class="synIdentifier"> </span><span class="synType">name</span><span class="synIdentifier">=</span><span class="synConstant">&quot;title&quot;</span><span class="synIdentifier">&gt;</span>
        <span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
        <span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;form-group&quot;</span><span class="synIdentifier">&gt;</span>
            <span class="synIdentifier">&lt;</span><span class="synStatement">label</span><span class="synIdentifier"> </span><span class="synType">for</span><span class="synIdentifier">=</span><span class="synConstant">&quot;body&quot;</span><span class="synIdentifier">&gt;</span>本文<span class="synIdentifier">&lt;/</span><span class="synStatement">label</span><span class="synIdentifier">&gt;</span>
            <span class="synIdentifier">&lt;</span><span class="synStatement">textarea</span><span class="synIdentifier"> </span><span class="synType">name</span><span class="synIdentifier">=</span><span class="synConstant">&quot;body&quot;</span><span class="synIdentifier"> </span><span class="synType">rows</span><span class="synIdentifier">=</span><span class="synConstant">&quot;10&quot;</span><span class="synIdentifier"> </span><span class="synType">cols</span><span class="synIdentifier">=</span><span class="synConstant">&quot;50&quot;</span><span class="synIdentifier">&gt;&lt;/</span><span class="synStatement">textarea</span><span class="synIdentifier">&gt;</span>
        <span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
        <span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;form-group&quot;</span><span class="synIdentifier">&gt;</span>
            <span class="synIdentifier">&lt;</span><span class="synStatement">label</span><span class="synIdentifier"> </span><span class="synType">for</span><span class="synIdentifier">=</span><span class="synConstant">&quot;user_id&quot;</span><span class="synIdentifier">&gt;</span>ユーザーID<span class="synIdentifier">&lt;/</span><span class="synStatement">label</span><span class="synIdentifier">&gt;</span>
            <span class="synIdentifier">&lt;</span><span class="synStatement">input</span><span class="synIdentifier"> </span><span class="synType">type</span><span class="synIdentifier">=</span><span class="synConstant">&quot;text&quot;</span><span class="synIdentifier"> </span><span class="synType">name</span><span class="synIdentifier">=</span><span class="synConstant">&quot;user_id&quot;</span><span class="synIdentifier"> placeholder=</span><span class="synConstant">&quot;とりあえずの実装&quot;</span><span class="synIdentifier">&gt;</span>
        <span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
        <span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;form-group&quot;</span><span class="synIdentifier">&gt;</span>
            <span class="synIdentifier">&lt;</span><span class="synStatement">button</span><span class="synIdentifier">&gt;</span>投稿する<span class="synIdentifier">&lt;/</span><span class="synStatement">button</span><span class="synIdentifier">&gt;</span>
        <span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;/</span><span class="synStatement">form</span><span class="synIdentifier">&gt;</span>

<span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
@endsection
</pre>


<p>こんな感じの画面になりました。</p>

<p><figure class="figure-image figure-image-fotolife"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20171202/20171202160125.png" alt="f:id:konoemario:20171202160125p:plain" title="f:id:konoemario:20171202160125p:plain" class="hatena-fotolife" itemprop="image"></span><figcaption>Threadを作成する画面</figcaption></figure></p>

<p>ユーザーIDについては、ログイン機能をつくったらつくった人のIDが入ってくるイメージになりますが、今は適当に入力します。</p>

<p>試しに投稿してみると、問題なく投稿できることが確認できました。</p>

<h2 id="バリデーションを作成する">バリデーションを作成する</h2>

<p>現在の状態で、タイトルなどを空っぽにして投稿すると、タイトルにnullはだめだよ！というエラーでExceptionが発生してしまいます。</p>

<p>なので、入力が必須の項目が未入力の場合は、入力してね！ってメッセージを出してあげましょう。</p>

<p>なにはともあれはテストコードを先に書きます。</p>

<p><b>ThreadTest.php</b></p>

<pre class="code lang-php" data-lang="php" data-unlink><span class="synSpecial">&lt;?php</span>
    <span class="synComment">/**</span>
<span class="synComment">     * Thread投稿時にtitleが未入力だとValidationError</span>
<span class="synComment">     *</span>
<span class="synComment">     * </span><span class="synPreProc">@return </span><span class="synComment">void</span>
<span class="synComment">     */</span>
    <span class="synType">public</span> <span class="synPreProc">function</span> test_thread_require_title<span class="synSpecial">()</span>
    <span class="synSpecial">{</span>
        <span class="synComment">//titleがnullのThreadがあって</span>
        <span class="synStatement">$</span><span class="synIdentifier">thread</span> <span class="synStatement">=</span> factory<span class="synSpecial">(</span>'<span class="synConstant">App\Thread</span>'<span class="synSpecial">)</span><span class="synType">-&gt;</span>make<span class="synSpecial">([</span>'<span class="synConstant">title</span>' <span class="synStatement">=&gt;</span> <span class="synType">null</span><span class="synSpecial">])</span>;

        <span class="synComment">//Threadを表示するURLにアクセスすると、threadを作成しようとして</span>
        <span class="synStatement">$</span><span class="synIdentifier">this</span><span class="synType">-&gt;</span>post<span class="synSpecial">(</span>'<span class="synConstant">/thread</span>', <span class="synStatement">$</span><span class="synIdentifier">thread</span><span class="synType">-&gt;</span>toArray<span class="synSpecial">())</span>
        <span class="synComment">//バリデーションに引っかかって、セッションに'title'というキーでエラーが書かれる</span>
             <span class="synType">-&gt;</span>assertSessionHasErrors<span class="synSpecial">(</span>'<span class="synConstant">title</span>'<span class="synSpecial">)</span>;
        
    <span class="synSpecial">}</span>
</pre>


<p>ここで使うのは<code>assertSessionHasErrors</code>になります。
バリデーションに失敗してエラーになったかどうかの判断が、なんでセッションなんだろう、と思いませんか。</p>

<p>気になったので調べてみました。</p>

<blockquote><p>ではやって来たリクエストの入力が指定したバリデーションルールに当てはまらなかった場合はどうなるんでしょう？　既に説明した通り、Laravelは自動的にユーザーを以前のページヘリダイレクトします。付け加えて、バリデーションエラーは全部自動的にフラッシュデータとしてセッションへ保存されます。</p></blockquote>

<p>GETルートのビューへエラーメッセージを明示的に結合する必要がないことに注目してください。これはつまり、Laravelはいつもセッションデータの中にエラーの存在をチェックしており、見つけた場合は自動的に結合しているからです。</p>

<p>公式のバリデーションには上記のことが書いてあります。</p>

<p>つまり、バリデーションエラーの結果はセッションに書いていて、セッションにそのエラーが書かれていれば$errorsという変数に突っ込んでおくから、View(blade)で使ってね、ということみたいです。</p>

<p>なるほどね！</p>

<p><br/></p>

<h2 id="実装-1">実装</h2>

<p>ということでバリデーションの実装をしていきます。</p>

<p>バリデーションもコントローラーではなくって、フォームリクエストバリデーションというものを利用してみます。</p>

<p>artisanで雛形を作成して、 <br/>
<b>フォームリクエストの作成</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>php artisan make:request ThreadRequest
</pre>


<p>フォームリクエストをこんな感じで書きます。</p>

<p><b>ThreadRequest.php</b></p>

<pre class="code lang-php" data-lang="php" data-unlink><span class="synSpecial">&lt;?php</span>

<span class="synType">namespace</span> App\Http\Requests;

<span class="synPreProc">use</span> Illuminate\Foundation\Http\FormRequest;

<span class="synType">class</span> ThreadRequest <span class="synType">extends</span> FormRequest
<span class="synSpecial">{</span>
    <span class="synComment">/**</span>
<span class="synComment">     * Determine if the user is authorized to make this request.</span>
<span class="synComment">     *</span>
<span class="synComment">     * </span><span class="synPreProc">@return </span><span class="synComment">bool</span>
<span class="synComment">     */</span>
    <span class="synType">public</span> <span class="synPreProc">function</span> authorize<span class="synSpecial">()</span>
    <span class="synSpecial">{</span>
        <span class="synStatement">return</span> <span class="synConstant">true</span>;
    <span class="synSpecial">}</span>

    <span class="synComment">/**</span>
<span class="synComment">     * Get the validation rules that apply to the request.</span>
<span class="synComment">     *</span>
<span class="synComment">     * </span><span class="synPreProc">@return </span><span class="synComment">array</span>
<span class="synComment">     */</span>
    <span class="synType">public</span> <span class="synPreProc">function</span> rules<span class="synSpecial">()</span>
    <span class="synSpecial">{</span>
        <span class="synStatement">return</span> <span class="synSpecial">[</span>
            '<span class="synConstant">title</span>' <span class="synStatement">=&gt;</span> '<span class="synConstant">required</span>',
            '<span class="synConstant">body</span>'  <span class="synStatement">=&gt;</span> '<span class="synConstant">required</span>',
            
        <span class="synSpecial">]</span>;
    <span class="synSpecial">}</span>

    <span class="synType">public</span> <span class="synPreProc">function</span> messages<span class="synSpecial">()</span>
    <span class="synSpecial">{</span>
        <span class="synStatement">return</span> <span class="synSpecial">[</span>
            '<span class="synConstant">title.required</span>' <span class="synStatement">=&gt;</span> '<span class="synConstant">タイトルが未入力だよ</span>',
            '<span class="synConstant">body.required</span>'  <span class="synStatement">=&gt;</span> '<span class="synConstant">本文が未入力だよ</span>',
        <span class="synSpecial">]</span>;
    <span class="synSpecial">}</span>
<span class="synSpecial">}</span>
</pre>


<p>コントローラーも、ThreadRequestを使うようにしてあげます。</p>

<p><b>ThreadController.php(抜粋)</b></p>

<pre class="code lang-php" data-lang="php" data-unlink>use App\Http\Requests\ThreadRequest;


    public function store(ThreadRequest $request, Thread $thread)
    {

        $thread-<span class="synError">&gt;</span>create($request-<span class="synError">&gt;</span>all());

        return redirect('/thread');
    }
</pre>


<p>次回は登録ページにエラーを表示していきたいと思います。</p>

<h2 id="ここまでの実装">ここまでの実装　</h2>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2FRyomasao%2Fforum%2Ftree%2Ftdd5" title="Ryomasao/forum" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://github.com/Ryomasao/forum/tree/tdd5">github.com</a></cite></p>

-----
--------
AUTHOR: konoemario
TITLE: Laravelで始めるTDD開発 (4):個別ページを作成する
BASENAME: 2017/12/02/005231
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 12/02/2017 00:52:31
CATEGORY: Laravel
CATEGORY: プログラム
-----
BODY:
<h1 id="前回の続き">前回の続き</h1>

<p>ちょっとだけ慣れてきた感じがする。今日このごろ。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=http%3A%2F%2Fwww.tohuandkonsome.site%2Fentry%2F2017%2F11%2F29%2F224332" title="Laravelで始めるTDD開発 (3):スタイルを整える - 豆腐とコンソメ" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://www.tohuandkonsome.site/entry/2017/11/29/224332">www.tohuandkonsome.site</a></cite></p>

<ul class="table-of-contents">
    <li><a href="#前回の続き">前回の続き</a><ul>
            <li><a href="#やること">やること</a></li>
            <li><a href="#個別ページのテストコードを書く">個別ページのテストコードを書く</a></li>
            <li><a href="#実装を書く">実装を書く</a><ul>
                    <li><a href="#個別画面">個別画面</a></li>
                    <li><a href="#テストを実行する">テストを実行する</a></li>
                </ul>
            </li>
        </ul>
    </li>
</ul>

<h2 id="やること">やること</h2>

<p><code>/thread/1</code>にアクセスすると、対応するthreadのページが見えるようにしてみる。</p>

<h2 id="個別ページのテストコードを書く">個別ページのテストコードを書く</h2>

<p>まずは、個別ページが見えることのテストコードはこんな感じに。</p>

<p><b>ThreadTest.php</b></p>

<pre class="code lang-php" data-lang="php" data-unlink><span class="synSpecial">&lt;?php</span>
    <span class="synComment">/**</span>
<span class="synComment">     * すべてのユーザーは、/thread/{id}にアクセスすると、idに対応するthreadが参照できること</span>
<span class="synComment">     *</span>
<span class="synComment">     * </span><span class="synPreProc">@return </span><span class="synComment">void</span>
<span class="synComment">     */</span>
    <span class="synType">public</span> <span class="synPreProc">function</span> test_all_user_can_view_thread<span class="synSpecial">()</span>
    <span class="synSpecial">{</span>
        <span class="synComment">//Threadがあって</span>
        <span class="synStatement">$</span><span class="synIdentifier">thread</span> <span class="synStatement">=</span> factory<span class="synSpecial">(</span>'<span class="synConstant">App\Thread</span>'<span class="synSpecial">)</span><span class="synType">-&gt;</span>create<span class="synSpecial">()</span>;

        <span class="synComment">//Threadを表示するURLにアクセスすると</span>
        <span class="synStatement">$</span><span class="synIdentifier">response</span> <span class="synStatement">=</span> <span class="synStatement">$</span><span class="synIdentifier">this</span><span class="synType">-&gt;</span>get<span class="synSpecial">(</span>'<span class="synConstant">/thread/</span>'<span class="synStatement">.$</span><span class="synIdentifier">thread</span><span class="synType">-&gt;</span>id<span class="synSpecial">)</span>;
        
        <span class="synComment">//Threadの内容が見えるんだよ</span>
        <span class="synStatement">$</span><span class="synIdentifier">response</span><span class="synType">-&gt;</span>assertSee<span class="synSpecial">(</span><span class="synStatement">$</span><span class="synIdentifier">thread</span><span class="synType">-&gt;</span>body<span class="synSpecial">)</span>
                 <span class="synType">-&gt;</span>assertSee<span class="synSpecial">(</span><span class="synStatement">$</span><span class="synIdentifier">thread</span><span class="synType">-&gt;</span><span class="synIdentifier">title</span><span class="synSpecial">)</span>;
    <span class="synSpecial">}</span>
</pre>


<h2 id="実装を書く">実装を書く</h2>

<p>ルーティングはこんな感じで、
<b>web.php(抜粋)</b></p>

<pre class="code lang-php" data-lang="php" data-unlink><span class="synSpecial">&lt;?php</span>
<span class="synComment">//Threadを表示する</span>
Route<span class="synStatement">::</span>get<span class="synSpecial">(</span>'<span class="synConstant">/thread/{thread}</span>', '<span class="synConstant">ThreadController@show</span>'<span class="synSpecial">)</span>;
</pre>


<p>コントローラーはこんな感じになる。</p>

<p><b>ThreadController.php(抜粋)</b></p>

<pre class="code lang-php" data-lang="php" data-unlink><span class="synSpecial">&lt;?php</span>
    <span class="synType">public</span> <span class="synPreProc">function</span> show<span class="synSpecial">(</span>Thread <span class="synStatement">$</span><span class="synIdentifier">thread</span><span class="synSpecial">)</span>
    <span class="synSpecial">{</span>
        <span class="synStatement">return</span> view<span class="synSpecial">(</span>'<span class="synConstant">thread.show</span>', <span class="synStatement">compact</span><span class="synSpecial">(</span>'<span class="synConstant">thread</span>'<span class="synSpecial">))</span>;
    <span class="synSpecial">}</span>
</pre>


<p>冷静に考えると、こんな感じにするんだけれども
(といっても、この例自体もLaravelならではの機能があって、なんか説明しにくいね。)</p>

<p><b>普通はこうなんじゃ</b></p>

<pre class="code lang-php" data-lang="php" data-unlink><span class="synSpecial">&lt;?php</span>

<span class="synComment">//web.phpがこんな感じだったとして</span>
<span class="synComment">//  Route::get('/thread/{id}', 'ThreadController@show');</span>

<span class="synComment">//コントローラーのstoreはこんな感じ</span>
    <span class="synType">public</span> <span class="synPreProc">function</span> show<span class="synSpecial">(</span><span class="synStatement">$</span><span class="synIdentifier">id</span><span class="synSpecial">)</span>
    <span class="synSpecial">{</span>
      <span class="synComment">//URIのidを条件にひとつのthreadをとってくる </span>
      <span class="synStatement">$</span><span class="synIdentifier">thread</span> <span class="synStatement">=</span> Thread<span class="synStatement">::</span>find<span class="synSpecial">(</span><span class="synStatement">$</span><span class="synIdentifier">id</span><span class="synSpecial">)</span> 
       <span class="synStatement">return</span> view<span class="synSpecial">(</span>'<span class="synConstant">thread.show</span>', <span class="synStatement">compact</span><span class="synSpecial">(</span>'<span class="synConstant">thread</span>'<span class="synSpecial">))</span>;
    <span class="synSpecial">}</span>
</pre>


<p>Laravelでは、URIとコントローラーにモデルが定義されていると、勝手にURIの数字に紐づくidをもとに対象のインスタンスをコントローラーに渡してくれるみたい。  恐ろしい子。</p>

<p><a href="https://readouble.com/laravel/5.5/ja/routing.html">&#x30EB;&#x30FC;&#x30C6;&#x30A3;&#x30F3;&#x30B0; 5.5 Laravel</a></p>

<blockquote><p>Laravelはタイプヒントされた変数名とルートセグメント名が一致する場合、Laravelはルートかコントローラアクション中にEloquentモデルが定義されていると、自動的に依存解決します。</p></blockquote>

<h3 id="個別画面">個別画面</h3>

<p>個別画面は新たに<code>show.blade.php</code>を用意して、ほぼコピペで終えます。</p>

<p><b>show.blade.php</b></p>

<pre class="code lang-html" data-lang="html" data-unlink>@extends('layouts.app')
@section('content')
<span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;container&quot;</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">h1</span><span class="synIdentifier">&gt;</span>This is Thread's Detail!<span class="synIdentifier">&lt;/</span><span class="synStatement">h1</span><span class="synIdentifier">&gt;</span>
        <span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;thread&quot;</span><span class="synIdentifier">&gt;</span>
            <span class="synIdentifier">&lt;</span><span class="synStatement">h1</span><span class="synIdentifier">&gt;</span> {{ $thread-&gt;title }} <span class="synIdentifier">&lt;/</span><span class="synStatement">h1</span><span class="synIdentifier">&gt;</span>
            <span class="synIdentifier">&lt;</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span> {{ $thread-<span class="synError">&gt;</span>body }} <span class="synIdentifier">&lt;/</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>
        <span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
@endsection
</pre>


<h3 id="テストを実行する">テストを実行する</h3>

<p>問題なく通りました。<br/>
ちなみにphpunitで <code>--filter</code>オプションでメソッドを指定してあげると、対象のメソッドだけテストしてくれるみたいです。</p>

<p><b>テストコードを実行</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ phpunit <span class="synSpecial">--filter</span> test_all_user_can_view_thread
PHPUnit 6.4.4 by Sebastian Bergmann and contributors.

..                                                                  <span class="synConstant">2</span> / <span class="synConstant">2</span> <span class="synPreProc">(</span><span class="synConstant">100</span><span class="synSpecial">%</span><span class="synPreProc">)</span>

Time: 1.66 seconds, Memory: 14.00MB
</pre>


<p>ためしにブラウザで見てみると、こんな感じになりました。</p>

<p><figure class="figure-image figure-image-fotolife"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20171202/20171202004932.png" alt="f:id:konoemario:20171202004932p:plain" title="f:id:konoemario:20171202004932p:plain" class="hatena-fotolife" itemprop="image"></span><figcaption>/thread/1にアクセスした場合</figcaption></figure></p>

<p>次回は登録ページを作成します。</p>

-----
--------
AUTHOR: konoemario
TITLE: Laravelで始めるTDD開発 (3):スタイルを整える
BASENAME: 2017/11/29/224332
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 11/29/2017 22:43:32
CATEGORY: Laravel
CATEGORY: プログラム
IMAGE: https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20171127/20171127221851.png
-----
BODY:
<h1 id="前回">前回</h1>

<p><iframe src="https://hatenablog-parts.com/embed?url=http%3A%2F%2Fwww.tohuandkonsome.site%2Fentry%2F2017%2F11%2F27%2F222921" title="Laravelで始めるTDD開発(2) - 豆腐とコンソメ" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://www.tohuandkonsome.site/entry/2017/11/27/222921">www.tohuandkonsome.site</a></cite></p>

<p><figure class="figure-image figure-image-fotolife"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20171127/20171127221851.png" alt="f:id:konoemario:20171127221851p:plain" title="f:id:konoemario:20171127221851p:plain" class="hatena-fotolife" itemprop="image"></span><figcaption>Threadの一覧</figcaption></figure>
前回は、適当にったテストデータのThreadの一覧が、こんな感じで見えたところまでやりました。</p>

<p>今回は、テストコードというところからは全く関係がなくなってしまうのですが、画面の見た目を整えていきたいと思います。</p>

<p><br/></p>

<ul class="table-of-contents">
    <li><a href="#前回">前回</a><ul>
            <li><a href="#indexbladephpを綺麗にする">index.blade.phpを綺麗にする</a></li>
            <li><a href="#scsscssを書く">scss(css)を書く</a><ul>
                    <li><a href="#ディレクトリ構成">ディレクトリ構成</a></li>
                    <li><a href="#scssをcssにコンパイルする">scssをcssにコンパイルする</a></li>
                </ul>
            </li>
            <li><a href="#ここまでのソース">ここまでのソース</a></li>
        </ul>
    </li>
</ul>

<p><br/></p>

<h2 id="indexbladephpを綺麗にする">index.blade.phpを綺麗にする</h2>

<p>bladeテンプレートの機能を使って、ヘッダ、コンテンツ、フッターぐらいは分けて、それぞれ再利用が効くようにしておきます。</p>

<p><b>views配下のディレクトリ構成</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>.
├── components
│   ├── footer.blade.php
│   └── header.blade.php
├── layouts
│   └── app.blade.php
├── thread
│   └── index.blade.php
</pre>


<p>ヘッダーはこんな感じにしました。<br/>
Googleの日本語フォントを使用してみようと思います。</p>

<p>また後ほど編集するスタイルシート<code>app.css</code>を読み込んでおきます。</p>

<p><b>header.blade.php</b></p>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synComment">&lt;!DOCTYPE html&gt;</span>
<span class="synIdentifier">&lt;</span><span class="synStatement">html</span><span class="synIdentifier"> </span><span class="synType">lang</span><span class="synIdentifier">=</span><span class="synConstant">&quot;{{ app()-&gt;getLocale() }}&quot;</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;</span><span class="synStatement">head</span><span class="synIdentifier">&gt;</span>
<span class="synPreProc">    </span><span class="synIdentifier">&lt;</span><span class="synStatement">meta</span><span class="synIdentifier"> </span><span class="synType">charset</span><span class="synIdentifier">=</span><span class="synConstant">&quot;utf-8&quot;</span><span class="synIdentifier">&gt;</span>
<span class="synPreProc">    </span><span class="synIdentifier">&lt;</span><span class="synStatement">meta</span><span class="synIdentifier"> </span><span class="synType">http-equiv</span><span class="synIdentifier">=</span><span class="synConstant">&quot;X-UA-Compatible&quot;</span><span class="synIdentifier"> </span><span class="synType">content</span><span class="synIdentifier">=</span><span class="synConstant">&quot;IE=edge&quot;</span><span class="synIdentifier">&gt;</span>
<span class="synPreProc">    </span><span class="synIdentifier">&lt;</span><span class="synStatement">meta</span><span class="synIdentifier"> </span><span class="synType">name</span><span class="synIdentifier">=</span><span class="synConstant">&quot;viewport&quot;</span><span class="synIdentifier"> </span><span class="synType">content</span><span class="synIdentifier">=</span><span class="synConstant">&quot;width=device-width, initial-scale=1&quot;</span><span class="synIdentifier">&gt;</span>

<span class="synPreProc">    </span><span class="synComment">&lt;!-- CSRF Token --&gt;</span>
<span class="synPreProc">    </span><span class="synIdentifier">&lt;</span><span class="synStatement">meta</span><span class="synIdentifier"> </span><span class="synType">name</span><span class="synIdentifier">=</span><span class="synConstant">&quot;csrf-token&quot;</span><span class="synIdentifier"> </span><span class="synType">content</span><span class="synIdentifier">=</span><span class="synConstant">&quot;{{ csrf_token() }}&quot;</span><span class="synIdentifier">&gt;</span>

<span class="synPreProc">    </span><span class="synIdentifier">&lt;</span><span class="synStatement">title</span><span class="synIdentifier">&gt;</span>{{ config('app.name', 'Laravel') }}<span class="synIdentifier">&lt;/</span><span class="synStatement">title</span><span class="synIdentifier">&gt;</span>

<span class="synPreProc">    </span><span class="synComment">&lt;!-- Styles --&gt;</span>
<span class="synPreProc">    </span><span class="synIdentifier">&lt;</span><span class="synStatement">link</span><span class="synIdentifier"> </span><span class="synType">href</span><span class="synIdentifier">=</span><span class="synConstant">&quot;https://fonts.googleapis.com/earlyaccess/sawarabigothic.css&quot;</span><span class="synIdentifier"> </span><span class="synType">rel</span><span class="synIdentifier">=</span><span class="synConstant">&quot;stylesheet&quot;</span><span class="synIdentifier"> /&gt;</span>
<span class="synPreProc">    </span><span class="synIdentifier">&lt;</span><span class="synStatement">link</span><span class="synIdentifier"> </span><span class="synType">href</span><span class="synIdentifier">=</span><span class="synConstant">&quot;{{ asset('css/app.css') }}&quot;</span><span class="synIdentifier"> </span><span class="synType">rel</span><span class="synIdentifier">=</span><span class="synConstant">&quot;stylesheet&quot;</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">head</span><span class="synIdentifier">&gt;</span>
</pre>


<p>フッターに関しても、どこかで使うかもしれないjavascirptを読み込んで置きます。</p>

<p><b>footer.blade.php</b></p>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synComment">&lt;!-- Scripts --&gt;</span>
<span class="synIdentifier">&lt;</span><span class="synStatement">script</span><span class="synIdentifier"> </span><span class="synType">src</span><span class="synIdentifier">=</span><span class="synConstant">&quot;{{ asset('js/app.js') }}&quot;</span><span class="synIdentifier">&gt;&lt;/</span><span class="synStatement">script</span><span class="synIdentifier">&gt;</span>
</pre>


<p>上記header、footerをまとめてレイアウトに含んでおきます。<br/>
こちらは、今回作成するWebサイトは基本的にこちらのレイアウトを継承して作成します。</p>

<p><b>app.blade.php</b></p>

<pre class="code lang-html" data-lang="html" data-unlink>@include('../components/header')
<span class="synIdentifier">&lt;</span><span class="synStatement">body</span><span class="synIdentifier">&gt;</span>
    @yield('content')
    @include('../components/footer')
<span class="synIdentifier">&lt;/</span><span class="synStatement">body</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">html</span><span class="synIdentifier">&gt;</span>
</pre>


<p>そして、こちらが今回さわるスレッド一覧ページです。<br/>
こんな感じにしてみました。</p>

<p><b>index.blade.php</b></p>

<pre class="code lang-php" data-lang="php" data-unlink>@extends('layouts.app')
@section('content')
<span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;container&quot;</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">h1</span><span class="synIdentifier">&gt;</span>This is Thread!<span class="synIdentifier">&lt;/</span><span class="synStatement">h1</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;threads&quot;</span><span class="synIdentifier">&gt;</span>
        @foreach($threads as $thread)
        <span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;thread&quot;</span><span class="synIdentifier">&gt;</span>
            <span class="synIdentifier">&lt;</span><span class="synStatement">h1</span><span class="synIdentifier">&gt;</span> {{ $thread-&gt;title }} <span class="synIdentifier">&lt;/</span><span class="synStatement">h1</span><span class="synIdentifier">&gt;</span>
            <span class="synIdentifier">&lt;</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span> {{ $thread-<span class="synError">&gt;</span>body }} <span class="synIdentifier">&lt;/</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>
        <span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
        <span class="synType">@endforeach</span>
    <span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
<span class="synType">@endsection</span>
</pre>


<p><br/></p>

<h2 id="scsscssを書く">scss(css)を書く</h2>

<p>さて、見た目を整えていくにはスタイルシートを書いていくのですが、せっかくなのでscssで書いていきます。</p>

<p>scssをコンパイルするとcssになります。
(ひどい説明)</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fqiita.com%2Fsasuraisan%2Fitems%2F9a9dfb281cfdf5a12bd3" title="プログラマーから見た、SCSSの正しい(かもしれない)使いかた - Qiita" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://qiita.com/sasuraisan/items/9a9dfb281cfdf5a12bd3">qiita.com</a></cite></p>

<p>pugとhtmlみたいな関係ですね！</p>

<p>きっと、cssが抱えている不便さだっり、問題を解消するためのものだろうと思うのですが、保守を考えてcssを書いたり、複数人で書いたりしたことがないので、いまいちcssの課題みたいなのが見えていないです。</p>

<p>とはいえ、HTMLとCSSっがすごい苦手なのは間違いないので、良いと評判のものは積極的に使っていきたいと思います。</p>

<p><br/></p>

<h3 id="ディレクトリ構成">ディレクトリ構成</h3>

<p>とりあえず以下のような構成でファイルを作成してみました。</p>

<p><b>/resources/assets/sass配下</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>├── app.scss
└── components
    ├── _thread.scss
    └── _variables.scss
</pre>


<p><code>app.scss</code>やら<code>_variables.scss</code>やらはデフォルトで用意されているので、既存のコードをまっさらにして、<code>variable_scss</code>はcomponentsディレクトリ配下に移動しています。</p>

<p><code>_thread.scss</code>は新規で作成したファイルですね。</p>

<p>まずは、<code>_thread.scss</code>を以下ように書いてみます。</p>

<p><b>_thread.scss</b></p>

<pre class="code lang-css" data-lang="css" data-unlink>//threadの一覧をwrapするクラス
<span class="synIdentifier">.threads{</span>
    <span class="synType">display</span>: flex;
    flex-wrap: wrap;
<span class="synIdentifier">}</span>

//threadそのもの
<span class="synIdentifier">.thread{</span>
    <span class="synType">margin</span>: <span class="synConstant">10px</span>;
    <span class="synType">background</span>: $mainColor;
    <span class="synType">color</span>:$subColor;
    <span class="synType">width</span>: <span class="synConstant">300px</span>;
    <span class="synType">height</span>: <span class="synConstant">350px</span>;
<span class="synIdentifier">}</span>
</pre>


<p>せっかくsassを使っているので、サイトのカラーは変数としてまとめて置いておきます。</p>

<p><b>_variables.scss</b></p>

<pre class="code lang-css" data-lang="css" data-unlink>//色
$mainColor: #4517FB;
$subColor: <span class="synIdentifier">#C7FE01</span>;
</pre>


<p>app.scssは上記を束ねるファイルとして以下のように書きます。</p>

<p><b>app.scss</b></p>

<pre class="code lang-css" data-lang="css" data-unlink>//色
//npm install normalize<span class="synIdentifier">.css</span>　でインストールしたものを読み込む
<span class="synComment">@import</span> <span class="synConstant">&quot;~normalize.css&quot;</span>;
//共通で使える変数はここに書く
<span class="synComment">@import</span> <span class="synConstant">&quot;components/variables&quot;</span>;
//Threadページはここに書く
<span class="synComment">@import</span> <span class="synConstant">&quot;components/thread&quot;</span>;

<span class="synStatement">body</span><span class="synIdentifier">{</span>
    <span class="synType">font-family</span>: <span class="synConstant">&quot;Sawarabi Gothic&quot;</span>;
<span class="synIdentifier">}</span>
</pre>


<p><code>@import "~normalize.css"</code>はnode.jsのパッケージマネージャ「npm」で normalize.cssをインストールしておくと、@importで読み込めるみたい。<br/>
でも、チルダ(~)の意味とかがいまいちわからないんだなぁ。</p>

<p><br/></p>

<h3 id="scssをcssにコンパイルする">scssをcssにコンパイルする</h3>

<p>さきほど、scssをコンパイルするとcssになると記載しました。<br/>
ということはコンパイラが必要になります。</p>

<p>えー、めんどくさいと思ったあなた。大丈夫です。Laravelに標準で用意されています。</p>

<p>プロジェクトのルートディレクトリでnpmのコマンドを叩きましょう。</p>

<p><b>コンパイラのインストール</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ sudo npm install
</pre>


<p>ルートディレクト配下にある`package.json'に書かれているjavascirptの便利なパッケージたちが、'node_modules'配下にインストールされていきます。<br/>
scssをコンパイルするためのコンパイラもその中に入ってます。</p>

<p>ちょっと蛇足ですが、「scss　コンパイル」とかで検索するといろいろでてくるかと思います。</p>

<p>scssをコンパイルするだけであれば以下のようにシンプルなコマンドで使えるパッケージがあったりもします。</p>

<p><b>コンパイルするイメージ</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>//hoge.scss がhoge.cssになるかんじ
$ saas hoge.scss
</pre>


<p>一方、Laravelが用意しているものは、laravel-mixと呼ばれるものが用意されています。</p>

<p>以下は、app.scssをコンパイルするための<code>webpack.mix.js</code>になるます。</p>

<p><b>webpack.mix.js</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synIdentifier">let</span> mix = require(<span class="synConstant">'laravel-mix'</span>);

<span class="synComment">//app.scssをpublic/css配下にapp.cssとして出力するよ  </span>
mix.sass(<span class="synConstant">'resources/assets/sass/app.scss'</span>, <span class="synConstant">'public/css'</span>);
</pre>


<p>こんな感じに<code>webpack.mix.js</code>を書いたら、以下のコマンドでコンパイルします。</p>

<p><b>コンパイル</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>npm run dev
</pre>


<p>こうすることで、app.cssが生成されたかと思います。</p>

<p>とりあえず画面はこんな感じになりました。</p>

<p><figure class="figure-image figure-image-fotolife"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20171129/20171129223620.png" alt="f:id:konoemario:20171129223620p:plain" title="f:id:konoemario:20171129223620p:plain" class="hatena-fotolife" itemprop="image"></span><figcaption>/threadにアクセスした場合</figcaption></figure></p>

<p>今回はTDDとはまったく関係のない話でしたが、正直なところなにがなんだかわからないよ！という感想を持ちますね。</p>

<p>次回に続きます。</p>

<h2 id="ここまでのソース">ここまでのソース</h2>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2FRyomasao%2Fforum%2Ftree%2Ftdd3" title="Ryomasao/forum" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://github.com/Ryomasao/forum/tree/tdd3">github.com</a></cite></p>

-----
--------
AUTHOR: konoemario
TITLE: Laravelで始めるTDD開発(2)：テストデータをつくる
BASENAME: 2017/11/27/222921
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 11/27/2017 22:29:21
CATEGORY: Laravel
CATEGORY: プログラム
IMAGE: https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20171127/20171127221851.png
-----
BODY:
<h1 id="前回からの続き">前回からの続き</h1>

<p>前回は、Threadのテストデータを作成する際に、固定のデータしかつくれないよ、というところで終わってました。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=http%3A%2F%2Fwww.tohuandkonsome.site%2Fentry%2F2017%2F11%2F25%2F153613" title="Laravelで始めるTDD開発 (1) - 豆腐とコンソメ" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://www.tohuandkonsome.site/entry/2017/11/25/153613">www.tohuandkonsome.site</a></cite></p>

<ul class="table-of-contents">
    <li><a href="#前回からの続き">前回からの続き</a><ul>
            <li><a href="#UserFactoryphpを修正する">UserFactory.phpを修正する</a></li>
            <li><a href="#話を戻してテストコード">話を戻してテストコード</a></li>
        </ul>
    </li>
    <li><a href="#実装を書く">実装を書く</a><ul>
            <li><a href="#コントローラーの修正">コントローラーの修正</a></li>
            <li><a href="#indexbladephpの修正">index.blade.phpの修正</a></li>
            <li><a href="#テストコードの実行">テストコードの実行</a></li>
            <li><a href="#ここまでのソース">ここまでのソース</a></li>
        </ul>
    </li>
</ul>

<p><br/></p>

<h2 id="UserFactoryphpを修正する">UserFactory.phpを修正する</h2>

<p><b>前回のUserFactory.php</b></p>

<pre class="code lang-php" data-lang="php" data-unlink><span class="synSpecial">&lt;?php</span>
<span class="synStatement">$</span><span class="synIdentifier">factory</span><span class="synType">-&gt;</span>define<span class="synSpecial">(</span>App\Thread<span class="synStatement">::</span><span class="synType">class</span>, <span class="synPreProc">function</span> <span class="synSpecial">(</span>Faker <span class="synStatement">$</span><span class="synIdentifier">faker</span><span class="synSpecial">)</span> <span class="synSpecial">{</span>

    <span class="synStatement">return</span> <span class="synSpecial">[</span>
        '<span class="synConstant">user_id</span>' <span class="synStatement">=&gt;</span> <span class="synConstant">1</span>,
        '<span class="synConstant">title</span>' <span class="synStatement">=&gt;</span> &quot;<span class="synConstant">ピンキーのかわいさについて</span>&quot;,
        '<span class="synConstant">body</span>' <span class="synStatement">=&gt;</span> &quot;<span class="synConstant">動いているところがいいよね</span>&quot; 
    <span class="synSpecial">]</span>;
<span class="synSpecial">})</span>;
</pre>


<p>まず、Threadに持たせるuser_idは、Userデータが存在するuser_idを設定するようにします。</p>

<p>これだけ聞くと、自分だったら以下のようにuser_idの部分にデータベースからUserの情報をとってくることをしてたかもしれません。<br/>
<code>\App\User::find(1)-&gt;id</code>ってなんぞって思われ方は無視しても特に問題はないです！</p>

<p>言いたかったことは、存在するUserのidをThreadのuser_idに設定したいのであれば、存在するUserの情報をデータベースからとってきれ、それを設定する、ということをするという方法をとってただろうなぁということです。</p>

<p><b>UserFactory.php</b></p>

<pre class="code lang-php" data-lang="php" data-unlink><span class="synSpecial">&lt;?php</span>
<span class="synStatement">$</span><span class="synIdentifier">factory</span><span class="synType">-&gt;</span>define<span class="synSpecial">(</span>App\Thread<span class="synStatement">::</span><span class="synType">class</span>, <span class="synPreProc">function</span> <span class="synSpecial">(</span>Faker <span class="synStatement">$</span><span class="synIdentifier">faker</span><span class="synSpecial">)</span> <span class="synSpecial">{</span>

    <span class="synStatement">return</span> <span class="synSpecial">[</span>
        '<span class="synConstant">user_id</span>' <span class="synStatement">=&gt;</span> \App\User<span class="synStatement">::</span>find<span class="synSpecial">(</span><span class="synConstant">1</span><span class="synSpecial">)</span><span class="synType">-&gt;</span>id,
        '<span class="synConstant">title</span>' <span class="synStatement">=&gt;</span> &quot;<span class="synConstant">ピンキーのかわいさについて</span>&quot;,
        '<span class="synConstant">body</span>' <span class="synStatement">=&gt;</span> &quot;<span class="synConstant">動いているところがいいよね</span>&quot; 
    <span class="synSpecial">]</span>;
<span class="synSpecial">})</span>;
</pre>


<p>一方、頼りにしているLaracastでは、こうしていました。</p>

<p><b>UserFactory.php(抜粋)</b></p>

<pre class="code lang-php" data-lang="php" data-unlink><span class="synSpecial">&lt;?php</span>
<span class="synStatement">$</span><span class="synIdentifier">factory</span><span class="synType">-&gt;</span>define<span class="synSpecial">(</span>App\Thread<span class="synStatement">::</span><span class="synType">class</span>, <span class="synPreProc">function</span> <span class="synSpecial">(</span>Faker <span class="synStatement">$</span><span class="synIdentifier">faker</span><span class="synSpecial">)</span> <span class="synSpecial">{</span>

    <span class="synStatement">return</span> <span class="synSpecial">[</span>
        '<span class="synConstant">user_id</span>' <span class="synStatement">=&gt;</span> factory<span class="synSpecial">(</span>'<span class="synConstant">App\User</span>'<span class="synSpecial">)</span><span class="synType">-&gt;</span>create<span class="synSpecial">()</span><span class="synType">-&gt;</span>id,
        '<span class="synConstant">title</span>' <span class="synStatement">=&gt;</span> &quot;<span class="synConstant">ピンキーのかわいさについて</span>&quot;,
        '<span class="synConstant">body</span>' <span class="synStatement">=&gt;</span> &quot;<span class="synConstant">動いているところがいいよね</span>&quot; 
    <span class="synSpecial">]</span>;
<span class="synSpecial">})</span>;
</pre>


<p>存在しているUserのuser_idをセットするという発想ではなく、Threadのテストデータ作成の際に、Userをつくっちゃって、そのidを設定すればいいじゃないという発想ですね。</p>

<p>すごい！<br/>
（ただ、1対多のリレーションのデータを作成したいときにはどうするんだろう、とふと思いました)</p>

<p>さて、これで作成されるThreadのテストデータには、必ず対応するUserがいることになります。</p>

<p>せっかくなので<code>title</code>と<code>body</code>もランダムな文字列が設定されるようにしちゃいましょう(残念ですが)。</p>

<p><b>UserFactory.php(抜粋)</b></p>

<pre class="code lang-php" data-lang="php" data-unlink><span class="synSpecial">&lt;?php</span>
<span class="synStatement">$</span><span class="synIdentifier">factory</span><span class="synType">-&gt;</span>define<span class="synSpecial">(</span>App\Thread<span class="synStatement">::</span><span class="synType">class</span>, <span class="synPreProc">function</span> <span class="synSpecial">(</span>Faker <span class="synStatement">$</span><span class="synIdentifier">faker</span><span class="synSpecial">)</span> <span class="synSpecial">{</span>

    <span class="synStatement">return</span> <span class="synSpecial">[</span>
        '<span class="synConstant">user_id</span>' <span class="synStatement">=&gt;</span> factory<span class="synSpecial">(</span>'<span class="synConstant">App\User</span>'<span class="synSpecial">)</span><span class="synType">-&gt;</span>create<span class="synSpecial">()</span><span class="synType">-&gt;</span>id,
        '<span class="synConstant">title</span>' <span class="synStatement">=&gt;</span> <span class="synStatement">$</span><span class="synIdentifier">faker</span><span class="synType">-&gt;</span>sentence,
        '<span class="synConstant">body</span>' <span class="synStatement">=&gt;</span>  <span class="synStatement">$</span><span class="synIdentifier">faker</span><span class="synType">-&gt;</span>paragraph 
    <span class="synSpecial">]</span>;
<span class="synSpecial">})</span>;
</pre>


<p><code>Faker</code>というクラスのメソッドでいい感じにデータを作成することができるみたいです。<br/>
こちらのFakerなんですが、githubにどんなメソッドがあって、どんなデータが作成されるかが書いてあります。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2Ffzaninotto%2FFaker" title="fzaninotto/Faker" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://github.com/fzaninotto/Faker">github.com</a></cite></p>

<p>日本語用のFakerもあったりするみたいなのですが、こちらは試せてません。</p>

<p><br/></p>

<h2 id="話を戻してテストコード">話を戻してテストコード</h2>

<p>回を跨いでしまったので、何をやってたか忘れかけてましたが、テストコードです。</p>

<p>前回はこんな感じで終わってましたね。</p>

<p><b>ThreadTest.php</b></p>

<pre class="code lang-php" data-lang="php" data-unlink><span class="synSpecial">&lt;?php</span>

    <span class="synComment">/**</span>
<span class="synComment">     * すべてのユーザーは、/threadにアクセスすると、Threadの一覧が見えること</span>
<span class="synComment">     *</span>
<span class="synComment">     * </span><span class="synPreProc">@return </span><span class="synComment">void</span>
<span class="synComment">     */</span>
    <span class="synType">public</span> <span class="synPreProc">function</span> test_all_user_can_view_thread<span class="synSpecial">()</span>
    <span class="synSpecial">{</span>
        <span class="synComment">//Threadがあって</span>
        <span class="synStatement">$</span><span class="synIdentifier">thread</span> <span class="synStatement">=</span> <span class="synStatement">???</span>
        
        <span class="synComment">//Threadの一覧を表示するURLにアクセスすると</span>
        <span class="synStatement">$</span><span class="synIdentifier">response</span> <span class="synStatement">=</span> <span class="synStatement">$</span><span class="synIdentifier">this</span><span class="synType">-&gt;</span>get<span class="synSpecial">(</span>'<span class="synConstant">/thread</span>'<span class="synSpecial">)</span>;
        
        <span class="synComment">//Threadの内容が見えるんだよ</span>
        <span class="synStatement">$</span><span class="synIdentifier">response</span><span class="synType">-&gt;</span>assertSee<span class="synSpecial">(</span><span class="synStatement">$</span><span class="synIdentifier">thread</span><span class="synType">-&gt;</span>body<span class="synSpecial">)</span>;

    <span class="synSpecial">}</span>
</pre>


<p>この<code>ThreadTest.php</code>を以下のように修正します。</p>

<p><b>ThreadTest.php</b></p>

<pre class="code lang-php" data-lang="php" data-unlink><span class="synSpecial">&lt;?php</span>

    <span class="synComment">/**</span>
<span class="synComment">     * すべてのユーザーは、/threadにアクセスすると、Threadの一覧が見えること</span>
<span class="synComment">     *</span>
<span class="synComment">     * </span><span class="synPreProc">@return </span><span class="synComment">void</span>
<span class="synComment">     */</span>
    <span class="synType">public</span> <span class="synPreProc">function</span> test_all_user_can_view_thread<span class="synSpecial">()</span>
    <span class="synSpecial">{</span>
        <span class="synComment">//Threadがあって</span>
        <span class="synStatement">$</span><span class="synIdentifier">thread</span> <span class="synStatement">=</span> factory<span class="synSpecial">(</span>'<span class="synConstant">App\Thread</span>'<span class="synSpecial">)</span><span class="synType">-&gt;</span>create<span class="synSpecial">()</span>;

        <span class="synComment">//Threadの一覧を表示するURLにアクセスすると</span>
        <span class="synStatement">$</span><span class="synIdentifier">response</span> <span class="synStatement">=</span> <span class="synStatement">$</span><span class="synIdentifier">this</span><span class="synType">-&gt;</span>get<span class="synSpecial">(</span>'<span class="synConstant">/thread</span>'<span class="synSpecial">)</span>;
        
        <span class="synComment">//Threadの内容が見えるんだよ</span>
        <span class="synStatement">$</span><span class="synIdentifier">response</span><span class="synType">-&gt;</span>assertSee<span class="synSpecial">(</span><span class="synStatement">$</span><span class="synIdentifier">thread</span><span class="synType">-&gt;</span>body<span class="synSpecial">)</span>;

    <span class="synSpecial">}</span>
</pre>


<p>くどいようですが、<code>assertSee</code>で$thread->bodyの文字列がレスポンスの中にあるかを確認しています。</p>

<p>さて、このテストコードをクリアするために、実装を書いていきましょう。</p>

<p><br/></p>

<h1 id="実装を書く">実装を書く</h1>

<p>ここでは、<code>/thread</code>にアクセスしにきたときの制御を書く<code>ThreadController.php</code>と画面に描画されるHTMLの素となる<code>index.blade.php</code>を書いていきます。</p>

<p><br/></p>

<h2 id="コントローラーの修正">コントローラーの修正</h2>

<p>コントローラーはこんな感じになります。</p>

<p><b>ThreadController.php</b></p>

<pre class="code lang-php" data-lang="php" data-unlink><span class="synSpecial">&lt;?php</span>

<span class="synType">namespace</span> App\Http\Controllers;

<span class="synPreProc">use</span> App\Thread;
<span class="synPreProc">use</span> Illuminate\Http\Request;

<span class="synType">class</span> ThreadController <span class="synType">extends</span> Controller
<span class="synSpecial">{</span>
    <span class="synType">public</span> <span class="synPreProc">function</span> index<span class="synSpecial">(</span>Thread <span class="synStatement">$</span><span class="synIdentifier">thread</span><span class="synSpecial">)</span>
    <span class="synSpecial">{</span>
        <span class="synStatement">$</span><span class="synIdentifier">threads</span> <span class="synStatement">=</span> <span class="synStatement">$</span><span class="synIdentifier">thread</span><span class="synType">-&gt;</span>all<span class="synSpecial">()</span>;
        <span class="synStatement">return</span> view<span class="synSpecial">(</span>'<span class="synConstant">thread.index</span>', <span class="synStatement">compact</span><span class="synSpecial">(</span>'<span class="synConstant">threads</span>'<span class="synSpecial">))</span>;
    <span class="synSpecial">}</span>

<span class="synSpecial">}</span>
</pre>


<p><code>Thread</code>クラスはメソッドの中でnewして、インスタンス化してももちろんいいはず。</p>

<p>ただ、Laravelは引数にクラスを書いてあげると、それをインスタンス化して渡してくれるという機能を備えているので、ここでは引数に指定しているよ。</p>

<p>この引数に指定してインスタンス化くれることを「依存性の注入」みたいな表現で書かれていたりする。(間違ってたらごめんよ！)</p>

<p>依存性の注入を紐解けば、DIコンテナみたいな話がでてくるんだけど、このへんんお有用性があんまりわかってないので、しっくりきたらまた書こうと思うんだ。<br/>
（どうもクラス間の依存性をなくすことでテストしやすいコードが〜みたいな話なので、今回の学習を通して理解できれば幸せ)</p>

<p><br/></p>

<h2 id="indexbladephpの修正">index.blade.phpの修正</h2>

<p><code>/resources/views</code>配下に<code>thread</code>ディレクトリを作成して、<code>index.blade.php</code>を作成するよ。</p>

<p><b>index.blade.php</b></p>

<pre class="code lang-php" data-lang="php" data-unlink><span class="synIdentifier">&lt;</span><span class="synStatement">h1</span><span class="synIdentifier">&gt;</span>This is Thread!<span class="synIdentifier">&lt;/</span><span class="synStatement">h1</span><span class="synIdentifier">&gt;</span>

<span class="synIdentifier">&lt;</span><span class="synStatement">ul</span><span class="synIdentifier">&gt;</span>
    @foreach($threads as $thread)
        <span class="synIdentifier">&lt;</span><span class="synStatement">li</span><span class="synIdentifier">&gt;</span>{{ $thread-<span class="synError">&gt;</span>title }}<span class="synIdentifier">&lt;/</span><span class="synStatement">li</span><span class="synIdentifier">&gt;</span>
        <span class="synIdentifier">&lt;</span><span class="synStatement">li</span><span class="synIdentifier">&gt;</span>{{ $thread-<span class="synError">&gt;</span>body }}<span class="synIdentifier">&lt;/</span><span class="synStatement">li</span><span class="synIdentifier">&gt;</span>
        <span class="synIdentifier">&lt;</span><span class="synStatement">hr</span><span class="synIdentifier">/&gt;</span>
    <span class="synType">@endforeach</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">ul</span><span class="synIdentifier">&gt;</span>
</pre>


<p>ここでは最小限のコードにするよ。</p>

<p><br/></p>

<h2 id="テストコードの実行">テストコードの実行</h2>

<p>さあ、これでテストコードを実行してみよう。</p>

<p><b>テストコードの実行</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ phpunit
PHPUnit 6.4.4 by Sebastian Bergmann and contributors.

.....                                                               <span class="synConstant">5</span> / <span class="synConstant">5</span> <span class="synPreProc">(</span><span class="synConstant">100</span><span class="synSpecial">%</span><span class="synPreProc">)</span>

Time: 1.47 seconds, Memory: 14.00MB

OK <span class="synPreProc">(</span><span class="synConstant">5</span><span class="synSpecial"> tests, </span><span class="synConstant">5</span><span class="synSpecial"> assertions</span><span class="synPreProc">)</span>
</pre>


<p>無事、通りましたね！</p>

<p>試しにブラウザで<code>/thread</code>にアクセスしてみると 、こんな画面が表示されました。</p>

<p><figure class="figure-image figure-image-fotolife"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20171127/20171127221851.png" alt="f:id:konoemario:20171127221851p:plain" title="f:id:konoemario:20171127221851p:plain" class="hatena-fotolife" itemprop="image"></span><figcaption>/threadにアクセスした場合</figcaption></figure></p>

<p>せっかくなので、テストコードについても、<code>thread-&gt;body</code>だけではなく、`thread->title'も追加しておきました。</p>

<pre class="code lang-php" data-lang="php" data-unlink><span class="synSpecial">&lt;?php</span>
    <span class="synComment">/**</span>
<span class="synComment">     * すべてのユーザーは、/threadにアクセスすると、Threadの一覧が見えること</span>
<span class="synComment">     *</span>
<span class="synComment">     * </span><span class="synPreProc">@return </span><span class="synComment">void</span>
<span class="synComment">     */</span>
    <span class="synType">public</span> <span class="synPreProc">function</span> test_all_user_can_view_thread<span class="synSpecial">()</span>
    <span class="synSpecial">{</span>
        <span class="synComment">//Threadがあって</span>
        <span class="synStatement">$</span><span class="synIdentifier">thread</span> <span class="synStatement">=</span> factory<span class="synSpecial">(</span>'<span class="synConstant">App\Thread</span>'<span class="synSpecial">)</span><span class="synType">-&gt;</span>create<span class="synSpecial">()</span>;

        <span class="synComment">//Threadの一覧を表示するURLにアクセスすると</span>
        <span class="synStatement">$</span><span class="synIdentifier">response</span> <span class="synStatement">=</span> <span class="synStatement">$</span><span class="synIdentifier">this</span><span class="synType">-&gt;</span>get<span class="synSpecial">(</span>'<span class="synConstant">/thread</span>'<span class="synSpecial">)</span>;
        
        <span class="synComment">//Threadの内容が見えるんだよ</span>
        <span class="synStatement">$</span><span class="synIdentifier">response</span><span class="synType">-&gt;</span>assertSee<span class="synSpecial">(</span><span class="synStatement">$</span><span class="synIdentifier">thread</span><span class="synType">-&gt;</span>body<span class="synSpecial">)</span>
                 <span class="synType">-&gt;</span>assertSee<span class="synSpecial">(</span><span class="synStatement">$</span><span class="synIdentifier">thread</span><span class="synType">-&gt;</span><span class="synIdentifier">title</span><span class="synSpecial">)</span>;
    <span class="synSpecial">}</span>
</pre>


<h2 id="ここまでのソース">ここまでのソース</h2>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2FRyomasao%2Fforum%2Ftree%2Ftdd2" title="Ryomasao/forum" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://github.com/Ryomasao/forum/tree/tdd2">github.com</a></cite></p>

-----
--------
AUTHOR: konoemario
TITLE: Laravelで始めるTDD開発 (1):簡単なテストコードを書く
BASENAME: 2017/11/25/153613
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 11/25/2017 15:36:13
CATEGORY: Laravel
CATEGORY: プログラム
IMAGE: https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20171121/20171121211045.png
-----
BODY:
<h1 id="前回からの続き">前回からの続き</h1>

<p>前回からの続きになります。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=http%3A%2F%2Fwww.tohuandkonsome.site%2Fentry%2F2017%2F11%2F20%2F233324" title="Laravelで始めるTDD開発：準備 - 豆腐とコンソメ" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://www.tohuandkonsome.site/entry/2017/11/20/233324">www.tohuandkonsome.site</a></cite></p>

<p>書いていて、どの層向けのなんのための記事なのか、という疑問が何度も頭をよぎります。<br/>
Laravelはものっそいいろんな機能があるせいか、テストコードを書くに行き着くまでにすごい時間がかかっちゃいますね。</p>

<p>そもそも、テストコードを書きたいという方は、Laravelのことをある程度わかった方なんじゃないかとすれば、この記事の9割9分の情報は不要なものになるなぁと思ったりします。<br/>
さらにいえば本当に必要な要素だったりといったものは、まったく書けなかったりするので、たちが悪いですね。</p>

<p>と、そんなことを考えているのですが最終的には自分のためだと思うのですよ！</p>

<p>書くことによって自分の理解がより進めばいいなと。</p>

<ul class="table-of-contents">
    <li><a href="#前回からの続き">前回からの続き</a><ul>
            <li><a href="#threadにアクセスできることを確認する">/threadにアクセスできることを確認する</a><ul>
                    <li><a href="#ThreadTestphpを作成">ThreadTest.phpを作成</a></li>
                    <li><a href="#ThreadControllerの作成とwebphpの修正">ThreadControllerの作成とweb.phpの修正</a></li>
                    <li><a href="#テストコードを実行してみる">テストコードを実行してみる</a></li>
                </ul>
            </li>
            <li><a href="#Threadが見えることの確認">Threadが見えることの確認</a><ul>
                    <li><a href="#assertSee">assertSee</a></li>
                </ul>
            </li>
            <li><a href="#テストコード修正">テストコード修正</a></li>
            <li><a href="#factoryファクトリを使う">factory(ファクトリ)を使う</a><ul>
                    <li><a href="#Threadモデルの作成">Threadモデルの作成</a></li>
                    <li><a href="#Threadマイグレーションファイルの修正">Threadマイグレーションファイルの修正</a></li>
                    <li><a href="#factoryを書いていこう">factoryを書いていこう</a></li>
                </ul>
            </li>
        </ul>
    </li>
</ul>

<h2 id="threadにアクセスできることを確認する">/threadにアクセスできることを確認する</h2>

<p>とりあえずコードを書くときには、何かしらの仕様があるかと思うので、改めてそれを確認してみる。</p>

<ul>
<li><p>「ドメイン名/thread」にアクセスすると、スレッド(Thread)の一覧が参照できる。</p></li>
<li><p>スレッドの一覧は誰でも参照できる</p></li>
</ul>


<p><figure class="figure-image figure-image-fotolife"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20171121/20171121211045.png" alt="f:id:konoemario:20171121211045p:plain" title="f:id:konoemario:20171121211045p:plain" class="hatena-fotolife" itemprop="image"></span><figcaption>/threadにアクセスすると表示される</figcaption></figure></p>

<p><br/></p>

<h3 id="ThreadTestphpを作成">ThreadTest.phpを作成</h3>

<p>Laravelの<code>/tests/Feature</code>ディレクトリ配下に、<code>ThreadTest.php</code>を作成する。</p>

<p>artisanで作成すればpathは気にしなくていいので簡単。</p>

<p><b>ThreadTest.phpを作成</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>php artisan make:<span class="synStatement">test</span> ThreadTest
</pre>


<p>また、ファイル名にTestをつけないと、phpunitが検知してくれないので気をつけます。</p>

<p>phpunit.xmlとかでいろいろと変えれそうだけれども一旦置いておくよ！</p>

<p>とりあえず、こんなコードが出力されたはず。</p>

<p><b>ThreadTest.php</b></p>

<pre class="code lang-php" data-lang="php" data-unlink><span class="synSpecial">&lt;?php</span>

<span class="synType">namespace</span> Tests\Feature;

<span class="synPreProc">use</span> Tests\TestCase;
<span class="synPreProc">use</span> Illuminate\Foundation\Testing\RefreshDatabase;

<span class="synType">class</span> ThreadTest <span class="synType">extends</span> TestCase
<span class="synSpecial">{</span>
    <span class="synComment">/**</span>
<span class="synComment">     * A basic test example.</span>
<span class="synComment">     *</span>
<span class="synComment">     * </span><span class="synPreProc">@return </span><span class="synComment">void</span>
<span class="synComment">     */</span>
    <span class="synType">public</span> <span class="synPreProc">function</span> testExample<span class="synSpecial">()</span>
    <span class="synSpecial">{</span>
        <span class="synStatement">$</span><span class="synIdentifier">this</span><span class="synType">-&gt;</span>assertTrue<span class="synSpecial">(</span><span class="synConstant">true</span><span class="synSpecial">)</span>;
    <span class="synSpecial">}</span>
<span class="synSpecial">}</span>
</pre>


<p>これについて、挙動を記載してみよう。</p>

<p>とりあえず、こんな感じで書いてみたよ。</p>

<pre class="code lang-php" data-lang="php" data-unlink><span class="synSpecial">&lt;?php</span>
<span class="synType">class</span> ThreadTest <span class="synType">extends</span> TestCase
<span class="synSpecial">{</span>
    <span class="synComment">/**</span>
<span class="synComment">     * すべてのユーザーは/threadを参照できること</span>
<span class="synComment">     *</span>
<span class="synComment">     * </span><span class="synPreProc">@return </span><span class="synComment">void</span>
<span class="synComment">     */</span>
    <span class="synType">public</span> <span class="synPreProc">function</span> test_all_user_can_view_thread<span class="synSpecial">()</span>
    <span class="synSpecial">{</span>
        <span class="synComment">// getで/threadにアクセスする</span>
        <span class="synStatement">$</span><span class="synIdentifier">response</span> <span class="synStatement">=</span> <span class="synStatement">$</span><span class="synIdentifier">this</span><span class="synType">-&gt;</span>get<span class="synSpecial">(</span>'<span class="synConstant">/thread</span>'<span class="synSpecial">)</span>;
       <span class="synComment">// そんときのHTTPステータスコードは、200 </span>
       <span class="synStatement">$</span><span class="synIdentifier">response</span><span class="synType">-&gt;</span>assertStatus<span class="synSpecial">(</span><span class="synConstant">200</span><span class="synSpecial">)</span> ;

    <span class="synSpecial">}</span>
<span class="synSpecial">}</span>
</pre>


<p>これを満たすコードを書いてみる。</p>

<p></br></p>

<h3 id="ThreadControllerの作成とwebphpの修正">ThreadControllerの作成とweb.phpの修正</h3>

<p>artisanでコントローラーを作成するよ。</p>

<p><b>ThreadControllerの作成</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ php artisan make:controller ThreadController
</pre>


<p><code>ThreadController.php</code>を適当に書いてっと、</p>

<p><b>ThreadController.php</b></p>

<pre class="code lang-php" data-lang="php" data-unlink><span class="synSpecial">&lt;?php</span>
<span class="synPreProc">use</span> App\Thread;
<span class="synPreProc">use</span> Illuminate\Http\Request;

<span class="synType">class</span> ThreadController <span class="synType">extends</span> Controller
<span class="synSpecial">{</span>
    <span class="synType">public</span> <span class="synPreProc">function</span> index<span class="synSpecial">()</span>
    <span class="synSpecial">{</span>
       <span class="synStatement">return</span><span class="synSpecial">(</span>'<span class="synConstant">this is Thread</span>'<span class="synSpecial">)</span>;
    <span class="synSpecial">}</span>

<span class="synSpecial">}</span>
</pre>


<p>ルーティングの定義である<code>web.php</code>に定義してあげるっと。</p>

<p><b>web.phpの修正</b></p>

<pre class="code lang-php" data-lang="php" data-unlink><span class="synSpecial">&lt;?php</span>


Route<span class="synStatement">::</span>get<span class="synSpecial">(</span>'<span class="synConstant">/</span>', <span class="synPreProc">function</span> <span class="synSpecial">()</span> <span class="synSpecial">{</span>
    <span class="synStatement">return</span> view<span class="synSpecial">(</span>'<span class="synConstant">welcome</span>'<span class="synSpecial">)</span>;
<span class="synSpecial">})</span>;

<span class="synComment">//Threadの一覧を表示する</span>
Route<span class="synStatement">::</span>get<span class="synSpecial">(</span>'<span class="synConstant">/thread</span>', '<span class="synConstant">ThreadController@index</span>'<span class="synSpecial">)</span>;
</pre>


<p>テストコードを実行する前にあれだけれども、ブラウザで<code>/thread</code>にアクセスしてみると、こんな感じに表示されてるね。</p>

<p>Chromeのデベロッパーツールでみるとステータスコード200で返ってきてることも確認できるね！</p>

<p><figure class="figure-image figure-image-fotolife"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20171124/20171124213116.png" alt="f:id:konoemario:20171124213116p:plain" title="f:id:konoemario:20171124213116p:plain" class="hatena-fotolife" itemprop="image"></span><figcaption>/threadにアクセスした場合</figcaption></figure></p>

<p>知っている人には当たり前の話かもしれないけれども、コントローラーで適当なメッセージをreturnしても、レスポンスヘッダーをちゃんとつけて返したりするのはすごいなぁと改めて思ったりしました。</p>

<p> <br/></p>

<h3 id="テストコードを実行してみる">テストコードを実行してみる</h3>

<p>それではテストコードを実行してみよう。</p>

<p><b>テストコードの実行</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ phpunit 
PHPUnit 6.4.4 by Sebastian Bergmann and contributors.

....                                                                <span class="synConstant">4</span> / <span class="synConstant">4</span> <span class="synPreProc">(</span><span class="synConstant">100</span><span class="synSpecial">%</span><span class="synPreProc">)</span>

Time: 1.19 seconds, Memory: 10.00MB

OK <span class="synPreProc">(</span><span class="synConstant">4</span><span class="synSpecial"> tests, </span><span class="synConstant">4</span><span class="synSpecial"> assertions</span><span class="synPreProc">)</span>
</pre>


<p>「OK」っていってるので大丈夫そうですね！<br/>
4testsとかになってるのは、デフォルトで用意されているExampleTestがカウントされているみたいですね。</p>

<p><br/></p>

<h2 id="Threadが見えることの確認">Threadが見えることの確認</h2>

<p>さきほどは/threadにアクセスするとステータスコードが200だぜ！っていうテストをクリアすることができました。</p>

<p>次はもう一歩先に進んで、/threadにアクセスすると、Thread(トピック)の一覧が見えるってことを確認していきましょう。</p>

<p>テストコードを書いてみます。</p>

<p><b>TestThread.php</b></p>

<pre class="code lang-php" data-lang="php" data-unlink><span class="synSpecial">&lt;?php</span>
<span class="synComment">/**</span>
<span class="synComment">     * すべてのユーザーは/threadを参照できること</span>
<span class="synComment">     *</span>
<span class="synComment">     * </span><span class="synPreProc">@return </span><span class="synComment">void</span>
<span class="synComment">     */</span>
    <span class="synType">public</span> <span class="synPreProc">function</span> test_all_user_can_access_thread<span class="synSpecial">()</span>
    <span class="synSpecial">{</span>
        <span class="synStatement">$</span><span class="synIdentifier">response</span> <span class="synStatement">=</span> <span class="synStatement">$</span><span class="synIdentifier">this</span><span class="synType">-&gt;</span>get<span class="synSpecial">(</span>'<span class="synConstant">/thread</span>'<span class="synSpecial">)</span>;
        <span class="synStatement">$</span><span class="synIdentifier">response</span><span class="synType">-&gt;</span>assertStatus<span class="synSpecial">(</span><span class="synConstant">200</span><span class="synSpecial">)</span> ;

    <span class="synSpecial">}</span>

    <span class="synComment">/**</span>
<span class="synComment">     * すべてのユーザーは、/threadにアクセスすると、Threadの一覧が見えること</span>
<span class="synComment">     *</span>
<span class="synComment">     * </span><span class="synPreProc">@return </span><span class="synComment">void</span>
<span class="synComment">     */</span>
    <span class="synType">public</span> <span class="synPreProc">function</span> test_all_user_can_view_thread<span class="synSpecial">()</span>
    <span class="synSpecial">{</span>
        <span class="synStatement">$</span><span class="synIdentifier">response</span> <span class="synStatement">=</span> <span class="synStatement">$</span><span class="synIdentifier">this</span><span class="synType">-&gt;</span>get<span class="synSpecial">(</span>'<span class="synConstant">/thread</span>'<span class="synSpecial">)</span>;
        <span class="synStatement">$</span><span class="synIdentifier">response</span><span class="synType">-&gt;</span>assertSee<span class="synSpecial">(</span>'<span class="synConstant">this is Thread</span>'<span class="synSpecial">)</span>;

    <span class="synSpecial">}</span>
</pre>


<p>threadの一覧が見えること、というテストコードを作成しました。<br/>
メソッド名を変更しているので注意してください。</p>

<p>新しく<code>aseertSee</code>というメソッドがでてきましたね。</p>

<p></br></p>

<h4 id="assertSee">assertSee</h4>

<p>assertSeeが何者なのかということなのですが、Laravelのソースを見てみると、以下のようにPHPUnitの<code>assertContains</code>の機能をラッパーしたものであることがわかりますね。</p>

<p>細かいことはさておき、クライアントに返すレスポンスの中に、引数で与えられた<code>$value</code>が存在するかどうかを確認してくれる、というものでしょうか。</p>

<pre class="code lang-php" data-lang="php" data-unlink><span class="synSpecial">&lt;?php</span>
    <span class="synComment">/**</span>
<span class="synComment">     * Assert that the given string is contained within the response.</span>
<span class="synComment">     *</span>
<span class="synComment">     * </span><span class="synPreProc">@param  </span><span class="synComment">string  $value</span>
<span class="synComment">     * </span><span class="synPreProc">@return </span><span class="synComment">$this</span>
<span class="synComment">     */</span>
    <span class="synType">public</span> <span class="synPreProc">function</span> assertSee<span class="synSpecial">(</span><span class="synStatement">$</span><span class="synIdentifier">value</span><span class="synSpecial">)</span>
    <span class="synSpecial">{</span>
        PHPUnit<span class="synStatement">::</span>assertContains<span class="synSpecial">(</span><span class="synStatement">$</span><span class="synIdentifier">value</span>, <span class="synStatement">$</span><span class="synIdentifier">this</span><span class="synType">-&gt;</span>getContent<span class="synSpecial">())</span>;

        <span class="synStatement">return</span> <span class="synStatement">$</span><span class="synIdentifier">this</span>;
    <span class="synSpecial">}</span>
</pre>


<p>とりあえず、今の状態で<code>phpunit</code>を実行してみましょう。</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ phpunit 
PHPUnit 6.4.4 by Sebastian Bergmann and contributors.

.....                                                               <span class="synConstant">5</span> / <span class="synConstant">5</span> <span class="synPreProc">(</span><span class="synConstant">100</span><span class="synSpecial">%</span><span class="synPreProc">)</span>

Time: 1.21 seconds, Memory: 10.00MB

OK <span class="synPreProc">(</span><span class="synConstant">5</span><span class="synSpecial"> tests, </span><span class="synConstant">5</span><span class="synSpecial"> assertions</span><span class="synPreProc">)</span>
</pre>


<p>問題なく通りますね。</p>

<p>これは、<code>ThreadController@index</code>で、文字列「this is Thread」をreturnしていて、それがレスポンスとしてクライアントに返っているからですね。</p>

<p>Chromeでレスポンスを確認してみると、内容が確認できます。</p>

<p><figure class="figure-image figure-image-fotolife"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20171125/20171125143107.png" alt="f:id:konoemario:20171125143107p:plain" title="f:id:konoemario:20171125143107p:plain" class="hatena-fotolife" itemprop="image"></span><figcaption>レスポンスの内容が見える</figcaption></figure></p>

<p></br></p>

<h3 id="テストコード修正">テストコード修正</h3>

<p>さて、さきほどのテストコードは、文字列「this is thread」が確認できただけなので、Threadの内容が見えること、というように修正していく必要があります。</p>

<p>テストコードのイメージはこんな感じでしょうか。</p>

<pre class="code lang-php" data-lang="php" data-unlink><span class="synSpecial">&lt;?php</span>

    <span class="synComment">/**</span>
<span class="synComment">     * すべてのユーザーは、/threadにアクセスすると、Threadの一覧が見えること</span>
<span class="synComment">     *</span>
<span class="synComment">     * </span><span class="synPreProc">@return </span><span class="synComment">void</span>
<span class="synComment">     */</span>
    <span class="synType">public</span> <span class="synPreProc">function</span> test_all_user_can_view_thread<span class="synSpecial">()</span>
    <span class="synSpecial">{</span>
        <span class="synComment">//Threadがあって</span>
        <span class="synStatement">$</span><span class="synIdentifier">thread</span> <span class="synStatement">=</span> <span class="synStatement">???</span>
        
        <span class="synComment">//Threadの一覧を表示するURLにアクセスすると</span>
        <span class="synStatement">$</span><span class="synIdentifier">response</span> <span class="synStatement">=</span> <span class="synStatement">$</span><span class="synIdentifier">this</span><span class="synType">-&gt;</span>get<span class="synSpecial">(</span>'<span class="synConstant">/thread</span>'<span class="synSpecial">)</span>;
        
        <span class="synComment">//Threadの内容が見えるんだよ</span>
        <span class="synStatement">$</span><span class="synIdentifier">response</span><span class="synType">-&gt;</span>assertSee<span class="synSpecial">(</span><span class="synStatement">$</span><span class="synIdentifier">thread</span><span class="synType">-&gt;</span>body<span class="synSpecial">)</span>;

    <span class="synSpecial">}</span>
</pre>


<p>ここで問題となるのは、最初にでてくる<code>$thread</code>を作成するコードです。</p>

<p><br/></p>

<h3 id="factoryファクトリを使う">factory(ファクトリ)を使う</h3>

<p>Laravelで用意されているテストデータを作成できるツールを使っていきます。</p>

<p>と、テストデータを作成する前に、データを定義する（表現が怪しい)をモデルだったりを作っていきましょう。</p>

<p><br/></p>

<h4 id="Threadモデルの作成">Threadモデルの作成</h4>

<p>Threadを表現する、Threadモデルを作成します。<br/>
マイグレーションファイルも一緒に作っちゃいましょう。</p>

<p><b>モデルとマイグレーションファイルの作成</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ php artisan make:model Thread <span class="synSpecial">-m</span>
</pre>


<p>こんな感じの空っぽのモデルと、<br/>
<b>Thread.php</b></p>

<pre class="code lang-php" data-lang="php" data-unlink><span class="synSpecial">&lt;?php</span>
<span class="synType">namespace</span> App;

<span class="synPreProc">use</span> Illuminate\Database\Eloquent\Model;

<span class="synType">class</span> Thread <span class="synType">extends</span> Model
<span class="synSpecial">{</span>
    <span class="synComment">//</span>
<span class="synSpecial">}</span>
</pre>


<p>/database/migrations配下に以下のファイルができたかな。</p>

<p><b>作成した日付_create_threads_table.php(抜粋)</b></p>

<pre class="code lang-php" data-lang="php" data-unlink><span class="synSpecial">&lt;?php</span>
<span class="synType">class</span> CreateThreadsTable <span class="synType">extends</span> Migration
<span class="synSpecial">{</span>
    <span class="synComment">/**</span>
<span class="synComment">     * Run the migrations.</span>
<span class="synComment">     *</span>
<span class="synComment">     * </span><span class="synPreProc">@return </span><span class="synComment">void</span>
<span class="synComment">     */</span>
    <span class="synType">public</span> <span class="synPreProc">function</span> up<span class="synSpecial">()</span>
    <span class="synSpecial">{</span>
        Schema<span class="synStatement">::</span>create<span class="synSpecial">(</span>'<span class="synConstant">threads</span>', <span class="synPreProc">function</span> <span class="synSpecial">(</span>Blueprint <span class="synStatement">$</span><span class="synIdentifier">table</span><span class="synSpecial">)</span> <span class="synSpecial">{</span>
            <span class="synStatement">$</span><span class="synIdentifier">table</span><span class="synType">-&gt;</span>increments<span class="synSpecial">(</span>'<span class="synConstant">id</span>'<span class="synSpecial">)</span>;
            <span class="synStatement">$</span><span class="synIdentifier">table</span><span class="synType">-&gt;</span>timestamps<span class="synSpecial">()</span>;
        <span class="synSpecial">})</span>;
    <span class="synSpecial">}</span>
</pre>


<h4 id="Threadマイグレーションファイルの修正">Threadマイグレーションファイルの修正</h4>

<p>できたばかりのマイグレーションファイルに手を加えていきます。</p>

<p>Threadには、見出しである<code>title</code>と内容である<code>body</code>を足してあげます。<br/>
 また、誰が作成したかがわかるように、Threadに作ったユーザーのidである<code>user_id</code>を付加してあげましょう。</p>

<p><b>作成した日付_create_threads_table.php(抜粋)</b></p>

<pre class="code lang-php" data-lang="php" data-unlink><span class="synSpecial">&lt;?php</span>
<span class="synType">class</span> CreateThreadsTable <span class="synType">extends</span> Migration
<span class="synSpecial">{</span>
    <span class="synComment">/**</span>
<span class="synComment">     * Run the migrations.</span>
<span class="synComment">     *</span>
<span class="synComment">     * </span><span class="synPreProc">@return </span><span class="synComment">void</span>
<span class="synComment">     */</span>
    <span class="synType">public</span> <span class="synPreProc">function</span> up<span class="synSpecial">()</span>
    <span class="synSpecial">{</span>
        Schema<span class="synStatement">::</span>create<span class="synSpecial">(</span>'<span class="synConstant">threads</span>', <span class="synPreProc">function</span> <span class="synSpecial">(</span>Blueprint <span class="synStatement">$</span><span class="synIdentifier">table</span><span class="synSpecial">)</span> <span class="synSpecial">{</span>
            <span class="synStatement">$</span><span class="synIdentifier">table</span><span class="synType">-&gt;</span>increments<span class="synSpecial">(</span>'<span class="synConstant">id</span>'<span class="synSpecial">)</span>;
            <span class="synStatement">$</span><span class="synIdentifier">table</span><span class="synType">-&gt;</span>integer<span class="synSpecial">(</span>'<span class="synConstant">user_id</span>'<span class="synSpecial">)</span>;
            <span class="synStatement">$</span><span class="synIdentifier">table</span><span class="synType">-&gt;</span>string<span class="synSpecial">(</span>'<span class="synConstant">title</span>'<span class="synSpecial">)</span>;
            <span class="synStatement">$</span><span class="synIdentifier">table</span><span class="synType">-&gt;</span>text<span class="synSpecial">(</span>'<span class="synConstant">body</span>'<span class="synSpecial">)</span>;
            <span class="synStatement">$</span><span class="synIdentifier">table</span><span class="synType">-&gt;</span>timestamps<span class="synSpecial">()</span>;
        <span class="synSpecial">})</span>;
    <span class="synSpecial">}</span>
    <span class="synSpecial">}</span>
</pre>


<p>指定してできるカラムタイプは結構適当だよ！<br/>
カラムタイプの詳細は公式をみよう。  <br/>
<a href="https://readouble.com/laravel/5.5/ja/migrations.html">&#x30C7;&#x30FC;&#x30BF;&#x30D9;&#x30FC;&#x30B9;&#xFF1A;&#x30DE;&#x30A4;&#x30B0;&#x30EC;&#x30FC;&#x30B7;&#x30E7;&#x30F3; 5.5 Laravel</a></p>

<p>マイグレーションファイルを修正したら、マイグレーションを実行してテーブルを作成しよう。</p>

<p><b>マイグレーションを実行</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink> php artisan migrate
</pre>


<p>Threadテーブル以外にも、デフォルトでマイグレーション用意されている、Userテーブルだったりが作成されるはず。</p>

<p>データベースのインストールだったり、.envの環境変えてねえよ！っていう場合は<br/>
速攻でググるなり導入するなりしよう！</p>

<h4 id="factoryを書いていこう">factoryを書いていこう</h4>

<p><code>/database/factories</code>を覗いてみると、<code>UserFactory.php</code>というものがいるかと思います。</p>

<p><b>UserFactory.php(抜粋)</b></p>

<pre class="code lang-php" data-lang="php" data-unlink><span class="synSpecial">&lt;?php</span>
<span class="synStatement">$</span><span class="synIdentifier">factory</span><span class="synType">-&gt;</span>define<span class="synSpecial">(</span>App\User<span class="synStatement">::</span><span class="synType">class</span>, <span class="synPreProc">function</span> <span class="synSpecial">(</span>Faker <span class="synStatement">$</span><span class="synIdentifier">faker</span><span class="synSpecial">)</span> <span class="synSpecial">{</span>
    <span class="synType">static</span> <span class="synStatement">$</span><span class="synIdentifier">password</span>;

    <span class="synStatement">return</span> <span class="synSpecial">[</span>
        '<span class="synConstant">name</span>' <span class="synStatement">=&gt;</span> <span class="synStatement">$</span><span class="synIdentifier">faker</span><span class="synType">-&gt;</span><span class="synIdentifier">name</span>,
        '<span class="synConstant">email</span>' <span class="synStatement">=&gt;</span> <span class="synStatement">$</span><span class="synIdentifier">faker</span><span class="synType">-&gt;</span>unique<span class="synSpecial">()</span><span class="synType">-&gt;</span>safeEmail,
        '<span class="synConstant">password</span>' <span class="synStatement">=&gt;</span> <span class="synStatement">$</span><span class="synIdentifier">password</span> <span class="synStatement">?:</span> <span class="synStatement">$</span><span class="synIdentifier">password</span> <span class="synStatement">=</span> bcrypt<span class="synSpecial">(</span>'<span class="synConstant">secret</span>'<span class="synSpecial">)</span>,
        '<span class="synConstant">remember_token</span>' <span class="synStatement">=&gt;</span> str_random<span class="synSpecial">(</span><span class="synConstant">10</span><span class="synSpecial">)</span>,
    <span class="synSpecial">]</span>;
<span class="synSpecial">})</span>;
</pre>


<p>これはなんぞ、という感じなのですが、Userテーブルにテストデータを作成するためのコードになります。</p>

<p>試しに実行してみましょう。</p>

<p><b>tinkerの起動</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ php artisan tinker
Psy Shell v0.8.15 <span class="synPreProc">(</span><span class="synSpecial">PHP 7.1.9</span><span class="synConstant">-1</span><span class="synSpecial">+ubuntu16.04.1+deb.sury.org+</span><span class="synConstant">1</span><span class="synSpecial"> — cli</span><span class="synPreProc">)</span> by Justin Hileman
<span class="synStatement">&gt;&gt;&gt;</span> 
</pre>


<p>さて、でてきました。`tinker'です。</p>

<p>正直なんなのかよくわかってないです！</p>

<p>公式をみると</p>

<blockquote><p>全てのLaravelアプリケーションには、PsySHパッケージによるREPLである、Tinkerが含まれています。
とあり、`PsySH'だったり'REPL'ってなんぞって感じになります。</p></blockquote>

<p>素敵な記事がこちらにありました。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fqiita.com%2Fomega999%2Fitems%2Fb9b75dc127053deea3a7" title="PsySHって知ってる？私は感動した。 - Qiita" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://qiita.com/omega999/items/b9b75dc127053deea3a7">qiita.com</a></cite></p>

<p>自分の浅い理解では、PythonとかはCLIでpythonを起動すると、実行しながらコードかけるあの感じと考えることにしました。 <br/>
とはいえ、tinkerはphpを対話型で書ける以上に、Laravelの機能を含んでいる何かなのかなぁと思うことにして、次に進みます。</p>

<p>話がそれてしまいましたが、tinkerでさきほどの`Userfactory.php'のコードを実行してみましょう。</p>

<p><b>コードを試す</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ php artisan tinker
Psy Shell v0.8.15 <span class="synPreProc">(</span><span class="synSpecial">PHP 7.1.9</span><span class="synConstant">-1</span><span class="synSpecial">+ubuntu16.04.1+deb.sury.org+</span><span class="synConstant">1</span><span class="synSpecial"> — cli</span><span class="synPreProc">)</span> by Justin Hileman
<span class="synStatement">&gt;&gt;&gt;</span> factory<span class="synPreProc">(</span><span class="synStatement">'</span><span class="synConstant">App\User</span><span class="synStatement">'</span><span class="synPreProc">)</span>-<span class="synStatement">&gt;</span>create<span class="synPreProc">()</span>
<span class="synStatement">=&gt;</span> App\User <span class="synSpecial">{</span><span class="synComment">#763</span>
     name: <span class="synStatement">&quot;</span><span class="synConstant">Bernardo Abbott</span><span class="synStatement">&quot;</span>,
     email: <span class="synStatement">&quot;</span><span class="synConstant">vada97@example.com</span><span class="synStatement">&quot;</span>,
     updated_at: <span class="synStatement">&quot;</span><span class="synConstant">2017-11-25 06:07:48</span><span class="synStatement">&quot;</span>,
     created_at: <span class="synStatement">&quot;</span><span class="synConstant">2017-11-25 06:07:48</span><span class="synStatement">&quot;</span>,
     id: <span class="synConstant">1</span>,
   <span class="synSpecial">}</span>
<span class="synStatement">&gt;&gt;&gt;</span> 
</pre>


<p>おお、となりましたか？<br/>
自分はなりました。</p>

<p>factory()という謎の関数なのかメソッドなのかわからないものにクラス名を渡して、create()をしてあげると、名前やらemailアドレスやらにそれっぽい値が入ってデータが作成されます。</p>

<p>また、データベースを確認してみると、作成されたデータが保存されていることが確認できるかと思います。</p>

<p>表面しかわかりませんが、とりあえずこんな感じでデータをつくれるということですね。</p>

<p>Thread用のデータを書いていきましょう。</p>

<p>本来であればThreadFactory.phpなるものをつくったほうがよいのかもしれませんが、UserFactory.phpに追記する形で書いてみました。</p>

<p><b>UserFactory.php(抜粋)</b></p>

<pre class="code lang-php" data-lang="php" data-unlink>$factory-<span class="synError">&gt;</span>define(App\Thread::class, function (Faker $faker) {

    return [
        'user_id' =<span class="synError">&gt;</span> 1,
        'title' =<span class="synError">&gt;</span> &quot;ピンキーのかわいさについて&quot;,
        'body' =<span class="synError">&gt;</span> &quot;動いているところがいいよね&quot; 
    ];
});
</pre>


<p>これで、さきほどの同じ様にtinkerで実行してみましょう。<br/>
実行する際に、tinkerを起動しっぱなしだと、<code>UserFacotry.php</code>の修正が反映されないかもなので、一旦exitして、もっかい起動してあげてね。</p>

<p><b>コードを試す</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink><span class="synStatement">&gt;&gt;&gt;</span> factory<span class="synPreProc">(</span><span class="synStatement">'</span><span class="synConstant">App\Thread</span><span class="synStatement">'</span><span class="synPreProc">)</span>-<span class="synStatement">&gt;</span>create<span class="synPreProc">()</span>
<span class="synStatement">=&gt;</span> App\Thread <span class="synSpecial">{</span><span class="synComment">#763</span>
     user_id: <span class="synConstant">1</span>,
     title: <span class="synStatement">&quot;</span><span class="synConstant">ピンキーのかわいさについて</span><span class="synStatement">&quot;</span>,
     body: <span class="synStatement">&quot;</span><span class="synConstant">動いているところがいいよね</span><span class="synStatement">&quot;</span>,
     updated_at: <span class="synStatement">&quot;</span><span class="synConstant">2017-11-25 06:17:15</span><span class="synStatement">&quot;</span>,
     created_at: <span class="synStatement">&quot;</span><span class="synConstant">2017-11-25 06:17:15</span><span class="synStatement">&quot;</span>,
     id: <span class="synConstant">1</span>,
   <span class="synSpecial">}</span>
</pre>


<p>こんな感じでデータが作成されましたね。</p>

<p>さて、データが作成されてようやく次へというところなんですが、このままだとまったく同じテストデータしか作成されません。<br/>
titleやbodyの内容は今のままでも全く問題ないのですが、user_idが固定というのは、ちょっといただけないかもしれません。</p>

<p>というのも、user_idはこのThreadデータを作成したユーザーが紐づいていてほしいからです。</p>

<p>なのでこれを修正していきます。</p>

<p>というところで次回に続きたいと思います。</p>

-----
--------
AUTHOR: konoemario
TITLE: Laravelで始めるTDD開発：準備
BASENAME: 2017/11/20/233324
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 11/20/2017 23:33:24
CATEGORY: Laravel
CATEGORY: プログラム
-----
BODY:
<p>やっちまったぜ。</p>

<p>タイトルでTDDと謳っていますが、書いてる人はテストコードもろくに書いたことがない人です。</p>

<p>さらにいえば、Laravelも今回初挑戦です。</p>

<p>もっといえば、PHPをちゃんと始めたのも2ヶ月ぐらいです。</p>

<p>でも、今年で30歳になるの。</p>

<p>さて、そんな私がこの記事を書くにあたっての拠り所にするのは、例のごとくLaracastの動画になります。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Flaracasts.com%2Fseries%2Flets-build-a-forum-with-laravel" title="Let&#39;s Build A Forum with Laravel and TDD" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://laracasts.com/series/lets-build-a-forum-with-laravel">laracasts.com</a></cite></p>

<p>今回参考にする動画は有料になりますが、Laravelであれば以下のスクラッチ動画がとても為になります。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Flaracasts.com%2Fseries%2Flaravel-from-scratch-2017" title="Laravel 5.4 From Scratch" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://laracasts.com/series/laravel-from-scratch-2017">laracasts.com</a></cite></p>

<p>また、以前書きましたVue.jsの動画もおすすめです。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=http%3A%2F%2Fwww.tohuandkonsome.site%2Fentry%2F2017%2F10%2F09%2F004525" title="3連休だしVue.jsをはじめよう：コンポーネントを使ってみる - 豆腐とコンソメ" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://www.tohuandkonsome.site/entry/2017/10/09/004525">www.tohuandkonsome.site</a></cite></p>

<p>TDDの動画のボリュームがかなりありますが、最後まで完走を目指したいと思います！</p>

<ul class="table-of-contents">
    <li><a href="#さっそくはじめてみる">さっそくはじめてみる</a><ul>
            <li><a href="#つくっていくもの">つくっていくもの</a></li>
            <li><a href="#プロジェクトを作成する">プロジェクトを作成する</a><ul>
                    <li><a href="#作業メモHomestead環境でドメイン名でアクセスする">作業メモ：Homestead環境でドメイン名でアクセスする</a></li>
                </ul>
            </li>
        </ul>
    </li>
    <li><a href="#テストコードを実行する">テストコードを実行する</a></li>
</ul>

<p><br/></p>

<h1 id="さっそくはじめてみる">さっそくはじめてみる</h1>

<p>2017年11月現在、最新であるLaravel5.5を使っていきます。<br/>
また、環境はLaravel Homesteadを使用しています。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Flaravel.com%2Fdocs%2F5.5%2Fhomestead" title="Laravel Homestead - Laravel - The PHP Framework For Web Artisans" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://laravel.com/docs/5.5/homestead">laravel.com</a></cite></p>

<p>Laravelの環境構築自体はいろいろな記事がありますので、そちらを参照いただければと思います。自分もお世話になりました。</p>

<p>また、本題と関係ないIDEの話ですが、Laracastの動画ではphpStromを使っていたので、真似して使ってみることにしました。</p>

<p>普段はVsCodeを使っています。</p>

<h2 id="つくっていくもの">つくっていくもの</h2>

<p>と、その前になにをつくるかですよね。</p>

<p>今回は、「掲示板」をつくっていきます。</p>

<p><figure class="figure-image figure-image-fotolife"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20171120/20171120221352.png" alt="f:id:konoemario:20171120221352p:plain" title="f:id:konoemario:20171120221352p:plain" class="hatena-fotolife" itemprop="image"></span><figcaption>掲示板をつくる</figcaption></figure></p>

<p>この掲示板は、だれでも見れます。</p>

<p>でも、ログインしなきゃ新しいトピックの掲示板を立てることも、それに対する書き込みもできません。</p>

<p>また、掲示板の一覧を見るページだったり、掲示板を作成するページだったりもあります。</p>

<p>とりあえずは以上です。</p>

<p>他にも機能がでてきそうですが、動画を消化しつつ、必要なエッセンスを入れていきたいと思います。</p>

<p><br/></p>

<h2 id="プロジェクトを作成する">プロジェクトを作成する</h2>

<p>「forum」という名前でlaravelのプロジェクトを作成します。</p>

<p><b>新規プロジェクトの作成</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ laravel new forum
</pre>


<p>作成したらとりあえずブラウザで見れるかぐらいは確認しておきます。</p>

<p><figure class="figure-image figure-image-fotolife"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20171120/20171120230923.png" alt="f:id:konoemario:20171120230923p:plain" title="f:id:konoemario:20171120230923p:plain" class="hatena-fotolife" itemprop="image"></span><figcaption>Laravelが見れるか確認する</figcaption></figure></p>

<p><br/></p>

<h5 id="作業メモHomestead環境でドメイン名でアクセスする"><span style="color: #f9ce1d">作業メモ：Homestead環境でドメイン名でアクセスする</span></h5>

<p>vagrantで立ち上げているHomesteadにドメイン名「homestead.app」でアクセスできるようにした。</p>

<p>普段は、以下のようにLaravelをビルトインサーバーで動していたけど、せっかくなので。</p>

<p><b>ビルトインサーバー例</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>php <span class="synSpecial">-S</span> 0.0.0.0:<span class="synConstant">8000</span> <span class="synSpecial">-t</span> public
</pre>


<p>作業にあたっては、以下の記事を参考にさせていただいた。</p>

<p><a href="https://qiita.com/kz_morita/items/799aaf7440c496f2379b">Homestead&#x3092;&#x3064;&#x304B;&#x3063;&#x3066;Laravel5&#x3092;&#x52D5;&#x304B;&#x3057;&#x3066;&#x307F;&#x308B; - Qiita</a></p>

<p>Homestead.yamlの内容が、「/etc/nginx/sites-available/homestead.app」に反映されてnginxのドキュメントルートの設定うんたらかんたらを見た気がしたんだけれども、うまくいかなくって、「/etc/nginx/sites-available/homestead.app」を直接編集して、nginxの再起動したら見れるようになった。</p>

<p><br/></p>

<h2 id="テストコードを実行する">テストコードを実行する</h2>

<p>初めてのテストコードを実行します。</p>

<p>プロジェクトのルートディレクトリで以下のコマンドを実行すると、何かが動きます。</p>

<p><b>テストコードを実行</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>phpunit 
</pre>


<p>phpunitなんかねえよ！ってなった場合、pathが通ってないので、こんな感じで実行しましょう。</p>

<p><b>テストコードを実行</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>./vendor/bin/phpunit
</pre>


<p>このペースで大丈夫か、と不安になったので次回に続きます。</p>

-----
--------
AUTHOR: konoemario
TITLE: Vue.jsで遊ぶ(2)
BASENAME: 2017/11/14/225829
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 11/14/2017 22:58:29
CATEGORY: Vue.js
CATEGORY: プログラム
IMAGE: https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20171114/20171114220952.png
-----
BODY:
<h1 id="日記">日記</h1>

<p>正しいものを学ぼうとしているのだけれども、絶対に正しいというものはなくって、今の状況（要件だったり、納期だったり、環境だったり、自分の実力だったり）を考えみて、自分はこうすべきだと思ったと言えるようになればいいのかなと最近思った。</p>

<p><br/></p>

<h2 id="前回からの続き">前回からの続き</h2>

<p><iframe src="https://hatenablog-parts.com/embed?url=http%3A%2F%2Fwww.tohuandkonsome.site%2Fentry%2F2017%2F11%2F08%2F224141" title="Vue.jsで遊んでみる(1) スタイルのバインド - 豆腐とコンソメ" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://www.tohuandkonsome.site/entry/2017/11/08/224141">www.tohuandkonsome.site</a></cite></p>

<p>だいぶ時間が空いてしまいましたが、前回からの続きです。</p>

<ul class="table-of-contents">
    <li><a href="#日記">日記</a><ul>
            <li><a href="#前回からの続き">前回からの続き</a></li>
            <li><a href="#今回やりたいこと">今回やりたいこと</a><ul>
                    <li><a href="#修正案右に動くという値を共有する">修正案：右に動くという値を共有する</a></li>
                    <li><a href="#修正案公式のアドバイスに従う">修正案：公式のアドバイスに従う</a></li>
                    <li><a href="#とはいえ">とはいえ</a></li>
                </ul>
            </li>
        </ul>
    </li>
</ul>

<p>前回は、こんなコードを書きました。</p>

<p><b>前回のindex.html</b></p>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span><span class="synStatement">h1</span><span class="synIdentifier">&gt;</span>スタイルをバインドする<span class="synIdentifier">&lt;/</span><span class="synStatement">h1</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;box1&quot;</span><span class="synIdentifier"> @click=</span><span class="synConstant">&quot;sayHello&quot;</span><span class="synIdentifier"> v-bind:</span><span class="synType">style</span><span class="synIdentifier">=</span><span class="synConstant">&quot;styleObject&quot;</span><span class="synIdentifier">&gt;</span>box1<span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;box2&quot;</span><span class="synIdentifier"> @click=</span><span class="synConstant">&quot;sayHello&quot;</span><span class="synIdentifier"> v-bind:</span><span class="synType">style</span><span class="synIdentifier">=</span><span class="synConstant">&quot;styleObject&quot;</span><span class="synIdentifier">&gt;</span>box2<span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
</pre>


<p><b>前回のapp.js</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synIdentifier">let</span> box1 = <span class="synStatement">new</span> Vue(<span class="synIdentifier">{</span>
    el:<span class="synConstant">'.box1'</span>,
    data: <span class="synIdentifier">{</span>
        pointX:0
        styleObject:<span class="synIdentifier">{</span>
            transform: <span class="synConstant">'translateX('</span>+<span class="synIdentifier">this</span>.pointX+<span class="synConstant">'px)'</span>
        <span class="synIdentifier">}</span>,
    methods:<span class="synIdentifier">{</span>
        <span class="synComment">//index.htmlもsayHelloからこれにメソッドをかえてるよ！</span>
        moveRight:<span class="synIdentifier">function</span>(<span class="synStatement">event</span>)<span class="synIdentifier">{</span>
            <span class="synIdentifier">this</span>.pointX++;
            <span class="synIdentifier">this</span>.styleObject.transform = convertTranslate(<span class="synIdentifier">this</span>.pointX);
        <span class="synIdentifier">}</span>,
    <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>)

<span class="synComment">//文字列「translateX(value)」を返す関数</span>
<span class="synIdentifier">function</span> convertTranslate(value)
<span class="synIdentifier">{</span>
    <span class="synStatement">return</span>  <span class="synConstant">'translate('</span> + value + <span class="synConstant">'px)'</span>
<span class="synIdentifier">}</span>

<span class="synComment">//box2はここでは関係ない</span>
</pre>


<p>これをブラウザでみると、以下ように箱をクリックすると、それが右に動くというどうしようもないものが見れます。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20171114/20171114220952.png" alt="f:id:konoemario:20171114220952p:plain:w500" title="f:id:konoemario:20171114220952p:plain:w500" class="hatena-fotolife" style="width:500px" itemprop="image"></span></p>

<p><br/></p>

<h2 id="今回やりたいこと">今回やりたいこと</h2>

<p>box1をクリックするとbox1とbox2も動くということをやってみたいと思います。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20171114/20171114221854.jpg" alt="f:id:konoemario:20171114221854j:plain:w500" title="f:id:konoemario:20171114221854j:plain:w500" class="hatena-fotolife" style="width:500px" itemprop="image"></span></p>

<p><br/></p>

<h3 id="修正案右に動くという値を共有する">修正案：右に動くという値を共有する</h3>

<p>まっさきに思いついたのがこちらです。<br/>
クリックするたびにカウントアップされるpointXをbox1とbox2で共有してあげます。</p>

<p>共有する値はオブジェクト型じゃないと、box1とbox2でそれぞれ値を持ってしまうので注意が必要ですね。</p>

<p><b>修正したapp.js</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>
<span class="synComment">//box1とbox2で値を共有する</span>
<span class="synIdentifier">let</span> globalData = <span class="synIdentifier">{</span>pointX:sharePointX<span class="synIdentifier">}</span>;

<span class="synIdentifier">let</span> box1 = <span class="synStatement">new</span> Vue(<span class="synIdentifier">{</span>
    el:<span class="synConstant">'.box1'</span>,
    data: <span class="synIdentifier">{</span>
        pointX:globalData,
        styleObject:<span class="synIdentifier">{</span>
            transform: <span class="synConstant">'translateX(0px)'</span>
        <span class="synIdentifier">}</span>,
      <span class="synIdentifier">}</span>,
    methods:<span class="synIdentifier">{</span>
        moveRight:<span class="synIdentifier">function</span>(<span class="synStatement">event</span>)<span class="synIdentifier">{</span>
            <span class="synIdentifier">this</span>.pointX.pointX++
            console.log(<span class="synIdentifier">this</span>.pointX.pointX);
            <span class="synIdentifier">this</span>.styleObject.transform = convertTranslate(<span class="synIdentifier">this</span>.pointX.pointX);
        <span class="synIdentifier">}</span>,
    <span class="synIdentifier">}</span>,
<span class="synIdentifier">}</span>)

<span class="synIdentifier">let</span> box2 = <span class="synStatement">new</span> Vue(<span class="synIdentifier">{</span>
    el:<span class="synConstant">'.box2'</span>,
    data: <span class="synIdentifier">{</span>
        pointX:globalData,
        styleObject:<span class="synIdentifier">{</span>
            transform: <span class="synConstant">'translateX(0px)'</span>
        <span class="synIdentifier">}</span>,
      <span class="synIdentifier">}</span>,
    methods:<span class="synIdentifier">{</span>
        moveRight:<span class="synIdentifier">function</span>(<span class="synStatement">event</span>)<span class="synIdentifier">{</span>
            <span class="synIdentifier">this</span>.styleObject.transform = convertTranslate(<span class="synIdentifier">this</span>.pointX.pointX);
        <span class="synIdentifier">}</span>,
    <span class="synIdentifier">}</span>
    
<span class="synIdentifier">}</span>)

<span class="synComment">//文字列「translateX(value)」を返す関数は省略  </span>
</pre>


<p>さて、こちらを実行すると、、、</p>

<p><span style="font-size: 150%">うまくいきません。  </span></p>

<p>box1をクリックしてもbox2が右に動くことはありません。</p>

<p>値が共有できていないのでは？というとそういうわけでもなさです。</p>

<p>というのも、box2をクリックすると、思い出したかのように今までbox1でカウントアップした分の値でbox2が右に動きます。</p>

<p>どうやら、box2はbox1によってpointXが変更されたとしても、その変化に気づくようにはなってないのだと思います。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20171114/20171114222905.jpg" alt="f:id:konoemario:20171114222905j:plain:w500" title="f:id:konoemario:20171114222905j:plain:w500" class="hatena-fotolife" style="width:500px" itemprop="image"></span></p>

<p>こういうことをしたい場合、どうしたらよいのでしょうか。</p>

<p><br/></p>

<h3 id="修正案公式のアドバイスに従う">修正案：公式のアドバイスに従う</h3>

<p>ちゃんと公式に書いてありました。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fjp.vuejs.org%2Fv2%2Fguide%2Fcomponents.html%23%E8%A6%AA%E5%AD%90%E9%96%93%E4%BB%A5%E5%A4%96%E3%81%AE%E9%80%9A%E4%BF%A1" title="コンポーネント — Vue.js" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://jp.vuejs.org/v2/guide/components.html#親子間以外の通信">jp.vuejs.org</a></cite></p>

<blockquote><p>ときどき、互いに親子関係ではない2つのコンポーネントが互いに通信する必要があるかもしれません。簡単なシナリオとして、空の Vue インスタンスを中心のイベントバスとして使用することができます:</p></blockquote>

<p>どうも空っぽのVueインスタンスを作って、コンポーネントのときに学んだコンポーネント間のデータやらイベントのやりとりの方法を使うことでうまくできるみたいです。</p>

<p><b>今一度のapp.js</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synComment">//イベントバス用のVueインスタンス</span>
<span class="synIdentifier">var</span> bus = <span class="synStatement">new</span> Vue();

<span class="synIdentifier">let</span> box1 = <span class="synStatement">new</span> Vue(<span class="synIdentifier">{</span>
    el:<span class="synConstant">'.box1'</span>,
    data: <span class="synIdentifier">{</span>
        pointX:globalData,
        styleObject:<span class="synIdentifier">{</span>
            transform: <span class="synConstant">'translateX(0px)'</span>
        <span class="synIdentifier">}</span>,
      <span class="synIdentifier">}</span>,
    methods:<span class="synIdentifier">{</span>
        moveRight:<span class="synIdentifier">function</span>(<span class="synStatement">event</span>)<span class="synIdentifier">{</span>
            <span class="synIdentifier">this</span>.pointX.pointX++
            console.log(<span class="synIdentifier">this</span>.pointX.pointX);
            <span class="synIdentifier">this</span>.styleObject.transform = convertTranslate(<span class="synIdentifier">this</span>.pointX.pointX);
            <span class="synComment">//ugoiteyo発火！</span>
            bus.$emit(<span class="synConstant">'ugoiteyo'</span>)
        <span class="synIdentifier">}</span>,
    <span class="synIdentifier">}</span>,
<span class="synIdentifier">}</span>)


<span class="synIdentifier">let</span> box2 = <span class="synStatement">new</span> Vue(<span class="synIdentifier">{</span>
    el:<span class="synConstant">'.box2'</span>,
    data: <span class="synIdentifier">{</span>
        pointX:globalData,
        styleObject:<span class="synIdentifier">{</span>
            transform: <span class="synConstant">'translateX(0px)'</span>
        <span class="synIdentifier">}</span>,
      <span class="synIdentifier">}</span>,
    methods:<span class="synIdentifier">{</span>
        moveRight:<span class="synIdentifier">function</span>(<span class="synStatement">event</span>)<span class="synIdentifier">{</span>
            <span class="synIdentifier">this</span>.styleObject.transform = convertTranslate(<span class="synIdentifier">this</span>.pointX.pointX);
        <span class="synIdentifier">}</span>,
    <span class="synIdentifier">}</span>,
    created:<span class="synIdentifier">function</span>()<span class="synIdentifier">{</span>
        <span class="synComment">//ugoiteyoイベントリスナー</span>
        bus.$on(<span class="synConstant">'ugoiteyo'</span>, <span class="synIdentifier">this</span>.moveRight);
    <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>)
</pre>


<ul>
<li>box1をクリックすると、イベント「ugoiteyo」が発火する</li>
<li>box2のイベントリスナー「ugoiteyo」が動く</li>
</ul>


<p>こんな感じで、今度はやりたいことを実現できました！</p>

<p><br/></p>

<h3 id="とはいえ">とはいえ</h3>

<p>こんな面倒なことはせずに、HTMLの構成を以下のように、box1とbox2を包んであげる要素「boxes」を置いて、</p>

<p><b>index.html</b></p>

<pre class="code lang-html" data-lang="html" data-unlink> <span class="synComment">&lt;!--これでいいじゃない --&gt;</span>
 <span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;boxes&quot;</span><span class="synIdentifier">&gt;</span>
      <span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;box1&quot;</span><span class="synIdentifier"> @click=</span><span class="synConstant">&quot;moveRight&quot;</span><span class="synIdentifier"> v-bind:</span><span class="synType">style</span><span class="synIdentifier">=</span><span class="synConstant">&quot;styleObject&quot;</span><span class="synIdentifier">&gt;</span>box1<span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
      <span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;box2&quot;</span><span class="synIdentifier"> @click=</span><span class="synConstant">&quot;moveRight&quot;</span><span class="synIdentifier"> v-bind:</span><span class="synType">style</span><span class="synIdentifier">=</span><span class="synConstant">&quot;styleObject&quot;</span><span class="synIdentifier">&gt;</span>box2<span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
</pre>


<p>Vueインスタンスのセレクタも「boxes」をしてあげれば、やりたいことはできちゃいますね。</p>

<p><b>app.js</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synIdentifier">let</span> boxes = <span class="synStatement">new</span> Vue(<span class="synIdentifier">{</span>
    el:<span class="synConstant">'.boxes'</span>,
    data: <span class="synIdentifier">{</span>
        pointX:0,
        styleObject:<span class="synIdentifier">{</span>
            transform: <span class="synConstant">'translateX(0px)'</span>
        <span class="synIdentifier">}</span>,
      <span class="synIdentifier">}</span>,
    methods:<span class="synIdentifier">{</span>
        moveRight:<span class="synIdentifier">function</span>(<span class="synStatement">event</span>)<span class="synIdentifier">{</span>
            <span class="synIdentifier">this</span>.pointX++
            console.log(<span class="synIdentifier">this</span>.pointX);
            <span class="synIdentifier">this</span>.styleObject.transform = convertTranslate(<span class="synIdentifier">this</span>.pointX);
        <span class="synIdentifier">}</span>,
    <span class="synIdentifier">}</span>,
<span class="synIdentifier">}</span>)
</pre>


-----
--------
AUTHOR: konoemario
TITLE: Vue.jsで遊んでみる(1) スタイルのバインド
BASENAME: 2017/11/08/224141
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 11/08/2017 22:41:41
CATEGORY: Vue.js
CATEGORY: プログラム
IMAGE: https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20171108/20171108204533.png
-----
BODY:
<p>Vueインスタンス同士の連携ってどうやるんだろうと思って書き始めました。</p>

<p>が本題に入る前に、長くなっちゃいました。</p>

<p>そのわりに内容が薄いです。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fjp.vuejs.org%2Fv2%2Fguide%2Fclass-and-style.html%23%E3%82%A4%E3%83%B3%E3%83%A9%E3%82%A4%E3%83%B3%E3%82%B9%E3%82%BF%E3%82%A4%E3%83%AB%E3%81%AE%E3%83%90%E3%82%A4%E3%83%B3%E3%83%87%E3%82%A3%E3%83%B3%E3%82%B0" title="クラスとスタイルのバインディング — Vue.js" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://jp.vuejs.org/v2/guide/class-and-style.html#インラインスタイルのバインディング">jp.vuejs.org</a></cite></p>

<ul class="table-of-contents">
    <li><a href="#この記事で試したこと">この記事で試したこと</a><ul>
            <li><a href="#はじまり">はじまり</a></li>
            <li><a href="#箱を動かしてみる">箱を動かしてみる</a><ul>
                    <li><a href="#Vuejsを使っていく">Vue.jsを使っていく</a></li>
                    <li><a href="#横に動かす">横に動かす</a></li>
                </ul>
            </li>
        </ul>
    </li>
</ul>

<h2 id="この記事で試したこと">この記事で試したこと</h2>

<ul>
<li>Vue.jsを使った、スタイルのバインディング</li>
</ul>


<p><br/></p>

<h3 id="はじまり">はじまり</h3>

<p>とりあえず「box」を二つ用意してみたよ。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20171108/20171108204533.png" alt="f:id:konoemario:20171108204533p:plain:w300" title="f:id:konoemario:20171108204533p:plain:w300" class="hatena-fotolife" style="width:300px" itemprop="image"></span></p>

<p>HTMLはこれだけ。<br/>
(もちろんdoctypeやらなんやらはあるけれども省略しているよ。)</p>

<p><b>index.html</b></p>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span><span class="synStatement">h1</span><span class="synIdentifier">&gt;</span>はじまり<span class="synIdentifier">&lt;/</span><span class="synStatement">h1</span><span class="synIdentifier">&gt;</span>
 <span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;box1&quot;</span><span class="synIdentifier">&gt;</span>box1<span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
 <span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;box2&quot;</span><span class="synIdentifier">&gt;</span>box2<span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
</pre>


<p>スタイルシートは、こんな感じのものを読み込んでいる。<br/>
ちなみに、このスタイルシートはもうでてこないだろうから、忘れても大丈夫。</p>

<p><b>style.css</b></p>

<pre class="code lang-css" data-lang="css" data-unlink><span class="synIdentifier">.box1</span><span class="synSpecial">,</span><span class="synIdentifier">.box2{</span>
      <span class="synType">width</span>:<span class="synConstant">100px</span>;
      <span class="synType">height</span>:<span class="synConstant">100px</span>;
      <span class="synType">background</span>:<span class="synConstant">yellow</span>;
      <span class="synType">margin</span>:<span class="synConstant">10px</span>;
      <span class="synType">text-align</span>:<span class="synConstant">center</span>;
 <span class="synIdentifier">}</span>
      
<span class="synIdentifier">.box2{</span>
      <span class="synType">background</span>:<span class="synConstant">red</span>;
<span class="synIdentifier">}</span>
</pre>


<p>ここからどんなことが起きるんだろう。</p>

<p>箱が爆発するかもしれないし、かわい青い女の子に変化するかもしれない。</p>

<p><br/></p>

<h3 id="箱を動かしてみる">箱を動かしてみる</h3>

<p>んっだよ、ふざけるな、という方はここでお別れなんだ。</p>

<p>箱を動かしてみたかったんだ。 それだけなんだ。<br/>
箱をクリックすると右に動くことにしよう。</p>

<p><br/></p>

<h4 id="Vuejsを使っていく">Vue.jsを使っていく</h4>

<p>Vue.jsを簡単に動かすときには、Vue.jsのCDNを読み込んで置くのが一番手っ取り早い。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fjp.vuejs.org%2Fv2%2Fguide%2Finstallation.html" title="インストール — Vue.js" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://jp.vuejs.org/v2/guide/installation.html">jp.vuejs.org</a></cite></p>

<p>ここでは、Vue.jsをCDNやら、なんやらで、なにかしら用意したとして話を進めるよ。</p>

<p>さっそく、app.jsを書いてみた。</p>

<p><b>app.js</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>
<span class="synIdentifier">let</span> box1 = <span class="synStatement">new</span> Vue(<span class="synIdentifier">{</span>
    el:<span class="synConstant">'.box1'</span>,
<span class="synIdentifier">}</span>)

<span class="synIdentifier">let</span> box2 = <span class="synStatement">new</span> Vue(<span class="synIdentifier">{</span>
    el:<span class="synConstant">'.box2'</span>,
<span class="synIdentifier">}</span>)
</pre>


<p>こんな感じにVueインスタンスを二つ作ってみる。</p>

<p>いろいろ間違っているかもしれないけれどもそのまま続けるよ。</p>

<p>ちゃんと、バインドできてるかな？と不安に思ったら、こんな感じで簡単なイベントとメソッドで確認しよう。<br/>
(もちろん、Chromeの拡張機能であるVueのプラグインのほうが手っ取り早い)</p>

<p><b>index.html</b></p>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span><span class="synStatement">h1</span><span class="synIdentifier">&gt;</span>Vueインスタンスの確認<span class="synIdentifier">&lt;/</span><span class="synStatement">h1</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;box1&quot;</span><span class="synIdentifier"> @click=</span><span class="synConstant">&quot;sayHello&quot;</span><span class="synIdentifier">&gt;</span>box1<span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;box2&quot;</span><span class="synIdentifier"> @click=</span><span class="synConstant">&quot;sayHello&quot;</span><span class="synIdentifier">&gt;</span>box2<span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
</pre>


<ul>
<li>「box1」をクリックしたら、Vueインスタンス(box1)のsayHelloメソッドを呼ぶ</li>
<li>「box2」をクリックしたら、Vueインスタンス(box2)のsayHelloメソッドを呼ぶ</li>
</ul>


<p>app.jsはこんな感じ。<br/>
<b>app.js</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>
<span class="synIdentifier">let</span> box1 = <span class="synStatement">new</span> Vue(<span class="synIdentifier">{</span>
    el:<span class="synConstant">'.box1'</span>,
    methods:<span class="synIdentifier">{</span>
        sayHello:<span class="synIdentifier">function</span>()<span class="synIdentifier">{</span>
            console.log(<span class="synConstant">'hello box1'</span>);
        <span class="synIdentifier">}</span>
    <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>)

<span class="synIdentifier">let</span> box2 = <span class="synStatement">new</span> Vue(<span class="synIdentifier">{</span>
    el:<span class="synConstant">'.box2'</span>,
    methods:<span class="synIdentifier">{</span>
        sayHello:<span class="synIdentifier">function</span>()<span class="synIdentifier">{</span>
            console.log(<span class="synConstant">'hello box2'</span>);
        <span class="synIdentifier">}</span>
    <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>)
</pre>


<p>実行してクリックするとこんな感じになったよ。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20171108/20171108215309.png" alt="f:id:konoemario:20171108215309p:plain:w500" title="f:id:konoemario:20171108215309p:plain:w500" class="hatena-fotolife" style="width:500px" itemprop="image"></span></p>

<p><br/></p>

<h4 id="横に動かす">横に動かす</h4>

<p>横に動かすにあたっては、cssのスタイルをバインドすることで試してみる。</p>

<p>javascriptを使って、クラスを動的に切り替えるのと何も変わらないけれども、やってみることに意味があるんだよ！</p>

<p>こんな感じにstyle属性にstyleObjectをバインドさせる。
<b>index.html</b></p>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span><span class="synStatement">h1</span><span class="synIdentifier">&gt;</span>スタイルをバインドする<span class="synIdentifier">&lt;/</span><span class="synStatement">h1</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;box1&quot;</span><span class="synIdentifier"> @click=</span><span class="synConstant">&quot;sayHello&quot;</span><span class="synIdentifier"> v-bind:</span><span class="synType">style</span><span class="synIdentifier">=</span><span class="synConstant">&quot;styleObject&quot;</span><span class="synIdentifier">&gt;</span>box1<span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;box2&quot;</span><span class="synIdentifier"> @click=</span><span class="synConstant">&quot;sayHello&quot;</span><span class="synIdentifier"> v-bind:</span><span class="synType">style</span><span class="synIdentifier">=</span><span class="synConstant">&quot;styleObject&quot;</span><span class="synIdentifier">&gt;</span>box2<span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
</pre>


<p>Vueインスタンスには、dataとしてstyleObjectを定義する。<br/>
styleにはcssのtransformをあてていく。</p>

<p><b>app.js</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>
<span class="synIdentifier">let</span> box1 = <span class="synStatement">new</span> Vue(<span class="synIdentifier">{</span>
    el:<span class="synConstant">'.box1'</span>,
    data: <span class="synIdentifier">{</span>
        styleObject:<span class="synIdentifier">{</span>
            transform: <span class="synConstant">'translateX(0px)'</span>
        <span class="synIdentifier">}</span>,
    methods:<span class="synIdentifier">{</span>
        sayHello:<span class="synIdentifier">function</span>()<span class="synIdentifier">{</span>
            console.log(<span class="synConstant">'hello box1'</span>);
        <span class="synIdentifier">}</span>
    <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>)

<span class="synIdentifier">let</span> box2 = <span class="synStatement">new</span> Vue(<span class="synIdentifier">{</span>
    el:<span class="synConstant">'.box2'</span>,
    data: <span class="synIdentifier">{</span>
        styleObject:<span class="synIdentifier">{</span>
            transform: <span class="synConstant">'translateX(0px)'</span>
        <span class="synIdentifier">}</span>,
    methods:<span class="synIdentifier">{</span>
        sayHello:<span class="synIdentifier">function</span>()<span class="synIdentifier">{</span>
            console.log(<span class="synConstant">'hello box2'</span>);
        <span class="synIdentifier">}</span>
    <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>)
</pre>


<p>translateX(0px)なので、この状態だと何も動かない。<br/>
クリックして、0pxの値をかえていくことで、やりたいことが実現できそう。</p>

<p>とりあえず、こんな感じはどうだろうか、試してみた。<br/>
translateX()の値にdataで定義している値をそのまま使ってみた。</p>

<p><b>app.js</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>
<span class="synIdentifier">let</span> box1 = <span class="synStatement">new</span> Vue(<span class="synIdentifier">{</span>
    el:<span class="synConstant">'.box1'</span>,
    data: <span class="synIdentifier">{</span>
        pointX:0
        styleObject:<span class="synIdentifier">{</span>
            transform: <span class="synConstant">'translateX('</span>+<span class="synIdentifier">this</span>.pointX+<span class="synConstant">'px)'</span>
        <span class="synIdentifier">}</span>,
    methods:<span class="synIdentifier">{</span>
        <span class="synComment">//index.htmlもsayHelloからこれにメソッドをかえてるよ！</span>
        addPointX:<span class="synIdentifier">function</span>()<span class="synIdentifier">{</span>
            <span class="synIdentifier">this</span>.pointX++;
            console.log(<span class="synIdentifier">this</span>.pointX);
        <span class="synIdentifier">}</span>
    <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>)

<span class="synComment">//box2は省略</span>
</pre>


<p>が、これだとうまくいかない。<br/>
dataの値を他のデータには使えないのだろうか。</p>

<p>なので、transformの値そのものを書き換えることにした。</p>

<p><b>app.js</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>
<span class="synIdentifier">let</span> box1 = <span class="synStatement">new</span> Vue(<span class="synIdentifier">{</span>
    el:<span class="synConstant">'.box1'</span>,
    data: <span class="synIdentifier">{</span>
        pointX:0
        styleObject:<span class="synIdentifier">{</span>
            transform: <span class="synConstant">'translateX('</span>+<span class="synIdentifier">this</span>.pointX+<span class="synConstant">'px)'</span>
        <span class="synIdentifier">}</span>,
    methods:<span class="synIdentifier">{</span>
        <span class="synComment">//index.htmlもsayHelloからこれにメソッドをかえてるよ！</span>
        moveRight:<span class="synIdentifier">function</span>(<span class="synStatement">event</span>)<span class="synIdentifier">{</span>
            <span class="synIdentifier">this</span>.pointX++;
            <span class="synIdentifier">this</span>.styleObject.transform = convertTranslate(<span class="synIdentifier">this</span>.pointX);
        <span class="synIdentifier">}</span>,
    <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>)

文字列「translateX(value)」を返す関数
<span class="synIdentifier">function</span> convertTranslate(value)
<span class="synIdentifier">{</span>
    <span class="synStatement">return</span>  <span class="synConstant">'translate('</span> + value + <span class="synConstant">'px)'</span>
<span class="synIdentifier">}</span>

<span class="synComment">//box2は省略</span>
</pre>


<p>これで、クリックすると、右に少しずつ動く。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20171108/20171108223406.png" alt="f:id:konoemario:20171108223406p:plain:w300" title="f:id:konoemario:20171108223406p:plain:w300" class="hatena-fotolife" style="width:300px" itemprop="image"></span></p>

<p>さて、box2の存在はなんだったのかしら、となったところで次回にわけたいと思います。</p>

-----
--------
AUTHOR: konoemario
TITLE: LaravelのBladeをPugで書くときに困ったこと
BASENAME: 2017/11/01/233248
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 11/01/2017 23:32:48
CATEGORY: HTML
CATEGORY: プログラム
CATEGORY: Laravel
CATEGORY: Pug
-----
BODY:
<p>ヘロー！久しぶりの更新です。<br/>
わからないことが多すぎて、何から整理すればいいやらという状態で、ろくに記事も書いていませんでした。</p>

<p>このままフェードアウトするのも悲しいので、ピンポイントでかつあまり役に立たさなそうなことを書くことにしたよ！</p>

<p>もし同じ状況の人がいて、こうしているよ、っていうのがあればぜひ教えてください！</p>

<ul class="table-of-contents">
    <li><a href="#LaravelのBladeとPug">LaravelのBladeとPug</a><ul>
            <li><a href="#簡単なForm画面">簡単なForm画面</a></li>
            <li><a href="#コンパイルしよう">コンパイルしよう</a><ul>
                    <li><a href="#gulpを使ってpugをコンパイルする">gulpを使ってpugをコンパイルする</a></li>
                </ul>
            </li>
            <li><a href="#こんな画面とHTMLが出力されるよ">こんな画面とHTMLが出力されるよ</a></li>
        </ul>
    </li>
    <li><a href="#本題">本題</a><ul>
            <li><a href="#blade構文をpugで書いてみる">blade構文をpugで書いてみる</a><ul>
                    <li><a href="#if構文を書いてみる">@if構文を書いてみる</a></li>
                </ul>
            </li>
        </ul>
    </li>
</ul>

<h1 id="LaravelのBladeとPug">LaravelのBladeとPug</h1>

<p>最近、Laravelを触っています。<br/>
Laravelには便利なテンプレートエンジンBladeがついていて、コントローラーから渡す変数を展開したり、テンプレートを継承したり、インクルードしたりできたりします。</p>

<p>node.jsのフレームワークexpressとpugの関係にそっくりですね。</p>

<p>今回は、そんなBladeをpugで書いて、Bladeファイルに変換して〜みたいなときに自分が苦労したことを書きます。</p>

<p>そもそも、Bladeに変換するなら、pugじゃなくって最初からBlade使えばいいんじゃない？っていう考えもあるかと思います。</p>

<p>pugで書くメリットとしては、</p>

<ul>
<li>コーディングがPugの方が若干早い</li>
<li>Bladeで継承だったりインクルードするのはリクエストがあるごとに行われる。<br/>
 pugで事前に変換しといた方がパフォーマンスがいいかもしれない。</li>
</ul>


<p>という理由があるかと思います。<br/>
1点目に関しては、エディタがemmetに対応していれば、あんまかわらなかったりするのかな？と思ったりもします。<br/>
とりあえずpugを使っていけば戻れない何かがある気がしています。</p>

<p>2点目に関しては、想像です。。。</p>

<p>といまいち、説得力がないかもしれませんが、続けます。</p>

<h2 id="簡単なForm画面">簡単なForm画面</h2>

<p>まずはLaravelでこんな感じでpugファイルを置いてみます。<br/>
中身はシンプルなフォーム画面です。</p>

<p><b>ディレクトリ構成</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>├── components
│   └── _head.pug
├── index.pug
└── template
    └── _layout.pug
</pre>


<p><br/></p>

<p><b>_head.pug</b></p>

<script src="https://gist.github.com/Ryomasao/817d77bb7683cc71d24816f0ae02b1e8.js"></script>


<p><br/></p>

<p><b>_layout.pug</b></p>

<script src="https://gist.github.com/Ryomasao/29db20265d3a2875d447117c0ab4f792.js"></script>


<p><br/></p>

<p><b>index.pug</b></p>

<script src="https://gist.github.com/Ryomasao/8f7586e8bf8b8c4aac0ea1e007e76e12.js"></script>


<p><br/></p>

<h2 id="コンパイルしよう">コンパイルしよう</h2>

<p>Laravelに標準で用意されているlaravel-mixと、別途laravel-pug-mixを使って、pugからblade.phpにコンパイルしていきます。<br/>
コンパイルに関しては、こちらの記事を参考にさせていただきました！</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fqiita.com%2Fmastar_3104%2Fitems%2F994bad6335fa5c9783f1" title="【Laravel5.5】Laravel Mix でPugを.blade.phpにコンパイルする方法 - Qiita" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://qiita.com/mastar_3104/items/994bad6335fa5c9783f1">qiita.com</a></cite></p>

<p><br/></p>

<p><b>webpack.mix.js</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synIdentifier">let</span> mix = require(<span class="synConstant">'laravel-mix'</span>);
mix.pug = require(<span class="synConstant">'laravel-mix-pug'</span>);

mix.pug(<span class="synConstant">'resources/assets/pug/form_sample/index.pug'</span>, <span class="synConstant">'resources/views/form_sample'</span>,<span class="synIdentifier">{}</span>);
</pre>


<p><br/></p>

<p><b>コンパイル</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ npm run dev
</pre>


<p><br/></p>

<p>ただ、私のWindowsのVagrant環境でlaravel-pug-mixを使ってると、コンパイルに結構な時間が掛かってちょっとしんどいです。</p>

<p>ただ遅いだけならいいんですが、私は大抵何かしらミスをしているので、時間がかかったあげくコンパイルエラーが頻発すると、作業効率がものすごく落ちます。</p>

<p>同じぐらいのスペックのMacのVagrantだと、そこまで気にならないのでちょっと不思議です。</p>

<p><br/></p>

<h3 id="gulpを使ってpugをコンパイルする">gulpを使ってpugをコンパイルする</h3>

<p>参考までに、gulpを使って、コンパイルもしてみたので、書いておきます。</p>

<p>コンパイルについては、こちらを参考にさせていただきました。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fblog.mismithportfolio.com%2Fweb%2F20160618gulpjadepug%23c" title="【Jade/Pug】gulpでJade / Pugをコンパイルする" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://blog.mismithportfolio.com/web/20160618gulpjadepug#c">blog.mismithportfolio.com</a></cite></p>

<p>まずは、gulpをインストールします。<br/>
グローバル環境にインストールしちゃいます。</p>

<p><b>gulpのインストール</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink><span class="synPreProc">$npm</span> install gulp <span class="synSpecial">-g</span>
</pre>


<p><br/></p>

<p>また、pugにコンパイルするためのモジュール、gulp-pagもインストールします。</p>

<p><b>gulp-pugのインストール</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink><span class="synPreProc">$npm</span> install gulp-pug
</pre>


<p><br/></p>

<p>さらにデフォルトでは、拡張子がhtmlになってしまうので、renameできるgulp-renameもインストールします。</p>

<p><b>gulp-renameのインストール</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink><span class="synPreProc">$npm</span> install gulp-rename
</pre>


<p><br/></p>

<p>最後にgulpfile.jsを作成します。</p>

<p><b>gulpfile.js</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synIdentifier">var</span> gulp = require(<span class="synConstant">'gulp'</span>);
<span class="synIdentifier">var</span> pug = require(<span class="synConstant">'gulp-pug'</span>);
<span class="synIdentifier">var</span> rename = require(<span class="synConstant">'gulp-rename'</span>);

gulp.task(<span class="synConstant">'pug'</span>, () =&gt; <span class="synIdentifier">{</span>
 <span class="synStatement">return</span> gulp.src(<span class="synIdentifier">[</span><span class="synConstant">'./resources/assets/pug/form_sample/**/*.pug'</span>, <span class="synConstant">'!./resources/assets/pug/form_sample/**/_*.pug'</span><span class="synIdentifier">]</span>)
 .pipe(pug(<span class="synIdentifier">{</span>
   pretty: <span class="synConstant">true</span>
 <span class="synIdentifier">}</span>))
 .pipe(rename(<span class="synIdentifier">{</span>
     extname: <span class="synConstant">&quot;.blade.php&quot;</span>
 <span class="synIdentifier">}</span>))
 .pipe(gulp.dest(<span class="synConstant">'./resources/views/form_sample'</span>));
<span class="synIdentifier">}</span>);
</pre>


<p><br/></p>

<p>上記を終えたらgulpでコンパイルタスクを実行します。</p>

<p><b>コンパイル</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink><span class="synPreProc">$gulp</span> pug
</pre>


<p><br/></p>

<h2 id="こんな画面とHTMLが出力されるよ">こんな画面とHTMLが出力されるよ</h2>

<p>bladeファイルにコンパイルされると、こんな感じのhtmlが出力されます。<br/>
bladeといっても、bladeの構文を使ってないので、ただのHTMLとかわりません。</p>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synComment">&lt;!DOCTYPE html&gt;</span>
<span class="synIdentifier">&lt;</span><span class="synStatement">html</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">head</span><span class="synIdentifier">&gt;</span>
<span class="synPreProc">    </span><span class="synIdentifier">&lt;</span><span class="synStatement">meta</span><span class="synIdentifier"> </span><span class="synType">charset</span><span class="synIdentifier">=</span><span class="synConstant">&quot;UTF-8&quot;</span><span class="synIdentifier">&gt;</span>
<span class="synPreProc">    </span><span class="synIdentifier">&lt;</span><span class="synStatement">meta</span><span class="synIdentifier"> </span><span class="synType">content</span><span class="synIdentifier">=</span><span class="synConstant">&quot;text/html; charset=UTF-8&quot;</span><span class="synIdentifier"> </span><span class="synType">http-equiv</span><span class="synIdentifier">=</span><span class="synConstant">&quot;Content-Type&quot;</span><span class="synIdentifier">&gt;</span>
<span class="synPreProc">    </span><span class="synIdentifier">&lt;</span><span class="synStatement">meta</span><span class="synIdentifier"> </span><span class="synType">name</span><span class="synIdentifier">=</span><span class="synConstant">&quot;viewport&quot;</span><span class="synIdentifier"> </span><span class="synType">content</span><span class="synIdentifier">=</span><span class="synConstant">&quot;width=device-width&quot;</span><span class="synIdentifier">&gt;</span>
<span class="synPreProc">    </span><span class="synIdentifier">&lt;</span><span class="synStatement">meta</span><span class="synIdentifier"> </span><span class="synType">http-equiv</span><span class="synIdentifier">=</span><span class="synConstant">&quot;X-UA-Compatible&quot;</span><span class="synIdentifier"> </span><span class="synType">content</span><span class="synIdentifier">=</span><span class="synConstant">&quot;IE=edge&quot;</span><span class="synIdentifier">&gt;</span>
<span class="synPreProc">    </span><span class="synIdentifier">&lt;</span><span class="synStatement">title</span><span class="synIdentifier">&gt;</span>form_sample<span class="synIdentifier">&lt;/</span><span class="synStatement">title</span><span class="synIdentifier">&gt;</span>
<span class="synPreProc">  </span><span class="synIdentifier">&lt;/</span><span class="synStatement">head</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">body</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">form</span><span class="synIdentifier"> </span><span class="synType">method</span><span class="synIdentifier">=</span><span class="synConstant">&quot;post&quot;</span><span class="synIdentifier"> </span><span class="synType">action</span><span class="synIdentifier">=</span><span class="synConstant">&quot;/form_sample&quot;</span><span class="synIdentifier">&gt;</span>
      <span class="synIdentifier">&lt;</span><span class="synStatement">h1</span><span class="synIdentifier">&gt;</span>シンプルなPOST <span class="synIdentifier">&lt;/</span><span class="synStatement">h1</span><span class="synIdentifier">&gt;&lt;</span><span class="synStatement">br</span><span class="synIdentifier">&gt;</span>
      <span class="synIdentifier">&lt;</span><span class="synStatement">input</span><span class="synIdentifier"> </span><span class="synType">type</span><span class="synIdentifier">=</span><span class="synConstant">&quot;text&quot;</span><span class="synIdentifier"> </span><span class="synType">name</span><span class="synIdentifier">=</span><span class="synConstant">&quot;food_name&quot;</span><span class="synIdentifier">&gt;</span>
      <span class="synIdentifier">&lt;</span><span class="synStatement">button</span><span class="synIdentifier">&gt;</span>PushMe<span class="synIdentifier">&lt;/</span><span class="synStatement">button</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;/</span><span class="synStatement">form</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;/</span><span class="synStatement">body</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">html</span><span class="synIdentifier">&gt;</span>
</pre>


<p><br/></p>

<p><figure class="figure-image figure-image-fotolife"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20171101/20171101212420.png" alt="f:id:konoemario:20171101212420p:plain:w500" title="f:id:konoemario:20171101212420p:plain:w500" class="hatena-fotolife" style="width:500px" itemprop="image"></span><figcaption>表示される画面</figcaption></figure></p>

<p><br/></p>

<h1 id="本題">本題</h1>

<h2 id="blade構文をpugで書いてみる">blade構文をpugで書いてみる</h2>

<p>ようやく本題です。</p>

<p>blade構文をpug上で書いてみます。</p>

<p>LaravelでFormを作るときに必ず？使うであろう「csrf_field()」で試してみます。</p>

<p><b>blade構文の例</b></p>

<pre class="code lang-html" data-lang="html" data-unlink>    <span class="synIdentifier">&lt;</span><span class="synStatement">form</span><span class="synIdentifier"> </span><span class="synType">method</span><span class="synIdentifier">=</span><span class="synConstant">&quot;post&quot;</span><span class="synIdentifier"> </span><span class="synType">action</span><span class="synIdentifier">=</span><span class="synConstant">&quot;/form_sample&quot;</span><span class="synIdentifier">&gt;</span>
        {{ csrf_field() }}  ←こいつ
      <span class="synIdentifier">&lt;</span><span class="synStatement">h1</span><span class="synIdentifier">&gt;</span>シンプルなPOST <span class="synIdentifier">&lt;/</span><span class="synStatement">h1</span><span class="synIdentifier">&gt;&lt;</span><span class="synStatement">br</span><span class="synIdentifier">&gt;</span>
      <span class="synIdentifier">&lt;</span><span class="synStatement">input</span><span class="synIdentifier"> </span><span class="synType">type</span><span class="synIdentifier">=</span><span class="synConstant">&quot;text&quot;</span><span class="synIdentifier"> </span><span class="synType">name</span><span class="synIdentifier">=</span><span class="synConstant">&quot;food_name&quot;</span><span class="synIdentifier">&gt;</span>
      <span class="synIdentifier">&lt;</span><span class="synStatement">button</span><span class="synIdentifier">&gt;</span>PushMe<span class="synIdentifier">&lt;/</span><span class="synStatement">button</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;/</span><span class="synStatement">form</span><span class="synIdentifier">&gt;</span>
</pre>


<p><br/></p>

<p>このcsrf_filed()は、Larabelが用意してくれているメソッドで、bladeからhtmlに展開されると、以下のようにCSRF攻撃を防ぐトークンを埋め込んでくれます。</p>

<p><b>csrf_filed()がhtmlに展開された</b></p>

<pre class="code lang-html" data-lang="html" data-unlink>    <span class="synIdentifier">&lt;</span><span class="synStatement">form</span><span class="synIdentifier"> </span><span class="synType">method</span><span class="synIdentifier">=</span><span class="synConstant">&quot;post&quot;</span><span class="synIdentifier"> </span><span class="synType">action</span><span class="synIdentifier">=</span><span class="synConstant">&quot;/form_sample&quot;</span><span class="synIdentifier">&gt;</span>
       <span class="synComment">&lt;!-- csrf_token --&gt;</span>
       <span class="synIdentifier">&lt;</span><span class="synStatement">input</span><span class="synIdentifier"> </span><span class="synType">type</span><span class="synIdentifier">=</span><span class="synConstant">&quot;hidden&quot;</span><span class="synIdentifier"> </span><span class="synType">name</span><span class="synIdentifier">=</span><span class="synConstant">&quot;_token&quot;</span><span class="synIdentifier"> </span><span class="synType">value</span><span class="synIdentifier">=</span><span class="synConstant">&quot;krHTyotnNw9KA3NCMVNck1qZ3X8B8xCn7Qj3tATu&quot;</span><span class="synIdentifier">&gt;</span>
      <span class="synIdentifier">&lt;</span><span class="synStatement">h1</span><span class="synIdentifier">&gt;</span>シンプルなPOST <span class="synIdentifier">&lt;/</span><span class="synStatement">h1</span><span class="synIdentifier">&gt;&lt;</span><span class="synStatement">br</span><span class="synIdentifier">&gt;</span>
      <span class="synIdentifier">&lt;</span><span class="synStatement">input</span><span class="synIdentifier"> </span><span class="synType">type</span><span class="synIdentifier">=</span><span class="synConstant">&quot;text&quot;</span><span class="synIdentifier"> </span><span class="synType">name</span><span class="synIdentifier">=</span><span class="synConstant">&quot;food_name&quot;</span><span class="synIdentifier">&gt;</span>
      <span class="synIdentifier">&lt;</span><span class="synStatement">button</span><span class="synIdentifier">&gt;</span>PushMe<span class="synIdentifier">&lt;/</span><span class="synStatement">button</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;/</span><span class="synStatement">form</span><span class="synIdentifier">&gt;</span>
</pre>


<p><br/></p>

<p>では、まずは無邪気に書いてみましょう。</p>

<p><b>無邪気にindex.pugに追加</b></p>

<script src="https://gist.github.com/Ryomasao/651ddeff5d87c88c5014bad8d39f9121.js"></script>


<p><br/></p>

<p>これをコンパイルしてみると、{{csrなんて構文は知らんよと怒られちゃいます。</p>

<p><b>怒られる</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>unexpected text <span class="synStatement">&quot;</span><span class="synConstant">{{csr</span><span class="synStatement">&quot;</span>
</pre>


<p><br/></p>

<p>と、いろいろ書こうと試していたんですが、  結論から書くと</p>

<pre class="code lang-html" data-lang="html" data-unlink>span {{csrf_field()}}
</pre>


<p><br/></p>

<p>で問題なくいけちゃいました。</p>

<h3 id="if構文を書いてみる">@if構文を書いてみる</h3>

<p>内容が微妙になってしまったので、こちらも試してみました。<br/>
フォームのバリデーションを表示する際によくやる？やつです。</p>

<p><b>よくあるエラーを表示するやつ</b></p>

<pre class="code lang-html" data-lang="html" data-unlink>    <span class="synIdentifier">&lt;</span><span class="synStatement">form</span><span class="synIdentifier"> </span><span class="synType">method</span><span class="synIdentifier">=</span><span class="synConstant">&quot;post&quot;</span><span class="synIdentifier"> </span><span class="synType">action</span><span class="synIdentifier">=</span><span class="synConstant">&quot;/form_sample&quot;</span><span class="synIdentifier">&gt;&lt;</span><span class="synStatement">span</span><span class="synIdentifier">&gt;</span>{{csrf_field()}}<span class="synIdentifier">&lt;/</span><span class="synStatement">span</span><span class="synIdentifier">&gt;</span>
      <span class="synIdentifier">&lt;</span><span class="synStatement">h1</span><span class="synIdentifier">&gt;</span>シンプルなPOST <span class="synIdentifier">&lt;/</span><span class="synStatement">h1</span><span class="synIdentifier">&gt;&lt;</span><span class="synStatement">br</span><span class="synIdentifier">&gt;</span>
      <span class="synIdentifier">&lt;</span><span class="synStatement">input</span><span class="synIdentifier"> </span><span class="synType">type</span><span class="synIdentifier">=</span><span class="synConstant">&quot;text&quot;</span><span class="synIdentifier"> </span><span class="synType">name</span><span class="synIdentifier">=</span><span class="synConstant">&quot;food_name&quot;</span><span class="synIdentifier">&gt;</span>
      <span class="synIdentifier">&lt;</span><span class="synStatement">button</span><span class="synIdentifier">&gt;</span>PushMe<span class="synIdentifier">&lt;/</span><span class="synStatement">button</span><span class="synIdentifier">&gt;</span>
      @if(count($errors))
        <span class="synIdentifier">&lt;</span><span class="synStatement">ul</span><span class="synIdentifier">&gt;</span>
        @foreach($errors-<span class="synError">&gt;</span>all() as $error)
          <span class="synIdentifier">&lt;</span><span class="synStatement">li</span><span class="synIdentifier"> </span><span class="synType">style</span><span class="synIdentifier">=</span><span class="synConstant">&quot;color:red&quot;</span><span class="synIdentifier">&gt;</span>{{ $error }}<span class="synIdentifier">&lt;/</span><span class="synStatement">li</span><span class="synIdentifier">&gt;</span>
        @endforeach
        <span class="synIdentifier">&lt;/</span><span class="synStatement">ul</span><span class="synIdentifier">&gt;</span>
      @endif
    <span class="synIdentifier">&lt;/</span><span class="synStatement">form</span><span class="synIdentifier">&gt;</span>
</pre>


<p><br/></p>

<p><b>空っぽで送信するとエラーを表示してくれる</b>
<figure class="figure-image figure-image-fotolife"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20171101/20171101225726.png" alt="f:id:konoemario:20171101225726p:plain:w500" title="f:id:konoemario:20171101225726p:plain:w500" class="hatena-fotolife" style="width:500px" itemprop="image"></span><figcaption>@ifを使う例</figcaption></figure></p>

<p>こちらもいろいろと試してみたところ、  とりあえずできたのがこちらに書いてある、「.の後のインデントは文字列として評価される」というものです。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fqiita.com%2Fgarakuta%2Fitems%2Fc83548c74e45838e3fe0" title="Pugと仲良くする方法 - Qiita" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://qiita.com/garakuta/items/c83548c74e45838e3fe0">qiita.com</a></cite></p>

<p>最初は公式を見てたんですが、どこに書いてあるんですかね。</p>

<p>ひどくわかりにくいのですが、こんな形で書いてみました。</p>

<p><b>_erros.pug</b></p>

<script src="https://gist.github.com/Ryomasao/b59552cf64e63ee09b262ed20f5629cb.js"></script>


<p><br/></p>

<p>_errors.pugとして別ファイルで再利用可能なようにしておきます。</p>

<p>使う側は、こんな感じで使いたい箇所でincludeします。</p>

<p><b>index.pug</b></p>

<script src="https://gist.github.com/Ryomasao/b529ae513493e7543c963bb989c76594.js"></script>


<p>これで、無事bladeに展開することができました。</p>

-----
--------
AUTHOR: konoemario
TITLE: bladeをpugで書くときに気をつけること
BASENAME: 2017/10/30/220412
STATUS: Draft
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 10/30/2017 22:04:12
-----
BODY:
<h1>日記</h1>

<p>ヘロー！久々の更新です。</p>

<p>いろいろと記事に書いて整理したいなぁと思うことがいっぱいあるのですが、インプットするものだったり課題が多すぎて、なかなか書きにくい今日このごろ。</p>

<p>とはいえ、まったく書かないと習慣が消えてしまいそうなので、中途半端なものでも書いてこうと思います。</p>

<p>とりあえず、後から更新すればいいのだよ！</p>

<h1>本題</h1>

<p>最近、PHPのWebフレームワークであるLaravelを触っています。<br/>
Laravelにはテンプレートエンジンであるbladeというものが用意されています。</p>

<p>bladeには、bl</p>

<h4>案1 bladeのみを使う</h4>

<p>こちらは</p>

-----
--------
AUTHOR: konoemario
TITLE: homestad
BASENAME: 2017/10/11/234547
STATUS: Draft
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 10/11/2017 23:45:47
-----
BODY:
<p>nginx</p>

<p>ここに、documentrootの記述がある。</p>

<p>/etc/nginx/sites-enabled/homestad.app</p>

-----
--------
AUTHOR: konoemario
TITLE: 3連休だしVue.jsをはじめよう：コンポーネントを使ってみる
BASENAME: 2017/10/09/004525
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 10/09/2017 00:45:25
CATEGORY: プログラム
CATEGORY: Vue.js
IMAGE: https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20171007/20171007160704.png
-----
BODY:
<p>おはんきー！</p>

<p>3連休だしVue.jsをはじめました。<br/>
(ビュー.jsって読むみたいです)</p>

<p>すっごい楽しいので、みなさんもぜひいかがでしょうか。</p>

<p><strong>javascirptもhtmlもなんとなくしかわからない</strong>ポンコツでも楽しめています。</p>

<h3 id="さっそくはじめてみよう">さっそくはじめてみよう</h3>

<p>ここに、いろいろと書こうと思ったのですが、以下のサイトの動画のチュートリアルがとてもわかりやすいので、こちらを見たほうがいいです！</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Flaracasts.com%2Fseries%2Flearn-vue-2-step-by-step" title="Learn Vue 2: Step By Step" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://laracasts.com/series/learn-vue-2-step-by-step">laracasts.com</a></cite></p>

<p>とはいえ、上記の動画は英語なので、見るだけだとよくわからない部分がでてきたりします。<br/>
自分自身もエピソード10まで進めてみたところで、頭がパンクしちゃいました。<br/>
なので、ここでは自分の中で消化しきれなかったことを書いていこうと思います。</p>

<p>間違えだらけの理解の可能性も大いにありますので、その点はご容赦ください。<br/>
ツッコミをいただければ、嬉しいです。</p>

<p>余談ですが、動画で説明してくれる方の作業スピードが早すぎるので、そこも注目です。</p>

<p><br/></p>

<ul class="table-of-contents">
    <li><a href="#さっそくはじめてみよう">さっそくはじめてみよう</a></li>
    <li><a href="#心が折れるコンポーネント">心が折れるコンポーネント</a><ul>
            <li><a href="#まずは基本">まずは基本</a></li>
            <li><a href="#ちょっと休憩コンポーネント生成の方法">ちょっと休憩：コンポーネント生成の方法</a></li>
            <li><a href="#コンポーネントに値を渡すプロパティ">コンポーネントに値を渡す：プロパティ</a></li>
            <li><a href="#コンポーネント子からVue親側のデータを更新する">コンポーネント(子)からVue(親側)のデータを更新する</a></li>
        </ul>
    </li>
</ul>

<h3 id="心が折れるコンポーネント">心が折れるコンポーネント</h3>

<p>エピソード9やエピソード10あたりで、コンポーネントという概念がでてきます。<br/>
いろいろ調べてみるのですが、なかなか理解することができていないので、まずコンポーネントについて記載していこうと思います。</p>

<p><br/></p>

<h4 id="まずは基本">まずは基本</h4>

<p>こんな風に、天気の内容を記載する画面があったとする。</p>

<p><figure class="figure-image figure-image-fotolife"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20171007/20171007160704.png" alt="f:id:konoemario:20171007160704p:plain:w300" title="f:id:konoemario:20171007160704p:plain:w300" class="hatena-fotolife" style="width:300px" itemprop="image"></span><figcaption>基本の画面</figcaption></figure></p>

<p>HTMLソースはこんな感じ。</p>

<p><b>index.html</b></p>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synComment">&lt;!DOCTYPE html&gt;</span>
<span class="synIdentifier">&lt;</span><span class="synStatement">html</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;</span><span class="synStatement">head</span><span class="synIdentifier">&gt;</span>
<span class="synPreProc">        </span><span class="synIdentifier">&lt;</span><span class="synStatement">meta</span><span class="synIdentifier"> </span><span class="synType">charset</span><span class="synIdentifier">=</span><span class="synConstant">&quot;utf-8&quot;</span><span class="synIdentifier">&gt;</span>
<span class="synPreProc">        </span><span class="synIdentifier">&lt;</span><span class="synStatement">meta</span><span class="synIdentifier"> </span><span class="synType">name</span><span class="synIdentifier">=</span><span class="synConstant">&quot;viewport&quot;</span><span class="synIdentifier"> </span><span class="synType">content</span><span class="synIdentifier">=</span><span class="synConstant">&quot;width=device-width, initial-scale=1&quot;</span><span class="synIdentifier">&gt;</span>
<span class="synPreProc">        </span><span class="synIdentifier">&lt;</span><span class="synStatement">title</span><span class="synIdentifier">&gt;</span>Hello Vue<span class="synIdentifier">&lt;/</span><span class="synStatement">title</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;</span><span class="synStatement">title</span><span class="synIdentifier">&gt;</span>HTML5サンプル<span class="synIdentifier">&lt;/</span><span class="synStatement">title</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">head</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;</span><span class="synStatement">body</span><span class="synIdentifier">&gt;</span>

    <span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;root&quot;</span><span class="synIdentifier">&gt;</span>
       <span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;message-box&quot;</span><span class="synIdentifier"> </span><span class="synType">style</span><span class="synIdentifier">=</span><span class="synConstant">&quot;width:300px;height:100px;background:#EAEFBD;&quot;</span><span class="synIdentifier">&gt;</span>
            <span class="synIdentifier">&lt;</span><span class="synStatement">p</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;title&quot;</span><span class="synIdentifier"> </span><span class="synType">style</span><span class="synIdentifier">=</span><span class="synConstant">&quot;background:#90BE6D;&quot;</span><span class="synIdentifier">&gt;</span>今日の天気<span class="synIdentifier">&lt;/</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>
            <span class="synIdentifier">&lt;</span><span class="synStatement">p</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;body&quot;</span><span class="synIdentifier"> </span><span class="synType">style</span><span class="synIdentifier">=</span><span class="synConstant">&quot;&quot;</span><span class="synIdentifier">&gt;</span>おはんきー！今日は雨<span class="synIdentifier">&lt;/</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>
       <span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>

<span class="synIdentifier">&lt;/</span><span class="synStatement">body</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">html</span><span class="synIdentifier">&gt;</span>
</pre>


<p>今日の天気だけじゃなくって、明日も明後日の天気も書くことにしよう。</p>

<p><figure class="figure-image figure-image-fotolife"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20171007/20171007161444.png" alt="f:id:konoemario:20171007161444p:plain:w300" title="f:id:konoemario:20171007161444p:plain:w300" class="hatena-fotolife" style="width:300px" itemprop="image"></span><figcaption>もっと書いたとき</figcaption></figure></p>

<p>そうすると、当然HTMLソースもこんな感じになる。</p>

<p><b>index.html</b></p>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synComment">&lt;!DOCTYPE html&gt;</span>
<span class="synIdentifier">&lt;</span><span class="synStatement">html</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;</span><span class="synStatement">head</span><span class="synIdentifier">&gt;</span>
<span class="synPreProc">        </span><span class="synIdentifier">&lt;</span><span class="synStatement">meta</span><span class="synIdentifier"> </span><span class="synType">charset</span><span class="synIdentifier">=</span><span class="synConstant">&quot;utf-8&quot;</span><span class="synIdentifier">&gt;</span>
<span class="synPreProc">        </span><span class="synIdentifier">&lt;</span><span class="synStatement">meta</span><span class="synIdentifier"> </span><span class="synType">name</span><span class="synIdentifier">=</span><span class="synConstant">&quot;viewport&quot;</span><span class="synIdentifier"> </span><span class="synType">content</span><span class="synIdentifier">=</span><span class="synConstant">&quot;width=device-width, initial-scale=1&quot;</span><span class="synIdentifier">&gt;</span>
<span class="synPreProc">        </span><span class="synIdentifier">&lt;</span><span class="synStatement">title</span><span class="synIdentifier">&gt;</span>Hello Vue<span class="synIdentifier">&lt;/</span><span class="synStatement">title</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;</span><span class="synStatement">title</span><span class="synIdentifier">&gt;</span>HTML5サンプル<span class="synIdentifier">&lt;/</span><span class="synStatement">title</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">head</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;</span><span class="synStatement">body</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;root&quot;</span><span class="synIdentifier">&gt;</span>
       <span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;message-box&quot;</span><span class="synIdentifier"> </span><span class="synType">style</span><span class="synIdentifier">=</span><span class="synConstant">&quot;width:300px;height:100px;background:#EAEFBD;&quot;</span><span class="synIdentifier">&gt;</span>
            <span class="synIdentifier">&lt;</span><span class="synStatement">p</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;title&quot;</span><span class="synIdentifier"> </span><span class="synType">style</span><span class="synIdentifier">=</span><span class="synConstant">&quot;background:#90BE6D;&quot;</span><span class="synIdentifier">&gt;</span>今日の天気<span class="synIdentifier">&lt;/</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>
            <span class="synIdentifier">&lt;</span><span class="synStatement">p</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;body&quot;</span><span class="synIdentifier"> </span><span class="synType">style</span><span class="synIdentifier">=</span><span class="synConstant">&quot;&quot;</span><span class="synIdentifier">&gt;</span>おはんきー！今日は雨<span class="synIdentifier">&lt;/</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>
       <span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
       <span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;message-box&quot;</span><span class="synIdentifier"> </span><span class="synType">style</span><span class="synIdentifier">=</span><span class="synConstant">&quot;width:300px;height:100px;background:#EAEFBD;&quot;</span><span class="synIdentifier">&gt;</span>
            <span class="synIdentifier">&lt;</span><span class="synStatement">p</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;title&quot;</span><span class="synIdentifier"> </span><span class="synType">style</span><span class="synIdentifier">=</span><span class="synConstant">&quot;background:#90BE6D;&quot;</span><span class="synIdentifier">&gt;</span>明日の天気<span class="synIdentifier">&lt;/</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>
            <span class="synIdentifier">&lt;</span><span class="synStatement">p</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;body&quot;</span><span class="synIdentifier"> </span><span class="synType">style</span><span class="synIdentifier">=</span><span class="synConstant">&quot;&quot;</span><span class="synIdentifier">&gt;</span>おはんきー！明日もきっと雨<span class="synIdentifier">&lt;/</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>
       <span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
       <span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;message-box&quot;</span><span class="synIdentifier"> </span><span class="synType">style</span><span class="synIdentifier">=</span><span class="synConstant">&quot;width:300px;height:100px;background:#EAEFBD;&quot;</span><span class="synIdentifier">&gt;</span>
            <span class="synIdentifier">&lt;</span><span class="synStatement">p</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;title&quot;</span><span class="synIdentifier"> </span><span class="synType">style</span><span class="synIdentifier">=</span><span class="synConstant">&quot;background:#90BE6D;&quot;</span><span class="synIdentifier">&gt;</span>明後日の天気<span class="synIdentifier">&lt;/</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>
            <span class="synIdentifier">&lt;</span><span class="synStatement">p</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;body&quot;</span><span class="synIdentifier"> </span><span class="synType">style</span><span class="synIdentifier">=</span><span class="synConstant">&quot;&quot;</span><span class="synIdentifier">&gt;</span>おはんきー！もうずっと雨<span class="synIdentifier">&lt;/</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>
       <span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>

<span class="synIdentifier">&lt;/</span><span class="synStatement">body</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">html</span><span class="synIdentifier">&gt;</span>
</pre>


<p>これを、Vue.jsのコンポーネントの機能を使って書いてみよう。</p>

<p>まずは、HTMLをこんな感じに修正します。  <br/>
HTMLではみなれないタグ「message」がでてきましたね。</p>

<p>また、Vue.js本体の読み込みと、後続のsample.jsも読み込んでおきます。<br/>
vue.jsに関してはCDNを利用していたのですが、読み込みがやけに遅かったのでコピペしてもってきています。</p>

<p><b>index.html</b></p>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synComment">&lt;!DOCTYPE html&gt;</span>
<span class="synIdentifier">&lt;</span><span class="synStatement">html</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;</span><span class="synStatement">head</span><span class="synIdentifier">&gt;</span>
<span class="synPreProc">        </span><span class="synIdentifier">&lt;</span><span class="synStatement">meta</span><span class="synIdentifier"> </span><span class="synType">charset</span><span class="synIdentifier">=</span><span class="synConstant">&quot;utf-8&quot;</span><span class="synIdentifier">&gt;</span>
<span class="synPreProc">        </span><span class="synIdentifier">&lt;</span><span class="synStatement">meta</span><span class="synIdentifier"> </span><span class="synType">name</span><span class="synIdentifier">=</span><span class="synConstant">&quot;viewport&quot;</span><span class="synIdentifier"> </span><span class="synType">content</span><span class="synIdentifier">=</span><span class="synConstant">&quot;width=device-width, initial-scale=1&quot;</span><span class="synIdentifier">&gt;</span>
<span class="synPreProc">        </span><span class="synIdentifier">&lt;</span><span class="synStatement">title</span><span class="synIdentifier">&gt;</span>Hello Vue<span class="synIdentifier">&lt;/</span><span class="synStatement">title</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;</span><span class="synStatement">title</span><span class="synIdentifier">&gt;</span>HTML5サンプル<span class="synIdentifier">&lt;/</span><span class="synStatement">title</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">head</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;</span><span class="synStatement">body</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;root&quot;</span><span class="synIdentifier">&gt;</span>
       <span class="synIdentifier">&lt;</span>message<span class="synIdentifier">&gt;&lt;/</span>message<span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>

<span class="synComment">&lt;!--- vue.jsを読み込む --&gt;</span>
<span class="synIdentifier">&lt;</span><span class="synStatement">script</span><span class="synIdentifier"> </span><span class="synType">src</span><span class="synIdentifier">=</span><span class="synConstant">&quot;vue.js&quot;</span><span class="synIdentifier">&gt;&lt;/</span><span class="synStatement">script</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;</span><span class="synStatement">script</span><span class="synIdentifier"> </span><span class="synType">src</span><span class="synIdentifier">=</span><span class="synConstant">&quot;sample.js&quot;</span><span class="synIdentifier">&gt;&lt;/</span><span class="synStatement">script</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">body</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">html</span><span class="synIdentifier">&gt;</span>
</pre>


<p>ここからは実際にVue.jsを書いていきます。</p>

<p>おもむろに、変数messageというものを書きます。<br/>
message変数は連想配列でtemplateキーを設定してあげます。<br/>
templateキーの値に、さきほどのHTMLの内容を書いちゃいます。</p>

<p><b>sample.js</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synComment">//HTMLタグmessageのもと</span>
<span class="synIdentifier">var</span> message = <span class="synIdentifier">{</span>
    template:`
    &lt;div <span class="synStatement">class</span>=<span class="synConstant">&quot;message-box&quot;</span> style=<span class="synConstant">&quot;width:300px;height:100px;background:#EAEFBD;&quot;</span>&gt;
    &lt;p <span class="synStatement">class</span>=<span class="synConstant">&quot;title&quot;</span> style=<span class="synConstant">&quot;background:#90BE6D;&quot;</span>&gt;今日の天気&lt;/p&gt;
    &lt;p <span class="synStatement">class</span>=<span class="synConstant">&quot;body&quot;</span> style=<span class="synConstant">&quot;&quot;</span>&gt;おはんきー！今日は雨&lt;/p&gt;
    &lt;/div&gt;    `
<span class="synIdentifier">}</span>
</pre>


<p>これだけでは、ただの変数を定義しただけなので、何も起きません。</p>

<p>肝となるVueインスタンスを生成します。</p>

<p><b>sample.js</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synComment">//HTMLタグmessageのもと</span>
<span class="synIdentifier">var</span> message = <span class="synIdentifier">{</span>
    template:`
    &lt;div <span class="synStatement">class</span>=<span class="synConstant">&quot;message-box&quot;</span> style=<span class="synConstant">&quot;width:300px;height:100px;background:#EAEFBD;&quot;</span>&gt;
    &lt;p <span class="synStatement">class</span>=<span class="synConstant">&quot;title&quot;</span> style=<span class="synConstant">&quot;background:#90BE6D;&quot;</span>&gt;今日の天気&lt;/p&gt;
    &lt;p <span class="synStatement">class</span>=<span class="synConstant">&quot;body&quot;</span> style=<span class="synConstant">&quot;&quot;</span>&gt;おはんきー！今日は雨&lt;/p&gt;
    &lt;/div&gt;    `
<span class="synIdentifier">}</span>


<span class="synComment">//Vueインスタンスを生成する</span>
<span class="synStatement">new</span> Vue(<span class="synIdentifier">{</span>
    el:<span class="synConstant">'#root'</span>,
<span class="synIdentifier">}</span>)
</pre>


<p>こんな感じで、Vueインスタンスを生成しました。<br/>
Vueインスタンスに、連想配列の形式で引数を渡すことで、いろいろな設定ができます。</p>

<p>一番重要そうなのが、おそらくelementの略称である「el」キーです。<br/>
これにHTMLに記載されているroot要素を指定してあげます。</p>

<p>こうすると、このVueインスタンスは、elに指定されたDOM要素を解析して、なんかこう紐付いてくれるわけですね。<br/>
要素の指定の仕方は、CSSセレクタと一緒みたいですね。</p>

<p><figure class="figure-image figure-image-fotolife"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20171008/20171008222935.png" alt="f:id:konoemario:20171008222935p:plain:w300" title="f:id:konoemario:20171008222935p:plain:w300" class="hatena-fotolife" style="width:300px" itemprop="image"></span><figcaption>Vueインスタンスと指定した要素が紐づく</figcaption></figure></p>

<p>要素と紐付けたら、作成したVueインスタンスにメソッドやらデータやらを持たせることでいろいろ便利にできるのですが、今回はコンポーネントです。<br/>
root要素に紐付いているVueインスタンスを生成する際に引数componentsを使用することで、このVueインスタンス配下には、このコンポーネントがいるぜ！としてあげます。</p>

<p><b>sample.js</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synComment">//HTMLタグmessageのもと</span>
<span class="synIdentifier">var</span> message = <span class="synIdentifier">{</span>
    template:`
    &lt;div <span class="synStatement">class</span>=<span class="synConstant">&quot;message-box&quot;</span> style=<span class="synConstant">&quot;width:300px;height:100px;background:#EAEFBD;&quot;</span>&gt;
    &lt;p <span class="synStatement">class</span>=<span class="synConstant">&quot;title&quot;</span> style=<span class="synConstant">&quot;background:#90BE6D;&quot;</span>&gt;今日の天気&lt;/p&gt;
    &lt;p <span class="synStatement">class</span>=<span class="synConstant">&quot;body&quot;</span> style=<span class="synConstant">&quot;&quot;</span>&gt;おはんきー！今日は雨&lt;/p&gt;
    &lt;/div&gt;    `
<span class="synIdentifier">}</span>


<span class="synStatement">new</span> Vue(<span class="synIdentifier">{</span>
    el:<span class="synConstant">'#root'</span>,
    <span class="synComment">//このVueインスタンスにはmessageコンポーネントがいるのよ</span>
    components:<span class="synIdentifier">{</span>
        message:message
    <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>)
</pre>


<p>さて、これでindex.htmlをブラウザで表示してみましょう。</p>

<p>一番最初の状態で表示されましたね。</p>

<p><figure class="figure-image figure-image-fotolife"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20171007/20171007160704.png" alt="f:id:konoemario:20171007160704p:plain:w300" title="f:id:konoemario:20171007160704p:plain:w300" class="hatena-fotolife" style="width:300px" itemprop="image"></span><figcaption>Vue.jsを使った</figcaption></figure></p>

<p>試しに、こんな感じでタグをさらに並べてあげれば同じものがくりかえし表示されますね。</p>

<p><b>index.html</b></p>

<pre class="code lang-html" data-lang="html" data-unlink>    <span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;root&quot;</span><span class="synIdentifier">&gt;</span>
       <span class="synIdentifier">&lt;</span>message<span class="synIdentifier">&gt;&lt;/</span>message<span class="synIdentifier">&gt;</span>
       <span class="synIdentifier">&lt;</span>message<span class="synIdentifier">&gt;&lt;/</span>message<span class="synIdentifier">&gt;</span>
       <span class="synIdentifier">&lt;</span>message<span class="synIdentifier">&gt;&lt;/</span>message<span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
</pre>


<p><figure class="figure-image figure-image-fotolife"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20171008/20171008223845.png" alt="f:id:konoemario:20171008223845p:plain:w300" title="f:id:konoemario:20171008223845p:plain:w300" class="hatena-fotolife" style="width:300px" itemprop="image"></span><figcaption>繰り返しつかえる！</figcaption></figure></p>

<p>繰り返しになりますが、作成したVueインスタンスにtemplateというオプションをもったオブジェクトをひかっけてあげることでできるってことがわかりますね！</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20171008/20171008230909.png" alt="f:id:konoemario:20171008230909p:plain:w300" title="f:id:konoemario:20171008230909p:plain:w300" class="hatena-fotolife" style="width:300px" itemprop="image"></span></p>

<h4 id="ちょっと休憩コンポーネント生成の方法">ちょっと休憩：コンポーネント生成の方法</h4>

<p>休憩といいつつ大事な話なの！でも自分が今回一番わかってない部分なので休憩というタイトルででごまかすよ！</p>

<p>さきほど、コンポーネントを生成する際に、こんな感じで定義しました。</p>

<p><b>sample.js</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synComment">//HTMLタグmessageのもと</span>
<span class="synIdentifier">var</span> message = <span class="synIdentifier">{</span>
    template:`
    &lt;div <span class="synStatement">class</span>=<span class="synConstant">&quot;message-box&quot;</span> style=<span class="synConstant">&quot;width:300px;height:100px;background:#EAEFBD;&quot;</span>&gt;
    &lt;p <span class="synStatement">class</span>=<span class="synConstant">&quot;title&quot;</span> style=<span class="synConstant">&quot;background:#90BE6D;&quot;</span>&gt;今日の天気&lt;/p&gt;
    &lt;p <span class="synStatement">class</span>=<span class="synConstant">&quot;body&quot;</span> style=<span class="synConstant">&quot;&quot;</span>&gt;おはんきー！今日は雨&lt;/p&gt;
    &lt;/div&gt;    `
<span class="synIdentifier">}</span>
</pre>


<p>いろいろな記事を見ていたりすると、Vue.extendというメソッドを使ってコンポーネントを生成することが多いです。</p>

<p><b>sample.js</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>
<span class="synComment">//Vue.extendでも作れるのよ</span>
<span class="synIdentifier">var</span> message = Vue.extend(<span class="synIdentifier">{</span>
    template:`
    &lt;div <span class="synStatement">class</span>=<span class="synConstant">&quot;message-box&quot;</span> style=<span class="synConstant">&quot;width:300px;height:100px;background:#EAEFBD;&quot;</span>&gt;
    &lt;p <span class="synStatement">class</span>=<span class="synConstant">&quot;title&quot;</span> style=<span class="synConstant">&quot;background:#90BE6D;&quot;</span>&gt;今日の天気&lt;/p&gt;
    &lt;p <span class="synStatement">class</span>=<span class="synConstant">&quot;body&quot;</span> style=<span class="synConstant">&quot;&quot;</span>&gt;おはんきー！今日は雨&lt;/p&gt;
    &lt;/div&gt;
    `
<span class="synIdentifier">}</span>);

<span class="synStatement">new</span> Vue(<span class="synIdentifier">{</span>
    el:<span class="synConstant">'#root'</span>,
    <span class="synComment">//このVueインスタンスにはmessageコンポーネントがいるのよ</span>
    components:<span class="synIdentifier">{</span>
        message:message
    <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>)
</pre>


<p>Vue.extendはおそらくVueのクラスメソッド的なものだと思う。<br/>
Vue.extendで生成したこのインスタンスmessageも、連想配列を定義したものと同様に親（ここでいうとroot要素を指定しているVueインスタンス)のcomponentにひっかけてあげる感じで使えるようになる。</p>

<p>このVue.extendで生成するのと、連想配列で書いてあげるので何か違いはあるのでしょうか。<br/>
ここがよくわかってないです。</p>

<p>その他にも、Vue.componentっていう生成方法もあったりします。<br/>
これはわかりやすくって、Vue.extendだったりただの連想配列の場合は、Vueインスタンスにコンポーネントとして登録する必要がありました。<br/>
一方、Vue.componentは、Vueインスタンスに登録することなく使用することができます。</p>

<p>こんな感じですね。</p>

<p><b>sample.js</b></p>

<pre class="code" data-lang="" data-unlink>
//Vue.componentを使用してみる
var hello = {
    template:&#34;&lt;h1&gt;Hello&lt;/h1&gt;&#34;
}
Vue.component(&#34;hello&#34;,hello);


var message = {
    template:`
    &lt;div class=&#34;message-box&#34; style=&#34;width:300px;height:100px;background:#EAEFBD;&#34;&gt;
    &lt;p class=&#34;title&#34; style=&#34;background:#90BE6D;&#34;&gt;今日の天気&lt;/p&gt;
    &lt;p class=&#34;body&#34; style=&#34;&#34;&gt;おはんきー！今日は雨&lt;/p&gt;
    &lt;/div&gt;
    `
};

new Vue({
    el:&#39;#root&#39;,
    //このVueインスタンスにはmessageコンポーネントがいるのよ
    components:{
        message:message
    }
})</pre>


<p><b>index.html</b></p>

<pre class="code lang-html" data-lang="html" data-unlink>    <span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;root&quot;</span><span class="synIdentifier">&gt;</span>
        <span class="synIdentifier">&lt;</span>message<span class="synIdentifier">&gt;&lt;/</span>message<span class="synIdentifier">&gt;</span>
        <span class="synIdentifier">&lt;</span>message<span class="synIdentifier">&gt;&lt;/</span>message<span class="synIdentifier">&gt;</span>
        <span class="synIdentifier">&lt;</span>message<span class="synIdentifier">&gt;&lt;/</span>message<span class="synIdentifier">&gt;</span>
        <span class="synIdentifier">&lt;</span>hello<span class="synIdentifier">&gt;&lt;/</span>hello<span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
</pre>


<p>とはいえ、Vue.componentに登録すればいいというわけでもなく、Vueインスタンスは作成する必要があります。<br/>
そして、Vueインスタンス作成の前に定義しておかないと使えません。</p>

<p>イメージ的に、Vue.componentに登録しておけば、Vueインスタンス生成時にVueインスタンスのcomponentsに勝手に登録してくれるっていう感じでしょうか。</p>

<p>それでは、そろそろ本題に戻ります。</p>

<h4 id="コンポーネントに値を渡すプロパティ">コンポーネントに値を渡す：プロパティ</h4>

<p>さて、さきほどこんな感じでmessageタグを並べました。</p>

<p><b>index.html</b></p>

<pre class="code lang-html" data-lang="html" data-unlink>    <span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;root&quot;</span><span class="synIdentifier">&gt;</span>
       <span class="synIdentifier">&lt;</span>message<span class="synIdentifier">&gt;&lt;/</span>message<span class="synIdentifier">&gt;</span>
       <span class="synIdentifier">&lt;</span>message<span class="synIdentifier">&gt;&lt;/</span>message<span class="synIdentifier">&gt;</span>
       <span class="synIdentifier">&lt;</span>message<span class="synIdentifier">&gt;&lt;/</span>message<span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
</pre>


<p>こちらを見て、あれ、でもおんなじ内容が並んでいるだけで、違う日の天気の内容が書けないじゃないか！と思いますよね。<br/>
こういう場合、htmlの属性として値を定義して、コンポーネントに渡すことができます。</p>

<p>こんな感じです。</p>

<p><b>index.html</b></p>

<pre class="code lang-html" data-lang="html" data-unlink>    <span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;root&quot;</span><span class="synIdentifier">&gt;</span>
 　   <span class="synIdentifier">&lt;</span>message-box<span class="synIdentifier"> </span><span class="synType">title</span><span class="synIdentifier">=</span><span class="synConstant">&quot;今日の天気&quot;</span><span class="synIdentifier"> body=</span><span class="synConstant">&quot;おはんきー！今日は雨&quot;</span><span class="synIdentifier">&gt;&lt;/</span>message-box<span class="synIdentifier">&gt;</span>
       <span class="synIdentifier">&lt;</span>message-box<span class="synIdentifier"> </span><span class="synType">title</span><span class="synIdentifier">=</span><span class="synConstant">&quot;明日の天気&quot;</span><span class="synIdentifier"> body=</span><span class="synConstant">&quot;おはんきー！明日もきっと雨&quot;</span><span class="synIdentifier">&gt;&lt;/</span>message-box<span class="synIdentifier">&gt;</span>
       <span class="synIdentifier">&lt;</span>message-box<span class="synIdentifier"> </span><span class="synType">title</span><span class="synIdentifier">=</span><span class="synConstant">&quot;今日の天気&quot;</span><span class="synIdentifier"> body=</span><span class="synConstant">&quot;おはんきー！もうずっと雨&quot;</span><span class="synIdentifier">&gt;&lt;/</span>message-box<span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
</pre>


<p>この値を受け取るために、コンポーネントも修正する必要があります。</p>

<p><b>sample.js</b></p>

<pre class="code" data-lang="" data-unlink>
//プロパティを追加する
var message = {
    props:[&#39;title&#39;,&#39;body&#39;],
    template:`
    &lt;div class=&#34;message-box&#34; style=&#34;width:300px;height:100px;background:#EAEFBD;&#34;&gt;
    &lt;p class=&#34;title&#34; style=&#34;background:#90BE6D;&#34;&gt;{{ title }}&lt;/p&gt;
    &lt;p class=&#34;body&#34; style=&#34;&#34;&gt;{{ body }}&lt;/p&gt;
    &lt;/div&gt;
    `
};
</pre>


<p>新しいオプション「props」を定義してあげます。<br/>
さらに、template内で、propsに定義したtitle、bodyを二重中括弧「{{ }}」を使ってhtml内に記載します。<br/>
二重中括弧でくくるのは、Vue.jsの重要な概念であるデータバインディング部分になるのですが、この辺は動画の最序盤であるので省略しちゃいます。</p>

<p>さて、コンポーネントの修正が終われば無事表示されました！</p>

<p><figure class="figure-image figure-image-fotolife"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20171007/20171007161444.png" alt="f:id:konoemario:20171007161444p:plain:w300" title="f:id:konoemario:20171007161444p:plain:w300" class="hatena-fotolife" style="width:300px" itemprop="image"></span><figcaption>ちゃんと表示された</figcaption></figure></p>

<p>余談ですが、このコンポーネントを使う側を親、使われる側を子と言ったりするみたいです。<br/>
いろいろな記事で親から子に値を渡すとか、子側で親のメソッドを実行するとか、いろいろあるのですが最初にこの概念がいまいちわからなくて混乱しました。</p>

<h4 id="コンポーネント子からVue親側のデータを更新する">コンポーネント(子)からVue(親側)のデータを更新する</h4>

<p>さて、本題です。</p>

<p>Vue.jsの動画のエピソード10では、モーダルウインドウを開いて閉じるという内容で進めていました。<br/>
ここではさらに簡単にするために、こんな感じにしました。</p>

<p><figure class="figure-image figure-image-fotolife"><div class="images-row mceNonEditable"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20171009/20171009000209.png" alt="f:id:konoemario:20171009000209p:plain:w300" title="f:id:konoemario:20171009000209p:plain:w300" class="hatena-fotolife" style="width:300px" itemprop="image"></span><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20171009/20171009000211.png" alt="f:id:konoemario:20171009000211p:plain:w300" title="f:id:konoemario:20171009000211p:plain:w300" class="hatena-fotolife" style="width:300px" itemprop="image"></span></div><figcaption>こんな画面</figcaption></figure></p>

<p>HTMLはこんな感じです。</p>

<p><b>index.html</b></p>

<pre class="code lang-html" data-lang="html" data-unlink>    <span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;root&quot;</span><span class="synIdentifier">&gt;</span>
       <span class="synIdentifier">&lt;</span><span class="synStatement">button</span><span class="synIdentifier">&gt;</span>押すとおはんきーが出るボタン<span class="synIdentifier">&lt;/</span><span class="synStatement">button</span><span class="synIdentifier">&gt;</span>
       <span class="synIdentifier">&lt;</span>message<span class="synIdentifier"> </span><span class="synType">title</span><span class="synIdentifier">=</span><span class="synConstant">&quot;今日の天気&quot;</span><span class="synIdentifier"> body=</span><span class="synConstant">&quot;おはんきー！今日は雨&quot;</span><span class="synIdentifier">&gt;&lt;/</span>message<span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
</pre>


<p>また、コンポーネント内におはんきーを閉じるボタンを追加しています。</p>

<p><b>sample.js</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synIdentifier">var</span> message = <span class="synIdentifier">{</span>
    props:<span class="synIdentifier">[</span><span class="synConstant">'title'</span>,<span class="synConstant">'body'</span><span class="synIdentifier">]</span>,
    template:`
    &lt;div <span class="synStatement">class</span>=<span class="synConstant">&quot;message-box&quot;</span> style=<span class="synConstant">&quot;width:300px;height:100px;background:#EAEFBD;&quot;</span>&gt;
    &lt;p <span class="synStatement">class</span>=<span class="synConstant">&quot;title&quot;</span> style=<span class="synConstant">&quot;background:#90BE6D;&quot;</span>&gt;<span class="synIdentifier">{{</span> title <span class="synIdentifier">}}</span>&lt;/p&gt;
    &lt;p <span class="synStatement">class</span>=<span class="synConstant">&quot;body&quot;</span> style=<span class="synConstant">&quot;&quot;</span>&gt;<span class="synIdentifier">{{</span> body <span class="synIdentifier">}}</span>&lt;/p&gt;
    &lt;button<span class="synConstant">&quot;&gt;おはんきーを閉じる&lt;/button&gt;</span>
    &lt;/div&gt;
    `
<span class="synIdentifier">}</span>;
</pre>


<p>このままだと、messageタグはボタンの押下に関係なく表示されてしまうので、v-showを使ってボタンが押されたときに表示するように変更します。</p>

<p><b>index.html</b></p>

<pre class="code lang-html" data-lang="html" data-unlink>    <span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;root&quot;</span><span class="synIdentifier">&gt;</span>
       <span class="synIdentifier">&lt;</span><span class="synStatement">button</span><span class="synIdentifier"> @click=</span><span class="synConstant">&quot;isVisible = true&quot;</span><span class="synIdentifier">&gt;</span>押すとおはんきーが出るボタン<span class="synIdentifier">&lt;/</span><span class="synStatement">button</span><span class="synIdentifier">&gt;</span>
       <span class="synIdentifier">&lt;</span>message<span class="synIdentifier"> </span><span class="synType">title</span><span class="synIdentifier">=</span><span class="synConstant">&quot;今日の天気&quot;</span><span class="synIdentifier"> body=</span><span class="synConstant">&quot;おはんきー！今日は雨&quot;</span><span class="synIdentifier"> v-show=</span><span class="synConstant">&quot;isVisible&quot;</span><span class="synIdentifier">&gt;&lt;/</span>message<span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
</pre>


<p>isVisibleを使って制御するので、VueインスタンスにデータisVisibleを持たせてあげます。</p>

<p><b>sample.js</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">new</span> Vue(<span class="synIdentifier">{</span>
    el:<span class="synConstant">'#root'</span>,
    components:<span class="synIdentifier">{</span>
        message:message
    <span class="synIdentifier">}</span>,
    data:<span class="synIdentifier">{</span>
        isVisible:<span class="synConstant">false</span>
    <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>)
</pre>


<p>こうすることで、「押すとおはんきーが出るボタン」を押すと、isVisibleがtrueとなり、無事おはんきーメッセージが表示されます。</p>

<p>問題となるのが、コンポーネント内に用意したおはんきーを閉じるボタンになります。<br/>
おはんきーメッセージの表示の状態を管理しているのはisVisibleになります。</p>

<p>なので、単純に考えるとコンポーネント側を以下のように修正するかもしれません。</p>

<p><b>sample.js</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synIdentifier">var</span> message = <span class="synIdentifier">{</span>
    props:<span class="synIdentifier">[</span><span class="synConstant">'title'</span>,<span class="synConstant">'body'</span><span class="synIdentifier">]</span>,
    template:`
    &lt;div <span class="synStatement">class</span>=<span class="synConstant">&quot;message-box&quot;</span> style=<span class="synConstant">&quot;width:300px;height:100px;background:#EAEFBD;&quot;</span>&gt;
    &lt;p <span class="synStatement">class</span>=<span class="synConstant">&quot;title&quot;</span> style=<span class="synConstant">&quot;background:#90BE6D;&quot;</span>&gt;<span class="synIdentifier">{{</span> title <span class="synIdentifier">}}</span>&lt;/p&gt;
    &lt;p <span class="synStatement">class</span>=<span class="synConstant">&quot;body&quot;</span> style=<span class="synConstant">&quot;&quot;</span>&gt;<span class="synIdentifier">{{</span> body <span class="synIdentifier">}}</span>&lt;/p&gt;
     &lt;!-- buttonの@clickでisVisibleを値を変更する--&gt;
     &lt;button @click=<span class="synConstant">&quot;isVisible = false&quot;</span>&gt;おはんきーを閉じる&lt;/button&gt;
    &lt;/div&gt;
    `
<span class="synIdentifier">}</span>;
</pre>


<p>しかし、これではうまくいきません。<br/>
isVisibleはVueインスタンスに保持されており、コンポーネント側からは直接触ることができません。<br/>
コンポーネントもインスタンスなので、異なるインスタンス同士で直接データを触ることはないという感じでしょうか。</p>

<p><figure class="figure-image figure-image-fotolife"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20171009/20171009001855.png" alt="f:id:konoemario:20171009001855p:plain:w300" title="f:id:konoemario:20171009001855p:plain:w300" class="hatena-fotolife" style="width:300px" itemprop="image"></span><figcaption>さわっちゃだめ</figcaption></figure></p>

<p>こういう場合は、カスタムイベントを使うことで解決します。</p>

<p>まず、親側にカスタムイベント「hoge」を追加します。<br/>
カスタムイベント「hoge」はisVisibleの値をfalseにするイベントです。</p>

<p><b>index.html</b></p>

<pre class="code lang-html" data-lang="html" data-unlink>    <span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;root&quot;</span><span class="synIdentifier">&gt;</span>
       <span class="synIdentifier">&lt;</span><span class="synStatement">button</span><span class="synIdentifier"> @click=</span><span class="synConstant">&quot;isVisible = true&quot;</span><span class="synIdentifier">&gt;</span>押すとおはんきーが出るボタン<span class="synIdentifier">&lt;/</span><span class="synStatement">button</span><span class="synIdentifier">&gt;</span>
       <span class="synIdentifier">&lt;</span>message<span class="synIdentifier"> </span><span class="synType">title</span><span class="synIdentifier">=</span><span class="synConstant">&quot;今日の天気&quot;</span><span class="synIdentifier"> body=</span><span class="synConstant">&quot;おはんきー！今日は雨&quot;</span><span class="synIdentifier"> v-show=</span><span class="synConstant">&quot;isVisible&quot;</span><span class="synIdentifier"> @hoge=</span><span class="synConstant">&quot;isVisible = false&quot;</span><span class="synIdentifier">&gt;&lt;/</span>message<span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
</pre>


<p>ちょっと自分で書いていてあれですが、親側ってVueインスタンスじゃないの？これってHTMLなんじゃ？と思ったりもします。<br/>
が、Vueインスタンスを生成する際にrootをelで指定しているので、このroot含めた配下のDOM要素とVueインスタンスは一心同体と考えていい気がします。</p>

<p>話がそれました。</p>

<p>次に、コンポーネントを修正します。</p>

<p><b>sample.js</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synIdentifier">var</span> message = <span class="synIdentifier">{</span>
    props:<span class="synIdentifier">[</span><span class="synConstant">'title'</span>,<span class="synConstant">'body'</span><span class="synIdentifier">]</span>,
    template:`
    &lt;div <span class="synStatement">class</span>=<span class="synConstant">&quot;message-box&quot;</span> style=<span class="synConstant">&quot;width:300px;height:100px;background:#EAEFBD;&quot;</span>&gt;
    &lt;p <span class="synStatement">class</span>=<span class="synConstant">&quot;title&quot;</span> style=<span class="synConstant">&quot;background:#90BE6D;&quot;</span>&gt;<span class="synIdentifier">{{</span> title <span class="synIdentifier">}}</span>&lt;/p&gt;
    &lt;p <span class="synStatement">class</span>=<span class="synConstant">&quot;body&quot;</span> style=<span class="synConstant">&quot;&quot;</span>&gt;<span class="synIdentifier">{{</span> body <span class="synIdentifier">}}</span>&lt;/p&gt;
     &lt;button @click=<span class="synConstant">&quot;$emit('hoge')&quot;</span>&gt;おはんきーを閉じる&lt;/button&gt;
    &lt;/div&gt;
    `
<span class="synIdentifier">}</span>;
</pre>


<p>emit関数がでてきました。<br/>
これは、引数で指定したイベントを発火されるものだと思っています。<br/>
こうすることで、ボタンが押されたら、hogeイベントが発生し、isVisibleの値が変更されます。</p>

<p><figure class="figure-image figure-image-fotolife"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20171009/20171009003830.png" alt="f:id:konoemario:20171009003830p:plain:w300" title="f:id:konoemario:20171009003830p:plain:w300" class="hatena-fotolife" style="width:300px" itemprop="image"></span><figcaption>イベント経由で更新しよう</figcaption></figure></p>

<p>今回はこれで以上になります！
動画を進めていく中でまたパンクしたら記事を書こうと思います。</p>

-----
--------
AUTHOR: konoemario
TITLE: laravel
BASENAME: 2017/10/04/212741
STATUS: Draft
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 10/04/2017 21:27:41
-----
BODY:
<p>Laravelの最新バージョンは、2017年10月現在、5.5です。</p>

<p>残念ながら、Udemyのオンライン講習や、書籍で5.5に対応しているものは自分が確認したところありませんでした。<br/>
とはいえ、入門程度であれば5.1でも5.2でもあまり影響がないかもしれません。
もし、よい書籍やサイトがあればぜひ教えてください！</p>

<h2>Laravelの環境を用意する</h2>

<p>さて、Laravelの環境、もといPHPの環境を用意します。<br/>
自分の端末に直接インストールしてもいいのですが、いまどきの環境ということで、「VirtualBox」と「Vagrant」を使っていきます。</p>

<p>ここに手順を記載しようと思ったのですが、こちらの記事で非常にわかりやすく書かれているので、こっちを見ていただいたほうがよいです。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fqiita.com%2F7968%2Fitems%2F97dd634608f37892b18a" title="【Laravel超入門】開発環境の構築（VirtualBox + Vagrant + Homestead + Composer） - Qiita" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://qiita.com/7968/items/97dd634608f37892b18a">qiita.com</a></cite></p>

-----
--------
AUTHOR: konoemario
TITLE: COBOLERがWebの技術をさわりはじめて1ヶ月経過した
BASENAME: 2017/10/02/085337
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 10/02/2017 08:53:37
CATEGORY: 仕事
CATEGORY: 雑談
CATEGORY: プログラム
IMAGE: https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20171002/20171002063810.jpg
-----
BODY:
<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20171002/20171002063810.jpg" alt="f:id:konoemario:20171002063810j:plain:w500" title="f:id:konoemario:20171002063810j:plain:w500" class="hatena-fotolife" style="width:500px" itemprop="image"></span>
金木犀の香りがする季節がやってまいりました今日このごろ、皆様はいかがお過ごしでしょうか。</p>

<p>私はというと、金融のユーザー系企業からWebも触れる企業に転職して1ヶ月が経ちました。</p>

<p>この手の記事はいっぱいあるのですが、みなさん大手SIer出身だったりして、自分をアピールするポートフォリオがあり、非常に優秀な方が多い印象です。</p>

<p>一方、私はというとゴミくずみたいなものなので、そういった視点でこの記事を書きたいと思います。</p>

<ul class="table-of-contents">
    <li><a href="#今までどんなことをやってきたの">今までどんなことをやってきたの？</a></li>
    <li><a href="#なんでやめたの">なんでやめたの？</a></li>
    <li><a href="#なんでWebに">なんでWebに？</a></li>
    <li><a href="#で転職して1ヶ月経過したわけだけど">で、転職して1ヶ月経過したわけだけど</a></li>
    <li><a href="#ここからが地獄だ">ここからが地獄だ</a></li>
    <li><a href="#これから">これから</a></li>
</ul>

<h3 id="今までどんなことをやってきたの">今までどんなことをやってきたの？</h3>

<p>金融系のユーザー系企業で、7年ほど働いてました。<br/>
キャリアの半分ほどは、COBOLがメインになります。<br/>
そう、COBOLなんです。</p>

<p>細かいところで言えばVBAだったり、CとVB.NETをさわってたりしてたんですが、転職活動の際にはその辺は一切触れられず、「COBOLかぁ、俺も昔やってたよ！」みたいな感じになるやつです。</p>

<p>それ以降は、ひたすら上流工程オンリーで、打ち合わせアンド打ち合わせアンド打ち合わせみたいなやつです。</p>

<p>SIerみたいなところだとよくいる人ですかね。</p>

<p>とはいえ、前職の会社以外で同じ状況の人と話したことがないので、ほんとにどれくらいいるのかっていうかって結構謎ですが。</p>

<h3 id="なんでやめたの">なんでやめたの？</h3>

<p>このへんは、やっていたことを見ればお察しみたいなところがありますよね。</p>

<p>想像していたのと違う、ものづくりがしたい、潰しが効かない人材はやばいみたいなのはあるあるかと思います。</p>

<p>自分の場合だと、そういったものももちろんあるのですが、将来的にリモートワークしたい、なんなら会社に所属しなくてもいいというところがありました。<br/>
金融系だと社外で仕事するっていうこと自体ハードルが高いですからね。</p>

<p>あとは、一回仕事辞めてみたいっていう単純な好奇心もありました。</p>

<p>ちなみに面接では、もっと仕事を楽しみたい、と言ってたりしました。</p>

<h3 id="なんでWebに">なんでWebに？</h3>

<p>もっと仕事を楽しみたい、というのは面接用でもあるのですがあながち嘘っていうわけでもないです。</p>

<p>1日の大半が、仕事になっちゃうわけですから楽しいほうがいいに決まっています。</p>

<p>この仕事を楽しそうにやってる業界ってどこだろうなぁということを考えた時、みなさんはどこの業界をイメージするでしょうか。</p>

<p>僕の場合、それがWebになります。</p>

<p>構造としてはシンプルで</p>

<p>エンジニアを楽しんでいる人は必然的に技術力が高くなる。<br/>
技術力が高い人が集まる業界はどこだろう、Webじゃないかなぁ。<br/>
楽しいひとが集まっているところに入れば、自分もその楽しさに触れたりできるはず（小声)</p>

<p>と、後半になるにつれて怪しくなってくるのですが、そんな理由になります。</p>

<h3 id="で転職して1ヶ月経過したわけだけど">で、転職して1ヶ月経過したわけだけど</h3>

<p><span style="font-size: 150%"><span style="color: #ff0000">助けて！社内ニートなの！</span></span></p>

<p>というのは、言い過ぎかもしれませんが、現在参入しやすい状態の案件がなく、開発作業ではなく見積もりのお手伝いみたいなことだけをやっていて、わりと暇な時間を過ごしております。</p>

<p>が、前職とは異なり、</p>

<ul>
<li>インターネットの閲覧制限がない</li>
<li>自由にソフトウェアをダウンロードできる</li>
<li>マシンスペックが高い</li>
<li>フレックスでのんびり出社できる</li>
<li>社内でWiFiが飛んでいて、ノートPCを持ち運んで人に聞けたりする</li>
<li>紙の資料がほぼない</li>
</ul>


<p>という環境、空いている時間に興味のあることをいろいろと試せるだけでわりと幸せを感じております。</p>

<p>また何より打ち合わせがほぼない、という状況がものすごく幸せです。<br/>
お昼にお腹がきちんと空きます。</p>

<p>これは今だけかもしれませんが。</p>

<p>デメリットもあげておくと、</p>

<ul>
<li>通勤が、下り電車だったのが上りになって満員電車になった</li>
<li>ビルが小さいのでちょうどよい休憩スペースがない</li>
<li>中途採用が多いので、人が若干ドライに感じる(人によってはメリットかも？)</li>
</ul>


<p>になります。</p>

<p>業種の違いから発生する差異もいろいろあるのですが、思いつくのはこんなところです。</p>

<h3 id="ここからが地獄だ">ここからが地獄だ</h3>

<p>とはいえ、そろそろ参入する案件に目処が経ち、前情報としてこんなことやるよっていうものが入ってきました。</p>

<p>とある新規Webシステムのフロント側をやることになりました。</p>

<p>ええ、フロントです。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=http%3A%2F%2Fd.hatena.ne.jp%2Ftomoya%2F20160410%2F1460274822" title=" 日本のWebエンジニアの大半が、変化に対応しきれなくなっている件について。 - 日々、とんは語る。" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://d.hatena.ne.jp/tomoya/20160410/1460274822">d.hatena.ne.jp</a></cite></p>

<p>フロントが何を指すのかってあんまりわかってないのですが、フロントエンジニアで検索すると、恐怖を煽られる記事がたくさんでてきます。</p>

<p>曰く、覚えること多すぎ問題です。</p>

<p>自分も2ヶ月の無職期間中にwebでなんかつくってみるかと始めたところ、</p>

<p>HTMLはこう書くのか、え？HTML5だとflexboxが便利なのね、というかさっさとbootstrap使おうかなぁ、あれbootstrapのこの部分どうしたらいいんだろう、bootstrap調べるか、あれ、HTMLの勉強してんのかな、bootstrapの勉強してんのかな、とよくわからなくなります。</p>

<p>cssを始めればsaasやらlessやらがでてきて、それをコンパイルするっていっていたり、gulpやらなんやらでタスク自動化とかもでてきます。</p>

<p>javascriptに関しては、もうね、よくわからないです(涙目)</p>

<p>環境面でいえば、nvmやらnpmやらnodebrewやらでてきて、おなじようにcomposerやらpyenv、virtualenvであれなんの管理だっけ、状態になっております。</p>

<p>しまいには、 vagrant、dockerもでてきてもうカオスです。</p>

<p>これからやっていけるのかしら。</p>

<p>今までgitを使ったバージョン管理もしたことがないですし、テストコードを書くという文化もなく、オブジェクト指向の言語を業務で使ったことがないんだよ！といまさらな不安が頭を擡げるわけです。</p>

<p>出した結論も、とりあえず走ろう(物理的な意味で)、そして英語も勉強しよう！ってなりました。
早速週末には練習では過去最高の20kmランをしました！足がパンパンです！
いや、コード書けよお前みたいな状態ですよ。</p>

<h3 id="これから">これから</h3>

<p>と、いろいろ書いたのですが、絶望してるかといえばそこまではしていないです。
まだ、この混乱っぷりを楽しむ余裕はありそうです。</p>

<p>というのもググって試してみれば、なんとなくかもしれませんが理解して前に進むことができます。
幸いいろいろな方のおかげでそういった記事はたくさんあがっています。</p>

<p>業務系のガラパゴス特有の誰もわからない業務、レガシーの謎のコードに対してぶつかっていったあの頃を思い出せば、なんのこれしき！といけそうな気もします。</p>

<p>ガラパゴスの解読率は30%を切っているかもしれませんが。</p>

<p><span style="font-size: 150%"><span style="color: #ff0000">次回のエントリーが退職記事ではないことを祈って！</span></span></p>

-----
--------
AUTHOR: konoemario
TITLE: pyenvでpythonをインストールできなかった
BASENAME: 2017/09/22/235340
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 09/22/2017 23:53:40
CATEGORY: Python
CATEGORY: ラズパイ
-----
BODY:
<p>根本的に解決しなかったので、こちらの記事から切り出しました。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=http%3A%2F%2Fwww.tohuandkonsome.site%2Fentry%2F2017%2F04%2F30%2F163148" title="ラズパイZeroでWringPiが使えるまでメモ - 豆腐とコンソメ" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://www.tohuandkonsome.site/entry/2017/04/30/163148">www.tohuandkonsome.site</a></cite></p>

<p>以下のバージョンでpythonをpyenvでインストールしたら、エラーになった。  <br/>
(OSではなく、pyenv側の仕様がかわったのかな）</p>

<p><b>python3.5.1をインストール</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ pyenv install 3.5.1
</pre>


<p>sslのパッケージがねえよ！ってことみたいなので、apt-getでインストールした。<br/>
ラズパイZeroとかだと、このエラーが出るまでに、結構な時間がかかるので、事前にインストールしておいたほうがよさげ。</p>

<p><b>pyenvのバージョン</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ pyenv <span class="synSpecial">-v</span>
pyenv 1.1.4<span class="synConstant">-2</span>-gf9183b5
</pre>


<p><b>OSのバージョン</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ lsb_release <span class="synSpecial">-a</span>
No LSB modules are available.
Distributor ID: Raspbian
Description:    Raspbian GNU/Linux 9.1 <span class="synPreProc">(</span><span class="synSpecial">stretch</span><span class="synPreProc">)</span>
Release:    9.1
Codename:   stretch
</pre>


<p><b>エラーの内容</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>WARNING: The Python bz2 extension was not compiled. Missing the bzip2 lib?
WARNING: The Python readline extension was not compiled. Missing the GNU readline lib?
ERROR: The Python ssl extension was not compiled. Missing the OpenSSL lib?
</pre>


<p><b>足りないパッケージの追加</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ sudo apt-get install libssl-dev libbz2-dev libreadline-dev
</pre>


<p><span style="font-size: 150%">
<span style="color: #ff0000">これでいける、と思ったらいけなかった。</span></span></p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2Fpyenv%2Fpyenv%2Fissues%2F950" title="ERROR: The Python ssl extension was not compiled. Missing the OpenSSL lib? · Issue #950 · pyenv/pyenv" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://github.com/pyenv/pyenv/issues/950">github.com</a></cite></p>

<p>どうもうまくいかないみたいです。</p>

<p>python3.5.3だったらうまくいったという記載があったので、試したところうまくいきました。</p>

<p><b>python3.5.3をインストール</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ pyenv install 3.5.3
</pre>


-----
--------
AUTHOR: konoemario
TITLE: 
BASENAME: 2017/09/21/205850
STATUS: Draft
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 09/21/2017 20:58:50
-----
BODY:

<pre class="code lang-sh" data-lang="sh" data-unlink>pi@raspberrypi:~ $ lsb_release <span class="synSpecial">-a</span>
No LSB modules are available.
Distributor ID: Raspbian
Description:    Raspbian GNU/Linux 9.1 <span class="synPreProc">(</span><span class="synSpecial">stretch</span><span class="synPreProc">)</span>
Release:    9.1
Codename:   stretch
</pre>


-----
--------
AUTHOR: konoemario
TITLE: apt-getの基本的なこと
BASENAME: 2017/09/20/204119
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 09/20/2017 20:41:19
CATEGORY: プログラム
IMAGE: https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170920/20170920181029.png
-----
BODY:
<p>Bash on Ubuntu on Windows環境(以降、Bow環境と略す)に、PHPをapt-getでインストールしようとしたときに、思い浮かんだ疑問を書く。</p>

<p>わりと、とりとめもない。</p>

<ul class="table-of-contents">
    <li><a href="#apt-get">apt-get</a></li>
    <li><a href="#sourceslist">sources.list</a></li>
    <li><a href="#誰が管理してるの">誰が管理してるの？</a></li>
    <li><a href="#公式に欲しいバージョンがない">公式に欲しいバージョンがない</a></li>
    <li><a href="#どうでもよい疑問">どうでもよい疑問</a></li>
</ul>

<h2 id="apt-get">apt-get</h2>

<p>新しいパッケージをインストールするとき、以下のコマンドを叩くと思う。<br/>
（そもそもパッケージだったりモジュールだったり、インストールって言葉もよくわからないね）</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ apt-get install パッケージ名
</pre>


<p>これを行うと、あら簡単、欲しかったコマンドだったり機能だったりが使えるようになる。</p>

<p>ちなみに、欲しい機能をググった時、apt-getじゃなくて、yumだったりすると、そっとブラウザバックするのは自分だけじゃないはずだ。</p>

<p>普段、Windowsを使っている自分からすると、結構不思議なことだったりする。</p>

<p>apt-getとパッケージ名だけでどうして取れてこれるんだろうと。</p>

<p>Windowsだったら、自分で欲しいアプリケーションを検索して、そのサイトにいってダウンロードしていたから。</p>

<p>ということで調べてみる。</p>

<h2 id="sourceslist">sources.list</h2>

<p>以下のディレクトリを見てみよう。</p>

<p><b>sources.listを覗く</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ view /etc/apt/sources.list
</pre>


<p>ここには、URLが書いてあって、apt-getが叩かれたときに、見に行く場所がちゃんと書かれている。</p>

<p><b>sources.list(抜粋)</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink><span class="synComment"># newer versions of the distribution.</span>
deb http://jp.archive.ubuntu.com/ubuntu/ xenial main restricted
<span class="synComment">## Major bug fix updates produced after the final release of the</span>
<span class="synComment">## distribution.</span>
deb http://jp.archive.ubuntu.com/ubuntu/ xenial-updates main restricted
</pre>


<p>ブラウザで見ると、「sources.list」に書かれているURLにアクセスしてみると、こんな感じのページが表示される。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170920/20170920181029.png" alt="f:id:konoemario:20170920181029p:plain:w300" title="f:id:konoemario:20170920181029p:plain:w300" class="hatena-fotolife" style="width:300px" itemprop="image"></span></p>

<p>ちなみに、このパッケージが置いてある場所をリポジトリということがあるみたい。</p>

<p>細かいことはわからないけれども、すこしわかった気がする。</p>

<h2 id="誰が管理してるの">誰が管理してるの？</h2>

<p>ところで、このリポジトリ、誰が管理しているのだろうか。</p>

<p>実は、こうなんだよ、と言えればいいのですが、残念ながらよくわかってないです。</p>

<p>きっと、Ubuntuを作っているすごい方達が、このパッケージのこのバージョンはリポジトリに追加しても大丈夫！ってやっているんじゃないかと思っている。</p>

<p>ちなみに、公式のリポジトリのURLはミラーサイト含め、世界中にある。</p>

<p><a href="http://www.ubuntulinux.jp/ubuntu/mirrors">&#x65E5;&#x672C;&#x56FD;&#x5185;&#x306E;&#x30C0;&#x30A6;&#x30F3;&#x30ED;&#x30FC;&#x30C9;&#x30B5;&#x30A4;&#x30C8; | Ubuntu Japanese Team</a></p>

<p>ここから、落とす分には安全ということなんでしょうかね。</p>

<h2 id="公式に欲しいバージョンがない">公式に欲しいバージョンがない</h2>

<p>この記事を書くきっかけになったことなんですが、公式に欲しいバージョンがなかったりすることもあります。</p>

<p>今回でいえば、phpの7.1系がほしかったのですが、7.0までしかありませんでした。</p>

<p>こういうときは、7.1を公開している公式以外のリポジトリを追加することで参照できるようになるとのことです。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fwww.digitalocean.com%2Fcommunity%2Ftutorials%2Fhow-to-upgrade-to-php-7-on-ubuntu-14-04" title="How To Upgrade to PHP 7 on Ubuntu 14.04 | DigitalOcean" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://www.digitalocean.com/community/tutorials/how-to-upgrade-to-php-7-on-ubuntu-14-04">www.digitalocean.com</a></cite></p>

<p><b>リポジトリを追加</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ sudo add-apt-repository ppa:ondrej/php
</pre>


<p>いまいちこのコマンドからURLが読み取れないので、どういう仕組みなのかがわかりませんが、おそらく以下のサイトに置いてあるアプリを落としているように思えます。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Flaunchpad.net%2F~ondrej%2F%2Barchive%2Fubuntu%2Fphp" title="***** The main PPA for PHP (5.6, 7.0, 7.1) with many PECL extens... : Ondřej Surý" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://launchpad.net/~ondrej/+archive/ubuntu/php">launchpad.net</a></cite></p>

<p>また、コマンド内にある、ppaですが、個人のリポジトリのことをPPAと呼ぶみたいです。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fallabout.co.jp%2Fgm%2Fgc%2F438675%2F" title="UbuntuのPPAて何？" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://allabout.co.jp/gm/gc/438675/">allabout.co.jp</a></cite></p>

<p>ここまで書いて、AppleのAppleStoreが、Ubuntuの公式リポジトリに似てるなぁと思いました。</p>

<h2 id="どうでもよい疑問">どうでもよい疑問</h2>

<p>Ubuntuでインストールするパッケージ名って、皆さんどうやって判断しているのだろうか。  <br/>
phpの古いバージョンのリファレンスを参考に進めていたりすると、名前が変わったりしていて、どれが正しいのかわからないことが多い。</p>

-----
--------
AUTHOR: konoemario
TITLE: BoW環境でnpm(5.3.0)がエラーになる（未解決)
BASENAME: 2017/09/13/211604
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 09/13/2017 21:16:04
CATEGORY: Node.js
CATEGORY: プログラム
-----
BODY:
<p><span style="color: #ff0000">解決の見通しが立っていない記事です。</span></p>

<ul class="table-of-contents">
    <li><a href="#実行環境">実行環境</a></li>
    <li><a href="#事象">事象</a></li>
    <li><a href="#追記2017919まだだめ">追記(2017/9/19)　まだだめ</a></li>
</ul>

<p>Windows10かBash on Ubuntu on Windows(Bow)でBashを使えるようになりました！</p>

<p>MacでもWindowsでも、似たような操作で作業できるっていいですよね！</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=http%3A%2F%2Fqiita.com%2FAruneko%2Fitems%2Fc79810b0b015bebf30bb" title="Bash on Ubuntu on Windowsをインストールしてみよう！ - Qiita" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://qiita.com/Aruneko/items/c79810b0b015bebf30bb">qiita.com</a></cite></p>

<p>自宅のPCはWindows8.1でWindows10の無料アップデートをしなくって最近後悔してます。</p>

<p>それでなんですが、まったく問題なく使えているかというと、ちょこちょこ問題がでています。</p>

<p> 直近では、BoW環境でnode.jsのパッケージ管理マネジャー「npm」がエラーになってしまって、困ってます。</p>

<p>どなたか、うまくいく方がいればコメントをいただけると幸いです。</p>

<h3 id="実行環境">実行環境</h3>

<ul>
<li>Windows10のWindows on Bashを使用</li>
</ul>


<p><b>バージョン</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>tohu@<span class="synConstant">9141-063578</span>:~/git/node/sample_basic$ cat /etc/lsb-release
<span class="synIdentifier">DISTRIB_ID</span>=Ubuntu
<span class="synIdentifier">DISTRIB_RELEASE</span>=16.04
<span class="synIdentifier">DISTRIB_CODENAME</span>=xenial
<span class="synIdentifier">DISTRIB_DESCRIPTION</span>=<span class="synStatement">&quot;</span><span class="synConstant">Ubuntu 16.04.3 LTS</span><span class="synStatement">&quot;</span>
</pre>


<p><b>node.jsとnpmのバージョン</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>tohu@<span class="synConstant">9141-063578</span>:~/git/node/sample_basic$ npm <span class="synSpecial">-v</span>
5.3.0
tohu@<span class="synConstant">9141-063578</span>:~/git/node/sample_basic$ node <span class="synSpecial">-v</span>
v8.5.0
</pre>


<h3 id="事象">事象</h3>

<p>以下のように、npmでなにかしらインストールを行おうとすると、エラーになっちゃいます。</p>

<p><b>試しにnpmでexpressをインストール</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>tohu@<span class="synConstant">9141-063578</span>:~/git/node/sample_basic$ npm install expresss
Unhandled rejection Error: ENOENT: no such file or directory, <span class="synStatement">chmod</span> <span class="synStatement">'</span><span class="synConstant">/mnt/c/Users/home/tohu/.npm/_cacache/content-v2/sha512/e7/26/497b29c02da80908b90563a758d58b73f084a698ee4d9b01652c3c74ae38bef8b6bfa92ee2f7f1bd88aa2e5b690ab8b0f8735e32703ef2e4d50990dfb5c4</span><span class="synStatement">'</span>

npm ERR! cb<span class="synPreProc">()</span> never called!

npm ERR! This is an error with npm itself. Please report this error at:
npm ERR!     <span class="synStatement">&lt;</span>https://github.com/npm/npm/issues<span class="synStatement">&gt;</span>

npm ERR! A <span class="synStatement">complete</span> log of this run can be found <span class="synError">in</span>:
npm ERR!     /mnt/c/Users/home/tohu/.npm/_logs/<span class="synConstant">2017-09</span>-13T08_53_31_272Z-debug.log
</pre>


<p>「no such file or directory」といわれているディレクトリを見ても、ちゃんとファイルがいたりするので謎です。</p>

<p>ためしに、nodebrewでnode.jsのバージョンを「v7.6.0」にかえて、npmのバージョンが「4.1.2」だとうまくいったりするので、npmに原因があるのでしょうか。</p>

<p><b>nodeのバージョン一覧</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>tohu@<span class="synConstant">9141-063578</span>:~/git/node/sample_basic$ nodebrew list
v7.6.0
v8.5.0
</pre>


<p><b>v7.6.0を有効にする</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>tohu@<span class="synConstant">9141-063578</span>:~/git/node/sample_basic$ nodebrew use v7.6.0
use v7.6.0
</pre>


<p><b>node.jsとnpmのバージョン</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>tohu@<span class="synConstant">9141-063578</span>:~/git/node/sample_basic$ node <span class="synSpecial">-v</span>
v7.6.0
tohu@<span class="synConstant">9141-063578</span>:~/git/node/sample_basic$ npm <span class="synSpecial">-v</span>
4.1.2
tohu@<span class="synConstant">9141-063578</span>:~/git/node/sample_basic$
</pre>


<h3 id="追記2017919まだだめ">追記(2017/9/19)　まだだめ</h3>

<p>ちょこちょことリリースが来てるみたいなので、アップデートした。</p>

<p>リリースノートを見ると、「npm is not working」がfixされたよ！とか書いてあるので、期待したんだ。</p>

<p>が、結論をいえば事象は相変わらずだった。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fmsdn.microsoft.com%2Fja-jp%2Fcommandline%2Fwsl%2Frelease_notes" title="Bash on Ubuntu on Windows - Release Notes" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://msdn.microsoft.com/ja-jp/commandline/wsl/release_notes">msdn.microsoft.com</a></cite></p>

<p><b>アップデート</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ sudo apt-get update
$ sudo apt-get upgrade
</pre>


<p>updateがやけに遅かったので、終わった後に、リポジトリを日本に変更した。</p>

<p>※以下の記事を参考にさせてていただきました。<br/>
<a href="http://eng-notebook.com/blog-entry-238/">Bash on Ubuntu on Windows&#x306E;apt-get&#xFF08;apt&#xFF09;&#x3092;&#x9AD8;&#x901F;&#x5316;&#x3059;&#x308B; - Engineer&#39;s Notebook</a></p>

<p><b>バージョンを確認</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>tohu@<span class="synConstant">9141-063578</span>:~/git/node/sample_basic$  cat /etc/lsb-release
<span class="synIdentifier">DISTRIB_ID</span>=Ubuntu
<span class="synIdentifier">DISTRIB_RELEASE</span>=16.04
<span class="synIdentifier">DISTRIB_CODENAME</span>=xenial
<span class="synIdentifier">DISTRIB_DESCRIPTION</span>=<span class="synStatement">&quot;</span><span class="synConstant">Ubuntu 16.04.3 LTS</span><span class="synStatement">&quot;</span>
</pre>


<p>バージョンが上がっているのか、よくわからず。。。</p>

<p>githubにも同じような質問があるのだけれども、リリースノート分の修正が反映されているって、どうやって判断すればいいのかしら。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2FMicrosoft%2FBashOnWindows%2Fissues%2F1728" title="how to check version/build number of WLS · Issue #1728 · Microsoft/BashOnWindows" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://github.com/Microsoft/BashOnWindows/issues/1728">github.com</a></cite></p>

<p>※ちなみにWindowsそのもののバージョン
<span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170919/20170919185749.png" alt="f:id:konoemario:20170919185749p:plain:w500" title="f:id:konoemario:20170919185749p:plain:w500" class="hatena-fotolife" style="width:500px" itemprop="image"></span></p>

-----
--------
AUTHOR: konoemario
TITLE: RaspberryPiでドローンの自律飛行を目指す
BASENAME: 2017/09/18/224357
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 09/18/2017 22:43:57
CATEGORY: ラズパイ
CATEGORY: ドローン
-----
BODY:
<ul class="table-of-contents">
    <li><a href="#新たな夢">新たな夢</a></li>
    <li><a href="#購入したドローン">購入したドローン</a><ul>
            <li><a href="#ドローンを開封してみる">ドローンを開封してみる</a></li>
            <li><a href="#飛ばしてみる">飛ばしてみる</a></li>
        </ul>
    </li>
</ul>

<h1 id="新たな夢">新たな夢</h1>

<p>RaspBerryPiでラジコンを動かせるようになったとき、次に目指すべきものは何か、そんなこと考えてふと空を見た。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=http%3A%2F%2Fwww.tohuandkonsome.site%2Fentry%2F2017%2F08%2F09%2F095603" title="RaspBerryPiでラジコンをつくる(13):コントロール画面が完成した - 豆腐とコンソメ" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://www.tohuandkonsome.site/entry/2017/08/09/095603">www.tohuandkonsome.site</a></cite></p>

<p>空だ。</p>

<p>空を飛ぼう。</p>

<p>そして我々は、ラズパイはきっと空を飛ぶと確信していた。</p>

<p>というのは、全部嘘なんだけれども、ドローンがおもしろそうなので、ドローンを触ってみたいと思います。</p>

<p>ちなみに、「ラズパイ　ドローン」で検索すると、既にラズパイを使って自律飛行を目指した記事があったりします。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=http%3A%2F%2Fqiita.com%2Fshigeru-yokochi%2Fitems%2F0a0a4f06cd8dec553159" title="Raspberry Pi Zero で自律飛行ドローンを作るぞ（第１回：浮上まで） - Qiita" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://qiita.com/shigeru-yokochi/items/0a0a4f06cd8dec553159">qiita.com</a></cite></p>

<p>とても興味深い内容で、想像以上にいばらの道な予感がしています。</p>

<p>私も自律飛行を目指していこうと思うのですが、ラジコン以上に先が見えていません。</p>

<p>が、ここからやっていこうみたいな道筋はあるので、少しずつ進めていきたいと思います。</p>

<h1 id="購入したドローン">購入したドローン</h1>

<p>とりあえず、ドローンを触ってみようと思ったので、適当に購入することにしました。</p>

<p>ドローンの価格帯は3000円ぐらいから青天井と多岐に渡るのですが、とりあえず安定して飛ばせそうということに重点をおいた結果、以下を購入しました。</p>

<p><a href="https://www.amazon.co.jp/gp/product/B00V7XYAXM/ref=oh_aui_detailpage_o01_s00?ie=UTF8&psc=1">https://www.amazon.co.jp/gp/product/B00V7XYAXM/ref=oh_aui_detailpage_o01_s00?ie=UTF8&psc=1</a>
<div class="hatena-asin-detail"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00V7XYAXM/hatena-blog-22/"><img src="https://images-fe.ssl-images-amazon.com/images/I/41%2Bo8tZ%2BOgL._SL160_.jpg" class="hatena-asin-detail-image" alt="Holy Stone ドローンカメラ付き 気圧センサーによる高度維持 720P HDカメラ マルチコプター 2.4GHz 4CH 6軸ジャイロ クアッドコプター バッテリー2個付き 日本語説明書付き 国内認証済み RTF F181C" title="Holy Stone ドローンカメラ付き 気圧センサーによる高度維持 720P HDカメラ マルチコプター 2.4GHz 4CH 6軸ジャイロ クアッドコプター バッテリー2個付き 日本語説明書付き 国内認証済み RTF F181C"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00V7XYAXM/hatena-blog-22/">Holy Stone ドローンカメラ付き 気圧センサーによる高度維持 720P HDカメラ マルチコプター 2.4GHz 4CH 6軸ジャイロ クアッドコプター バッテリー2個付き 日本語説明書付き 国内認証済み RTF F181C</a></p><ul><li><span class="hatena-asin-detail-label">出版社/メーカー:</span> Holy Stone</li><li><span class="hatena-asin-detail-label">メディア:</span> おもちゃ＆ホビー</li><li><a href="http://d.hatena.ne.jp/asin/B00V7XYAXM/hatena-blog-22" target="_blank">この商品を含むブログを見る</a></li></ul></div><div class="hatena-asin-detail-foot"></div></div></p>

<p>こちらは購入していませんが、レゴのドローンとかもあったりして気になりますね。<br/>
(安定して飛ばないみたいですが)<br/>
<iframe src="https://hatenablog-parts.com/embed?url=http%3A%2F%2Fjapanese.engadget.com%2F2016%2F09%2F27%2Flego-15%2F" title="LEGO、空を飛ぶ。自作LEGOをドローン化するキットが販売開始。15分で完成、壊れてもいい設計 - Engadget Japanese" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://japanese.engadget.com/2016/09/27/lego-15/">japanese.engadget.com</a></cite></p>

<h3 id="ドローンを開封してみる">ドローンを開封してみる</h3>

<p>ドローンが家に届いたので、さっそくセットアップをしていきたいと思います。</p>

<p>こんな感じのパッケージに入っておりました。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170918/20170918215245.jpg" alt="f:id:konoemario:20170918215245j:plain:w500" title="f:id:konoemario:20170918215245j:plain:w500" class="hatena-fotolife" style="width:500px" itemprop="image"></span></p>

<p>中を開けてみると、こんな感じです。<br/>
大きさがわかるようにiPhone6を並べています。</p>

<p>1万円以下のドローンは手のひらサイズのものが多かったりするのですが、結構大きいです。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170918/20170918215250.jpg" alt="f:id:konoemario:20170918215250j:plain:w500" title="f:id:konoemario:20170918215250j:plain:w500" class="hatena-fotolife" style="width:500px" itemprop="image"></span></p>

<p>こちらがドローンを操作するコントローラーです。<br/>
単三電池4本(別売り)を入れてあげます。<br/>
<span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170918/20170918215254.jpg" alt="f:id:konoemario:20170918215254j:plain:w500" title="f:id:konoemario:20170918215254j:plain:w500" class="hatena-fotolife" style="width:500px" itemprop="image"></span></p>

<p>バッテリーと予備バッテリーがついていて、一回の充電に100分ほどかかります。<br/>
肝心の一回の充電でどれくらい飛べるかがわからない。<br/>
外で10分ほど遊んだ感じ、まだ動けそうでした。</p>

<p><figure class="figure-image figure-image-fotolife"><div class="images-row mceNonEditable"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170918/20170918215300.jpg" alt="f:id:konoemario:20170918215300j:plain:w300" title="f:id:konoemario:20170918215300j:plain:w300" class="hatena-fotolife" style="width:300px" itemprop="image"></span><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170918/20170918215307.jpg" alt="f:id:konoemario:20170918215307j:plain:w300" title="f:id:konoemario:20170918215307j:plain:w300" class="hatena-fotolife" style="width:300px" itemprop="image"></span></div><figcaption>バッテリー</figcaption></figure></p>

<p>充電が終えたらそのまま、飛べるかとおもいきた、プロペラのカパーと、着陸時のスタンドをつける必要があります。<br/>
といっても、付属の部品で15分もあれば作業が完了します。</p>

<p><figure class="figure-image figure-image-fotolife"><div class="images-row mceNonEditable"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170918/20170918215313.jpg" alt="f:id:konoemario:20170918215313j:plain:w300" title="f:id:konoemario:20170918215313j:plain:w300" class="hatena-fotolife" style="width:300px" itemprop="image"></span><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170918/20170918215319.jpg" alt="f:id:konoemario:20170918215319j:plain:w300" title="f:id:konoemario:20170918215319j:plain:w300" class="hatena-fotolife" style="width:300px" itemprop="image"></span></div><figcaption>カバーとラダーをつける</figcaption></figure></p>

<p>とうことで、こちらが完成したドローンになります。<br/>
充電も終え、コントローラとリンクしている状態になります。</p>

<p>コントローラーの命令を、ドローンがどのように受け取っているかが、今後の鍵になるような気がしています。</p>

<p><figure class="figure-image figure-image-fotolife"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170918/20170918215332.jpg" alt="f:id:konoemario:20170918215332j:plain:w500" title="f:id:konoemario:20170918215332j:plain:w500" class="hatena-fotolife" style="width:500px" itemprop="image"></span><figcaption>完成したドローン</figcaption></figure></p>

<h3 id="飛ばしてみる">飛ばしてみる</h3>

<p>さっそく近所の公園で飛ばしてみました。</p>

<p>当初は、木や草むらにぶつけまくっていたのですが、10分ほどで簡単な操作なら問題なく行えるようになりました。</p>

<p>木とかにぶつけても壊れたりしなかったので安心しました。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170918/20170918223838.png" alt="f:id:konoemario:20170918223838p:plain:w300" title="f:id:konoemario:20170918223838p:plain:w300" class="hatena-fotolife" style="width:300px" itemprop="image"></span></p>

<p>そして、このドローン、microSDを挿すことで、動画だったり、写真を取ることができるみたいなのです。</p>

<p>せっかくなので、撮ればよかったのですが、手元に空いているmicroSDがなかったのえ、今回は撮りませんでした。</p>

<p>とはいえ、このドローン、値段の割にはかなり遊べそうです。</p>

<p>そして、このドローンを元に自律飛行を目指していきたいと思います！</p>

-----
--------
AUTHOR: konoemario
TITLE: 
BASENAME: 2017/09/13/230852
STATUS: Draft
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 09/13/2017 23:08:52
-----
BODY:
<h2>本題</h2>

<p>参考にさせていただいた記事<br/>
<a href="https://kevgriffin.com/how-to-run-visual-studio-code-from-terminal-on-mac-osx/">How to run Visual Studio Code from Terminal on Mac OSX | Kevin Griffin | Developer, Trainer, Entrepreneur</a></p>

<p><b>.bash_profileの編集</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ <span class="synStatement">cd</span> ~
$ vim .bash_profile
</pre>


<p><b>.bash_profile</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink><span class="synComment">#vscodeの起動</span>
<span class="synIdentifier"> code () {</span> <span class="synIdentifier">VSCODE_CWD</span>=<span class="synStatement">&quot;</span><span class="synPreProc">$PWD</span><span class="synStatement">&quot;</span> open <span class="synSpecial">-n</span> <span class="synSpecial">-b</span> <span class="synStatement">&quot;</span><span class="synConstant">com.microsoft.VSCode</span><span class="synStatement">&quot;</span> <span class="synSpecial">--</span>
 args <span class="synPreProc">$*</span> <span class="synStatement">;</span><span class="synIdentifier">}</span>
</pre>


<p><b>.bash_profileの反映</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ <span class="synStatement">source</span> .bash_profile
</pre>


<p>例えば、React.jsのサンプルコードを実行したいなって思った時に、</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ <span class="synStatement">mkdir</span> react
$ <span class="synStatement">cd</span> react
$ code .
</pre>


-----
--------
AUTHOR: konoemario
TITLE: 
BASENAME: 2017/09/14/213831
STATUS: Draft
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 09/12/2017 23:17:28
IMAGE: https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170912/20170912220106.jpg
-----
BODY:
<p><iframe src="https://hatenablog-parts.com/embed?url=http%3A%2F%2Fwww.tohuandkonsome.site%2Fentry%2F2017%2F04%2F29%2F223718" title="RaspBerry Pi Zeroの初期設定メモ  - 豆腐とコンソメ" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://www.tohuandkonsome.site/entry/2017/04/29/223718">www.tohuandkonsome.site</a></cite></p>

<h3>GPIO Hammer Headerを使う</h3>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170912/20170912220106.jpg" alt="f:id:konoemario:20170912220106j:plain:w500" title="f:id:konoemario:20170912220106j:plain:w500" class="hatena-fotolife" style="width:500px" itemprop="image"></span></p>

<h4>イメージを取得する</h4>

<p>おもむろに、公式サイトにアクセスして、最軽量の「RASPBIAN STRETCH LITE」をダウンロードします。<br/>
<iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fwww.raspberrypi.org%2Fdownloads%2Fraspbian%2F" title="Download Raspbian for Raspberry Pi" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://www.raspberrypi.org/downloads/raspbian/">www.raspberrypi.org</a></cite></p>

<h4>イメージを書き込み</h4>

<p>例のごとく、「Etcher」というアプリケーションでイメージを書き込みます。<br/>
<span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170912/20170912215242.png" alt="f:id:konoemario:20170912215242p:plain:w500" title="f:id:konoemario:20170912215242p:plain:w500" class="hatena-fotolife" style="width:500px" itemprop="image"></span></p>

<h3>MicroSDを挿す</h3>

<h3>いざ起動</h3>

<p>USBハブと、wifiドングルと、HDMIケーブルと、キーボードをつなげて、最後に電源ケーブルを挿すと、起動。</p>

<p>キーボードが認識してくれれば、普通に入力できる。<br/>
初回のユーザーはpi、でログインパスワードはraspberryでログインできる。</p>

<h3>キーボードレイアウトを変更する。</h3>

<p>以下のコマンドでラズパイのコンフィグ画面を開く。</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ sudo raspi-config 
</pre>


<p>キーボードレイアウトを自分の環境に変更しておこう。<br/>
そのままで問題なければいいんだけれども、パイプ「|」とか打てなくて面倒だったりする。</p>

<h3>sshで接続できるようにする</h3>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ sudo raspi-config 
</pre>


<h3>sshでパソコンから接続できるようにする</h3>

<h4>事前の確認</h4>

<p><b>ネットワークカードであるwifiドングルが認識していること</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ lsusb
Bus <span class="synConstant">001</span> Device <span class="synConstant">004</span>: ID <span class="synConstant">0411</span>:01ee BUFFALO INC. <span class="synPreProc">(</span><span class="synSpecial">formerly MelCo., Inc.</span><span class="synPreProc">)</span> WLI-UC-GNM2 Wireless LAN Adapter <span class="synStatement">[</span>Ralink RT3070<span class="synStatement">]</span>
Bus <span class="synConstant">001</span> Device <span class="synConstant">005</span>: ID 05ac:<span class="synConstant">0251</span> Apple, Inc. 
Bus <span class="synConstant">001</span> Device <span class="synConstant">003</span>: ID 05ac:<span class="synConstant">1006</span> Apple, Inc. Hub <span class="synError">in</span> Aluminum Keyboard
Bus <span class="synConstant">001</span> Device <span class="synConstant">002</span>: ID 05e3:<span class="synConstant">0608</span> Genesys Logic, Inc. Hub
Bus <span class="synConstant">001</span> Device <span class="synConstant">001</span>: ID 1d6b:<span class="synConstant">0002</span> Linux Foundation 2.0 root hub
</pre>


<p>Wireless Lan Adapter〜みたいなのがあるからOK！</p>

<p><b>同じくwifiドングルのデバイス名があること</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>pi@raspberrypi:~ $ ifconfig
wlan0     Link encap:Ethernet  HWaddr 消した
          UP BROADCAST MULTICAST  MTU:<span class="synConstant">1500</span>  Metric:<span class="synConstant">1</span>
          RX packets:<span class="synConstant">0</span> errors:<span class="synConstant">0</span> dropped:<span class="synConstant">0</span> overruns:<span class="synConstant">0</span> frame:<span class="synConstant">0</span>
          TX packets:<span class="synConstant">0</span> errors:<span class="synConstant">0</span> dropped:<span class="synConstant">0</span> overruns:<span class="synConstant">0</span> carrier:<span class="synConstant">0</span>
          collisions:<span class="synConstant">0</span> txqueuelen:<span class="synConstant">1000</span>
          RX bytes:<span class="synConstant">0</span> <span class="synPreProc">(</span><span class="synSpecial">0.0 B</span><span class="synPreProc">)</span>  TX bytes:<span class="synConstant">0</span> <span class="synPreProc">(</span><span class="synSpecial">0.0 B</span><span class="synPreProc">)</span>
</pre>


<p>wlan0っていうのがDebian系の無線のデバイス名みたい！
あればOK！</p>

<h4>IPの固定</h4>

<h4>interfaceの設定</h4>

<h4>wpa-conの設定</h4>

-----
--------
AUTHOR: konoemario
TITLE: VirtualBoxで学ぶネットワークの知識(1)
BASENAME: 2017/09/08/215641
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 09/08/2017 21:56:41
CATEGORY: プログラム
IMAGE: https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170908/20170908210900.png
-----
BODY:
<h1 id="お願い">お願い</h1>

<p><span style="color: #ff0000">ご存知の方、最下段の私の疑問にお答えいただけると、大変助かります。  </span></p>

<hr/>


<ul class="table-of-contents">
    <li><a href="#お願い">お願い</a></li>
    <li><a href="#どうでもよい経緯">どうでもよい経緯</a></li>
    <li><a href="#本題">本題</a><ul>
            <li><a href="#やりたかったこと">やりたかったこと</a><ul>
                    <li><a href="#1ゲストOSからインターネットに接続する">1.ゲストOSからインターネットに接続する</a><ul>
                            <li><a href="#ネットワークカードの状態を確認する">ネットワークカードの状態を確認する</a></li>
                            <li><a href="#ネットワークアダプタを有効にする">ネットワークアダプタを有効にする</a></li>
                            <li><a href="#再度ネットワークカードの状態を確認する">再度、ネットワークカードの状態を確認する</a></li>
                            <li><a href="#etcnetworkinterfacesの設定">/etc/network/interfacesの設定</a><ul>
                                    <li><a href="#auto-enp0s3">auto enp0s3</a></li>
                                    <li><a href="#iface-enp0s3-inet-dhcp">iface enp0s3 inet dhcp</a></li>
                                </ul>
                            </li>
                        </ul>
                    </li>
                </ul>
            </li>
            <li><a href="#疑問">疑問</a></li>
        </ul>
    </li>
</ul>

<h1 id="どうでもよい経緯">どうでもよい経緯</h1>

<p>転職して、エンジニアになるんだ！と意気込んでみたものの、最初の仕事は案件の見積もりという状態で少しだけ凹んでおります。<br/>
ただ、今後はvagrantとかdockerとかを使って環境をつくるからね、という言葉を聞きまして、やべえ、両方ともよくわからん！ということでさっそく調べ始めました。 <br/>
以下の記事を参考にさせていただこうと思ったのですが、vagrantとかdockerの前に、VirtualBoxの話がでてきております。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=http%3A%2F%2Fqiita.com%2Fhidekuro%2Fitems%2Ffc12344d36d996198e96" title="VagrantとDockerについて名前しか知らなかったので試した - Qiita" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://qiita.com/hidekuro/items/fc12344d36d996198e96">qiita.com</a></cite></p>

<p>そもそも、VirtualBoxを使ったことないや！ということで、まずVirualBoxを使ってみようと思ったのです。</p>

<p>が、VirtualBoxにUbuntuを入れてみて、すこし触ってみようとしたところ、ネットワークの設定で躓きました。<br/>
ええ、SSHでゲストOSに接続するところです。</p>

<p>現状、設定は終えたのですが、なんだかすっきりしないというところもあり、少しだけ理屈を理解した上で、設定を終えておきたいということで、この記事を書くことにしました。</p>

<p><br/>
<br/></p>

<p>本題に入る前に、もう少し。</p>

<p>最近、以下の記事を読みました。<br/>
その中で、必要なときに、必要なものを勉強するという「パラシュート勉強法」というものに共感を覚えました。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Femployment.en-japan.com%2Fengineerhub%2Fentry%2F2017%2F06%2F28%2F110000" title="ある文系プログラマがテックリードを任されるまでに学んだこと ── 最前線で生き延びる4つの戦略 - エンジニアHub｜若手Webエンジニアのキャリアを考える！" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://employment.en-japan.com/engineerhub/entry/2017/06/28/110000">employment.en-japan.com</a></cite></p>

<p>共感というと、俺も普段からそう思ってた！という風に聞こえがちですが、そうではなく、反省という部分になります。</p>

<p>この記事含め、本来の目的から大きく脱線して、結局目的に到達できないということが結構あります。 なので、今必要なのかどうかの判断をちゃんとしたいなと思います。　　</p>

<p><span style="font-size: 80%">ネットワークの知識は、今なのかなぁ。</span></p>

<hr/>


<h1 id="本題">本題</h1>

<p>以下の環境でVirtualBoxを使用しています。</p>

<table>
<thead>
<tr>
<th> ホスト/ゲスト  </th>
<th>  OS  </th>
</tr>
</thead>
<tbody>
<tr>
<td>  ホスト </td>
<td>  Windows10  </td>
</tr>
<tr>
<td>  ゲスト  </td>
<td>  Ubuntu  </td>
</tr>
</tbody>
</table>


<p>また、Ubuntuのバージョンは以下になります。</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ cat /etc/lsb-release
<span class="synIdentifier">DISTRIB_ID</span>=Ubuntu
<span class="synIdentifier">DISTRIB_RELEASE</span>=16.04
<span class="synIdentifier">DISTRIB_CODENAME</span>=xenial
<span class="synIdentifier">DISTRIB_DESCRIPTION</span>=<span class="synStatement">&quot;</span><span class="synConstant">Ubuntu 16.04.3 LTS</span><span class="synStatement">&quot;</span>
</pre>


<h2 id="やりたかったこと">やりたかったこと</h2>

<p>今回、やりたかったことは、「VirtualBox　ネットワーク設定」で検索すると山ほどたくさん記事がでてくる以下の内容になります。</p>

<ol>
<li>ゲストOS:Ubuntuからインターネットに接続する</li>
<li>ホストOS:WindowsからゲストOS:UbuntuにSSHで接続する
<figure class="figure-image figure-image-fotolife"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170908/20170908210900.png" alt="f:id:konoemario:20170908210900p:plain:w500" title="f:id:konoemario:20170908210900p:plain:w500" class="hatena-fotolife" style="width:500px" itemprop="image"></span><figcaption>やりたかったこと</figcaption></figure></li>
</ol>


<p>参考記事はたくさんあるのですが、なかなか苦労しました。</p>

<h3 id="1ゲストOSからインターネットに接続する">1.ゲストOSからインターネットに接続する</h3>

<p>まずは、ゲストOSからインターネットの接続するところからです。<br/>
この設定を行わないと、外部からなにかしら落としてきたいとき困っちゃいます。</p>

<p><b>パッケージのアップデートもできないよ！</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>tohu@ubuntu:~$ sudo apt-get update
エラー:<span class="synConstant">1</span> http://security.ubuntu.com/ubuntu xenial-security InRelease
  <span class="synStatement">'</span><span class="synConstant">security.ubuntu.com</span><span class="synStatement">'</span> が一時的に解決できません
エラー:<span class="synConstant">2</span> http://jp.archive.ubuntu.com/ubuntu xenial InRelease
  <span class="synStatement">'</span><span class="synConstant">jp.archive.ubuntu.com</span><span class="synStatement">'</span> が一時的に解決できません
エラー:<span class="synConstant">3</span> http://jp.archive.ubuntu.com/ubuntu xenial-updates InRelease
  <span class="synStatement">'</span><span class="synConstant">jp.archive.ubuntu.com</span><span class="synStatement">'</span> が一時的に解決できません
エラー:<span class="synConstant">4</span> http://jp.archive.ubuntu.com/ubuntu xenial-backports InRelease
  <span class="synStatement">'</span><span class="synConstant">jp.archive.ubuntu.com</span><span class="synStatement">'</span> が一時的に解決できません
パッケージリストを読み込んでいます... 完了
W: http://jp.archive.ubuntu.com/ubuntu/dists/xenial/InRelease の取得に失敗しました  <span class="synStatement">'</span><span class="synConstant">jp.archive.ubuntu.com</span><span class="synStatement">'</span> が一時的に解決できません
W: http://jp.archive.ubuntu.com/ubuntu/dists/xenial-updates/InRelease の取得に失敗しました  <span class="synStatement">'</span><span class="synConstant">jp.archive.ubuntu.com</span><span class="synStatement">'</span> が一時的に解決できません
W: http://jp.archive.ubuntu.com/ubuntu/dists/xenial-backports/InRelease の取得に失敗しました  <span class="synStatement">'</span><span class="synConstant">jp.archive.ubuntu.com</span><span class="synStatement">'</span> が一時的に解決できません
W: http://security.ubuntu.com/ubuntu/dists/xenial-security/InRelease の取得に失 敗しました  <span class="synStatement">'</span><span class="synConstant">security.ubuntu.com</span><span class="synStatement">'</span> が一時的に解決できません
W: いくつかのインデックスファイルのダウンロードに失敗しました。これらは無視され るか、古いものが代わりに使われます。
</pre>


<p>ゲストOSであるUbuntuになんかこう、USBディスクとかをマウントさせて～とかもできそうですが、そんなまわりくどいことはせずに素直にインターネットに接続しちゃいます。</p>

<p><br/></p>

<h5 id="ネットワークカードの状態を確認する">ネットワークカードの状態を確認する</h5>

<p>設定に入る前に、今現在、ゲストOSのUbuntuのネットワークがどんな状態がを確認ます。</p>

<p>コンピューターがネットワークに接続するには、ネットワークカードというものが必要になります。</p>

<p>以前、RaspBerryPi Zeroを購入したときにネットワークに接続しようとしたときに、USBのWifiトグルをつけて、いろいろと設定したことそ思い出しますね！</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=http%3A%2F%2Fwww.tohuandkonsome.site%2Fentry%2F2017%2F04%2F29%2F223718" title="RaspBerry Pi Zeroの初期設定メモ  - 豆腐とコンソメ" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://www.tohuandkonsome.site/entry/2017/04/29/223718">www.tohuandkonsome.site</a></cite></p>

<p>今回の仮想端末である、Ubuntuはどうかというと、以下のコマンドで確認できます。</p>

<p><b>ネットワークカードがあるかどうか</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ lspci|<span class="synStatement">grep</span> Ethernet
</pre>


<p>実行すると、何もでてこないことが確認できるかと思います。<br/>
<span style="color: #ff0000">つまり、今のUbuntuはネットワークカードが挿ささっていないのです。</span></p>

<p><br/></p>

<h5 id="ネットワークアダプタを有効にする">ネットワークアダプタを有効にする</h5>

<p>仮想端末にネットワークカードをどうやって挿すんだよ！というところですが、VirtualBoxの機能を使います。  　　</p>

<p>下図のVirtualBoxの仮想マシン設定ウインドウのネットワークという項目から設定を行います。<br/>
ゲストOSのUbuntuはシャットダウンしないと設定できません。<br/>
(VirtualBoxそのものの環境設定ウインドウでネットワークという項目もあったりしましが、こっちはまた別物です。)</p>

<p><figure class="figure-image figure-image-fotolife"><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170908/20170908210902.png" alt="f:id:konoemario:20170908210902p:plain:w500" title="f:id:konoemario:20170908210902p:plain:w500" class="hatena-fotolife" style="width:500px" itemprop="image"></span><figcaption>ネットワークアダプタの設定</figcaption></figure></p>

<p>こちらの画面を開くと、「アダプタ」タブが１～４まであります。
これは、ネットワークカードを最大４枚挿せるという風に思っておけばいいんじゃないかと思います。</p>

<p>いまいちネットワークカードを複数挿す必要性と、その場合のネットワークの仕組みがどうなっているのかが想像つきません。<br/>
（が、残念なことにアダプタ２を使う局面が登場します。)</p>

<p>今回は、このアダプタ１を開き、以下の設定を行います。</p>

<ul>
<li>ネットワークアダプターを有効化</li>
<li>割り当て「NAT」</li>
</ul>


<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170908/20170908210905.png" alt="f:id:konoemario:20170908210905p:plain:w500" title="f:id:konoemario:20170908210905p:plain:w500" class="hatena-fotolife" style="width:500px" itemprop="image"></span></p>

<p>「高度の設定」もありますが、とりあえず今は置いておきます。
また、割り当てについても、いろいろあったりするのですが、こちらも置いておきます。</p>

<p><br/></p>

<h5 id="再度ネットワークカードの状態を確認する">再度、ネットワークカードの状態を確認する</h5>

<p>上記の設定が終わったら、Ubuntuを起動してネットワークカードの状態を確認してみます。</p>

<p><b>ネットワークカードがあるかどうか</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ lspci|<span class="synStatement">grep</span> Ethernet
<span class="synConstant">00</span>:03.0 Ethernet controller: Intel Corporation 82540EM Gigabit Ethernet Controller <span class="synPreProc">(</span><span class="synSpecial">rev </span><span class="synConstant">0</span>
</pre>


<p>なんか増えてることが確認できました！</p>

<p><br/></p>

<h5 id="etcnetworkinterfacesの設定">/etc/network/interfacesの設定</h5>

<p>ネットワークカードが認識されたので、次にネットワークカードにIPアドレスの設定を行います。</p>

<p>これも、RsapBerryPi Zeroのときに「wlan0」みたいな設定をしたように、ネットワークカードを差したらすぐに使えるってわけでもないのね。
（といいつつ、参考記事によっては、定義がされてたりなかったり、謎)</p>

<p>以下のコマンドで、ネットワークの状態を確認してみます。</p>

<p><b>ネットワーク状態の確認</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ ifconfig
lo        Link encap:Local Loopback
          inet addr:127.0.0.1  Mask:255.0.0.0
          inet6 addr: ::<span class="synConstant">1</span>/<span class="synConstant">128</span> Scope:Host
          UP LOOPBACK RUNNING  MTU:<span class="synConstant">65536</span>  Metric:<span class="synConstant">1</span>
          RX packets:<span class="synConstant">10488</span> errors:<span class="synConstant">0</span> dropped:<span class="synConstant">0</span> overruns:<span class="synConstant">0</span> frame:<span class="synConstant">0</span>
          TX packets:<span class="synConstant">10488</span> errors:<span class="synConstant">0</span> dropped:<span class="synConstant">0</span> overruns:<span class="synConstant">0</span> carrier:<span class="synConstant">0</span>
          collisions:<span class="synConstant">0</span> txqueuelen:<span class="synConstant">1</span>
          RX bytes:<span class="synConstant">776960</span> <span class="synPreProc">(</span><span class="synSpecial">776.9 KB</span><span class="synPreProc">)</span>  TX bytes:<span class="synConstant">776960</span> <span class="synPreProc">(</span><span class="synSpecial">776.9 KB</span><span class="synPreProc">)</span>
</pre>


<p>上記のように「lo」しかありません。<br/>
loは、ネットワークカードに関わらず必ずあるものなので、新しく認識したネットワークカードの設定をする必要があります。<br/>
(loについては、ここでは気にしないよ！)</p>

<p><br/>
それでは、Vimエディタ等で、interfaceファイルを修正します。</p>

<p><b>interfaceの設定</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ sudo vim /etc/network/interfaces
</pre>


<p><b>interface(修正前)</b></p>

<pre class="code" data-lang="" data-unlink># This file describes the network interfaces available on your system
# and how to activate them. For more information, see interfaces(5).

source /etc/network/interfaces.d/*

# The loopback network interface
auto lo
iface lo inet loopback</pre>


<p><b>interface(修正後)</b></p>

<pre class="code" data-lang="" data-unlink># This file describes the network interfaces available on your system
# and how to activate them. For more information, see interfaces(5).

source /etc/network/interfaces.d/*

# The loopback network interface
auto lo
iface lo inet loopback

#ここから追加
#The primary network interface
auto enp0s3
iface enp0s3 inet dhcp</pre>


<p>たった2行ですが、上から見ていきます。
（そして、たった2行ですが、理解があやしい)</p>

<p>参考元は、例のごとく以下のページになります。</p>

<p><a href="https://www.debian.org/doc/manuals/debian-reference/ch05.ja.html">&#x7B2C;5&#x7AE0; &#x30CD;&#x30C3;&#x30C8;&#x30EF;&#x30FC;&#x30AF;&#x306E;&#x8A2D;&#x5B9A;</a></p>

<h6 id="auto-enp0s3">auto enp0s3</h6>

<p>ネットワークインターフェース名「enp0s3」をシステム起動時に有効する、という設定になります。</p>

<p>まず、ネットワークインタフェース名「enp0s3」ってどこからでてきたんだって話なんですが、Ubuntuの命名規則で決まっているっぽいです。（たぶん。。。）</p>

<p>これが、VirtualBoxで設定したアダプタ１に対応しています。<br/>
ちなみに、アダプタ2は「enp0s8」になります。  <br/>
(最初、アダプタ2を有効にして、interfacesには「enp0s3」を使ったらうまくいかなかったので、そんな気がする。でも、アダプタ３、アダプタ４は果たして何になるのだろうか。。。)</p>

<p>つまり、システム起動時に、enp0s3(アダプタ１）を有効にするよ、っていう認識でいい気がします。</p>

<p>余談ですが、Ubuntuの過去のバージョンでは、enp0s3ではなくeth0になるそうです。</p>

<h6 id="iface-enp0s3-inet-dhcp">iface enp0s3 inet dhcp</h6>

<p>これは、enp0s3の設定はこっからだよっていう定義とともに、IPアドレスはDHCPで取得するよっていう認識です。</p>

<p>仮に、DHCPで自動にIPを振るのではなく、固定で振り出す場合は、以下のように書けたりします。</p>

<p><b>固定IPにする場合</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>iface enp0s3 inet static
address xxx.xxx.xxx.xxx
netmask xxx.xxx.xxx.xxx
</pre>


<p>とはいえ、VirtualBoxの設定でネットワークアダプタの割り当てを「NAT」にした場合、必ずDHCPサーバーからIPを取得するようにしないといけないみたいです。<br/>
なぜでしょう。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=http%3A%2F%2Fc-through.blogto.jp%2Farchives%2F14539119.html" title="[VirtualBox] ネットワーキング構成を理解して選択する : Mac・iPhone・iPad を使い倒したい" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://c-through.blogto.jp/archives/14539119.html">c-through.blogto.jp</a></cite></p>

<p>なので、ここでは素直にDHCPからとってくるようにします。</p>

<p>設定を終えたら、以下のコマンドで、ネットワークの設定を反映します。</p>

<p><b>ネットワークの再起動</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ service network <span class="synStatement">restart</span>
</pre>


<p>また、上のコマンドが、なせかうまくいかないときがある。<br/>
その場合は、ifupコマンドでNIC名を指定して起動できる。</p>

<p><b>NICの起動</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ ifup enp0s3
</pre>


<p><b>ネットワーク状態の確認</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>enp0s3    Link encap:Ethernet  HWaddr <span class="synConstant">08</span>:<span class="synConstant">00</span>:<span class="synConstant">27</span>:<span class="synConstant">31</span>:<span class="synConstant">24</span>:1b
          inet addr:10.0.2.15  Bcast:10.0.2.255  Mask:255.255.255.0
          inet6 addr: fe80::a00:27ff:fe31:241b/<span class="synConstant">64</span> Scope:Link
          UP BROADCAST RUNNING MULTICAST  MTU:<span class="synConstant">1500</span>  Metric:<span class="synConstant">1</span>
          RX packets:<span class="synConstant">868</span> errors:<span class="synConstant">0</span> dropped:<span class="synConstant">0</span> overruns:<span class="synConstant">0</span> frame:<span class="synConstant">0</span>
          TX packets:<span class="synConstant">663</span> errors:<span class="synConstant">0</span> dropped:<span class="synConstant">0</span> overruns:<span class="synConstant">0</span> carrier:<span class="synConstant">0</span>
          collisions:<span class="synConstant">0</span> txqueuelen:<span class="synConstant">1000</span>
          RX bytes:<span class="synConstant">94915</span> <span class="synPreProc">(</span><span class="synSpecial">94.9 KB</span><span class="synPreProc">)</span>  TX bytes:<span class="synConstant">107325</span> <span class="synPreProc">(</span><span class="synSpecial">107.3 KB</span><span class="synPreProc">)</span>

lo        Link encap:Local Loopback
          inet addr:127.0.0.1  Mask:255.0.0.0
          inet6 addr: ::<span class="synConstant">1</span>/<span class="synConstant">128</span> Scope:Host
          UP LOOPBACK RUNNING  MTU:<span class="synConstant">65536</span>  Metric:<span class="synConstant">1</span>
          RX packets:<span class="synConstant">10488</span> errors:<span class="synConstant">0</span> dropped:<span class="synConstant">0</span> overruns:<span class="synConstant">0</span> frame:<span class="synConstant">0</span>
          TX packets:<span class="synConstant">10488</span> errors:<span class="synConstant">0</span> dropped:<span class="synConstant">0</span> overruns:<span class="synConstant">0</span> carrier:<span class="synConstant">0</span>
          collisions:<span class="synConstant">0</span> txqueuelen:<span class="synConstant">1</span>
          RX bytes:<span class="synConstant">776960</span> <span class="synPreProc">(</span><span class="synSpecial">776.9 KB</span><span class="synPreProc">)</span>  TX bytes:<span class="synConstant">776960</span> <span class="synPreProc">(</span><span class="synSpecial">776.9 KB</span><span class="synPreProc">)</span>
</pre>


<p>enp0s3が追加され、IPアドレス「10.0.2.15」が設定されていることは確認できました！</p>

<p>これで、ゲストOSがインターネットに接続できるようになりました！</p>

<p>やった！と思いきや、<span style="font-size: 150%">なんでこれでつながるようになったの？</span></p>

<p>という疑問が残っております。</p>

<p>解消されしだい、続きを書きたいと思います。</p>

<h3 id="疑問">疑問</h3>

<p>ネットワークアダプタの設定をNATにして、DHCPサーバーからIPを振るように設定したときのDHCPサーバーとは、VirtualBoxのことなのでしょうか。</p>

<p>今回、DHCPサーバーからIPを振ってもらうのと同時に、DHCPサーバーがデフォルトゲートウェイも返してくれているから、ゲストOSからホストOS越しに外部のネットワークに接続できる、という認識なのですが、<span style="color: #ff0000">ゲストOSのUbuntuはどうやってDHCPサーバーを検出しているのでしょうか。</span></p>

<p>DHCPサーバー検出の仕組みとして、ブロードキャストを利用して〜ということだと思いまして、以下のようにpingを叩いたのですが、ダメでした。</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ ping 255.255.255.255
NetWork is unreachble
</pre>


-----
COMMENT:
AUTHOR: SZ
IP: 182.250.251.7
DATE: 08/19/2018 02:17:43
こんにちは。
VirtualBoxのネットワークについて悩みながらあれこれ調べている者です。
DHCPサーバーに関してですが、アダプターの割り当てをNATにした場合、10.0.2.15のIPアドレスが割り当てらるというVirtualBoxの仕様であると思われます。IPアドレスの取得先を"DHCP"としなければいけないのは、割り当てをNATネットワークとした場合に、ファイル設定を流用できるよう「便宜上」DHCPと書くように指定されているだけではないでしょうか。

参考
http://zorinos.seesaa.net/article/450304938.html
https://www.virtualbox.org/manual/ch09.html#changenat（←9.11.1）
-----
--------
AUTHOR: konoemario
TITLE: apachectlを読む
BASENAME: 2017/09/05/222123
STATUS: Draft
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 09/02/2017 17:55:44
-----
BODY:
<p>こちらを参考にさせていただきました。<br/>
<iframe src="https://hatenablog-parts.com/embed?url=http%3A%2F%2Fqiita.com%2Febisennet%2Fitems%2F573618ab827ce1660b0e" title="シェルスクリプトBash入門 - Qiita" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://qiita.com/ebisennet/items/573618ab827ce1660b0e">qiita.com</a></cite></p>

<ul class="table-of-contents">
    <li><a href="#とりあえずHelloWorld">とりあえずHelloWorld</a></li>
    <li><a href="#Shebangシバン">Shebang(シバン)</a><ul>
            <li><a href="#補足usrbinenv-python-ってなんだ">補足：/usr/bin/env python ってなんだ</a></li>
            <li><a href="#補足binbash-binsh-ってなんだ">補足：/bin/bash /bin/sh ってなんだ</a></li>
        </ul>
    </li>
    <li><a href="#apachectlを読み解くにあたっての基本的な文法">apachectlを読み解くにあたっての基本的な文法</a><ul>
            <li><a href="#引数を受け取る">引数を受け取る</a></li>
            <li><a href="#ついでに変数">ついでに変数</a></li>
        </ul>
    </li>
    <li><a href="#apachectlを読む">apachectlを読む</a></li>
</ul>

<h2 id="とりあえずHelloWorld">とりあえずHelloWorld</h2>

<p>定番のHelloWorldをとりあえず書いた。
vimで編集したのをコピっているので、行番号もコピペされちゃってる。</p>

<p><b>hello.sh</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>  <span class="synConstant">1</span> <span class="synComment">#!/bin/bash</span>
  <span class="synConstant">2</span> <span class="synStatement">echo</span><span class="synConstant"> </span><span class="synStatement">&quot;</span><span class="synConstant">Hello World!</span><span class="synStatement">&quot;</span>
  <span class="synConstant">3</span> <span class="synStatement">exit</span> <span class="synConstant">0</span>
</pre>


<p><b>実行権限を与える</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ <span class="synStatement">chmod</span> <span class="synSpecial">+x</span> hello.sh 
</pre>


<p><b>実行</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ ./hello.sh 
Hello World!
</pre>


<p>無事、表示されました。</p>

<h2 id="Shebangシバン">Shebang(シバン)</h2>

<p>一行目の「#!/bin/bash」ってなんのためだっけ。</p>

<p><b>hello.sh</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>  <span class="synConstant">1</span> <span class="synComment">#!/bin/bash</span>
  <span class="synConstant">2</span> <span class="synStatement">echo</span><span class="synConstant"> </span><span class="synStatement">&quot;</span><span class="synConstant">Hello World!</span><span class="synStatement">&quot;</span>
  <span class="synConstant">3</span> <span class="synStatement">exit</span> <span class="synConstant">0</span>
</pre>


<p>調べてみると、こちらに素敵な記事がありました。</p>

<p><a href="http://qiita.com/sesame/items/47d2694616eadb35d4bc">Python&#x521D;&#x6B69;&#x304B;&#x3089;&#x306E;&#x5B66;&#x7FD2;&#x30E1;&#x30E2;1 - Qiita</a></p>

<blockquote><p>Unix/Linux系の環境では、スクリプトの1行目にShebangを記載しておき、スクリプト自体を実行することで、Shebangに記載されたプログラム(例えばPython)を実行しそのプログラムに、スクリプトの内容を渡し動作させることができる。</p>

<p>つまり、上記のsample.pyを$ ./sample.pyのように実行すると、Shebangによってpythonプログラムが実行され、pythonプログラムにsample.pyの内容が渡され、処理される。</p></blockquote>

<p>シバンを記載しておくと、実行するインタプリタを実行時に書かなくて済むということですかね。</p>

<p>試しに、検証してみます。</p>

<p><br/></p>

<p>まずは、さきほどのhello.shのシバン行を削除して実行してみます。</p>

<p><b>hello.sh</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>  <span class="synConstant">1</span> <span class="synStatement">echo</span><span class="synConstant"> </span><span class="synStatement">&quot;</span><span class="synConstant">Hello World!</span><span class="synStatement">&quot;</span>
  <span class="synConstant">2</span> <span class="synStatement">exit</span> <span class="synConstant">0</span>
</pre>


<p><b>実行</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ ./hello.sh 
Hello World!
</pre>


<p>特に問題はないですね。</p>

<p><br/></p>

<p>続いて、シェルスクリプトではなくpythonの「HelloWorld」を書いたものになります。<br/>
実行されるバージョンが気になったので、platformモジュールをインポートしてます。</p>

<p><b>hello.py</b></p>

<pre class="code lang-python" data-lang="python" data-unlink>  <span class="synConstant">1</span> <span class="synPreProc">import</span> platform
  <span class="synConstant">2</span> <span class="synIdentifier">print</span>(<span class="synConstant">&quot;HelloWorld!&quot;</span>)
  <span class="synConstant">3</span> <span class="synIdentifier">print</span>(platform.python_version())
</pre>


<p><b>実行</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ ./hello.py
./hello.py: line <span class="synConstant">1</span>: import: <span class="synStatement">command</span> not found
./hello.py: line <span class="synConstant">2</span>: syntax error near unexpected token <span class="synSpecial">`</span><span class="synStatement">&quot;</span><span class="synConstant">HelloWorld!</span><span class="synStatement">&quot;'</span>
<span class="synConstant">./hello.py: line 2: `print(&quot;HelloWorld!&quot;)</span><span class="synStatement">'</span>
</pre>


<p>エラーになっちゃいました。<br/>
シバン行になにも書いていない場合、デフォルトのシェル（自分の環境ではbashかな？)で実行されるため、そんなコマンドないよ！といわれちゃいます。</p>

<p>これを以下のように、実行時にpythonと指定してあげれば、シバン行がなくともpythonで実行されます。</p>

<p><b>pythonを指定して実行</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ python hello.py 
HelloWorld!
3.5.1
</pre>


<p><br/></p>

<p>以下のように、シバン行を記載してあげると</p>

<pre class="code lang-python" data-lang="python" data-unlink>  <span class="synConstant">1</span> <span class="synComment">#!/usr/bin/env python</span>
  <span class="synConstant">2</span> <span class="synPreProc">import</span> platform
  <span class="synConstant">3</span> <span class="synIdentifier">print</span>(<span class="synConstant">&quot;HelloWorld!&quot;</span>)
  <span class="synConstant">4</span> <span class="synIdentifier">print</span>(platform.python_version())
</pre>


<p>pythonを指定しなくとも、無事pythonが実行されることが確認できた。</p>

<p><b>実行</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ ./hello.py
HelloWorld!
3.5.1
</pre>


<h5 id="補足usrbinenv-python-ってなんだ">補足：/usr/bin/env python ってなんだ</h5>

<p>本筋から離れちゃうけれども、気になるのでメモ。<br/>
「/usr/bin/env」は、環境変数とかを確認するときに使うシェルのコマンド「env」そのもの。</p>

<p><b>envのパス確認</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ which env
/usr/bin/env
</pre>


<p>以下のように書くと、環境変数のPATHから、pythonのパスを探して実行してくれるみたい。<br/>
といっても、単純にpythonとするだけでも、環境変数のPATHから探しにいくので、コマンドライン上ではあんま意味がないのかな。</p>

<p><b>試しに実行</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ env python
</pre>


<h5 id="補足binbash-binsh-ってなんだ">補足：/bin/bash /bin/sh ってなんだ</h5>

<p>シバン行の例をみると、「#!/bin/bash」と「#!bin/sh」と例がいくつかあります。</p>

<p>bashとかshとかは、シェルの種類です。<br/>
シバン行に書いた場合は、実行されるシェルを指定していることになります。</p>

<p>以下に各シェルの比較記事がありましたので、記載させていただきます。<br/>
<a href="http://www2u.biglobe.ne.jp/~hsaka/docs/shell.html">http://www2u.biglobe.ne.jp/~hsaka/docs/shell.html</a></p>

<p>気になった、bashとshですが、ほとんど同じものと思っちゃってもよさそうです。(微妙に違いがあるっぽい。。。)</p>

<p>シバン行ではなく、以下のように実行してみたところ特に問題はありませんでした。</p>

<p><b>bashで実行</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ bash hello.sh
Hello World!
</pre>


<p><b>shで実行</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ sh hello.sh
Hello World!
</pre>


<p>今回の記事ではbashを使用していきます。</p>

<h2 id="apachectlを読み解くにあたっての基本的な文法">apachectlを読み解くにあたっての基本的な文法</h2>

<h3 id="引数を受け取る">引数を受け取る</h3>

<p>そこからやんのか、という点はおいておき、まずは引数を受けとってみます。<br/>
さきほどの「hello.sh」に以下のコードを追加しました。</p>

<p><b>hello.sh</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>  <span class="synConstant">1</span> <span class="synComment">#!/bin/bash</span>
 <span class="synPreProc">(</span><span class="synSpecial">中略</span><span class="synPreProc">)</span>
 <span class="synConstant">13</span> <span class="synComment">#CHAPTER1:引数を受け取る</span>
 <span class="synConstant">14</span> <span class="synComment">#以下のように実行する。</span>
 <span class="synConstant">15</span> <span class="synComment">#</span>
 <span class="synConstant">16</span> <span class="synComment">#$./hello.sh ayane 1207 </span>
 <span class="synConstant">17</span> <span class="synComment">#</span>
 <span class="synConstant">18</span> <span class="synStatement">echo</span><span class="synConstant"> </span><span class="synStatement">&quot;</span><span class="synConstant">CHAPTER1 START==============================</span><span class="synStatement">&quot;</span>
 <span class="synConstant">19</span> 
 <span class="synConstant">20</span> <span class="synComment">#ファイル名</span>
 <span class="synConstant">21</span> <span class="synStatement">echo</span><span class="synConstant"> </span><span class="synPreProc">$0</span>
 <span class="synConstant">22</span> 
 <span class="synConstant">23</span> <span class="synComment">#1個目の引数 ちなみに文字列を繋げるときはくっつけちゃっていいみたい。</span>
 <span class="synConstant">24</span> <span class="synStatement">echo</span><span class="synConstant"> </span><span class="synStatement">&quot;</span><span class="synConstant">Hello </span><span class="synStatement">&quot;</span><span class="synPreProc">$1</span><span class="synStatement">&quot;</span><span class="synConstant">!</span><span class="synStatement">&quot;</span>
 <span class="synConstant">25</span> <span class="synComment">#2個目の引数</span>
 <span class="synConstant">26</span> <span class="synStatement">echo</span><span class="synConstant"> </span><span class="synPreProc">$2</span>
 <span class="synConstant">27</span> 
 <span class="synConstant">28</span> <span class="synComment">#全部の引数</span>
 <span class="synConstant">29</span> <span class="synStatement">echo</span><span class="synConstant"> </span><span class="synPreProc">$@</span>
 <span class="synConstant">30</span> 
 <span class="synConstant">31</span> <span class="synComment">#引数の個数</span>
 <span class="synConstant">32</span> <span class="synStatement">echo</span><span class="synConstant"> </span><span class="synPreProc">$#</span>
</pre>


<p>こちらを実行すると、以下のような結果になります。</p>

<pre class="code" data-lang="" data-unlink>$ ./hello.sh ayane 1207
CHAPTER1 START==============================
./hello.sh
Hello ayane!
1207
ayane 1207
2</pre>


<h3 id="ついでに変数">ついでに変数</h3>

<p>ついでに変数もいっときます。<br/>
といっても、そんなに難しくな、あれぇ。<br/>
なんかややこしいというか、どれにすりゃいいんだみたいな状態になりました。</p>

<pre class="code lang-sh" data-lang="sh" data-unlink> <span class="synConstant">34</span> <span class="synComment">#CHAPTER2:変数</span>
 <span class="synConstant">35</span> <span class="synComment">#以下のように実行する。</span>
 <span class="synConstant">36</span> <span class="synComment">#</span>
 <span class="synConstant">37</span> <span class="synComment">#$./hello.sh ayane 1207 </span>
 <span class="synConstant">38</span> <span class="synComment">#</span>
 <span class="synConstant">39</span> <span class="synStatement">echo</span><span class="synConstant"> </span><span class="synStatement">&quot;</span><span class="synConstant">CHAPTER2 START==============================</span><span class="synStatement">&quot;</span>
 <span class="synConstant">40</span> 
 <span class="synConstant">41</span> 
 <span class="synConstant">42</span> <span class="synIdentifier">GREETING</span>=<span class="synStatement">&quot;</span><span class="synConstant">ohanky!!! </span><span class="synStatement">&quot;</span>
 <span class="synConstant">43</span> <span class="synIdentifier">FILENAME</span>=<span class="synPreProc">$0</span>
 <span class="synConstant">44</span> <span class="synIdentifier">NAME1</span>=<span class="synPreProc">$1</span>
 <span class="synConstant">45</span> 
 <span class="synConstant">46</span> <span class="synComment">#これでもいいみたい</span>
 <span class="synConstant">47</span> <span class="synIdentifier">NAME2</span>=<span class="synStatement">&quot;</span><span class="synPreProc">$1</span><span class="synStatement">&quot;</span>
 <span class="synConstant">48</span> 
 <span class="synConstant">49</span> <span class="synComment">#さらにいえばこれも</span>
 <span class="synConstant">50</span> <span class="synIdentifier">NAME3</span>=<span class="synStatement">&quot;</span><span class="synPreProc">${1}</span><span class="synStatement">&quot;</span>
 <span class="synConstant">51</span> 
 <span class="synConstant">52</span> <span class="synComment">#これもいけるうわああん</span>
 <span class="synConstant">53</span> <span class="synIdentifier">NAME4</span>=<span class="synPreProc">${1}</span>
 <span class="synConstant">54</span> 
 <span class="synConstant">55</span> <span class="synStatement">echo</span><span class="synConstant"> </span><span class="synPreProc">$GREETING</span>
 <span class="synConstant">56</span> <span class="synStatement">echo</span><span class="synConstant"> </span><span class="synPreProc">$FILENAME</span>
 <span class="synConstant">57</span> <span class="synStatement">echo</span><span class="synConstant"> </span><span class="synPreProc">$NAME1</span>
 <span class="synConstant">58</span> <span class="synStatement">echo</span><span class="synConstant"> </span><span class="synPreProc">$NAME2</span>
</pre>


<p>とりあえず、参照するときは$をつけようと覚えました。</p>

<h2 id="apachectlを読む">apachectlを読む</h2>

<p>ようやく本題です。</p>

<p>とりあえず、Apacheの起動のコマンドといえば以下になります。</p>

<p><b>Apacheの起動</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ apachectl <span class="synStatement">start</span>
</pre>


<p>これが、どういった仕組みで動いているのかを見てみます。</p>

-----
--------
AUTHOR: konoemario
TITLE: 社会よ、こんにちは
BASENAME: 2017/09/01/223613
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 09/01/2017 22:36:13
CATEGORY: 雑談
-----
BODY:
<p>2ヶ月の無職期間を経て、本日無事初出社＆帰宅をクリアすることができた。</p>

<p>久しぶりの満員電車は社会に揉まれている間が半端ない。<br/>
なんでこんなに混んでるんだよ！と思う一方、自分が出社することで余計に状況を悪化させていることについて申し訳なく思った。</p>

<p>乗り換えの駅で電車を待っていると、小学校3年生ぐらいであろうか、女の子がホームで蹲っていた。</p>

<p>何事かと目を向けると、駅員さんがその女の子にちょうど声を掛けていた。<br/>
顔をあげた女の子はがん泣きしていた。</p>

<p>結局のところ、詳しい状況はわからないまま、電車が来たのでそのまま電車に乗ってしまった。</p>

<p>再度混雑の中、Yahooニュースを見れば9/1に自殺者が多いという記事を見た。<br/>
さっきの女の子は、学校に行きたくなくて泣いていたのだろうか。</p>

<p>ふと 、自分も小学校低学年のころに、登校中、泣きながら口に手を突っ込んで、嘔吐することで無理やり学校を休もうとしていたことを思い出した。</p>

<p>出社の際は不安もあったが、前向きに考えれるだけ今の僕は小学校のころより成長したように思える。<br/>
自分で選んだかどうか、という大きな違いはもちろんあるのだけれども。</p>

<p>なにが言いたいかさっぱりわからないし、書きたいことも思い出せないけれども次の職場でしばらくがんばっていきたいと思う。</p>

<p>その中で、このブログも継続していきたい。</p>

<p>これからも、よろしくお願い致します。</p>

-----
--------
AUTHOR: konoemario
TITLE: ラズパイ：ステアリングのためのサーボモータ制御(2)
BASENAME: 2017/08/31/164511
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 08/31/2017 16:45:11
CATEGORY: ラズパイ
CATEGORY: Python
-----
BODY:
<h1>前回からの続き</h1>

<p>前回は、サーボモーターをPythonのWiringpiで動かすにあたって、pwmWrite関数の設定値を決めるまでの過程を記載しました。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=http%3A%2F%2Fwww.tohuandkonsome.site%2Fentry%2F2017%2F08%2F24%2F101259" title="ラズパイ：ステアリングのためのサーボモータ制御(1) - 豆腐とコンソメ" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://www.tohuandkonsome.site/entry/2017/08/24/101259">www.tohuandkonsome.site</a></cite></p>

<p>今回は、上記の値をもとに、サーボモーターを動かすコードを書いていきます。</p>

<h1>コード</h1>

<h5>NewServoMotorクラス</h5>

<p>まず、サーボモータを制御するクラス「NewServoMotor」を作成しました。</p>

<p><script src="https://gist.github.com/96e89a9473d616650fd4abaa3847f88d.js"> </script></p>

<p><a href="https://gist.github.com/96e89a9473d616650fd4abaa3847f88d">レゴカーコントローラーの抜粋</a></p>

<p><br/></p>

<h6>クラス変数</h6>

<p>制御に必要な情報をクラス変数として保持しておきます。</p>

<p>具体的には、以下の値をMAX_DUTY、MID_DUTY、MIN_DUTYとして定義しています。</p>

<table>
<thead>
<tr>
<th>サーボの仕様</th>
<th>duty比</th>
<th>pwmWriteに設定する値</th>
</tr>
</thead>
<tbody>
<tr>
<td>-90度</td>
<td>2.5</td>
<td>26</td>
</tr>
<tr>
<td>0度</td>
<td>7.25</td>
<td>74</td>
</tr>
<tr>
<td>90度</td>
<td>12</td>
<td>123</td>
</tr>
</tbody>
</table>


<p><br/>
またサーボモータをどの程度、回転させるかという変数、ANGLE_BENDもここで定義しています。</p>

<p>ANGLE_BENDでは角度を定義しますが、実際にpwmWrite関数に設定する際は、duty比をpwmWriteの仕様にマッピングした値とする必要があるため、ちょっとややこしいです。</p>

<p>自分の頭の悪さを露呈するようで恥ずかしいのだけれども、計算過程を書いておきます。<br/>
<br/></p>

<p><b>-90度から90度にするためのpwmWriteに設定する値、つまり180度回転させるための値</b></p>

<pre class="code" data-lang="" data-unlink>  123  -   26   =  97</pre>


<p><br/></p>

<p><b>これを、180度で割ってあげると、1度動かすのに必要な値が求められる。</b></p>

<pre class="code" data-lang="" data-unlink>97   ÷   180  = 0.538....</pre>


<p></br></p>

<p>とはいえ、pwmWrite関数に渡す値はint型なので、最小値は1にする必要がある。なので、厳密に1度ずつ動かすことはできなさそう。</p>

<p>今回は、10度ずつ曲げることを想定しているので、180ではなく、18で割った値をpwmWrite関数に設定することになる。</p>

<pre class="code" data-lang="" data-unlink>97  ÷  18  = 5.38..  ≒ 5</pre>


<p><br/></p>

<h6>コンストラクタ</h6>

<p>コンストラクタについては、前回記事の内容とあんまりかわっていない。</p>

<p>コンストラクタでタイヤをまっすぐにするためのクラス変数をpwmWrite関数で設定している。</p>

<p>また、今どれくらいタイヤがまがっているか、を保持するインスタンス変数「dutyState」にも値を設定している。</p>

<h6>minusRotation、plusRotationメソッド</h6>

<p>サーボモーターを制御するメソッド。</p>

<p>メソッドが呼ばれるたびに、クラス変数で定義した、固定角度分の値をインスタンス変数「dutyState」にカウントアップ、カウントダウンしていき、pwmWrite関数を呼び出している。</p>

<h5>LegoCarControllerクラス</h5>

<p>最後に、さきほど作成したNewServoMotorクラスを実際に使っているクラスを参考までに記載します。</p>

<p><script src="https://gist.github.com/f847689a561f887d5169224066e0dc38.js"> </script></p>

<p><a href="https://gist.github.com/f847689a561f887d5169224066e0dc38">レゴカーコントローラーの抜粋(コントローラー)</a></p>

<p>また全体については、Githubで管理しています。<br/>
(README.md書くっていって書いてなかった。。。)</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2FRyomasao%2Flegocar" title="Ryomasao/legocar" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://github.com/Ryomasao/legocar">github.com</a></cite></p>

-----
--------
AUTHOR: konoemario
TITLE: 2ヶ月間の夏休みが終わり、働き出す
BASENAME: 2017/08/29/174415
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 08/29/2017 17:44:15
CATEGORY: 雑談
-----
BODY:
<p>2017年6月末に退職し、2017年9月1日より働き出す。</p>

<p>大学生以来の2ヶ月間の夏休みの幕が終わってしまうので、振り返る。</p>

<h1>仕事について</h1>

<p>前職の会社で働いていたときは、毎晩仕事の夢を見ていた。<br/>
毎朝5時ぐらいに目が醒めてしまうと、仕事のことが頭に浮かんできて、もう寝付けないみたいな状態になっていた。</p>

<p>退職した後、2週間ぐらいは、夢にでてくることが多かったのだけれども、それ以降はまったくなくなった。</p>

<p>明日に不安を抱えないまま、寝れるって本当に素晴らしいことだと思う。
とはいえ、働き出したら再発するんじゃないかと思ってる。<br/>
前の会社の同僚や奥さんのように不安はあるけれども、考えないようにしている、という境地に辿り着きたい。</p>

<p>夢を見なくなって、ぐっすり眠れるようになる一方で、日中家にいることって、すごく社会から隔絶されたような気がしていて、なんかよくわからない不安に襲われることもあった。</p>

<p>だから、普段つけないテレビも作業用BGM代わりにつけることもあった。<br/>
子育てしている母親ってこんな感じなんだろうか。<br/>
であれば、子供は実家で育てたいと切に思う。</p>

<p>とにかく、自分の中では思った以上に、仕事って居場所だったりアイデンティティーだったんだなぁと実感した。</p>

<h1>勉強について</h1>

<p>これもよくある話ですが、前職の会社で働いていた時は、あれも、これもやりたい！時間がもとほしい！と思っていた。
会社を辞めたら、ブログも週3ぐらいは書くぞ！とも。</p>

<p>蓋を開けてみれば、集中して取り組むことができず、ブログに至っては、働いていたときの方が、がんばって書いていた。</p>

<p>敗因については、いろいろあるんですが、まず時間の制約があまりないこと、誘惑の多い環境という点が根本にあったなぁと思う。</p>

<h5>時間の制約がないこと</h5>

<p>何か調べものをしている時に、気になることがあれば、それをおっかけ始めるのですが、収集がつかなくなるパターンがよくある。</p>

<p>昔からそうで、例えば世界史の勉強しているときに、イングランドの歴史をさらっと触っている時に、そういやフランスはこのときどうなってたんだとかそういう類のやつです。<br/>
こと受験勉強に世界史に限れば、気になった情報を漁った時の枝葉の末端は対して深くもないので、そんな時間も取られないし、理解の助けにもなるしで、悪いことではないと思ってます。</p>

<p>しかし、目的の定まらない趣味の世界、とくにシステムでは恐ろしいことになる。<br/>
どっかでこれを実現したいから、この部分はとりあえず置いとこうという切り分けができないと、調べるだけで何もつくれなかったみたいことになっちゃう。</p>

<p>過去の記事でも、Node.jsでWebサイト作ってみようと始めたら、フレームワークまわりはともかく、テンプレートエンジンの話だったり、CSSの書き方から LESSみたいな話もでてきたり、そもそもCSSデザインの当て方ってよくわからないな、みたいな。</p>

<p>もうすこし一定の目的をもって、それに向かって取り組めたらよかった。 <br/>
とはいえ、どんな目的を持つべきかという、その部分からして難しいんですが。</p>

<p>ただぼんやりと、将来的には会社に出社しない環境で仕事ができればいいなぁという目標しかないです。</p>

<p>話がそれちゃったんですが、とりあえず時間区切って、アウトプットするってすごい大事だと思う。<br/>
人にも見せれるし、自分も見返せるし、何よりやってみないとわかんないことばかりですもん。</p>

<h6>誘惑の多い環境</h6>

<p>あと、家で作業するってわかっていたけれどもやっぱり難しい。<br/>
ギリシア人は奴隷のおかげで暇になって、勉強を始めたなんて、どこかで聞いたことがある。それが嘘か本当かはさておき、それ以外することがない、みたいな状況じゃないと、なかなか手につかないですね。</p>

<p>なので、そういった自分から行けばいいのですが、思いの外、フリーWiFiがある喫茶店が周辺になく、Wifiが飛んでいる図書館はものすごく混んでいて順番待ちだったりしてびっくりしました。<br/>
当初は、家の裏手のいい感じの公園にベンチと机があって、そこにラズパイのアドホック接続を利用して、自宅のWifiに乗っかろう計画を立てて胸を膨らませていました。</p>

<p>が、退職の月に、なぜかベンチと机が撤去されていました。</p>

<p>なので、次にこういったことをするときは、素直にモバイルルーターを契約したいと思います。</p>

<h1>その他</h1>

<p>退職後は、週に3回は5kmを走ること、同様に胃下垂を直すための筋トレをすること、奥さんの夕飯を用意することの3点を習慣化することができた。</p>

-----
--------
AUTHOR: konoemario
TITLE: PHPを学習する必要がでてきたので、いろいろめも
BASENAME: 2017/09/20/174521
STATUS: Draft
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 08/26/2017 03:22:24
IMAGE: https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170902/20170902152645.png
-----
BODY:
<h1>開発環境を整える</h1>

<p>XAMPPを使うというのも魅力的だったけれども、勉強もかねて個別で用意しよう。</p>

<p>なんとなく名前だけ聞いた事のある、vargrantやDockerを使っていくのが一番いい気もするけれども、仮想環境の前に、実環境で試してみる。</p>

<h3>なにはともあれPHPを用意する</h3>

<p>といっても、これもMacOSの場合、デフォルトでインストールされているっぽい。
（4年ぐらい前にPHP入門をやった記憶があるので、そのときに導入したかもしれない。)</p>

<h6>phpバージョン確認</h6>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ php <span class="synSpecial">-v</span>
PHP 5.5.38 <span class="synPreProc">(</span><span class="synSpecial">cli</span><span class="synPreProc">)</span> <span class="synPreProc">(</span><span class="synSpecial">built: Mar </span><span class="synConstant">30</span><span class="synSpecial"> </span><span class="synConstant">2017</span><span class="synSpecial"> </span><span class="synConstant">12</span><span class="synSpecial">:</span><span class="synConstant">11</span><span class="synSpecial">:</span><span class="synConstant">07</span><span class="synPreProc">)</span> 
Copyright <span class="synPreProc">(</span><span class="synSpecial">c</span><span class="synPreProc">)</span> <span class="synConstant">1997-2015</span> The PHP Group
Zend Engine v2.5.0, Copyright <span class="synPreProc">(</span><span class="synSpecial">c</span><span class="synPreProc">)</span> <span class="synConstant">1998-2015</span> Zend Technologies
</pre>


<p>デフォルトで用意されているPHPはのバージョンは、5.5系だった。<br/>
せっかくなので、最新のPHP7を使ってみようと思う。</p>

<p>PHPのインストールに関しては、以下の記事を参考にさせていただきました。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=http%3A%2F%2Fqiita.com%2FOTAGRAMER%2Fitems%2F5d5ee63e05ae3c759365" title="homebrewでapache2.4とphp7.0.7をインストール - Qiita" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://qiita.com/OTAGRAMER/items/5d5ee63e05ae3c759365">qiita.com</a></cite></p>

<h3>メモ</h3>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ brew install php70
<span class="synPreProc">(</span><span class="synSpecial">中略</span><span class="synPreProc">)</span>
<span class="synStatement">==&gt;</span> Searching taps...
Error: No formulae found <span class="synError">in</span> taps.
</pre>


<p>そんなフォームラはないよっていわれる。</p>

<p>現在のフォームラ一覧を確認する。</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ brew tap
homebrew/core
</pre>


<p>フォームラの追加。</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ brew tap homebrew/homebrew-php
</pre>


<p>無事、追加されている。</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ brew tap
homebrew/core
homebrew/php
</pre>


<p>再挑戦したところ、インストールが完了した。</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ brew install php70
<span class="synPreProc">(</span><span class="synSpecial">中略</span><span class="synPreProc">)</span>
/usr/<span class="synStatement">local</span>/Cellar/php70/7.0.22_14: <span class="synConstant">337</span> files, 39.2MB
</pre>


<p>バージョンがあがったことが確認できる。</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ php <span class="synSpecial">-v</span>
PHP 7.0.22 <span class="synPreProc">(</span><span class="synSpecial">cli</span><span class="synPreProc">)</span> <span class="synPreProc">(</span><span class="synSpecial">built: Aug  </span><span class="synConstant">7</span><span class="synSpecial"> </span><span class="synConstant">2017</span><span class="synSpecial"> </span><span class="synConstant">14</span><span class="synSpecial">:</span><span class="synConstant">05</span><span class="synSpecial">:</span><span class="synConstant">56</span><span class="synPreProc">)</span> <span class="synPreProc">(</span><span class="synSpecial"> NTS </span><span class="synPreProc">)</span>
Copyright <span class="synPreProc">(</span><span class="synSpecial">c</span><span class="synPreProc">)</span> <span class="synConstant">1997-2017</span> The PHP Group
Zend Engine v3.0.0, Copyright <span class="synPreProc">(</span><span class="synSpecial">c</span><span class="synPreProc">)</span> <span class="synConstant">1998-2017</span> Zend Technologies
</pre>


<p>そもそも、どこにインストールされたんだっけ。</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ which php
/usr/<span class="synStatement">local</span>/bin/php
</pre>




<pre class="code lang-sh" data-lang="sh" data-unlink>$ <span class="synStatement">ls</span> <span class="synSpecial">-ltr</span>|<span class="synStatement">grep</span> php
lrwxr-xr-x  <span class="synConstant">1</span> konoe_mario  wheel        <span class="synConstant">33</span>  <span class="synConstant">9</span>  <span class="synConstant">2</span> <span class="synConstant">14</span>:<span class="synConstant">59</span> php -<span class="synStatement">&gt;</span> ../Cellar/php70/7.0.22_14/bin/php
</pre>


<p>Homebrewでは、「/usr/local/Cellar」にphpがインストールされて、「/usr/local/bin/php」にはリンクが貼られていることがわかる。</p>

<h4>Composer</h4>

<p>PHPの依存性を解決してくれるツールとのこと。<br/>
なんだかよくわからないけれども、とりあえずインストールする。</p>

<p>動画で紹介されていた方法が古かったっぽいので、公式を見てインストールした。</p>

<p><b>うまくいかなかったやつ</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ curl <span class="synSpecial">-sS</span> https://github.com/composer/getcomposer.org/blob/master/web/installer|php
</pre>


<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgetcomposer.org%2F" title="Composer" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://getcomposer.org/">getcomposer.org</a></cite></p>

<p><b>公式</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>php <span class="synSpecial">-r</span> <span class="synStatement">&quot;</span><span class="synConstant">copy('https://getcomposer.org/installer', 'composer-setup.php');</span><span class="synStatement">&quot;</span>
php <span class="synSpecial">-r</span> <span class="synStatement">&quot;</span><span class="synConstant">if (hash_file('SHA384', 'composer-setup.php') === '544e09ee996cdf60ece3804abc52599c22b1f40f4323403c44d44fdfdd586475ca9813a858088ffbc1f233e9b180f061') { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('composer-setup.php'); } echo PHP_EOL;</span><span class="synStatement">&quot;</span>
php composer-setup.php
php <span class="synSpecial">-r</span> <span class="synStatement">&quot;</span><span class="synConstant">unlink('composer-setup.php');</span><span class="synStatement">&quot;</span>
</pre>


<p>上記を行うと、実行したディレクトリに、「composer.phar」ができる。
このファイルを、デフォルトでパスが通っているディレクトリ配下に移動する。</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ <span class="synStatement">mv</span> composer.phar /usr/<span class="synStatement">local</span>/bin/composer
</pre>


<p>これで、composerが使う準備ができた。</p>

<h2>Webサーバーの準備</h2>

<p>PHPの勉強をするだけだったら、Webの環境は必須でもないような、必須のような</p>

<p>Webサーバーの選択肢として</p>

<ul>
<li>nginx</li>
<li>Apache</li>
</ul>


<p><iframe src="https://hatenablog-parts.com/embed?url=http%3A%2F%2Fqiita.com%2Fdounokouno%2Fitems%2F543e6e1b74539175f1cf" title="PHP ビルトインウェブサーバーを起動するコマンドのメモ - Qiita" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://qiita.com/dounokouno/items/543e6e1b74539175f1cf">qiita.com</a></cite></p>

<p>今回は、Apacheを使ってみることにする。</p>

<h2>Apache</h2>

<h3>さくっと確認</h3>

<p>MacOSの場合、Apacheはデフォルトでインストールされている。</p>

<p><b>Apacheバージョン確認</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ httpd <span class="synSpecial">-v</span>
Server version: Apache/2.4.16 <span class="synPreProc">(</span><span class="synSpecial">Unix</span><span class="synPreProc">)</span>
Server built:   Jul <span class="synConstant">22</span> <span class="synConstant">2015</span> <span class="synConstant">21</span>:<span class="synConstant">03</span>:<span class="synConstant">09</span>
</pre>


<p>Apacheの2.4系が現在のところ最新みたいなので、これをそのまま使っていくことにする。</p>

<p><b>Apacheの起動</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ sudo apachectl <span class="synStatement">start</span>
</pre>


<p><b>ブラウザで「<a href="http://localhost/">http://localhost/</a>」にアクセス</b>
<span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170902/20170902152645.png" alt="f:id:konoemario:20170902152645p:plain:w300" title="f:id:konoemario:20170902152645p:plain:w300" class="hatena-fotolife" style="width:300px" itemprop="image"></span></p>

<p>参照できる。</p>

<p>Apacheを停止すると、参照できなくなる。</p>

<p><b>Apacheの停止</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ sudo apachectl <span class="synStatement">stop</span>
</pre>


<h3>気になったことの羅列</h3>

<p>httpd.confの場所
/etc/apache2/httpd.conf</p>

<h2>ApacheでPHPを使えるようにする</h2>

<h3>#</h3>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ brew tap
Updating Homebrew...
homebrew/core
</pre>


-----
--------
AUTHOR: konoemario
TITLE: 
BASENAME: 2017/08/25/152301
STATUS: Draft
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 08/25/2017 15:23:01
-----
BODY:
<table>
<thead>
<tr>
<th>サーボの仕様</th>
<th>duty比</th>
<th>pwmWriteに設定する値</th>
</tr>
</thead>
<tbody>
<tr>
<td>-90度</td>
<td>2.5</td>
<td>26</td>
</tr>
<tr>
<td>0度</td>
<td>7.25</td>
<td>74</td>
</tr>
<tr>
<td>90度</td>
<td>12</td>
<td>123</td>
</tr>
</tbody>
</table>


<p>10度ずつ動かすとすると、pwmWriteの値を5インクリメントすると、10度まがる感じかな</p>

-----
--------
AUTHOR: konoemario
TITLE: ラズパイ：ステアリングのためのサーボモータ制御(1)
BASENAME: 2017/08/24/101259
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 08/24/2017 10:12:59
CATEGORY: ラズパイ
CATEGORY: ラジコンシリーズ
CATEGORY: Python
IMAGE: https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170619/20170619215744.jpg
-----
BODY:
<p>pythonのwiringpiを用いた記事になります。</p>

<ul class="table-of-contents">
    <li><a href="#雑談">雑談</a></li>
    <li><a href="#サーボモータの制御">サーボモータの制御</a><ul>
            <li><a href="#とりあえずコード">とりあえずコード</a></li>
            <li><a href="#PWMとduty比">PWMとduty比</a><ul>
                    <li><a href="#dititalWrite関数で1を設定した状態">dititalWrite関数で1を設定した状態</a></li>
                    <li><a href="#dititalWrite関数で0を設定した状態">dititalWrite関数で0を設定した状態</a></li>
                    <li><a href="#pwmWrite関数のイメージ">pwmWrite関数のイメージ</a></li>
                </ul>
            </li>
        </ul>
    </li>
    <li><a href="#duty比とは">duty比とは</a></li>
    <li><a href="#サーボモータの仕様">サーボモータの仕様</a></li>
    <li><a href="#pwmWrite関数に設定する値">pwmWrite関数に設定する値</a></li>
    <li><a href="#次回">次回</a></li>
</ul>

<h1 id="雑談">雑談</h1>

<p>以前、ラジコンが完成した！と騒いでいたことがある。</p>

<p><b>問題のラジコン</b><br/>
<span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170619/20170619215744.jpg" alt="f:id:konoemario:20170619215744j:plain:w300" title="f:id:konoemario:20170619215744j:plain:w300" class="hatena-fotolife" style="width:300px" itemprop="image"></span></p>

<p><br/></p>

<p><b>コントロール画面</b><br/>
<span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170807/20170807223610.png" alt="f:id:konoemario:20170807223610p:plain:w300" title="f:id:konoemario:20170807223610p:plain:w300" class="hatena-fotolife" style="width:300px" itemprop="image"></span></p>

<p><br></p>

<p>正直に言おう。</p>

<p>このラジコン、ステアリングのタイヤを右に曲げるか、左に曲げるかを制御できるのだが、一度曲げたら最後、タイヤを真っ直ぐに戻すことができないのである。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170822/20170822234357.jpg" alt="f:id:konoemario:20170822234357j:plain:w300" title="f:id:konoemario:20170822234357j:plain:w300" class="hatena-fotolife" style="width:300px" itemprop="image"></span></p>

<p>というのも、サーボモータの制御をほとんど理解しないまま、固定の角度が曲がるようにコントロールしていたから。</p>

<p>なので、そろそろサーボモータの制御に向き合いたいと思う。</p>

<h1 id="サーボモータの制御">サーボモータの制御</h1>

<p>この記事を書くにあたっては、以下の記事を参考にさせていただきました。</p>

<p>正直なところ、参考記事のほうがわかりやすいのは内緒。</p>

<p><a href="http://make-muda.weblike.jp/2015/11/3343/#comments">Raspberry Pi&#x3067;&#x30D6;&#x30E9;&#x30A6;&#x30B6;&#x304B;&#x3089;&#x30B5;&#x30FC;&#x30DC;&#x30E2;&#x30FC;&#x30BF;&#x3092;&#x3061;&#x3083;&#x3093;&#x3068;&#x5236;&#x5FA1;&#x3059;&#x308B; | MUDA&#x306A;&#x3053;&#x3068;&#x3092;&#x3057;&#x3088;&#x3046;&#x3002;</a><br/>
<a href="http://blog.enjel.chips.jp/?cid=1">&#x30B3;&#x30F3;&#x30D4;&#x30E5;&#x30FC;&#x30BF; | My&#x30D6;&#x30FC;&#x30E0; &amp; My&#x5099;&#x5FD8;&#x9332;</a></p>

<h2 id="とりあえずコード">とりあえずコード</h2>

<p>まずは、サーボモータをwiringpiで制御するため、未完成ではあるが、NewServoMotorクラスを書いた。</p>

<pre class="code lang-python" data-lang="python" data-unlink><span class="synStatement">class</span> <span class="synIdentifier">NewServoMotor</span>:
    <span class="synConstant">'''</span>
<span class="synConstant">    サーボモータを制御するクラス</span>
<span class="synConstant">    少しだけ仕組みを理解した上で、かいてみる</span>
<span class="synConstant">　このコードは未完成。  </span>
<span class="synConstant">    '''</span>

    <span class="synStatement">def</span> <span class="synIdentifier">__init__</span>(self, servo_motor_pin1):
        self.motor_pin1 = servo_motor_pin1

        <span class="synComment">#wiringpiの初期設定</span>
        pi.wiringPiSetupGpio()
        <span class="synComment">#ピンの割り当て</span>
        pi.pinMode( self.motor_pin1, pi.GPIO.PWM_OUTPUT )
        <span class="synComment">#PWMに必要な設定。詳細はあんまり把握してない。</span>
        pi.pwmSetMode( pi.GPIO.PWM_MODE_MS )
        pi.pwmSetClock(<span class="synConstant">375</span>)


    <span class="synStatement">def</span> <span class="synIdentifier">handle</span>(self,duty):
        pi.pwmWrite(self.motor_pin1, duty)
</pre>


<p>NewServoMotorクラスのコンストラクタは、wiringpiでGPIO制御をするのに必要な設定をしている。
なので、このへんの説明はとくにない。  <br/>
ただ、「pwmSetMode」[pwmSetClock」というDCモーターを制御する際には見られない関数が見受けられる。<br/>
これは、後述する、PWM(Pulse Width Modulation、パルス幅変調)とよばれる制御をするのに必要な設定。  <br/>
肝心のサーボモータの角度を制御するための、handleメソッドは、pwmWrite関数を呼ぶシンプルなメソッド。<br/>
LEDやDCモータあれば、digitalWrite関数を使っていたけれども、サーボモータではPWMを使って制御することになる。</p>

<p><b>LEDやDCモーターのときに使ってた関数</b></p>

<pre class="code lang-python" data-lang="python" data-unlink>pi.digitalWrite(GPIO番号,<span class="synConstant">0</span> <span class="synStatement">or</span> <span class="synConstant">1</span>)
</pre>


<p><b>サーボモータ制御で使う関数</b></p>

<pre class="code lang-python" data-lang="python" data-unlink>pwmWrite(GPIO番号、 duty比)
</pre>


<p>次に、PWMとpwmWrite関数の引数であるduty比というものについて見てみる。</p>

<p><br/></p>

<h2 id="PWMとduty比">PWMとduty比</h2>

<p>PWM(Pulse Width Modulation、パルス幅変調)とは周期的に、電圧がかかっている状態とかかっていない状態を繰り返す、信号方式とのこと。</p>

<p>PWMの特徴を知るためにも、digitalWrite関数と対比してみる。</p>

<h5 id="dititalWrite関数で1を設定した状態">dititalWrite関数で1を設定した状態</h5>

<p>以下の雑な絵をみてほしい。
縦軸に電圧、横軸に時間をおいたグラフである。<br/>
 digitalWrite関数で1を設定した状態を表している。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170824/20170824084059.png" alt="f:id:konoemario:20170824084059p:plain:w300" title="f:id:konoemario:20170824084059p:plain:w300" class="hatena-fotolife" style="width:300px" itemprop="image"></span></p>

<pre class="code lang-python" data-lang="python" data-unlink>pi.digitalWrite(GPIO番号, <span class="synConstant">1</span>)
</pre>


<p><br/></p>

<h5 id="dititalWrite関数で0を設定した状態">dititalWrite関数で0を設定した状態</h5>

<p>そして以下は、digitalWrite関数で0を設定した状態を表している。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170824/20170824084102.png" alt="f:id:konoemario:20170824084102p:plain:w300" title="f:id:konoemario:20170824084102p:plain:w300" class="hatena-fotolife" style="width:300px" itemprop="image"></span></p>

<pre class="code lang-python" data-lang="python" data-unlink>pi.digitalWrite(GPIO番号, <span class="synConstant">0</span>)
</pre>


<p>何が言いたいかというと、digitalWrite関数では、電圧がかかっている状態とかかっていない状態の2値のみの状態のみ表現することができるという点。</p>

<h5 id="pwmWrite関数のイメージ">pwmWrite関数のイメージ</h5>

<p>一方、pwmWrite関数は、以下のイメージになる。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170824/20170824085103.png" alt="f:id:konoemario:20170824085103p:plain:w300" title="f:id:konoemario:20170824085103p:plain:w300" class="hatena-fotolife" style="width:300px" itemprop="image"></span></p>

<pre class="code lang-python" data-lang="python" data-unlink>pwmWrite(GPIO番号、 duty比)
</pre>


<p>上記のように、電圧がかかっている状態とかかっていない状態を繰り返す方式となる。</p>

<p>なんで、こんなことしているの？という点だけれども、本当にやりたいことは以下の微妙に電圧がかかっている状態をつくりたいんだと思う。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170824/20170824085901.png" alt="f:id:konoemario:20170824085901p:plain:w300" title="f:id:konoemario:20170824085901p:plain:w300" class="hatena-fotolife" style="width:300px" itemprop="image"></span></p>

<p>でも、電圧がかかっているか、かかっていないか状態しかつくりだすことができないので、擬似的に一定の期間内で電圧をかけたり、やめたりを繰り返して微妙に電圧がかかっている状態を表現しているみたい。</p>

<h3 id="duty比とは">duty比とは</h3>

<p>次に、pwmWrite関数のduty比について触れる。</p>

<pre class="code lang-python" data-lang="python" data-unlink>pwmWrite(GPIO番号、 duty比)
</pre>


<p>duty比とは、とある周期の間に、電圧がかかっている状態がどれくらいあったかを表すものである。</p>

<p>下の図でいえば、周期が20ミリ秒の間に、青線の状態がどれくらいあったのか、ということを表す。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170824/20170824090514.png" alt="f:id:konoemario:20170824090514p:plain:w300" title="f:id:konoemario:20170824090514p:plain:w300" class="hatena-fotolife" style="width:300px" itemprop="image"></span></p>

<p>具体的な数字をいれてみると、以下のようになる。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170824/20170824091046.png" alt="f:id:konoemario:20170824091046p:plain:w300" title="f:id:konoemario:20170824091046p:plain:w300" class="hatena-fotolife" style="width:300px" itemprop="image"></span></p>

<p>duty比が高くなればなるほど、電圧がかかっている状態が長くなり、逆にduty比が低いということは、電圧がかかっている状態が短いということになる。</p>

<p>（もしかしたら20ミリ秒の間で繰り返すといよりかは、20ミリ秒の間に電圧がかかっている状態が一定期間あって、以降はかからないというイメージの方が正しいかもしれない。)</p>

<h3 id="サーボモータの仕様">サーボモータの仕様</h3>

<p>ここで、そろそろサーボモータの仕様をみてみる。<br/>
参考にするサーボモーターはSG-5010。よく使うSG90も同じ仕様みたいなので、どちらでもいい。</p>

<p><a href="http://akizukidenshi.com/catalog/g/gM-08913/">&#x30DE;&#x30A4;&#x30AF;&#x30ED;&#x30B5;&#x30FC;&#x30DC; &#xFF33;&#xFF27;&minus;&#xFF15;&#xFF10;&#xFF11;&#xFF10;: &#x30B5;&#x30FC;&#x30DC; &#x79CB;&#x6708;&#x96FB;&#x5B50;&#x901A;&#x5546; &#x96FB;&#x5B50;&#x90E8;&#x54C1; &#x30CD;&#x30C3;&#x30C8;&#x901A;&#x8CA9;</a></p>

<p>秋月電気通商に記載されている仕様をみると、以下を確認することができる。</p>

<p><span style="color: #ff0000">・ＰＷＭサイクル：２０ｍＳ<br/>
・制御パルス：０．５ｍｓ～２．４ｍｓ</span></p>

<p>これを、日本語にすると以下の仕様になる。</p>

<ul>
<li>20msの周期の中で、0.5msのパルス信号を送るとサーボモータは-90度になる</li>
<li>20msの周期の中で、2.4msのパルス信号を送ると、サーボモーターは90度になる</li>
</ul>


<p>もしかしたら、0.5msと2.4msのときでサーボモータの向きが逆になることもあるかもしれないけれども、とりあえす仕様としてはこんな感じみたい。</p>

<p>これを図にすると、以下のようなイメージである。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170824/20170824092629.png" alt="f:id:konoemario:20170824092629p:plain:w300" title="f:id:konoemario:20170824092629p:plain:w300" class="hatena-fotolife" style="width:300px" itemprop="image"></span></p>

<p>20msの間に青い線の<span style="color: #ff0000">合計</span>が0.5msのとき、サーボモーターは-90度になる。<br/>
つまり、duty比は、2.5%のときサーボモータは-90度になる。</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>0.5ms  ÷  20ms <span class="synStatement">=</span> 0.025 <span class="synStatement">=</span> 2.5%
</pre>


<p>同様にduty比が12%のときにサーボモーターが90度になる。</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>2.4ms  ÷  20ms <span class="synStatement">=</span> 0.12 <span class="synStatement">=</span> <span class="synConstant">12</span>%
</pre>


<p>角度を0度にしたいときは、0.5msと2.4msの間である1.45msで考えればよい。</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>1.45ms  ÷  20ms <span class="synStatement">=</span> <span class="synIdentifier">0.0725</span>= 7.25%
</pre>


<p><br/></p>

<h2 id="pwmWrite関数に設定する値">pwmWrite関数に設定する値</h2>

<p>さて、ようやくpwmWrite関数に設定するduty比をなんとなく理解することができた。</p>

<p>ただ残念なことに、サーボモータを-90度にするときは、duty比2.5%だから、こうすればいいんじゃ！と以下のようにするとうまくいかない。</p>

<pre class="code lang-python" data-lang="python" data-unlink>pwmWrite(GPIO番号、 <span class="synConstant">2.5</span>)
</pre>


<p>というのも、pwmWrite関数のduty比は0〜100という値ではなく、0〜1024の値を取るとのこと。</p>

<p>なので、割合を1024の範囲に合わせてあげる必要がある。<br/>
ふとしたときにこの辺の計算ができなくて焦るのけれども、以下のように求めることができる。</p>

<pre class="code" data-lang="" data-unlink>2.5 : 100 = 知りたい値 : 1024 
知りたい値 = 1024 × 2.5 / 100  = 25.6  ≒ 26
※pwmWriteのduty比はintなので、四捨五入した値を設定する。  </pre>


<p>まとめると以下のようになる。</p>

<table>
<thead>
<tr>
<th>サーボの仕様</th>
<th>duty比</th>
<th>pwmWriteに設定する値</th>
</tr>
</thead>
<tbody>
<tr>
<td>-90度</td>
<td>2.5</td>
<td>26</td>
</tr>
<tr>
<td>0度</td>
<td>7.25</td>
<td>74</td>
</tr>
<tr>
<td>90度</td>
<td>12</td>
<td>123</td>
</tr>
</tbody>
</table>


<p>長くなってしまったので、実際にサーボモーターを動かすのは次回に回したいと思います。</p>

<h1 id="次回">次回</h1>

<p><iframe src="https://hatenablog-parts.com/embed?url=http%3A%2F%2Fwww.tohuandkonsome.site%2Fentry%2F2017%2F08%2F31%2F164511" title="ラズパイ：ステアリングのためのサーボモータ制御(2) - 豆腐とコンソメ" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://www.tohuandkonsome.site/entry/2017/08/31/164511">www.tohuandkonsome.site</a></cite></p>

-----
COMMENT:
AUTHOR: konoemario
IP: 126.94.66.69
DATE: 08/31/2017 16:46:30
コメントありがとうございます！
無職最終日ということで、いろいろと嘆いていましたがうれしさのあまり、記事を書くことにしました。  
取り急ぎ記載したので、不明点等あればご指摘ください。


-----
COMMENT:
AUTHOR: dubudda
URL: http://www.dubudda.com
IP: 61.205.90.119
DATE: 08/31/2017 08:46:37
とても楽しく勉強させて頂いています。
続きも楽しみにいています。
よろしくお願い致します。

-----
--------
AUTHOR: konoemario
TITLE: CSSの勉強の成果物をHerokuで管理する
BASENAME: 2017/08/22/162450
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 08/22/2017 16:24:50
CATEGORY: プログラム
-----
BODY:
<p>仕事帰りの奥さんを喫茶店で待っていた。</p>

<p>表参道の喫茶店である。</p>

<p>Mac Book Proを持ち込み、ｶﾀｶﾀｶｯﾀｰﾝ!とカッコよく作業をしていた。</p>

<p>ターミナルの黒色背景に緑文字は、僕ってかっこいい！という自己陶酔に浸るにはぴったりの環境だ。</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ <span class="synStatement">mkdir</span> hoge 
$ <span class="synStatement">touch</span> hoge.txt
</pre>


<p>やっぱり、hoge〜はいらないやと</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ <span class="synStatement">rm</span> <span class="synSpecial">-r</span> *
</pre>


<p>と、やった直後に気がついた。</p>

<p><span style="color: #ff0000">作業ディレクトリを変更していた。  </span></p>

<p>結果、意図するものと異なるものを消してしまい、ここ１週間あまり作業していたソースやらなんやらが消失してしまった。</p>

<p>ファイルはローカルにしか存在しておらず、githubにもあげていなかった。</p>

<p>雑といわれがちな自分だけれども、表参道・喫茶店・MacBookPro + Terminalという組み合わせが、いつも以上の悲劇を呼んでしまった。</p>

<p>このことから、今更ではあるのだけれども、成果物をリモート上で管理していく習慣をつけていこうと思う。<br/>
(そもそもrm -r * なんてやらないほうがいいのだけれども)</p>

<p>そこで今回は、試しにHerokuを用いて作業物を管理してみたいと思うので、それをするにあたっての作業記録を書いていく。</p>

<p>ちなみに消えてしまったものは、以下の「Node.jsを始めてみよう」を参考にいろいろ試していたものだった。</p>

<p>わかりやすくて、すごい読みやすい内容なので自分みたいにNode.jsを始めたばかりの方にはおすすめしたい。
僕は、こういうものを書けるようになりたい。</p>

<p>今回のHerokuを使う、というのものこれをきっかけに使ってみることにした。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2Fosamu38%2Fnode-express-curriculum%2Fwiki%2FNode.js%25E3%2582%2592%25E5%25A7%258B%25E3%2582%2581%25E3%2581%25A6%25E3%2581%25BF%25E3%2582%2588%25E3%2581%2586" title="osamu38/node-express-curriculum" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://github.com/osamu38/node-express-curriculum/wiki/Node.js%E3%82%92%E5%A7%8B%E3%82%81%E3%81%A6%E3%81%BF%E3%82%88%E3%81%86">github.com</a></cite></p>

<h1>作成したサイト</h1>

<p>以下のように、HerokuにWebサイトをデプロイして、CSS練習用のページをつくってみた。</p>

<p><a href="https://sample-basic-css.herokuapp.com/sample">CSS&#x7DF4;&#x7FD2;&#x7528;&#x306E;TOP&#x30DA;&#x30FC;&#x30B8;</a></p>

<p>あれ、Githubでソース管理して、ローカルで確認すればいいんじゃないの？っていう心の声は押さえましょう。</p>

<p>Herokuを使いたいんだよね！そうだよね！</p>

<p>まだ触ったばかりですが、githubにあげたタイミングでHerokuにもあげていこうかと思います。<br/>
(そもそもgithubにあげてなかったのが問題ですが)</p>

<h1>Herokuをつかってみる</h1>

<p>今回、sample_basic_cssというディレクトリ配下に、以下のnode.jsのプロジェクトを作成したので、こちらをHerokuにデプロイしていきます。</p>

<p><b>sample_baisc_css配下</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>.
├── app.js
├── bin
├── node_modules
├── package-lock.json
├── package.json
├── public
├── routes
└── views
</pre>


<p><br/></p>

<h5>アカウント作成</h5>

<p>Herokuにアクセスして、新規にアカウントを作成します。<br/>
今回のように、データベースとかまったくつかわないシンプルなサイトであれば、クレジットカードとかの情報も不要でした。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fwww.heroku.com" title="Cloud Application Platform | Heroku" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://www.heroku.com">www.heroku.com</a></cite></p>

<p><br></p>

<h5>Heroku CLIをインストールする</h5>

<p>Herokuのサイト上からも、アプリケーションの作成やらなんやらできるみたいですが、CLIツールもあるので、こちらをインストールします。</p>

<p>MacOSであればHomebrewでつっこんじゃいましょう。</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ brew install heroku
</pre>


<p>Windowsであれば、インストーラーがあるみたいです。<br/>
<iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fdevcenter.heroku.com%2Farticles%2Fheroku-cli" title="Heroku CLI | Heroku Dev Center" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://devcenter.heroku.com/articles/heroku-cli">devcenter.heroku.com</a></cite></p>

<p><br/></p>

<h5>デプロイの準備</h5>

<p>HerokuへのデプロイはGitを使って行います。<br/>
sample_baisc_cssはGithubで管理していたので、さくっといけました。</p>

<h5>Procfileの作成</h5>

<p>Herokuにデプロイする際に必要なファイルとのこと。<br/>
エントリーポイントがわかるように必要なのかな。</p>

<p><b>Procfile</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>web: node ./bin/www
</pre>


<p><b>sample_baisc_css配下</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>.
├── Procfile  //追加
├── app.js
├── bin
├── node_modules
├── package-lock.json
├── package.json
├── public
├── routes
└── views
</pre>


<h5>Herokuでアプリケーション作成</h5>

<p>「heroku create &lt;アプリケーション名>」で空のアプリケーションを作成します。<br/>
作成されると、アプリケーションのURLとgitのリポジトリのURLが表示されます。</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ heroku create sample-basic-css
Creating ⬢ sample-basic-css... <span class="synError">done</span>
https://sample-basic-css.herokuapp.com/ | https://git.heroku.com/sample-basic-css.git
</pre>


<p> リモートのリポジトリもherokuという名前で作成されていますね。</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ git remote <span class="synSpecial">-v</span>
heroku  https://git.heroku.com/sample-basic-css.git <span class="synPreProc">(</span><span class="synSpecial">fetch</span><span class="synPreProc">)</span>
heroku  https://git.heroku.com/sample-basic-css.git <span class="synPreProc">(</span><span class="synSpecial">push</span><span class="synPreProc">)</span>
origin  https://github.com/Ryomasao/sample_basic_css.git <span class="synPreProc">(</span><span class="synSpecial">fetch</span><span class="synPreProc">)</span>
origin  https://github.com/Ryomasao/sample_basic_css.git <span class="synPreProc">(</span><span class="synSpecial">push</span><span class="synPreProc">)</span>
</pre>


<p>あとは、githubにpushするのと同じ要領で</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ git push heroku master
</pre>


<p>デプロイが完了しました。</p>

<p>先ほどの「<a href="https://sample-basic-css.herokuapp.com/">https://sample-basic-css.herokuapp.com/</a>」にアクセスすると、Webサイトが参照できました！</p>

-----
--------
AUTHOR: konoemario
TITLE: ラズパイで工作記事まとめ
BASENAME: 2017/08/16/180154
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 08/16/2017 18:01:54
CATEGORY: ラズパイ
-----
BODY:
<p>ラズパイ電子工作の記事がとっちらかってきたので、ここに書くことにしました。</p>

<ul class="table-of-contents">
    <li><a href="#ラズパイZero初期設定">ラズパイZero初期設定</a></li>
    <li><a href="#電子工作の基礎知識">電子工作の基礎知識</a></li>
    <li><a href="#モーターを動かす">モーターを動かす</a></li>
    <li><a href="#ラジコンを動かす">ラジコンを動かす</a></li>
    <li><a href="#サーボモーターを動かす">サーボモーターを動かす</a></li>
    <li><a href="#ステッピングモーターを動かす">ステッピングモーターを動かす</a></li>
    <li><a href="#アドホック接続">アドホック接続</a></li>
    <li><a href="#ドローンの自律飛行を目指す">ドローンの自律飛行を目指す</a></li>
</ul>

<h2 id="ラズパイZero初期設定">ラズパイZero初期設定</h2>

<p>ラズパイZeroを購入して、PythonでGPIO操作をするまでの記事になります。<br/>
<a href="http://www.tohuandkonsome.site/entry/2017/04/29/223718">RaspBerry Pi Zero&#x306E;&#x521D;&#x671F;&#x8A2D;&#x5B9A;&#x30E1;&#x30E2; - &#x8C46;&#x8150;&#x3068;&#x30B3;&#x30F3;&#x30BD;&#x30E1;</a><br/>
<a href="http://www.tohuandkonsome.site/entry/2017/04/30/163148">&#x30E9;&#x30BA;&#x30D1;&#x30A4;Zero&#x3067;WringPi&#x304C;&#x4F7F;&#x3048;&#x308B;&#x307E;&#x3067;&#x30E1;&#x30E2; - &#x8C46;&#x8150;&#x3068;&#x30B3;&#x30F3;&#x30BD;&#x30E1;</a><br/>
<a href="http://www.tohuandkonsome.site/entry/2017/05/01/234002">WiringPi&#x3067;&#x30A8;&#x30E9;&#x30FC;&#x306B;&#x306A;&#x3063;&#x305F;&#x5834;&#x5408;&#x306E;&#x30E1;&#x30E2; - &#x8C46;&#x8150;&#x3068;&#x30B3;&#x30F3;&#x30BD;&#x30E1;</a></p>

<h2 id="電子工作の基礎知識">電子工作の基礎知識</h2>

<p>電子工作をする上で、気になったことを書いた記事になります。<br/>
LEDを光らせるのは、電子工作界のHelloWorldらしいです。</p>

<p><a href="http://www.tohuandkonsome.site/entry/2017/04/09/175421">RaspBerryPi&#x3067;&#x306F;&#x3058;&#x3081;&#x308B;&#x96FB;&#x5B50;&#x5DE5;&#x4F5C;&#x307E;&#x3068;&#x3081;&#xFF1A;&#x96FB;&#x6C17;&#x3063;&#x3066;&#x306A;&#x3093;&#x3060;&#x308D;&#x3046; - &#x8C46;&#x8150;&#x3068;&#x30B3;&#x30F3;&#x30BD;&#x30E1;</a><br/>
<a href="http://www.tohuandkonsome.site/entry/2017/04/10/225420">&#x96FB;&#x5727;&#x3084;&#x3089;&#x3001;&#x306A;&#x3093;&#x3084;&#x3089;&#x3092;&#x8A08;&#x6E2C;&#x3057;&#x3066;&#x307F;&#x305F;&#xFF1A;&#x30C6;&#x30B9;&#x30BF;&#x30FC;&#x306E;&#x4F7F;&#x3044;&#x65B9; - &#x8C46;&#x8150;&#x3068;&#x30B3;&#x30F3;&#x30BD;&#x30E1;</a><br/>
<a href="http://www.tohuandkonsome.site/entry/2017/04/13/213238">LED&#x3092;&#x6B63;&#x3057;&#x304F;&#x5149;&#x3089;&#x305B;&#x308B; - &#x8C46;&#x8150;&#x3068;&#x30B3;&#x30F3;&#x30BD;&#x30E1;</a></p>

<h2 id="モーターを動かす">モーターを動かす</h2>

<p>ラズパイ3を使って、PythonでGPIO操作を用いてモーターを動かしたときの記事になります。<br/>
<a href="http://www.tohuandkonsome.site/entry/2017/03/05/200409">RaspBerryPi&#x3067;&#x30E2;&#x30FC;&#x30BF;&#x30FC;&#x3092;&#x52D5;&#x304B;&#x3059;(1) - &#x8C46;&#x8150;&#x3068;&#x30B3;&#x30F3;&#x30BD;&#x30E1;</a><br/>
<a href="http://www.tohuandkonsome.site/entry/2017/03/06/223721">RaspBerryPi&#x3067;&#x30E2;&#x30FC;&#x30BF;&#x30FC;&#x3092;&#x52D5;&#x304B;&#x3059;(2) - &#x8C46;&#x8150;&#x3068;&#x30B3;&#x30F3;&#x30BD;&#x30E1;</a></p>

<p>また、こちらはちょっとかわったモーターを動かした記事になります。</p>

<p><a href="http://www.tohuandkonsome.site/entry/2017/09/28/222322">&#x30E9;&#x30BA;&#x30D1;&#x30A4;&#x3067;&#x5927;&#x4EBA;&#x306E;&#x30E2;&#x30FC;&#x30BF;&#x30FC;&#x3092;&#x64CD;&#x4F5C;&#x3059;&#x308B; - &#x8C46;&#x8150;&#x3068;&#x30B3;&#x30F3;&#x30BD;&#x30E1;</a></p>

<h2 id="ラジコンを動かす">ラジコンを動かす</h2>

<p>ラズパイを用いてラジコンカーを作成するまでの記事になります。</p>

<p>以下は、ラズパイ側の電子工作の記事です。<br/>
<a href="http://www.tohuandkonsome.site/entry/2017/03/11/001512">RaspBerryPi&#x3067;&#x30E2;&#x30FC;&#x30BF;&#x30FC;&#x3092;&#x52D5;&#x304B;&#x3059;(3):&#x5727;&#x5012;&#x7684;&#x529B;&#x4E0D;&#x8DB3; - &#x8C46;&#x8150;&#x3068;&#x30B3;&#x30F3;&#x30BD;&#x30E1;</a><br/>
<a href="http://www.tohuandkonsome.site/entry/2017/04/02/174735">RaspBerryPi&#x3067;&#x30E2;&#x30FC;&#x30BF;&#x30FC;&#x3092;&#x52D5;&#x304B;&#x3059;(4) - &#x8C46;&#x8150;&#x3068;&#x30B3;&#x30F3;&#x30BD;&#x30E1;</a><br/>
<a href="http://www.tohuandkonsome.site/entry/2017/04/04/220012">RaspBerryPi&#x3067;&#x30E2;&#x30FC;&#x30BF;&#x30FC;&#x3092;&#x52D5;&#x304B;&#x3059;(5):&#x3060;&#x3044;&#x3076;&#x8131;&#x7DDA; - &#x8C46;&#x8150;&#x3068;&#x30B3;&#x30F3;&#x30BD;&#x30E1;</a></p>

<p>この辺で、一回想定したものが完成しました。<br/>
<a href="http://www.tohuandkonsome.site/entry/2017/05/06/210309">RaspBerryPi&#x3067;&#x30E9;&#x30B8;&#x30B3;&#x30F3;&#x3092;&#x3064;&#x304F;&#x308B;(6)&#xFF1A;&#x3068;&#x308A;&#x3042;&#x3048;&#x305A;&#x52D5;&#x304F;&#x3082;&#x306E;&#x304C;&#x3067;&#x304D;&#x307E;&#x3057;&#x305F; - &#x8C46;&#x8150;&#x3068;&#x30B3;&#x30F3;&#x30BD;&#x30E1;</a></p>

<p>これは、ラジコンカーを操作することをPC画面から操作することを目的とした記事です。<br/>
<a href="http://www.tohuandkonsome.site/entry/2017/05/16/215317">RaspBerryPi&#x3067;&#x30E9;&#x30B8;&#x30B3;&#x30F3;&#x3092;&#x3064;&#x304F;&#x308B;(8)&#xFF1A;&#x30B3;&#x30F3;&#x30C8;&#x30ED;&#x30FC;&#x30E9;&#x3092;&#x3064;&#x304F;&#x308B; - &#x8C46;&#x8150;&#x3068;&#x30B3;&#x30F3;&#x30BD;&#x30E1;</a></p>

<p>新しいレゴブロックを購入して、ラジコンカーをつくることにしました。<br/>
<a href="http://www.tohuandkonsome.site/entry/2017/06/20/103846">RaspBerryPi&#x3067;&#x30E9;&#x30B8;&#x30B3;&#x30F3;&#x3092;&#x3064;&#x304F;&#x308B;(9)&#xFF1A;&#x8EFD;&#x91CF;&#x5316;&#x554F;&#x984C;&#x3092;&#x89E3;&#x6D88;&#x3059;&#x308B;&#x305F;&#x3081;&#x306E;&#x305F;&#x3063;&#x305F;&#x3072;&#x3068;&#x3064;&#x306E;&#x51B4;&#x3048;&#x305F;&#x3084;&#x308A;&#x65B9; - &#x8C46;&#x8150;&#x3068;&#x30B3;&#x30F3;&#x30BD;&#x30E1;</a></p>

<p>ラジコンをブラウザから操作することにしました。<br/>
<a href="http://www.tohuandkonsome.site/entry/2017/08/09/095603">RaspBerryPi&#x3067;&#x30E9;&#x30B8;&#x30B3;&#x30F3;&#x3092;&#x3064;&#x304F;&#x308B;(13):&#x30B3;&#x30F3;&#x30C8;&#x30ED;&#x30FC;&#x30EB;&#x753B;&#x9762;&#x304C;&#x5B8C;&#x6210;&#x3057;&#x305F; - &#x8C46;&#x8150;&#x3068;&#x30B3;&#x30F3;&#x30BD;&#x30E1;</a></p>

<h2 id="サーボモーターを動かす">サーボモーターを動かす</h2>

<p><a href="http://www.tohuandkonsome.site/entry/2017/08/24/101259">&#x30E9;&#x30BA;&#x30D1;&#x30A4;&#xFF1A;&#x30B9;&#x30C6;&#x30A2;&#x30EA;&#x30F3;&#x30B0;&#x306E;&#x305F;&#x3081;&#x306E;&#x30B5;&#x30FC;&#x30DC;&#x30E2;&#x30FC;&#x30BF;&#x5236;&#x5FA1;(1) - &#x8C46;&#x8150;&#x3068;&#x30B3;&#x30F3;&#x30BD;&#x30E1;</a></p>

<p><a href="http://www.tohuandkonsome.site/entry/2017/08/31/164511">&#x30E9;&#x30BA;&#x30D1;&#x30A4;&#xFF1A;&#x30B9;&#x30C6;&#x30A2;&#x30EA;&#x30F3;&#x30B0;&#x306E;&#x305F;&#x3081;&#x306E;&#x30B5;&#x30FC;&#x30DC;&#x30E2;&#x30FC;&#x30BF;&#x5236;&#x5FA1;(2) - &#x8C46;&#x8150;&#x3068;&#x30B3;&#x30F3;&#x30BD;&#x30E1;</a></p>

<h2 id="ステッピングモーターを動かす">ステッピングモーターを動かす</h2>

<p>特に目的もなかったのですが、ステッピングモーターを動かした際の記事になります。</p>

<p><a href="http://www.tohuandkonsome.site/entry/2017/04/16/150728">RaspBerryPi&#x3067;&#x30B9;&#x30C6;&#x30C3;&#x30D4;&#x30F3;&#x30B0;&#x30E2;&#x30FC;&#x30BF;&#x30FC;&#x3092;&#x52D5;&#x304B;&#x3059; - &#x8C46;&#x8150;&#x3068;&#x30B3;&#x30F3;&#x30BD;&#x30E1;</a></p>

<h2 id="アドホック接続">アドホック接続</h2>

<p>ラジコンをWifiがない環境で操作したかったので、書いた記事になります。<br/>
<a href="http://www.tohuandkonsome.site/entry/2017/05/05/202821">&#x30E9;&#x30BA;&#x30D1;&#x30A4;&#x3092;&#x30A2;&#x30C9;&#x30DB;&#x30C3;&#x30AF;&#x63A5;&#x7D9A;&#x3067;&#x4F7F;&#x7528;&#x3059;&#x308B; - &#x8C46;&#x8150;&#x3068;&#x30B3;&#x30F3;&#x30BD;&#x30E1;</a></p>

<h2 id="ドローンの自律飛行を目指す">ドローンの自律飛行を目指す</h2>

<p>ラズパイでドローンの自律飛行を目指す記事になります。<br/>
現在のところ、先が見えません。<br/>
<a href="http://www.tohuandkonsome.site/entry/2017/09/18/224357">RaspberryPi&#x3067;&#x30C9;&#x30ED;&#x30FC;&#x30F3;&#x306E;&#x81EA;&#x5F8B;&#x98DB;&#x884C;&#x3092;&#x76EE;&#x6307;&#x3059; - &#x8C46;&#x8150;&#x3068;&#x30B3;&#x30F3;&#x30BD;&#x30E1;</a></p>

-----
--------
AUTHOR: konoemario
TITLE: ラズパイ + node.js:Webサイトを外部公開する際にログインページを用意しよう
BASENAME: 2017/08/21/005931
STATUS: Draft
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 08/11/2017 17:31:47
-----
BODY:
<p>「こいつ、いっつもチュートリアルばっかやってんな！」と奥さんに言われる今日このごろです。</p>

<p>めげずに、以前から気になっていた以下の内容をやっていきたいので、作業メモを残していきます。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2Fosamu38%2Fnode-express-curriculum%2Fwiki" title="osamu38/node-express-curriculum" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://github.com/osamu38/node-express-curriculum/wiki">github.com</a></cite></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ <span class="synStatement">mkdir</span> handsonNode
</pre>


<p>必要な環境は以下の通りです</p>

<h2>ラズパイにNode.jsをインストールする</h2>

<h2>ラズパイを外部公開する</h2>

<h2>ラズパイにMySQLを構築する</h2>

<h3>データベースの作成</h3>

<h3>userテーブルの作成</h3>

<h3>node.jsからMySQLに接続する</h3>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ npm install <span class="synSpecial">--save</span> mysql
</pre>




<pre class="code lang-sh" data-lang="sh" data-unlink>$ npm install express-session <span class="synSpecial">--save</span>
</pre>


-----
--------
AUTHOR: konoemario
TITLE: RaspBerryPiでラジコンをつくる(13):コントロール画面が完成した
BASENAME: 2017/08/09/095603
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 08/09/2017 09:56:03
CATEGORY: ラズパイ
CATEGORY: ラジコンシリーズ
IMAGE: https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170807/20170807223712.png
-----
BODY:
<p>免許合宿の空き時間を利用して、ラズパイのラジコンのコントロール画面を作成してきましたが、一区切りついたのでまとめます。</p>

<p>ラズパイどうのこうのより、画面をつくるほうが大変だった！</p>

<ul class="table-of-contents">
    <li><a href="#つくったもの">つくったもの</a><ul>
            <li><a href="#コントロールする画面">コントロールする画面</a></li>
            <li><a href="#動くもの">動くもの</a></li>
        </ul>
    </li>
    <li><a href="#技術的なこと">技術的なこと</a><ul>
            <li><a href="#コントロール画面nodejs">コントロール画面:node.js</a></li>
            <li><a href="#ラズパイのGPIOを制御する機能Flask">ラズパイのGPIOを制御する機能:Flask</a></li>
        </ul>
    </li>
</ul>

<h3 id="つくったもの">つくったもの</h3>

<h4 id="コントロールする画面">コントロールする画面</h4>

<p>画面のレイアウトに関してはBootstrap4.xを使用しました。<br/>
CSSの基礎は、使わないとすぐに忘れちゃいます。</p>

<p>今回は、スマホで見ることも意識して、レスポンシブを多少意識することにしました。</p>

<p><b>PC画面</b><br/>
<span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170807/20170807223712.png" alt="f:id:konoemario:20170807223712p:plain:w500" title="f:id:konoemario:20170807223712p:plain:w500" class="hatena-fotolife" style="width:500px" itemprop="image"></span></p>

<p><br/></p>

<p><b>スマホ画面(実際に映像をつけているところ)</b><br/>
<span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170807/20170807223610.png" alt="f:id:konoemario:20170807223610p:plain:w500" title="f:id:konoemario:20170807223610p:plain:w500" class="hatena-fotolife" style="width:500px" itemprop="image"></span></p>

<p>コントロール画面でできることは、</p>

<ul>
<li>カメラモジュールの映像を見る</li>
<li>レゴカーの前進、後退</li>
<li>右折・左折(ただし、直進は実装していないというポンコツっぷり)</li>
<li>レゴカーのクレーンを動かすことによるカメラの視点変更</li>
<li>ラズパイと同じネットワーク内で使用する場合と、外部のネットワークから使用する場合の切り替え</li>
</ul>


<p>になります。</p>

<p>ラズパイを外部のネットワークから参照するには、以下を参考にさせていただきました。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=http%3A%2F%2Fqiita.com%2Fkinpira%2Fitems%2Fc9e6dc910e8d96e8c19b" title="Raspberry Piに外部ネットワークからアクセスできる様にして携帯でペットを遠隔監視する方法 - Qiita" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://qiita.com/kinpira/items/c9e6dc910e8d96e8c19b">qiita.com</a></cite></p>

<p>ssh接続自体は、秘密鍵が必要なのでまだいいのですが、Webサーバーには普通にアクセスできてしまうのが現状なので、勉強がてらログインページでも作成しようと思っています。</p>

<h4 id="動くもの">動くもの</h4>

<p>こちらは、以前に紹介したレゴカー第２弾のものになります。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=http%3A%2F%2Fwww.tohuandkonsome.site%2Fentry%2F2017%2F06%2F20%2F103846" title="RaspBerryPiでラジコンをつくる(9)：軽量化問題を解消するためのたったひとつの冴えたやり方 - 豆腐とコンソメ" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://www.tohuandkonsome.site/entry/2017/06/20/103846">www.tohuandkonsome.site</a></cite></p>

<p><b>レゴカー</b></p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170808/20170808222546.jpg" alt="f:id:konoemario:20170808222546j:plain:w500" title="f:id:konoemario:20170808222546j:plain:w500" class="hatena-fotolife" style="width:500px" itemprop="image"></span></p>

<p><br/></p>

<p>前回と比較して、</p>

<ul>
<li>ステアリングを実装するためのサーボモータをもう少しパワーのあるものにした</li>
<li>レゴカーそのものをパーツを外して軽量化した</li>
<li>カメラモジュールの延長ケーブルを購入して、レゴカーのクレーン部分につけた</li>
</ul>


<p>などの変更を加えました。</p>

<p><b>カメラモジュール</b><br/>
<span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170808/20170808223844.jpg" alt="f:id:konoemario:20170808223844j:plain:w500" title="f:id:konoemario:20170808223844j:plain:w500" class="hatena-fotolife" style="width:500px" itemprop="image"></span></p>

<p>コントローラー画面からクレーンを左右に操作することで、周囲の映像を見ることが可能になりました。</p>

<p><b>クレーンが動いているところ</b><br/>
<span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170808/20170808224101.gif" alt="f:id:konoemario:20170808224101g:plain" title="f:id:konoemario:20170808224101g:plain" class="hatena-fotolife" itemprop="image"></span></p>

<h3 id="技術的なこと">技術的なこと</h3>

<p>こちらも、以前書いたことがありますが、改めて整理します。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=http%3A%2F%2Fwww.tohuandkonsome.site%2Fentry%2F2017%2F07%2F20%2F230249" title="RaspBerryPiでラジコンをつくる(11)：socket.ioをFlaskで実装する - 豆腐とコンソメ" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://www.tohuandkonsome.site/entry/2017/07/20/230249">www.tohuandkonsome.site</a></cite></p>

<p><b>なんとなくの全体図</b>
<span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170719/20170719083402.jpg" alt="f:id:konoemario:20170719083402j:plain:w500" title="f:id:konoemario:20170719083402j:plain:w500" class="hatena-fotolife" style="width:500px" itemprop="image"></span></p>

<ul>
<li>node.jsでコントロール画面を作成</li>
<li>コントロール画面からsocket.ioでFlaskのWebサーバーに接続し、前進・後退等の命令を送信</li>
<li>FlaskのWebサーバーがwiringpiでラズパイのGPIOをコントロール</li>
<li>ラズパイに「mjpg-streamer」をインストールして、カメラモジュールの映像をコントロール画面表示</li>
</ul>


<h4 id="コントロール画面nodejs">コントロール画面:node.js</h4>

<p>コントロールする画面は、node.jsを使いました。</p>

<p>node.jsにした理由は、socket.ioを使いたかったからです。</p>

<p>また、node.jsをそのまま使ってももちろんよかったのですが、なんとなくフレームワークのexpressを使うことにしました。</p>

<p>expressを使うことで、テンプレートエンジンという言葉にぶつかり、せっかくなのでjade(pug)を使うことにしました。</p>

<p>express、jadeに関しては、以下で触れました。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=http%3A%2F%2Fwww.tohuandkonsome.site%2Fentry%2F2017%2F07%2F21%2F153646" title="Udemyの無料のExpress講習受講メモ - 豆腐とコンソメ" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://www.tohuandkonsome.site/entry/2017/07/21/153646">www.tohuandkonsome.site</a></cite></p>

<p><iframe src="https://hatenablog-parts.com/embed?url=http%3A%2F%2Fwww.tohuandkonsome.site%2Fentry%2F2017%2F07%2F30%2F203720" title="Node.js + express + jade + Bootstrapに触れてみる - 豆腐とコンソメ" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://www.tohuandkonsome.site/entry/2017/07/30/203720">www.tohuandkonsome.site</a></cite></p>

<p>ただ、socket.ioに関してはPythonのFlaskでも普通に使えるみたいなので、コントロールする画面含め、全てFlaskで作ってもよかったです。</p>

<p> コントロールする画面に関しては、以下のリポジトリに管理しています。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2FRyomasao%2Flegocar_express" title="Ryomasao/legocar_express" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://github.com/Ryomasao/legocar_express">github.com</a></cite></p>

<p>自分のためにも、READMEはこれから更新します。</p>

<h4 id="ラズパイのGPIOを制御する機能Flask">ラズパイのGPIOを制御する機能:Flask</h4>

<p>こちらに関しても、以前触れたことがあるのであまり書くことがありません。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=http%3A%2F%2Fwww.tohuandkonsome.site%2Fentry%2F2017%2F07%2F20%2F230249" title="RaspBerryPiでラジコンをつくる(11)：socket.ioをFlaskで実装する - 豆腐とコンソメ" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://www.tohuandkonsome.site/entry/2017/07/20/230249">www.tohuandkonsome.site</a></cite></p>

<p>機会があればDjangoでsocket.ioを使ってみたいです。</p>

<p>リポジトリは以下で管理しています。</p>

<p>こちらも、READMEを更新します。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2FRyomasao%2Flegocar" title="Ryomasao/legocar" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://github.com/Ryomasao/legocar">github.com</a></cite></p>

-----
--------
AUTHOR: konoemario
TITLE: 
BASENAME: 2017/08/06/225052
STATUS: Draft
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 08/06/2017 22:50:52
-----
BODY:
<h2>各種環境の管理</h2>

<p>こちらを参考にさせていただきました。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=http%3A%2F%2Fnumb86-tech.hatenablog.com%2Fentry%2F2017%2F01%2F24%2F000940" title="Node.jsでの環境変数の使い方 - 30歳からのプログラミング" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://numb86-tech.hatenablog.com/entry/2017/01/24/000940">numb86-tech.hatenablog.com</a></cite></p>

<p>dotenvを使うことにします。</p>

<p>インストール</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ npm install dotenv <span class="synSpecial">--save</span>
</pre>


<p>ルートディレクトリ(app.jsとかあるところ)に.envファイルを作成する。</p>

<p><b>.env</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>  <span class="synConstant">1</span> //socket通信する場合のFlaskのWebサーバー
  <span class="synConstant">2</span> NODE_FLASK_IP <span class="synStatement">=</span> IPアドレス:ポート番号
</pre>


-----
--------
AUTHOR: konoemario
TITLE: Node.js + express + jade + Bootstrapに触れてみる
BASENAME: 2017/07/30/203720
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 07/30/2017 20:37:20
CATEGORY: Express
CATEGORY: HTML
CATEGORY: Node.js
CATEGORY: プログラム
IMAGE: https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170730/20170730155847.png
-----
BODY:
<p>前回は、ラズパイのコントローラ用の画面をBootstrapを使ってざっくりとつくりました。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=http%3A%2F%2Ftohutokonsome.hatenablog.com%2Fentry%2F2017%2F07%2F28%2F193512" title="RaspBerryPiでラジコンをつくる(12):もう少しブラウザから操作する - 豆腐とコンソメ" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://tohutokonsome.hatenablog.com/entry/2017/07/28/193512">tohutokonsome.hatenablog.com</a></cite></p>

<p>今回はその画面をnode.js + expressにのせるにあたってjadeというものが出てきたので、そちらを最初に触れたいと思います。</p>

<p>expressを使用するにあたって、テンプレートエンジンという単語がでてきます。<br/>
テンプレートエンジンという単語そのものの意味は置いておいて、私の理解としては動的コンテツを提供する際に、<a class="keyword" href="http://d.hatena.ne.jp/keyword/python">python</a>の<a class="keyword" href="http://d.hatena.ne.jp/keyword/Django">Django</a>だったり、<a class="keyword" href="http://d.hatena.ne.jp/keyword/PHP">PHP</a>だったりHTML内に<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B9%A5%AF%A5%EA%A5%D7%A5%C8">スクリプト</a>を埋め込んで、サーバー側が解釈したHTMLをクライアントに返す、そのサーバー側が解釈する際の<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%DF%A5%C9%A5%EB%A5%A6%A5%A7%A5%A2">ミドルウェア</a>？を指していると思ってます。</p>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/Django">Django</a>で言うと以下のようなやつ。</p>

<pre class="code lang-html" data-lang="html" data-unlink>    <span class="synIdentifier">&lt;</span><span class="synStatement">h3</span><span class="synIdentifier">&gt;</span> {{ post.title }}<span class="synIdentifier">&lt;/</span><span class="synStatement">h3</span><span class="synIdentifier">&gt;</span>
</pre>


<p>expressでもテンプレートエンジンをいくつか選べるのですが、その中でもjadeというものを今回使ってみたいと思います。</p>

<p>ただ、jadeはhtml内に埋め込むお作法どうのこうの以上に、その記法そのものもhtmlとは異なっています。</p>

<p>とはいえ、その目的は生産性をあげるためのものなので、覚えてしまえばきっと楽になるはずです。</p>

<ul class="table-of-contents">
    <li><a href="#スケルトン作成">スケルトン作成</a></li>
    <li><a href="#とりあえずさわってみる">とりあえずさわってみる</a><ul>
            <li><a href="#expressから渡したオブジェクトの値を参照する">expressから渡したオブジェクトの値を参照する</a><ul>
                    <li><a href="#コレクション要素を表示する">コレクション要素を表示する</a></li>
                </ul>
            </li>
            <li><a href="#include">include</a></li>
            <li><a href="#extends">extends</a></li>
        </ul>
    </li>
    <li><a href="#Bootstrapを準備する">Bootstrapを準備する</a><ul>
            <li><a href="#ファイル作成">ファイル作成</a></li>
        </ul>
    </li>
</ul>

<h2 id="スケルトン作成">ス<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B1%A5%EB%A5%C8">ケルト</a>ン作成</h2>

<p>なにはともあれ、expressのス<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B1%A5%EB%A5%C8">ケルト</a>ンを作成します。<br/>
<a href="http://tohutokonsome.hatenablog.com/entry/2017/07/21/153646">前回</a>もやったので大丈夫です。</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ <span class="synStatement">mkdir</span> legocar_express
$ <span class="synStatement">cd</span> legocar_express
$ express
<span class="synPreProc">$.</span>
├── app.js
├── bin
├── node_modules
├── package.json
├── public
├── routes
└── views
</pre>


<p><br/></p>

<p>expressに必要なパッケージインス<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C8%A1%BC">トー</a>ルします。</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ npm install
</pre>


<h2 id="とりあえずさわってみる">とりあえずさわってみる</h2>

<p>素敵な<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C1%A5%E5%A1%BC%A5%C8%A5%EA%A5%A2%A5%EB">チュートリアル</a>があるので、これに沿ってやった。<br/>
<a href="https://gist.github.com/japboy/5402844">Jade &#x306B;&#x3064;&#x3044;&#x3066;&#x3002; &middot; GitHub</a></p>

<p>とりあえず、練習用にviews配下に以下のファイルを新規で作成した。</p>

<p><b>practicejade.jade</b></p>

<pre class="code lang-html" data-lang="html" data-unlink>doctype html
html
  head
    meta(charset='UTF-8')
    title 最高にクールなホームページ
    link(rel='stylesheet', href='./css/app.css')
  body
    h1 最高にクールなホームページ
    p 最高にクールなホームページへようこそ。
    script(src='./js/app.js', charset='UTF-8')
</pre>


<p><br/></p>

<p>表示するために、既存のindex.jsを修正する。</p>

<p><b>index.js</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synIdentifier">var</span> express = require(<span class="synConstant">'express'</span>);
<span class="synIdentifier">var</span> router = express.Router();

<span class="synComment">/* GET home page. */</span>
router.get(<span class="synConstant">'/'</span>, <span class="synIdentifier">function</span>(req, res, next) <span class="synIdentifier">{</span>
  res.render(<span class="synConstant">'index'</span>, <span class="synIdentifier">{</span> title: <span class="synConstant">'Express'</span> <span class="synIdentifier">}</span>);
<span class="synIdentifier">}</span>);

<span class="synComment">/*jade練習用のページ */</span>
router.get(<span class="synConstant">'/practicejade'</span>, <span class="synIdentifier">function</span>(req, res, next) <span class="synIdentifier">{</span>
  res.render(<span class="synConstant">'practicejade'</span>);
<span class="synIdentifier">}</span>);

module.exports = router;
</pre>


<p>これで、「<a href="http://localhost:3000/practicejade">http://localhost:3000/practicejade</a>」にアクセスすると、以下のページが表示される。</p>

<p>これをもとに<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C1%A5%E5%A1%BC%A5%C8%A5%EA%A5%A2%A5%EB">チュートリアル</a>を行う。</p>

<p>ちなみに、ス<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B1%A5%EB%A5%C8">ケルト</a>ン作成時に特に指定したわけではないけれども、テンプレートエンジンはjadeになっていたので、こちらに関しては特に変更はしていない。</p>

<p><b>app.js(抜粋)</b></p>

<pre class="code" data-lang="" data-unlink>app.set(&#39;view engine&#39;, &#39;jade&#39;);</pre>


<p><br/></p>

<h3 id="expressから渡したオブジェクトの値を参照する">expressから渡したオブジェクトの値を参照する</h3>

<p>jadeの基本的な構文については、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C1%A5%E5%A1%BC%A5%C8%A5%EA%A5%A2%A5%EB">チュートリアル</a>に詳しく書かれているので、ここでは詰まったりした部分について記載していく。</p>

<p>まずは、表題の通り、html側で動的に値を表示したい場合とかの一例について。</p>

<p>index.jsファイルの中で定義したオブジェクト「pakage」をrender関数の引数として渡している。</p>

<p><b>index.js</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synComment">/*jade練習用のオブジェクト */</span>
<span class="synIdentifier">var</span> <span class="synStatement">package</span> = <span class="synIdentifier">{</span>
  title: <span class="synConstant">'最高にクールなホームページ'</span>,
  description: <span class="synConstant">'最高にクールなホームページです。見ないと損です。'</span>,
  keywords: <span class="synIdentifier">[</span>
    <span class="synConstant">'最高'</span>,
    <span class="synConstant">'クール'</span>,
    <span class="synConstant">'世界一'</span>,
    <span class="synConstant">'天才'</span>
  <span class="synIdentifier">]</span>,
  robots: <span class="synIdentifier">[</span>
    <span class="synConstant">'INDEX'</span>,
    <span class="synConstant">'FOLLOW'</span>,
    <span class="synConstant">'NOODP'</span>,
    <span class="synConstant">'NOYDIR'</span>,
    <span class="synConstant">'NOARCHIVE'</span>
  <span class="synIdentifier">]</span>
<span class="synIdentifier">}</span>;

<span class="synComment">/*jade練習用のページ */</span>
router.get(<span class="synConstant">'/practicejade'</span>, <span class="synIdentifier">function</span>(req, res, next) <span class="synIdentifier">{</span>
  res.render(<span class="synConstant">'practicejade'</span>,<span class="synIdentifier">{</span><span class="synStatement">package</span>:<span class="synStatement">package</span><span class="synIdentifier">}</span>);
<span class="synIdentifier">}</span>);
</pre>


<p><br/></p>

<p>jade側では、渡されたpackageオブジェクトの値は下記のように参照することができるみたい。<br/>
いろいろな書き方があって混乱した。</p>

<p><b>practicejade.jade</b></p>

<pre class="code lang-html" data-lang="html" data-unlink>doctype html
html
  head
    meta(charset='UTF-8')
    title 最高にクールなホームページ
    link(rel='stylesheet', href='./css/app.css')
  body
    h1 最高にクールなホームページ
    p 最高にクールなホームページへようこそ。

    h1 Expressから渡されたオブジェクトを参照する
    //いろいろな書き方がある。どれがいいんだろう。
    p #{package.title}
    p= package.description
    p!= package.keywords

    script(src='./js/app.js', charset='UTF-8')
</pre>


<p><br/>
<b>ブラウザの表示</b><br/>
<span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170730/20170730155847.png" alt="f:id:konoemario:20170730155847p:plain:w500" title="f:id:konoemario:20170730155847p:plain:w500" class="hatena-fotolife" style="width:500px" itemprop="image"></span></p>

<p><br/></p>

<h4 id="コレクション要素を表示する">コレクション要素を表示する</h4>

<p>表題があっているか少し怪しい。</p>

<p>さきほどの例のように、要素をひとつずつ表示するのではなく、リスト形式のように並べたいときにforeach構文が使える。</p>

<p>もちろん、for loopみたいなものをあるんだけれども、each構文で詰まったのであえてこちらを記載しておく。</p>

<p>ただ、あんまりしっくり来てないので、Quitaの方で詳しい方からのツッコミ待ちの状態です。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=http%3A%2F%2Fqiita.com%2Ftohu_masao%2Fitems%2Fcb47cee102877e278600" title="ExpressからJadeに渡したObjectをeachで使用する - Qiita" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://qiita.com/tohu_masao/items/cb47cee102877e278600">qiita.com</a></cite></p>

<p>とりあえずコードの中身と表示結果を記載しておく。</p>

<p><b>practicejade.jade</b></p>

<pre class="code lang-html" data-lang="html" data-unlink>doctype html
html
  head
    meta(charset='UTF-8')
    title 最高にクールなホームページ
    link(rel='stylesheet', href='./css/app.css')
  body
    h1 最高にクールなホームページ
    p 最高にクールなホームページへようこそ。

    hr
    h1 each構文を使う
    ul
    //inに直接オブジェクトを記載すると、コンパイルエラーになる。
      一旦、変数として定義してあげると問題ない。
      each val,key in #{package}
        li= key + ':' + val
  
    -var hoge = package
      each val,key in hoge
        li= key + ':' + val
</pre>


<p><br/>
<b>ブラウザの表示</b><br/>
<span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170730/20170730160502.png" alt="f:id:konoemario:20170730160502p:plain:w500" title="f:id:konoemario:20170730160502p:plain:w500" class="hatena-fotolife" style="width:500px" itemprop="image"></span></p>

<p> <br/></p>

<h3 id="include">include</h3>

<p>htmlファイルを部品化しておいて、使う側でinlucdeすることで再利用ができる、みたいなやつ。</p>

<p>新たに、include<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C7%A5%A3%A5%EC%A5%AF%A5%C8">ディレクト</a>リを作成して、その配下に「include_test.jade」を作成した。</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>├── include
│   ├── include_test.jade
├── practicejade.jade
</pre>


<p><br/></p>

<p>部品化したファイル側にも#{変数名}の構文は使えるかな、という確認も込めて、package.titleを入れている。</p>

<p><b>include_test.jade</b></p>

<pre class="code lang-html" data-lang="html" data-unlink>h3 これは、読み込んだincludeされたファイルです。 #{package.title} 
</pre>


<p><br/></p>

<p>「practicejade_.jade」で上記のファイルをincludeします。</p>

<p><b>practicejade.jade</b></p>

<pre class="code lang-html" data-lang="html" data-unlink>doctype html
html
  head
    meta(charset='UTF-8')
    title 最高にクールなホームページ
    link(rel='stylesheet', href='./css/app.css')
  body
    h1 最高にクールなホームページ
    p 最高にクールなホームページへようこそ。
    script(src='./js/app.js', charset='UTF-8')

    //includeのテスト
    h1 includeを使う
      include ./include/include_test.jadek
</pre>


<p><br/>
<b>ブラウザの表示</b><br/>
<span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170730/20170730161009.png" alt="f:id:konoemario:20170730161009p:plain:w500" title="f:id:konoemario:20170730161009p:plain:w500" class="hatena-fotolife" style="width:500px" itemprop="image"></span></p>

<h3 id="extends">extends</h3>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%AA%A5%D6%A5%B8%A5%A7%A5%AF%A5%C8%BB%D8%B8%FE">オブジェクト指向</a>のインタフェースっぽいという印象を受けた。<br/>
extendで大まかなテンプレートを定義しておいて、includeする側で具体的な処理だったりを書くみたいな。</p>

<p>まず、extendされる「exten_test.jade」を作成する。</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>├── include
│   ├── include_test.jade
│   ├── extend_test.jade
├── practicejade.jade
</pre>


<p>ファイルの内容は、以下の通り。</p>

<p><b>extend_test.jade </b></p>

<pre class="code lang-html" data-lang="html" data-unlink>doctype html
html(lang='ja')
  head
    meta(charset='UTF-8')
    title #{package.title}
  body
    block content
              p 上書きされるのでこれは表示されない。
</pre>


<p>これを、practicejade.jadeでextendsをして継承している。</p>

<p><b>practicejade.jade </b></p>

<pre class="code lang-html" data-lang="html" data-unlink>//extend_test.jadeを継承する
extends ./include/extend_test
//extend_test.jadeのcontent部分を上書きする。
block content
    h1 Expressから渡されたオブジェクトを参照する
    //いろいろな書き方がある。どれがいいんだろう。
    p #{package.title}
    p= package.description
    p!= package.keywords


    hr
    h1 each構文を使う
    ul
    //inに直接オブジェクトを記載すると、コンパイルエラーになる。
      一旦、変数として定義してあげると問題ない。
      each val,key in #{package}
        li= key + ':' + val
  
    -var hoge = package
      each val,key in hoge
        li= key + ':' + val

    hr
    //includeのテスト
    h1 includeを使う
      include ./include/include_test.jade
</pre>


<h2 id="Bootstrapを準備する">Bootstrapを準備する</h2>

<p>jadeの記法を使って、BootstrapのStarter Templateを作ります。</p>

<p><b>Bootstrap4.xのStarter Template </b></p>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synComment">&lt;!DOCTYPE html&gt;</span>
<span class="synIdentifier">&lt;</span><span class="synStatement">html</span><span class="synIdentifier"> </span><span class="synType">lang</span><span class="synIdentifier">=</span><span class="synConstant">&quot;en&quot;</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">head</span><span class="synIdentifier">&gt;</span>
<span class="synPreProc">    </span><span class="synComment">&lt;!-- Required meta tags --&gt;</span>
<span class="synPreProc">    </span><span class="synIdentifier">&lt;</span><span class="synStatement">meta</span><span class="synIdentifier"> </span><span class="synType">charset</span><span class="synIdentifier">=</span><span class="synConstant">&quot;utf-8&quot;</span><span class="synIdentifier">&gt;</span>
<span class="synPreProc">    </span><span class="synIdentifier">&lt;</span><span class="synStatement">meta</span><span class="synIdentifier"> </span><span class="synType">name</span><span class="synIdentifier">=</span><span class="synConstant">&quot;viewport&quot;</span><span class="synIdentifier"> </span><span class="synType">content</span><span class="synIdentifier">=</span><span class="synConstant">&quot;width=device-width, initial-scale=1, shrink-to-fit=no&quot;</span><span class="synIdentifier">&gt;</span>

<span class="synPreProc">    </span><span class="synComment">&lt;!-- Bootstrap CSS --&gt;</span>
<span class="synPreProc">    </span><span class="synIdentifier">&lt;</span><span class="synStatement">link</span><span class="synIdentifier"> </span><span class="synType">rel</span><span class="synIdentifier">=</span><span class="synConstant">&quot;stylesheet&quot;</span><span class="synIdentifier"> </span><span class="synType">href</span><span class="synIdentifier">=</span><span class="synConstant">&quot;https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-alpha.6/css/bootstrap.min.css&quot;</span><span class="synIdentifier"> integrity=</span><span class="synConstant">&quot;sha384-rwoIResjU2yc3z8GV/NPeZWAv56rSmLldC3R/AZzGRnGxQQKnKkoFVhFQhNUwEyJ&quot;</span><span class="synIdentifier"> crossorigin=</span><span class="synConstant">&quot;anonymous&quot;</span><span class="synIdentifier">&gt;</span>
<span class="synPreProc">  </span><span class="synIdentifier">&lt;/</span><span class="synStatement">head</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">body</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">h1</span><span class="synIdentifier">&gt;</span>Hello, world!<span class="synIdentifier">&lt;/</span><span class="synStatement">h1</span><span class="synIdentifier">&gt;</span>

    <span class="synComment">&lt;!-- jQuery first, then Tether, then Bootstrap JS. --&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">script</span><span class="synIdentifier"> </span><span class="synType">src</span><span class="synIdentifier">=</span><span class="synConstant">&quot;https://code.jquery.com/jquery-3.1.1.slim.min.js&quot;</span><span class="synIdentifier"> integrity=</span><span class="synConstant">&quot;sha384-A7FZj7v+d/sdmMqp/nOQwliLvUsJfDHW+k9Omg/a/EheAdgtzNs3hpfag6Ed950n&quot;</span><span class="synIdentifier"> crossorigin=</span><span class="synConstant">&quot;anonymous&quot;</span><span class="synIdentifier">&gt;&lt;/</span><span class="synStatement">script</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">script</span><span class="synIdentifier"> </span><span class="synType">src</span><span class="synIdentifier">=</span><span class="synConstant">&quot;https://cdnjs.cloudflare.com/ajax/libs/tether/1.4.0/js/tether.min.js&quot;</span><span class="synIdentifier"> integrity=</span><span class="synConstant">&quot;sha384-DztdAPBWPRXSA/3eYEEUWrWCy7G5KFbe8fFjk5JAIxUYHKkDx6Qin1DkWx51bBrb&quot;</span><span class="synIdentifier"> crossorigin=</span><span class="synConstant">&quot;anonymous&quot;</span><span class="synIdentifier">&gt;&lt;/</span><span class="synStatement">script</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">script</span><span class="synIdentifier"> </span><span class="synType">src</span><span class="synIdentifier">=</span><span class="synConstant">&quot;https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-alpha.6/js/bootstrap.min.js&quot;</span><span class="synIdentifier"> integrity=</span><span class="synConstant">&quot;sha384-vBWWzlZJ8ea9aCX4pEW3rVHjgjt7zpkNpZk+02D9phzyeVkE+jo0ieGizqPLForn&quot;</span><span class="synIdentifier"> crossorigin=</span><span class="synConstant">&quot;anonymous&quot;</span><span class="synIdentifier">&gt;&lt;/</span><span class="synStatement">script</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;/</span><span class="synStatement">body</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">html</span><span class="synIdentifier">&gt;</span>
</pre>


<h3 id="ファイル作成">ファイル作成</h3>

<p>views<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C7%A5%A3%A5%EC%A5%AF%A5%C8">ディレクト</a>リ配下に、以下のファイルを用意しました。</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>├── include
│   ├── footer.jade
│   ├── header.jade
│   └── scripts.jade
├── index.jade
├── layout.jade
</pre>


<p>まずはextendsされるlayout.jadeです。</p>

<p><b>layout.jade </b></p>

<pre class="code lang-html" data-lang="html" data-unlink>doctype html
html(lang='ja')
    head
        meta(charset='utf-8')
        meta(name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1, shrink-to-fit=no&quot;)
        link(rel='stylesheet', href='/stylesheets/style.css')
        //Bootstrap ラズパイに乗せる時はCDNは使わないようにしたい
        link(rel='stylesheet',href='https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-alpha.6/css/bootstrap.min.css' integrity=&quot;sha384-rwoIResjU2yc3z8GV/NPeZWAv56rSmLldC3R/AZzGRnGxQQKnKkoFVhFQhNUwEyJ&quot; crossorigin=&quot;anonymous&quot;)
        block title
    body
        include ./include/header
        block content
        include ./include/footer
        include ./include/scripts
</pre>


<ul>
<li>head内のtitleおよびbody内のcontentはextendsする側で再定義します。</li>
<li>body内の「header」「footer」およびBootstrapに必要な<a class="keyword" href="http://d.hatena.ne.jp/keyword/jQuery">jQuery</a>を書く<a class="keyword" href="http://d.hatena.ne.jp/keyword/javascript">javascript</a>は全ページ共通ということで、layout.jade内でincludeしています。</li>
</ul>


<p>また、index.jadeの内容は以下の通りとなります。</p>

<p><b>index.jade </b></p>

<pre class="code lang-html" data-lang="html" data-unlink>extends ./layout
block title
  title レゴカー
block content
  h1 Hello World!
</pre>


<p><br/>
<b>ブラウザでみた場合 </b> <br/>
<span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170730/20170730190403.png" alt="f:id:konoemario:20170730190403p:plain:w500" title="f:id:konoemario:20170730190403p:plain:w500" class="hatena-fotolife" style="width:500px" itemprop="image"></span></p>

<p>以上で、node.js + express + jadeでBootstrapを使用したページを作成する準備が整いました。</p>

<p>次回は、前回のリモコンの画面をjadeで書いていきたいと思います。</p>

-----
--------
AUTHOR: konoemario
TITLE: RaspBerryPiでラジコンをつくる(12):もう少しブラウザから操作する
BASENAME: 2017/07/28/193512
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 07/28/2017 19:35:12
CATEGORY: ラズパイ
CATEGORY: HTML
CATEGORY: プログラム
CATEGORY: ラジコンシリーズ
IMAGE: https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170726/20170726111013.png
-----
BODY:
<ul class="table-of-contents">
    <li><a href="#使用したHTMLエディタ">使用したHTMLエディタ</a></li>
    <li><a href="#さっそく作成する">さっそく作成する</a><ul>
            <li><a href="#とりあえず最初にグリッド">とりあえず最初にグリッド</a></li>
            <li><a href="#ヘッダーを編集する">ヘッダーを編集する</a></li>
        </ul>
    </li>
    <li><a href="#作成する画面イメージ">作成する画面イメージ</a><ul>
            <li><a href="#メインコンテンツ">メインコンテンツ</a><ul>
                    <li><a href="#カメラ部分">カメラ部分</a></li>
                    <li><a href="#コントローラ部分">コントローラ部分</a></li>
                </ul>
            </li>
            <li><a href="#申し訳程度にフッターをつける">申し訳程度にフッターをつける</a></li>
        </ul>
    </li>
</ul>

<p>以前、ブラウザからキー入力した情報をsocket.ioを使用してFlaskで作成したWebサーバーに送信する、というところまでやりました。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=http%3A%2F%2Fwww.tohuandkonsome.site%2Fentry%2F2017%2F07%2F20%2F230249" title="RaspBerryPiでラジコンをつくる(11)：socket.ioをFlaskで実装する - 豆腐とコンソメ" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://tohutokonsome.hatenablog.com/entry/2017/07/20/230249">tohutokonsome.hatenablog.com</a></cite></p>

<p>ラジコンとしては、最低限の機能を有しているわけですが、もうすこし画面に凝ってみたい、スマホからの操作も意識してみたい、というところもありまして、画面を作成することにしました。</p>

<p>このブログを始めた当初に、日めくりカレンダーを作ってみよう、という中途半端なもの作成した際に、HTMLとCSSの勉強を少ししたのですが、もう忘れてしまっていました。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=http%3A%2F%2Fwww.tohuandkonsome.site%2Fentry%2F2017%2F01%2F31%2F230551" title="COBOLERが頑張る：日めくりカレンダー：参考サイト - 豆腐とコンソメ" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://tohutokonsome.hatenablog.com/entry/2017/01/31/230551">tohutokonsome.hatenablog.com</a></cite></p>

<p>あまり作業メモを取っておらず後悔しましたので、今回はちゃんとメモっておこうと思います。</p>

<p>全般的に役に立つ内容はほとんどなく、自分のメモという側面が大きいです。<br/>
<span style="font-size: 80%">（あれ、このブログで役に立つことなんてあったけ？）
</span>
<br/></p>

<h2 id="使用したHTMLエディタ">使用したHTMLエディタ</h2>

<p>node.jsの時にはWebStromを使っていたので、こちらを使いたかったのですがお試し期間が終わっちゃいました。<br/>
ライセンスを購入したいところなんですが、とり急ぎVsCodeで作業することにしました。</p>

<p>VsCodeのプラグインはこちらを参考させていただきました。  <br/>
<iframe src="https://hatenablog-parts.com/embed?url=http%3A%2F%2Fqiita.com%2F84zume%2Fitems%2F476a29264fdc98d98201" title="Visual Studio CodeでHTML作成環境を整える - Qiita" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://qiita.com/84zume/items/476a29264fdc98d98201">qiita.com</a></cite></p>

<p><br/></p>

<h2 id="さっそく作成する">さっそく作成する</h2>

<p>とりあえず、socket.ioやらなんやらは忘れて、純粋にhtmlとcssのみ使っていきます。</p>

<p>Bootstrap公式のテンプレートをとってくるところからやろうと思ったのですが、わかりやすい記事がありましたので、以下を参考にしました。</p>

<p><a href="http://qiita.com/zaburo/items/e5b8c51873b193bb1573">Bootstrap3.x.&#x3067;&#x4F55;&#x304B;&#x3084;&#x308B;&#x3068;&#x304D;&#x306E;&#x6700;&#x4F4E;&#x9650;&#x306E;&#x30E1;&#x30E2; - Qiita</a></p>

<p>ただ、今回使用するBootstrapのバージョンは4.xにしました。</p>

<h3 id="とりあえず最初にグリッド">とりあえず最初にグリッド</h3>

<p>参考記事をそのまま真似ています。</p>

<p><b>てきとうなhtml</b></p>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synComment">&lt;!DOCTYPE html&gt;</span>
<span class="synIdentifier">&lt;</span><span class="synStatement">html</span><span class="synIdentifier"> </span><span class="synType">lang</span><span class="synIdentifier">=</span><span class="synConstant">&quot;ja&quot;</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">title</span><span class="synIdentifier">&gt;</span>LegoCarコントローラ<span class="synIdentifier">&lt;/</span><span class="synStatement">title</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">head</span><span class="synIdentifier">&gt;</span>
<span class="synPreProc">    </span><span class="synComment">&lt;!-- Required meta tags --&gt;</span>
<span class="synPreProc">    </span><span class="synIdentifier">&lt;</span><span class="synStatement">meta</span><span class="synIdentifier"> </span><span class="synType">charset</span><span class="synIdentifier">=</span><span class="synConstant">&quot;utf-8&quot;</span><span class="synIdentifier">&gt;</span>
<span class="synPreProc">    </span><span class="synIdentifier">&lt;</span><span class="synStatement">meta</span><span class="synIdentifier"> </span><span class="synType">name</span><span class="synIdentifier">=</span><span class="synConstant">&quot;viewport&quot;</span><span class="synIdentifier"> </span><span class="synType">content</span><span class="synIdentifier">=</span><span class="synConstant">&quot;width=device-width, initial-scale=1, shrink-to-fit=no&quot;</span><span class="synIdentifier">&gt;</span>

<span class="synPreProc">    </span><span class="synComment">&lt;!-- Bootstrap CSS --&gt;</span>
<span class="synPreProc">    </span><span class="synIdentifier">&lt;</span><span class="synStatement">link</span><span class="synIdentifier"> </span><span class="synType">rel</span><span class="synIdentifier">=</span><span class="synConstant">&quot;stylesheet&quot;</span><span class="synIdentifier"> </span><span class="synType">href</span><span class="synIdentifier">=</span><span class="synConstant">&quot;https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-alpha.6/css/bootstrap.min.css&quot;</span><span class="synIdentifier"> integrity=</span><span class="synConstant">&quot;sha384-rwoIResjU2yc3z8GV/NPeZWAv56rSmLldC3R/AZzGRnGxQQKnKkoFVhFQhNUwEyJ&quot;</span><span class="synIdentifier"> crossorigin=</span><span class="synConstant">&quot;anonymous&quot;</span><span class="synIdentifier">&gt;</span>
<span class="synPreProc">  </span><span class="synIdentifier">&lt;/</span><span class="synStatement">head</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">body</span><span class="synIdentifier">&gt;</span>


<span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;container&quot;</span><span class="synIdentifier">&gt;</span>
    <span class="synComment">&lt;!-- header --&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;row&quot;</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;header&quot;</span><span class="synIdentifier"> </span><span class="synType">style</span><span class="synIdentifier">=</span><span class="synConstant">&quot;background-color:#ff0000&quot;</span><span class="synIdentifier">&gt;</span>header<span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>

    <span class="synComment">&lt;!-- content --&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;row&quot;</span><span class="synIdentifier"> </span><span class="synType">style</span><span class="synIdentifier">=</span><span class="synConstant">&quot;background-color:#00ff00&quot;</span><span class="synIdentifier">&gt;</span>
        <span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;col-md-3&quot;</span><span class="synIdentifier">&gt;</span>left<span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
        <span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;col-md-6&quot;</span><span class="synIdentifier">&gt;</span>center<span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
        <span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;col-md-3&quot;</span><span class="synIdentifier">&gt;</span>right<span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>

    <span class="synComment">&lt;!-- footer --&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;row&quot;</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;header&quot;</span><span class="synIdentifier"> </span><span class="synType">style</span><span class="synIdentifier">=</span><span class="synConstant">&quot;background-color:#0000ff&quot;</span><span class="synIdentifier">&gt;</span>footer<span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>

    <span class="synComment">&lt;!-- jQuery first, then Tether, then Bootstrap JS. --&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">script</span><span class="synIdentifier"> </span><span class="synType">src</span><span class="synIdentifier">=</span><span class="synConstant">&quot;https://code.jquery.com/jquery-3.1.1.slim.min.js&quot;</span><span class="synIdentifier"> integrity=</span><span class="synConstant">&quot;sha384-A7FZj7v+d/sdmMqp/nOQwliLvUsJfDHW+k9Omg/a/EheAdgtzNs3hpfag6Ed950n&quot;</span><span class="synIdentifier"> crossorigin=</span><span class="synConstant">&quot;anonymous&quot;</span><span class="synIdentifier">&gt;&lt;/</span><span class="synStatement">script</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">script</span><span class="synIdentifier"> </span><span class="synType">src</span><span class="synIdentifier">=</span><span class="synConstant">&quot;https://cdnjs.cloudflare.com/ajax/libs/tether/1.4.0/js/tether.min.js&quot;</span><span class="synIdentifier"> integrity=</span><span class="synConstant">&quot;sha384-DztdAPBWPRXSA/3eYEEUWrWCy7G5KFbe8fFjk5JAIxUYHKkDx6Qin1DkWx51bBrb&quot;</span><span class="synIdentifier"> crossorigin=</span><span class="synConstant">&quot;anonymous&quot;</span><span class="synIdentifier">&gt;&lt;/</span><span class="synStatement">script</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">script</span><span class="synIdentifier"> </span><span class="synType">src</span><span class="synIdentifier">=</span><span class="synConstant">&quot;https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-alpha.6/js/bootstrap.min.js&quot;</span><span class="synIdentifier"> integrity=</span><span class="synConstant">&quot;sha384-vBWWzlZJ8ea9aCX4pEW3rVHjgjt7zpkNpZk+02D9phzyeVkE+jo0ieGizqPLForn&quot;</span><span class="synIdentifier"> crossorigin=</span><span class="synConstant">&quot;anonymous&quot;</span><span class="synIdentifier">&gt;&lt;/</span><span class="synStatement">script</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;/</span><span class="synStatement">body</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">html</span><span class="synIdentifier">&gt;</span>
</pre>


<p><br/></p>

<p><b>ブラウザでみた場合</b><br/>
<span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170726/20170726111013.png" alt="f:id:konoemario:20170726111013p:plain:w500" title="f:id:konoemario:20170726111013p:plain:w500" class="hatena-fotolife" style="width:500px" itemprop="image"></span></p>

<p>参考記事のBootstrap3.xでは、上記でいい感じに幅が揃っていたのですが。headerとfooterがはみ出てしまいました。  <br/>
どうもBootstrap4.0の影響っぽいです。</p>

<p>選択肢として、カラムの値を12にすればできたけれども、違和感があります。</p>

<pre class="code lang-html" data-lang="html" data-unlink>    <span class="synComment">&lt;!-- header --&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;row&quot;</span><span class="synIdentifier">&gt;</span>
           <span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;col-md-12&quot;</span><span class="synIdentifier"> </span><span class="synType">style</span><span class="synIdentifier">=</span><span class="synConstant">&quot;background-color:#ff0000&quot;</span><span class="synIdentifier">&gt;</span>header<span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
</pre>


<p>今回、全体をcontainerで囲む必要性を感じなかったので、メインコンテツ部分のみをcontainerで囲むことにしました。</p>

<p><b>てきとうなhtml(抜粋)</b></p>

<pre class="code lang-html" data-lang="html" data-unlink>    <span class="synComment">&lt;!-- header --&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;header&quot;</span><span class="synIdentifier"> </span><span class="synType">style</span><span class="synIdentifier">=</span><span class="synConstant">&quot;background-color:#ff0000&quot;</span><span class="synIdentifier">&gt;</span>header<span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>

    <span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;container&quot;</span><span class="synIdentifier">&gt;</span>
        <span class="synComment">&lt;!-- content --&gt;</span>
        <span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;row&quot;</span><span class="synIdentifier"> </span><span class="synType">style</span><span class="synIdentifier">=</span><span class="synConstant">&quot;background-color:#00ff00&quot;</span><span class="synIdentifier">&gt;</span>
            <span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;col-md-3&quot;</span><span class="synIdentifier">&gt;</span>left<span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
            <span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;col-md-6&quot;</span><span class="synIdentifier">&gt;</span>center<span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
            <span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;col-md-3&quot;</span><span class="synIdentifier">&gt;</span>right<span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
        <span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
        <span class="synComment">&lt;!-- footer --&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;header&quot;</span><span class="synIdentifier"> </span><span class="synType">style</span><span class="synIdentifier">=</span><span class="synConstant">&quot;background-color:#0000ff&quot;</span><span class="synIdentifier">&gt;</span>footer<span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
</pre>


<p><br/></p>

<p><b>ブラウザでみた場合</b><br/>
<span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170727/20170727132424.png" alt="f:id:konoemario:20170727132424p:plain:w500" title="f:id:konoemario:20170727132424p:plain:w500" class="hatena-fotolife" style="width:500px" itemprop="image"></span></p>

<p><br/></p>

<h3 id="ヘッダーを編集する">ヘッダーを編集する</h3>

<p>やっぱり、ヘッダーにナビゲーションっぽいものがあるといいのかな、ということでnavbarをつけます。</p>

<p>navbarに関しては、公式のほぼそのままです。</p>

<p><a href="https://v4-alpha.getbootstrap.com/components/navbar/">Navbar &middot; Bootstrap</a></p>

<p>さきほどのheader部分をまるっと以下に置き換えます。</p>

<p><b>てきとうなhtml(抜粋)</b></p>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synComment">&lt;!-- headerはnaviだよ --&gt;</span>
    <span class="synIdentifier">&lt;</span>nav<span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;navbar  navbar-toggleable-md navbar-inverse bg-primary&quot;</span><span class="synIdentifier">&gt;</span>
      <span class="synIdentifier">&lt;</span><span class="synStatement">button</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;navbar-toggler navbar-toggler-right&quot;</span><span class="synIdentifier"> </span><span class="synType">type</span><span class="synIdentifier">=</span><span class="synConstant">&quot;button&quot;</span><span class="synIdentifier"> </span><span class="synType">data</span><span class="synIdentifier">-toggle=</span><span class="synConstant">&quot;collapse&quot;</span><span class="synIdentifier"> </span><span class="synType">data</span><span class="synIdentifier">-</span><span class="synType">target</span><span class="synIdentifier">=</span><span class="synConstant">&quot;#navbarSupportedContent&quot;</span><span class="synIdentifier"> aria-controls=</span><span class="synConstant">&quot;navbarSupportedContent&quot;</span><span class="synIdentifier"> aria-expanded=</span><span class="synConstant">&quot;false&quot;</span><span class="synIdentifier"> aria-</span><span class="synType">label</span><span class="synIdentifier">=</span><span class="synConstant">&quot;Toggle navigation&quot;</span><span class="synIdentifier">&gt;</span>
        <span class="synIdentifier">&lt;</span><span class="synStatement">span</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;navbar-toggler-icon&quot;</span><span class="synIdentifier">&gt;&lt;/</span><span class="synStatement">span</span><span class="synIdentifier">&gt;</span>
      <span class="synIdentifier">&lt;/</span><span class="synStatement">button</span><span class="synIdentifier">&gt;</span>

      <span class="synComment">&lt;!--Brandはnavbar-brand --&gt;</span>
      <span class="synIdentifier">&lt;</span><span class="synStatement">a</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;navbar-brand navbar-inverse&quot;</span><span class="synIdentifier"> </span><span class="synType">href</span><span class="synIdentifier">=</span><span class="synConstant">&quot;#&quot;</span><span class="synIdentifier">&gt;</span><span class="synUnderlined">tohu</span><span class="synIdentifier">&lt;/</span><span class="synStatement">a</span><span class="synIdentifier">&gt;</span>

      <span class="synComment">&lt;!--navの要素--&gt;</span>
      <span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;collapse navbar-collapse&quot;</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;navbarNav&quot;</span><span class="synIdentifier"> &gt;</span>
        <span class="synIdentifier">&lt;</span><span class="synStatement">ul</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;navbar-nav&quot;</span><span class="synIdentifier">&gt;</span>
          <span class="synIdentifier">&lt;</span><span class="synStatement">li</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;nav-item&quot;</span><span class="synIdentifier">&gt;</span>
            <span class="synIdentifier">&lt;</span><span class="synStatement">a</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;nav-link&quot;</span><span class="synIdentifier"> </span><span class="synType">href</span><span class="synIdentifier">=</span><span class="synConstant">&quot;#&quot;</span><span class="synIdentifier">&gt;</span><span class="synUnderlined">要素1</span><span class="synIdentifier">&lt;/</span><span class="synStatement">a</span><span class="synIdentifier">&gt;</span>
          <span class="synIdentifier">&lt;/</span><span class="synStatement">li</span><span class="synIdentifier">&gt;</span>
          <span class="synIdentifier">&lt;</span><span class="synStatement">li</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;nav-item&quot;</span><span class="synIdentifier">&gt;</span>
            <span class="synIdentifier">&lt;</span><span class="synStatement">a</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;nav-link&quot;</span><span class="synIdentifier"> </span><span class="synType">href</span><span class="synIdentifier">=</span><span class="synConstant">&quot;#&quot;</span><span class="synIdentifier">&gt;</span><span class="synUnderlined">要素2</span><span class="synIdentifier">&lt;/</span><span class="synStatement">a</span><span class="synIdentifier">&gt;</span>
          <span class="synIdentifier">&lt;/</span><span class="synStatement">li</span><span class="synIdentifier">&gt;</span>
          <span class="synIdentifier">&lt;</span><span class="synStatement">li</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;nav-item&quot;</span><span class="synIdentifier">&gt;</span>
            <span class="synIdentifier">&lt;</span><span class="synStatement">a</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;nav-link&quot;</span><span class="synIdentifier"> </span><span class="synType">href</span><span class="synIdentifier">=</span><span class="synConstant">&quot;#&quot;</span><span class="synIdentifier">&gt;</span><span class="synUnderlined">要素3</span><span class="synIdentifier">&lt;/</span><span class="synStatement">a</span><span class="synIdentifier">&gt;</span>
          <span class="synIdentifier">&lt;/</span><span class="synStatement">li</span><span class="synIdentifier">&gt;</span>
        <span class="synIdentifier">&lt;/</span><span class="synStatement">ul</span><span class="synIdentifier">&gt;</span>
      <span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;/</span>nav<span class="synIdentifier">&gt;</span>
</pre>


<p><br/></p>

<p><b>ブラウザでみた場合</b><br/>
<span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170727/20170727160354.png" alt="f:id:konoemario:20170727160354p:plain:w500" title="f:id:konoemario:20170727160354p:plain:w500" class="hatena-fotolife" style="width:500px" itemprop="image"></span></p>

<p>せっかくなので、上部に固定します。  <br/>
navのclassにfixed-topを追加しました。</p>

<p><b>てきとうなhtml(抜粋)</b></p>

<pre class="code lang-html" data-lang="html" data-unlink>    <span class="synComment">&lt;!-- headerはnaviだよ --&gt;</span>
    <span class="synIdentifier">&lt;</span>nav<span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;navbar  navbar-toggleable-md navbar-inverse bg-primary fixed-top&quot;</span><span class="synIdentifier">&gt;</span>
      <span class="synIdentifier">&lt;</span><span class="synStatement">button</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;navbar-toggler navbar-toggler-right&quot;</span><span class="synIdentifier"> </span><span class="synType">type</span><span class="synIdentifier">=</span><span class="synConstant">&quot;button&quot;</span><span class="synIdentifier"> </span><span class="synType">data</span><span class="synIdentifier">-toggle=</span><span class="synConstant">&quot;collapse&quot;</span><span class="synIdentifier"> </span><span class="synType">data</span><span class="synIdentifier">-</span><span class="synType">target</span><span class="synIdentifier">=</span><span class="synConstant">&quot;#navbarSupportedContent&quot;</span><span class="synIdentifier"> aria-controls=</span><span class="synConstant">&quot;navbarSupportedContent&quot;</span><span class="synIdentifier"> aria-expanded=</span><span class="synConstant">&quot;false&quot;</span><span class="synIdentifier"> aria-</span><span class="synType">label</span><span class="synIdentifier">=</span><span class="synConstant">&quot;Toggle navigation&quot;</span><span class="synIdentifier">&gt;</span>
        <span class="synIdentifier">&lt;</span><span class="synStatement">span</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;navbar-toggler-icon&quot;</span><span class="synIdentifier">&gt;&lt;/</span><span class="synStatement">span</span><span class="synIdentifier">&gt;</span>
      <span class="synIdentifier">&lt;/</span><span class="synStatement">button</span><span class="synIdentifier">&gt;</span>

      <span class="synComment">&lt;!--Brandはnavbar-brand --&gt;</span>
      <span class="synIdentifier">&lt;</span><span class="synStatement">a</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;navbar-brand navbar-inverse&quot;</span><span class="synIdentifier"> </span><span class="synType">href</span><span class="synIdentifier">=</span><span class="synConstant">&quot;#&quot;</span><span class="synIdentifier">&gt;</span><span class="synUnderlined">tohu</span><span class="synIdentifier">&lt;/</span><span class="synStatement">a</span><span class="synIdentifier">&gt;</span>

      <span class="synComment">&lt;!--navの要素--&gt;</span>
      <span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;collapse navbar-collapse&quot;</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;navbarNav&quot;</span><span class="synIdentifier"> &gt;</span>
        <span class="synIdentifier">&lt;</span><span class="synStatement">ul</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;navbar-nav&quot;</span><span class="synIdentifier">&gt;</span>
          <span class="synIdentifier">&lt;</span><span class="synStatement">li</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;nav-item&quot;</span><span class="synIdentifier">&gt;</span>
            <span class="synIdentifier">&lt;</span><span class="synStatement">a</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;nav-link&quot;</span><span class="synIdentifier"> </span><span class="synType">href</span><span class="synIdentifier">=</span><span class="synConstant">&quot;#&quot;</span><span class="synIdentifier">&gt;</span><span class="synUnderlined">要素1</span><span class="synIdentifier">&lt;/</span><span class="synStatement">a</span><span class="synIdentifier">&gt;</span>
          <span class="synIdentifier">&lt;/</span><span class="synStatement">li</span><span class="synIdentifier">&gt;</span>
          <span class="synIdentifier">&lt;</span><span class="synStatement">li</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;nav-item&quot;</span><span class="synIdentifier">&gt;</span>
            <span class="synIdentifier">&lt;</span><span class="synStatement">a</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;nav-link&quot;</span><span class="synIdentifier"> </span><span class="synType">href</span><span class="synIdentifier">=</span><span class="synConstant">&quot;#&quot;</span><span class="synIdentifier">&gt;</span><span class="synUnderlined">要素2</span><span class="synIdentifier">&lt;/</span><span class="synStatement">a</span><span class="synIdentifier">&gt;</span>
          <span class="synIdentifier">&lt;/</span><span class="synStatement">li</span><span class="synIdentifier">&gt;</span>
          <span class="synIdentifier">&lt;</span><span class="synStatement">li</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;nav-item&quot;</span><span class="synIdentifier">&gt;</span>
            <span class="synIdentifier">&lt;</span><span class="synStatement">a</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;nav-link&quot;</span><span class="synIdentifier"> </span><span class="synType">href</span><span class="synIdentifier">=</span><span class="synConstant">&quot;#&quot;</span><span class="synIdentifier">&gt;</span><span class="synUnderlined">要素3</span><span class="synIdentifier">&lt;/</span><span class="synStatement">a</span><span class="synIdentifier">&gt;</span>
          <span class="synIdentifier">&lt;/</span><span class="synStatement">li</span><span class="synIdentifier">&gt;</span>
        <span class="synIdentifier">&lt;/</span><span class="synStatement">ul</span><span class="synIdentifier">&gt;</span>
      <span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;/</span>nav<span class="synIdentifier">&gt;</span>
</pre>


<p>また、例のごとくfixed-topで固定した分、メインコンテンツをnavbarの高さ分paddingします。</p>

<p>どれくらいpaddingしていいかは、公式サンプルを参考にしました。</p>

<p><a href="https://v4-alpha.getbootstrap.com/examples/navbar-top-fixed/">Fixed top navbar example for Bootstrap</a></p>

<pre class="code lang-html" data-lang="html" data-unlink>    <span class="synIdentifier">&lt;</span><span class="synStatement">style</span><span class="synIdentifier">&gt;</span>
        <span class="synComment">/* Show it is fixed to the top */</span>
        <span class="synStatement">body</span> <span class="synIdentifier">{</span>
        <span class="synComment">/*min-heightはスクロール検証用*/</span>
          <span class="synType">min-height</span>: <span class="synConstant">75rem</span>;
          <span class="synType">padding-top</span>: <span class="synConstant">4.5rem</span>;
        <span class="synIdentifier">}</span>
    <span class="synIdentifier">&lt;/</span><span class="synStatement">style</span><span class="synIdentifier">&gt;</span>
</pre>


<p><br/></p>

<p><b>ブラウザでみた場合</b><br/>
<span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170727/20170727160605.png" alt="f:id:konoemario:20170727160605p:plain:w500" title="f:id:konoemario:20170727160605p:plain:w500" class="hatena-fotolife" style="width:500px" itemprop="image"></span></p>

<h2 id="作成する画面イメージ">作成する画面イメージ</h2>

<p>ここに来て、手がとまっちゃいました。<br/>
というのも、どんな感じの画面をつくるのかをあまり考えていなかった！</p>

<p>とりえあえずのイメージをdraw.ioで書いてみました。</p>

<p><br/></p>

<p><b>作成する画面イメージ</b><br/>
<span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170727/20170727210800.jpg" alt="f:id:konoemario:20170727210800j:plain:w500" title="f:id:konoemario:20170727210800j:plain:w500" class="hatena-fotolife" style="width:500px" itemprop="image"></span></p>

<p>右側に広大なスペースがありますが、あまったら畑でも耕しておけばいいと思うので、とりあえずこんな感じでいきます。</p>

<p><br/></p>

<h3 id="メインコンテンツ">メインコンテンツ</h3>

<p>とりあえずメイン部分となる、カメラの映像の部分と、コントローラーの部分をつくっていきたいと思います。</p>

<p>メインは、カメラ、コントローラ部分と畑部分とで2カラムとしますので、以下のようにしました。</p>

<p><b>てきとうなhtml(抜粋)</b></p>

<pre class="code lang-html" data-lang="html" data-unlink>    <span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;container&quot;</span><span class="synIdentifier">&gt;</span>
        <span class="synComment">&lt;!-- content --&gt;</span>
        <span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;row&quot;</span><span class="synIdentifier"> </span><span class="synType">style</span><span class="synIdentifier">=</span><span class="synConstant">&quot;background-color:#00ff00&quot;</span><span class="synIdentifier">&gt;</span>
             <span class="synComment">&lt;!--カメラとコントローラー--&gt;</span>
            <span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;col-md-9&quot;</span><span class="synIdentifier"> </span><span class="synType">style</span><span class="synIdentifier">=</span><span class="synConstant">&quot;background:red&quot;</span><span class="synIdentifier">&gt;</span>main<span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
            <span class="synComment">&lt;!--未開拓地域--&gt;</span>
            <span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;col-md-3&quot;</span><span class="synIdentifier"> </span><span class="synType">style</span><span class="synIdentifier">=</span><span class="synConstant">&quot;background:yellow&quot;</span><span class="synIdentifier">&gt;</span>side<span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
        <span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
</pre>


<p><br/></p>

<p><b>ブラウザでみた場合</b><br/>
<span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170727/20170727161728.png" alt="f:id:konoemario:20170727161728p:plain:w500" title="f:id:konoemario:20170727161728p:plain:w500" class="hatena-fotolife" style="width:500px" itemprop="image"></span></p>

<p><br/></p>

<h4 id="カメラ部分">カメラ部分</h4>

<p>ラズパイのカメラの映像はお馴染みの「mjpg-streamer」を使っています。<br/>
なので、ストリミーング映像は、以下のimgタグを使うことで簡単に表示できます。</p>

<pre class="code lang-html" data-lang="html" data-unlink>    <span class="synIdentifier">&lt;</span><span class="synStatement">img</span><span class="synIdentifier"> </span><span class="synType">src</span><span class="synIdentifier">=</span><span class="synConstant">&quot;http://ラズパイのIPアドレス:8080/?action=stream&quot;</span><span class="synIdentifier">&gt;</span>
</pre>


<p>ストリーミング映像のサイズは、mjpg-streamerのオプションで設定しています。<br/>
今は、「240 X 320」で設定しているのでそのサイズを意識することにしました。</p>

<p><b>てきとうなhtml(抜粋)</b></p>

<pre class="code lang-html" data-lang="html" data-unlink>            <span class="synComment">&lt;!--カメラとコントローラー--&gt;</span>
            <span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;col-md-9&quot;</span><span class="synIdentifier"> </span><span class="synType">style</span><span class="synIdentifier">=</span><span class="synConstant">&quot;background:red&quot;</span><span class="synIdentifier">&gt;</span>
                <span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;monitor-wrapper&quot;</span><span class="synIdentifier">&gt;</span>
                  <span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;monitor&quot;</span><span class="synIdentifier">&gt;</span>
                      <span class="synComment">&lt;!--とりあえず適当な画像を置いておく--&gt;</span>
                      <span class="synIdentifier">&lt;</span><span class="synStatement">img</span><span class="synIdentifier"> </span><span class="synType">src</span><span class="synIdentifier">=</span><span class="synConstant">&quot;https://placehold.jp/240x320.png&quot;</span><span class="synIdentifier">&gt;</span>
                  <span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
                <span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
</pre>


<p>styleは以下のようにしました。</p>

<pre class="code lang-html" data-lang="html" data-unlink>        #monitor-wrapper{
            padding-left:30px;
        }

        #monitor <span class="synError">&gt;</span> img {
            transform: rotate(90deg);
        }
</pre>


<p>とりあえず、こんな感じになった。</p>

<p><br/></p>

<p><b>ブラウザでみた場合</b><br/>
<span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170727/20170727213011.png" alt="f:id:konoemario:20170727213011p:plain:w500" title="f:id:konoemario:20170727213011p:plain:w500" class="hatena-fotolife" style="width:500px" itemprop="image"></span></p>

<p>「monitor-wrapper」やらimgタグでrotateしているのはラズパイのカメラの取り付けの際にカメラの向きが90度右になった状態で設置してしまったので、それを補正するために対応した。</p>

<p>自宅のカメラを直せば、こんなことをしなくてよいのだけれども、免許合宿先で作業しているため、仕方がない。</p>

<h4 id="コントローラ部分">コントローラ部分</h4>

<p>ボタンを4つ十字に並べるだけといわれれば、それだけなんだけれども、それだけをどうやってやればいいのかなぁと悩んだ。</p>

<p>結果、flexboxと呼ばれるCSSレイアウトを使うことにした。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=http%3A%2F%2Fcoliss.com%2Farticles%2Fbuild-websites%2Foperation%2Fcss%2Fcss3-flexbox-properties-by-scotch.html" title="CSS3 Flexbox の各プロパティの使い方を詳しく解説" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://coliss.com/articles/build-websites/operation/css/css3-flexbox-properties-by-scotch.html">coliss.com</a></cite></p>

<p>とりあえず、以下のように3 X 3のマスの上にButtonを並べるイメージで考えることにして、Button以外の要素は背景色に同化させて見えないようにした。</p>

<p><b>3X3のマスにボタンがあるイメージ</b>  <br/>
<span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170727/20170727214246.png" alt="f:id:konoemario:20170727214246p:plain:w500" title="f:id:konoemario:20170727214246p:plain:w500" class="hatena-fotolife" style="width:500px" itemprop="image"></span></p>

<p><b>てきとうなhtml(抜粋)</b></p>

<pre class="code lang-html" data-lang="html" data-unlink>            <span class="synComment">&lt;!--カメラとコントローラー--&gt;</span>
            <span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;col-md-9&quot;</span><span class="synIdentifier"> </span><span class="synType">style</span><span class="synIdentifier">=</span><span class="synConstant">&quot;background:red&quot;</span><span class="synIdentifier">&gt;</span>
                <span class="synComment">&lt;!--カメラ--&gt;</span>
                <span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;monitor-wrapper&quot;</span><span class="synIdentifier">&gt;</span>
                  <span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;monitor&quot;</span><span class="synIdentifier">&gt;</span>
                      <span class="synIdentifier">&lt;</span><span class="synStatement">img</span><span class="synIdentifier"> </span><span class="synType">src</span><span class="synIdentifier">=</span><span class="synConstant">&quot;https://placehold.jp/240x320.png&quot;</span><span class="synIdentifier">&gt;</span>
                  <span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
                <span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
                <span class="synComment">&lt;!-- コントローラー--&gt;</span>
                <span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;controller_wrapper&quot;</span><span class="synIdentifier">&gt;</span>
                    <span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;dummy_button&quot;</span><span class="synIdentifier">&gt;&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
                    <span class="synIdentifier">&lt;</span><span class="synStatement">button</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;controller_button&quot;</span><span class="synIdentifier">&gt;</span>前進:W<span class="synIdentifier">&lt;/</span><span class="synStatement">button</span><span class="synIdentifier">&gt;</span>
                    <span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;dummy_button&quot;</span><span class="synIdentifier">&gt;&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
                    <span class="synIdentifier">&lt;</span><span class="synStatement">button</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;controller_button&quot;</span><span class="synIdentifier">&gt;</span>左折:A<span class="synIdentifier">&lt;/</span><span class="synStatement">button</span><span class="synIdentifier">&gt;</span>
                    <span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;dummy_button&quot;</span><span class="synIdentifier">&gt;&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
                    <span class="synIdentifier">&lt;</span><span class="synStatement">button</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;controller_button&quot;</span><span class="synIdentifier">&gt;</span>右折:D<span class="synIdentifier">&lt;/</span><span class="synStatement">button</span><span class="synIdentifier">&gt;</span>
                    <span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;dummy_button&quot;</span><span class="synIdentifier">&gt;&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
                    <span class="synIdentifier">&lt;</span><span class="synStatement">button</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;controller_button&quot;</span><span class="synIdentifier">&gt;</span>後退:S<span class="synIdentifier">&lt;/</span><span class="synStatement">button</span><span class="synIdentifier">&gt;</span>
                    <span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;dummy_button&quot;</span><span class="synIdentifier">&gt;&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
                <span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
</pre>


<p>styleは以下とした。</p>

<pre class="code lang-html" data-lang="html" data-unlink>        /*flexさせたい要素の親要素のdisplayとして設定する。*/
        #controller_wrapper{
            background: #42aaf4;
            width:300px;
            height: 150px;
            display: flex;
            flex-direction: row;
            flex-wrap: wrap;
        }

        .controller_button{
            margin: 1%;
            padding: 0;
            width:30%;
            height:30%;
            background: #c97796;
            text-align: center;
            color: white;
            border-radius: 10px;
        }

        .dummy_button{
            margin: 1%;
            padding: 0;
            width:30%;
            height:30%;
        }
</pre>


<p><br/></p>

<p><b>ブラウザでみた場合</b>  <br/>
<span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170727/20170727215055.png" alt="f:id:konoemario:20170727215055p:plain:w500" title="f:id:konoemario:20170727215055p:plain:w500" class="hatena-fotolife" style="width:500px" itemprop="image"></span></p>

<h3 id="申し訳程度にフッターをつける">申し訳程度にフッターをつける</h3>

<p>フッターがあるとそれっぽいかなぁということで、フッターをつけることにした。</p>

<p>Bootstrap公式のフッターをそのままもってくる。</p>

<p><a href="https://getbootstrap.com/examples/sticky-footer/">Sticky Footer Template for Bootstrap</a></p>

<p><b>てきとうなhtml(抜粋)</b></p>

<pre class="code lang-html" data-lang="html" data-unlink>    <span class="synComment">&lt;!-- footer --&gt;</span>
    <span class="synIdentifier">&lt;</span>footer<span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;footer&quot;</span><span class="synIdentifier">&gt;</span>
      <span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;container&quot;</span><span class="synIdentifier">&gt;</span>
        <span class="synIdentifier">&lt;</span><span class="synStatement">p</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;text-muted&quot;</span><span class="synIdentifier">&gt;&lt;</span><span class="synStatement">a</span><span class="synIdentifier"> </span><span class="synType">href</span><span class="synIdentifier">=</span><span class="synConstant">&quot;http://tohutokonsome.hatenablog.com/archive&quot;</span><span class="synIdentifier">&gt;</span><span class="synUnderlined">豆腐とコンソメ</span><span class="synIdentifier">&lt;/</span><span class="synStatement">a</span><span class="synIdentifier">&gt;&lt;/</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>
      <span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;/</span>footer<span class="synIdentifier">&gt;</span>
</pre>


<p>スタイルもそのまま。</p>

<pre class="code lang-html" data-lang="html" data-unlink>        /* Sticky footer styles
        -------------------------------------------------- */
        html {
          position: relative;
          min-height: 100%;
        }
        body {
          /* Margin bottom by footer height */
          margin-bottom: 60px;
        }
        .footer {
          position: absolute;
          bottom: 0;
          width: 100%;
          /* Set the fixed height of the footer here */
          height: 60px;
          background-color: #f5f5f5;
        }
</pre>


<p><br/></p>

<p><b>ブラウザでみた場合</b><br/>
<span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170728/20170728175930.png" alt="f:id:konoemario:20170728175930p:plain:w500" title="f:id:konoemario:20170728175930p:plain:w500" class="hatena-fotolife" style="width:500px" itemprop="image"></span></p>

<p>なかなかひどいデザインです。
もう動かしたい！という気持ちがでてきちゃっているので、先に使えるようしてからデザインを整えたいなぁと思っとります。</p>

<p>次回は、これをnode.jsのプロジェクトにのっけていきます。</p>

-----
--------
AUTHOR: konoemario
TITLE: 指導員に腹が立つ：免許合宿３日目
BASENAME: 2017/07/26/173821
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 07/26/2017 17:38:21
CATEGORY: 雑談
-----
BODY:
<p>30歳の無職期間を生かして、人生で2度目の免許講習を受講しております。</p>

<p>学科の講義は、DVDの映像で出てきたことを、再度指導員が説明し直したり、開いているページを読めば5分で終わることを15分かけて説明しています。</p>

<p>お金もそうなんですが、時間の取られ方が半端ない、と思う今日この頃です。</p>

<p>免許合宿で参加しているのですが、同日に合宿に参加した方々ともトランプをしたりと、すこし馴染んだかなと思います。</p>

<p>が、ここにきて、一緒に行動しなきゃいけない感がでてきていて、ちょっと煩わしくなってきてしまった今日このごろです。</p>

<p>この年齢で何を気にしているんだろうということで、もっと自由に行動したいと思います。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=http%3A%2F%2Ftohutokonsome.hatenablog.com%2Fentry%2F2017%2F07%2F25%2F003202" title="30歳の無職が免許合宿に参加した：一日目 - 豆腐とコンソメ" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://tohutokonsome.hatenablog.com/entry/2017/07/25/003202">tohutokonsome.hatenablog.com</a></cite></p>

<p>さて、免許合宿ということで初日から実技として車の運転をしております。</p>

<p>が、前回もそうだったのですが、この実技の時間、心が痛いです。<br/>
顔にはあまりださないようにしているのですが、腹が立つこともありますし、凹むこともあります。</p>

<p>指導員の方にもよるのですが、嫌な気持ちになることの方が圧倒的に多いので、いわれて頭にきた、つらかった言葉を書き起こしました。</p>

<p><br/></p>

<h6>「焦らなくていいから落ち着いてやって」</h6>

<p>文字に起こすと、当たり前のことですね。</p>

<p>ただ、焦らなくていい、といわれてすぐ落ち着ける人間がどれくらいいるのでしょうか。<br/>
もとより、それを言う側の言葉に感情が少しでも乗っかっていると、余計焦ります。</p>

<p>そもそもなぜ僕が焦っている原因はなんなんでしょうか。<br/>
例えば、教習所内でいらないアクセルを踏んでいて、スピードを出ているせいで、慌ただしくなっているのか、過剰にエンストを恐れていて、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%AF%A5%E9%A5%C3%A5%C1">クラッチ</a>をやけに踏んでて無駄な操作が多いとか、そもそも情報過多で混乱しているのか、とかいろいろあるわけです。</p>

<p>そこを一切無視して、焦るなと言われても何も改善しないです。</p>

<p><br/></p>

<h6>「もっと集中して」</h6>

<p>気を抜いているわけでもなく、真剣にやっているときに、集中しろっていわれるとなんだかなぁと思います。</p>

<p><br/></p>

<h6>「 こういうところに気をつけないとすぐ事故になるよ！」</h6>

<p>事故をおこしたいわけでも、面倒だから省略してるわけでもなんでもなく、只々慣れていないだけなんです。<br/>
このセリフの意図はある種、脅すことによっての学習効果を期待しているのかもしれませんが、メンタルが弱い自分にとってはひどく逆効果です。</p>

<p><br/></p>

<h6>思うこと</h6>

<p>自分のメンタルの弱さもあるのですが、基本的に、感情を乗っけられた指摘というのは、自分を否定されたような気がしてつらいです。</p>

<p>なので、やっぱり褒めていただきたいです。</p>

<p>ああ、褒められたいです。</p>

<p>思い返せば、テスト用紙を目の前で採点されるとかも苦手でしたし、前職でシステム障害時の解析とかしている最中に、後ろに立たれるのはすごく嫌でした。</p>

<p>根本的な部分を改善できればと思うのですが、こんな自分でも相性のよい指導員の方はいたりするので、人を選べればなぁと思います。</p>

<p>先が思いやられます。</p>

-----
--------
AUTHOR: konoemario
TITLE: 30歳の無職が免許合宿に参加した：一日目
BASENAME: 2017/07/25/003202
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 07/25/2017 00:32:02
CATEGORY: 雑談
-----
BODY:
<h1>日記</h1>

<p>30歳を目前にして、合宿免許入校日を迎えました。</p>

<p>送迎バスの隣の若人たちは、「どこの大学？俺、今2年目だよ。」という会話をしており、交わりたいけれども、その話は振って欲しくないなぁ、と自意識過剰な思いでバスに揺られていました。</p>

<p>教習所の印象は、以前免許を取得した際と同じで、あまりいいものではありません。</p>

<p>事前に送付しろといわれて、送付した入学申込書やら誓約書やら適正チェックシートやらを入学初日になぜ再度書く必要があるんだろうとか、手書きのマークがやたら書き込まれた講義予定簿やら、なくすと最初からやり直しといわれる(さすがに脅しですよね、、、？）履修管理シートやらいろいろと残念です。</p>

<p>とはいえ、いろんな層の方が受講する講義なので、あんまりやり方を変えたくない（そもそも必要も変える必要がない）っていうところなのでしょうか。</p>

<p>金髪の集団が怖いです。</p>

<p>喧嘩で退校になった旨のポスターとかが貼ってあったりして、トイレに行くのも怖いです。</p>

<p>ただ何より残念なのが、免許の更新し忘れで、失効した免許をとるべく、時間もお金もそれなりにかかるこの講習を受けている自分の頭です。</p>

<p>同日に入校となった方達は皆大学生でした。</p>

<p>免許合宿だと同日に入校する人たちはある程度グループになる傾向があるみたいです。</p>

<p>お昼をご一緒させていただきました。</p>

<p>いつ、僕は無職で30歳なんだ！とカミングアウトしようかと悩んでいたのですが、なかなか言う機会を見つけられないまま、「ハハッ、サークルとか何かやってるのかい？」とかお茶を濁している間に、入校の手続きが始まってしまいました。</p>

<p>しかし、罠は入校の手続きにありました。</p>

<p>手続きの中で、係の方が、「みなさん、保険証を出してください」と言っているじゃないですか。</p>

<p>保険証が必要なんてどこにも書いてなかったはず、保険証は、切り替え手続きの最中で手元にないぞ、といろいろとテンパっていました。</p>

<p>また、提出書類には、悪しき「学校名または会社名」という欄があり、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A4%B0%A4%CC%A4%CC">ぐぬぬ</a>、と筆がとまりました。</p>

<p>仕方がないので、「無職なので保険証を持ってきていません、会社名の欄には何を書けばいいですか？」と正直に告白しました。</p>

<p>僕の合宿免許生活はもう終わってしまうのでしょうか。</p>

-----
--------
AUTHOR: konoemario
TITLE: ラズパイのVimでyankした文字列をMacで使用する
BASENAME: 2017/07/24/235513
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 07/24/2017 23:55:13
CATEGORY: ラズパイ
CATEGORY: Vim
-----
BODY:
<p>ラズパイで<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B7%A5%A7%A5%EB%A5%B9%A5%AF%A5%EA%A5%D7%A5%C8">シェルスクリプト</a>を<a class="keyword" href="http://d.hatena.ne.jp/keyword/vim">vim</a>を使って書いていたときに、ふとコードの内容を<a class="keyword" href="http://d.hatena.ne.jp/keyword/google">google</a>検索したくなったとかありますよね！</p>

<p>自分はあんまりないんですが、<a class="keyword" href="http://d.hatena.ne.jp/keyword/vim">vim</a>の設定をする際についでに気になったので設定したのでメモとして記載します。</p>

<p>参考にさせていただいた記事は以下になります。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fstackoverflow.com%2Fquestions%2F37444399%2Fvim-copy-clipboard-between-mac-and-ubuntu-over-ssh" title="Vim copy clipboard between mac and ubuntu over ssh" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://stackoverflow.com/questions/37444399/vim-copy-clipboard-between-mac-and-ubuntu-over-ssh">stackoverflow.com</a></cite></p>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/X11">X11</a>.appを使う方法です。</p>

<p>話はそれますが、一時期<a class="keyword" href="http://d.hatena.ne.jp/keyword/Vim">Vim</a>使うってかっこいい！使いこなしたい！といろいろがんばったのですが、<a class="keyword" href="http://d.hatena.ne.jp/keyword/Vscode">Vscode</a>だったりいろいろな<a class="keyword" href="http://d.hatena.ne.jp/keyword/IDE">IDE</a>ツールがでてきたりで、どこまでを<a class="keyword" href="http://d.hatena.ne.jp/keyword/Vim">Vim</a>でがんばって、どこから<a class="keyword" href="http://d.hatena.ne.jp/keyword/IDE">IDE</a>ツールを使ってけばいいのだろう、悶々としておりました。</p>

<p>結果<a class="keyword" href="http://d.hatena.ne.jp/keyword/Vim">Vim</a>も<a class="keyword" href="http://d.hatena.ne.jp/keyword/IDE">IDE</a>もろくにつかえないのですが、コードを書くときのキー移動だったりの基本的な操作は<a class="keyword" href="http://d.hatena.ne.jp/keyword/Vim">Vim</a>準拠でファイラーみたいな部分は<a class="keyword" href="http://d.hatena.ne.jp/keyword/IDE">IDE</a>に頼ればいいかなと思っている今日このごろです。</p>

<p>検索とか置換とかも<a class="keyword" href="http://d.hatena.ne.jp/keyword/IDE">IDE</a>でいいかなと思いつつ、<a class="keyword" href="http://d.hatena.ne.jp/keyword/Vim">Vim</a>でもできたら便利だよなぁとも思う今日このごろです。</p>

<ul class="table-of-contents">
    <li><a href="#ラズパイの設定">ラズパイの設定</a><ul>
            <li><a href="#インストール">インストール</a><ul>
                    <li><a href="#話がそれるけれどもvim-genomeって">話がそれるけれどもvim-genomeって？</a></li>
                    <li><a href="#なんでvim-gnomeなの">なんでvim-gnomeなの？</a></li>
                </ul>
            </li>
            <li><a href="#vimrcの設定">.vimrcの設定</a></li>
        </ul>
    </li>
    <li><a href="#Mac側の設定">Mac側の設定</a></li>
    <li><a href="#ssh接続">ssh接続</a></li>
</ul>

<h2 id="ラズパイの設定">ラズパイの設定</h2>

<p>なにはともあれ、ラズパイに<a class="keyword" href="http://d.hatena.ne.jp/keyword/vim">vim</a>をインス<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C8%A1%BC">トー</a>ルしていきます。</p>

<h3 id="インストール">インス<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C8%A1%BC">トー</a>ル</h3>

<p>まずはパッケージリストを更新しときます。</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ sudo apt-get update
</pre>


<p>検証が怪しいのですが、<a class="keyword" href="http://d.hatena.ne.jp/keyword/vim">vim</a>-<a class="keyword" href="http://d.hatena.ne.jp/keyword/gnome">gnome</a>を導入します。</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ sudo apt-get install vim-gnome
</pre>


<h4 id="話がそれるけれどもvim-genomeって">話がそれるけれども<a class="keyword" href="http://d.hatena.ne.jp/keyword/vim">vim</a>-genomeって？</h4>

<p>あまり意識したことはなかったのですが、<a class="keyword" href="http://d.hatena.ne.jp/keyword/vim">vim</a>には様々な<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C7%A5%A3%A5%B9%A5%C8%A5%EA%A5%D3%A5%E5%A1%BC%A5%B7%A5%E7%A5%F3">ディストリビューション</a>があるみたいです。<br/>
その中のひとつになります。</p>

<p>参考にさせていただいた記事。<br/>
<a href="http://qiita.com/b4b4r07/items/f7a4a0461e1fc6f436a4">Vim &#x306E;&#x7A2E;&#x985E; (Vim family) - Qiita</a></p>

<p>上記の記事でいえば、<a class="keyword" href="http://d.hatena.ne.jp/keyword/vim">vim</a>-<a class="keyword" href="http://d.hatena.ne.jp/keyword/gnome">gnome</a>は「Huge」の一番機能が多いものにあたると思われます。</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ vim <span class="synSpecial">--version</span> | <span class="synStatement">grep</span> <span class="synSpecial">-e</span> Huge <span class="synSpecial">-e</span> Small <span class="synSpecial">-e</span> Normal
Huge 版 with GTK2-GNOME GUI.  機能の一覧 有効<span class="synPreProc">(</span><span class="synSpecial">+</span><span class="synPreProc">)</span>/無効<span class="synPreProc">(</span><span class="synSpecial">-</span><span class="synPreProc">)</span>
</pre>


<h4 id="なんでvim-gnomeなの">なんで<a class="keyword" href="http://d.hatena.ne.jp/keyword/vim">vim</a>-<a class="keyword" href="http://d.hatena.ne.jp/keyword/gnome">gnome</a>なの？</h4>

<p>参考にさせていただいた記事。<br/>
<a href="http://qiita.com/shoma2da/items/92ea8badcd4655b6106c">Mac&#x306E;Vim&#x3067;Homebrew&#x3092;&#x4F7F;&#x3063;&#x3066;&#x30AF;&#x30EA;&#x30C3;&#x30D7;&#x30DC;&#x30FC;&#x30C9;&#x9023;&#x643A;&#x3092;&#x6709;&#x52B9;&#x306B;&#x3059;&#x308B; - Qiita</a></p>

<p> <a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%AF%A5%EA%A5%C3%A5%D7%A5%DC%A1%BC%A5%C9">クリップボード</a>（command + cやcommand + pで使用できるいわゆるコピペ）と<a class="keyword" href="http://d.hatena.ne.jp/keyword/vim">vim</a>を連携するには、<a class="keyword" href="http://d.hatena.ne.jp/keyword/vim">vim</a>の<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C7%A5%A3%A5%B9%A5%C8%A5%EA%A5%D3%A5%E5%A1%BC%A5%B7%A5%E7%A5%F3">ディストリビューション</a>がそれに対応している必要があるとのことです。<br/>
<a class="keyword" href="http://d.hatena.ne.jp/keyword/vim">vim</a>-<a class="keyword" href="http://d.hatena.ne.jp/keyword/gnome">gnome</a>は<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%AF%A5%EA%A5%C3%A5%D7%A5%DC%A1%BC%A5%C9">クリップボード</a>に対応しているので、こちらを使用しました。</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ vim <span class="synSpecial">--version</span>|<span class="synStatement">grep</span> clip
+clipboard       <span class="synSpecial">+iconv</span>           <span class="synSpecial">+path_extra</span>      <span class="synSpecial">+toolbar</span>
+<span class="synStatement">eval</span>            <span class="synSpecial">+mouse_dec</span>       <span class="synSpecial">+startuptime</span>     <span class="synSpecial">+xterm_clipboard</span>
</pre>


<h3 id="vimrcの設定">.vimrcの設定</h3>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/vim">vim</a>の設定ファイル、.vimrcをホーム配下に作成します。</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ vim ~/.vimrc
</pre>


<p>以下、一行を追加します。</p>

<p><b>.vimrc</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink><span class="synStatement">set</span><span class="synIdentifier"> clipboard^=unnamed</span>
</pre>


<p>ラズパイ側の設定は以上になります。</p>

<h2 id="Mac側の設定"><a class="keyword" href="http://d.hatena.ne.jp/keyword/Mac">Mac</a>側の設定</h2>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/X11">X11</a>.appをインス<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C8%A1%BC">トー</a>ルします。<br/>
このアプリケーションが本来どういったものなのかって、あんまりわかってないです。</p>

<p><a href="https://www.xquartz.org/">XQuartz</a></p>

<p>インス<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C8%A1%BC">トー</a>ルしたら、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C4%A1%BC%A5%EB%A5%D0%A1%BC">ツールバー</a>の<a class="keyword" href="http://d.hatena.ne.jp/keyword/X11">X11</a>->環境設定を開き、ペーストボードタブを選択します。</p>

<p>以下のように設定します。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170724/20170724233613.png" alt="f:id:konoemario:20170724233613p:plain:w500" title="f:id:konoemario:20170724233613p:plain:w500" class="hatena-fotolife" style="width:500px" itemprop="image"></span></p>

<p>※各設定の意味をあんまり調べてないので、正直なところ全部チェックしちゃえ！という具合です。</p>

<p>設定が終わったら、アプリケーションを終了します。</p>

<h2 id="ssh接続"><a class="keyword" href="http://d.hatena.ne.jp/keyword/ssh">ssh</a>接続</h2>

<p>一点、<a class="keyword" href="http://d.hatena.ne.jp/keyword/ssh">ssh</a>接続する際に、-Xオプションをつける必要があります。</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ ssh  接続先のIP  <span class="synSpecial">-X</span>
</pre>


<p>このオプションをつけることで、<a class="keyword" href="http://d.hatena.ne.jp/keyword/ssh">ssh</a>接続時に<a class="keyword" href="http://d.hatena.ne.jp/keyword/X11">X11</a>.appが起動してくるかと思います。</p>

<p>以上になります。</p>

-----
--------
AUTHOR: konoemario
TITLE: ラズパイ外部公開（個人メモ)
BASENAME: 2017/07/24/212757
STATUS: Draft
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 07/24/2017 21:27:57
-----
BODY:
<p>ラズパイを外部から触るためにやった設定</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=http%3A%2F%2Fg2-girichan.hatenablog.com%2Fentry%2F2017%2F02%2F07%2F173543" title="Raspberry PiにSSHで公開鍵認証を使いたい！ - ひとりまとめ" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://g2-girichan.hatenablog.com/entry/2017/02/07/173543">g2-girichan.hatenablog.com</a></cite></p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fwebkaru.net%2Flinux%2Fsftp-command%2F" title="Linuxコマンド【 sftp 】安全なファイル転送 - Linux入門 - Webkaru" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://webkaru.net/linux/sftp-command/">webkaru.net</a></cite></p>

<p><iframe src="https://hatenablog-parts.com/embed?url=http%3A%2F%2Fqiita.com%2FR_Gray_%2Fitems%2F6052b541fb58067d9f80" title="TerminalからグローバルIPアドレスを確認する方法 - Qiita" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://qiita.com/R_Gray_/items/6052b541fb58067d9f80">qiita.com</a></cite></p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fwww.akakagemaru.info%2Fport%2Frs-500-portfw.html" title="RS-500KI RS-500MI ポート開放設定の説明" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://www.akakagemaru.info/port/rs-500-portfw.html">www.akakagemaru.info</a></cite></p>

<p><iframe src="https://hatenablog-parts.com/embed?url=http%3A%2F%2Fqiita.com%2Fkinpira%2Fitems%2Fc9e6dc910e8d96e8c19b" title="Raspberry Piに外部ネットワークからアクセスできる様にして携帯でペットを遠隔監視する方法 - Qiita" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://qiita.com/kinpira/items/c9e6dc910e8d96e8c19b">qiita.com</a></cite></p>

-----
--------
AUTHOR: konoemario
TITLE: ラズパイのVimの設定（個人メモ)
BASENAME: 2017/07/24/231338
STATUS: Draft
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 07/24/2017 21:26:31
CATEGORY: ラズパイ
CATEGORY: Vim
-----
BODY:
<h1><a class="keyword" href="http://d.hatena.ne.jp/keyword/Mac">Mac</a>の設定</h1>

<pre class="code lang-sh" data-lang="sh" data-unlink>$  system_profiler SPSoftwareDataType

Software:

    System Software Overview:

      System Version: OS X 10.10.5 <span class="synPreProc">(</span><span class="synSpecial">14F1713</span><span class="synPreProc">)</span>
      Kernel Version: Darwin 14.5.0
      Boot Volume: Macintosh HD
      Boot Mode: Normal
      Secure Virtual Memory: Enabled
      Time since boot: <span class="synConstant">3</span> days <span class="synConstant">5</span>:<span class="synConstant">46</span>
</pre>


<p>今の<a class="keyword" href="http://d.hatena.ne.jp/keyword/vim">vim</a>のバージョン</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ vim <span class="synSpecial">--version</span>
VIM - Vi IMproved 7.3 <span class="synPreProc">(</span><span class="synConstant">2010</span><span class="synSpecial"> Aug </span><span class="synConstant">15</span><span class="synSpecial">, compiled Nov </span><span class="synConstant">12</span><span class="synSpecial"> </span><span class="synConstant">2015</span><span class="synSpecial"> </span><span class="synConstant">15</span><span class="synSpecial">:</span><span class="synConstant">12</span><span class="synSpecial">:</span><span class="synConstant">18</span><span class="synPreProc">)</span>
Compiled by root@apple.com
Normal version without GUI.  Features included <span class="synPreProc">(</span><span class="synSpecial">+</span><span class="synPreProc">)</span> or not <span class="synPreProc">(</span><span class="synSpecial">-</span><span class="synPreProc">)</span>:
</pre>


<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%AF%A5%EA%A5%C3%A5%D7%A5%DC%A1%BC%A5%C9">クリップボード</a>が重要となるもの</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ vim <span class="synSpecial">--version</span> | <span class="synStatement">grep</span> clipboard 

-clientserver <span class="synSpecial">-clipboard</span> <span class="synSpecial">+cmdline_compl</span> <span class="synSpecial">+cmdline_hist</span> <span class="synSpecial">+cmdline_info</span> <span class="synSpecial">+comments</span> 
 <span class="synSpecial">-xterm_clipboard</span> <span class="synSpecial">-xterm_save</span> 
</pre>




<pre class="code lang-sh" data-lang="sh" data-unlink>$ brew update
</pre>


<p>ラズパイで<a class="keyword" href="http://d.hatena.ne.jp/keyword/bash">bash</a>とかを書くときに<a class="keyword" href="http://d.hatena.ne.jp/keyword/vim">vim</a>があったほうが便利なので。</p>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/vim">vim</a>のインス<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C8%A1%BC">トー</a>ル</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ sudo apt-get install vim
</pre>


<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/vim">vim</a><a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D7%A5%E9%A5%B0%A5%A4%A5%F3">プラグイン</a>管理ツール「Neobundle」の導入</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=http%3A%2F%2Fqiita.com%2Fmuran001%2Fitems%2F3080c4816b7c2e65e40b" title="NeoBundleを用いたVimプラグイン管理と色設定メモ - Qiita" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://qiita.com/muran001/items/3080c4816b7c2e65e40b">qiita.com</a></cite></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ <span class="synStatement">mkdir</span> <span class="synSpecial">-p</span> ~/.vim/bundle
$ git clone git://github.com/Shougo/neobundle.vim ~/.vim/bundle/neobundle.vim
</pre>


-----
--------
AUTHOR: konoemario
TITLE: Udemyの無料のExpress講習受講メモ
BASENAME: 2017/07/21/153646
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 07/21/2017 15:36:46
CATEGORY: Node.js
CATEGORY: Express
CATEGORY: プログラム
IMAGE: https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170721/20170721121713.png
-----
BODY:
<h1 id="Expressをすこしさわってみた">Expressをすこしさわってみた。</h1>

<p>Udemyの無料のExpress講習を受けたのでメモがてら記載します。  <br/>
<iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fwww.udemy.com%2Fexpressjs-fundamentals%2Flearn%2Fv4%2Foverview" title="ExpressJS Fundamentals - Udemy" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://www.udemy.com/expressjs-fundamentals/learn/v4/overview">www.udemy.com</a></cite></p>

<p>また他にも、以下の記事を参考にしました。<br/>
<a href="http://expressjs.com/">Express - Node.js web application framework</a></p>

<p><iframe src="https://hatenablog-parts.com/embed?url=http%3A%2F%2Fqiita.com%2Fmito_log%2Fitems%2F735f7079f99ec78ea7e6" title="node初心者がexpress-generatorで吐き出されたapp.jsを読んでみる - Qiita" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://qiita.com/mito_log/items/735f7079f99ec78ea7e6">qiita.com</a></cite></p>

<ul class="table-of-contents">
    <li><a href="#Expressをすこしさわってみた">Expressをすこしさわってみた。</a><ul>
            <li><a href="#Expressをとりあえずインストール">Expressをとりあえずインストール</a><ul>
                    <li><a href="#Expressを使わない場合">Expressを使わない場合</a></li>
                    <li><a href="#Expressを使った場合">Expressを使った場合</a></li>
                </ul>
            </li>
        </ul>
    </li>
    <li><a href="#Expressのスケルトンを使う">Expressのスケルトンを使う</a><ul>
            <li><a href="#とりあえず起動してみる">とりあえず起動してみる</a></li>
            <li><a href="#もうすこしみていく">もうすこしみていく</a><ul>
                    <li><a href="#ルーティング">ルーティング</a></li>
                </ul>
            </li>
            <li><a href="#appuseの補足">app.useの補足</a></li>
        </ul>
    </li>
</ul>

<h2 id="Expressをとりあえずインストール">Expressをとりあえずインストール</h2>

<p>npmでパッケージ取得をします。</p>

<pre class="code lang-sh" data-lang="sh" data-unlink><span class="synPreProc">(</span><span class="synSpecial">raspberry_3.5.1</span><span class="synPreProc">)</span> masao<span class="synConstant">-3</span>:legocar_node.js konoe_mario$ npm install express
</pre>


<p>適当につくったプロジェクトのエントリーポイント、server.jsに以下のコードを書く。</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synIdentifier">var</span> express = require(<span class="synConstant">&quot;express&quot;</span>);
<span class="synIdentifier">var</span> app = express();

app.get(<span class="synConstant">'/'</span>,<span class="synIdentifier">function</span>(req, res)<span class="synIdentifier">{</span>
  res.send(<span class="synConstant">'Hello World'</span>);
<span class="synIdentifier">}</span>);

app.listen(6677,<span class="synIdentifier">function</span>()<span class="synIdentifier">{</span>
  console.log(<span class="synConstant">&quot;リクエストがあったよ&quot;</span>);
<span class="synIdentifier">}</span>);
</pre>


<p>ブラウザで「<a href="http://localhost:6677">http://localhost:6677</a>」にアクセスすると、「Hello World」が確認できる。</p>

<p>この時点で、Expressを導入するとURLディスパッチャの機能（ここではルーティングというべきかも)がシンプルになっていることがわかる。</p>

<h5 id="Expressを使わない場合">Expressを使わない場合</h5>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>server.on(<span class="synConstant">&quot;request&quot;</span>,<span class="synIdentifier">function</span>(req, res)<span class="synIdentifier">{</span>
    <span class="synIdentifier">var</span> incomingUrl = url.parse(req.url);

   <span class="synStatement">if</span>(incomingUrl.pathname === <span class="synConstant">&quot;/controller&quot;</span>)<span class="synIdentifier">{</span>
         <span class="synStatement">if</span>(req.method == <span class="synConstant">&quot;GET&quot;</span>)<span class="synIdentifier">{</span>
                   res.end(<span class="synConstant">'Hello World'</span>);
         <span class="synIdentifier">}</span>
   <span class="synIdentifier">}</span>

<span class="synIdentifier">}</span>);
</pre>


<h5 id="Expressを使った場合">Expressを使った場合</h5>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>app.get(<span class="synConstant">'/controller'</span>,<span class="synIdentifier">function</span>(req, res)<span class="synIdentifier">{</span>
  res.send(<span class="synConstant">'Hello World'</span>);
<span class="synIdentifier">}</span>);
</pre>


<p>上記以外にも、javascirptやcssなどのstaticファイルをどうやって提供するかとか、エラーの場合のハンドリングとかいろいろあるみたい。<br/>
ただ、Expressを使わない場合の純粋なnode.jsだけでそこまでやってないので、あんまり有り難みがわからないかもしれません。</p>

<h2 id="Expressのスケルトンを使う">Expressのスケルトンを使う</h2>

<p>とりあれず、触ってみようということで、Expressのスケルトンを作成してくれる機能を用いて使ってみます。</p>

<h3 id="とりあえず起動してみる">とりあえず起動してみる</h3>

<p>Expressのスケルトンを作成するモジュールをインストールしておきます。  今回は、-gオプションを指定して、グローバル環境につっこんじゃいます。</p>

<pre class="code lang-sh" data-lang="sh" data-unlink><span class="synPreProc">(</span><span class="synSpecial">raspberry_3.5.1</span><span class="synPreProc">)</span> masao<span class="synConstant">-3</span>:legocar_express konoe_mario$ npm install express-generator <span class="synSpecial">-g</span>
</pre>


<p>インストールが完了したら、以下コマンドを実行します。</p>

<pre class="code lang-sh" data-lang="sh" data-unlink><span class="synPreProc">(</span><span class="synSpecial">raspberry_3.5.1</span><span class="synPreProc">)</span> masao<span class="synConstant">-3</span>:legocar_express konoe_mario$ express
</pre>


<p>すると、いろいろなディレクトリやら、ファイルやらが作成されます。</p>

<pre class="code lang-sh" data-lang="sh" data-unlink><span class="synPreProc">(</span><span class="synSpecial">raspberry_3.5.1</span><span class="synPreProc">)</span> masao<span class="synConstant">-3</span>:legocar_express konoe_mario$ tree <span class="synSpecial">-L</span> <span class="synConstant">1</span>
.
├── app.js
├── bin
├── node_modules
├── package.json
├── public
├── routes
└── views
</pre>


<p>package.jsonを見てみます。<br/>
これはExpressどうのこうのの話ではないのですが、dependenciesには必要なモジュールが記載されているみたいです。<br/>
結構いっぱいありますね。</p>

<pre class="code lang-json" data-lang="json" data-unlink>
  1 <span class="synSpecial">{</span>
  2<span class="synError">   </span>&quot;<span class="synStatement">name</span>&quot;: &quot;<span class="synConstant">legocar-express</span>&quot;,
  3<span class="synError">   </span>&quot;<span class="synStatement">version</span>&quot;: &quot;<span class="synConstant">0.0.0</span>&quot;,
  4<span class="synError">   </span>&quot;<span class="synStatement">private</span>&quot;: <span class="synConstant">true</span>,
  5<span class="synError">   </span>&quot;<span class="synStatement">scripts</span>&quot;: <span class="synSpecial">{</span>
  6<span class="synError">     </span>&quot;<span class="synStatement">start</span>&quot;: &quot;<span class="synError">node</span> ./<span class="synError">bin</span>/<span class="synError">www</span>&quot;
  <span class="synConstant">7</span>   <span class="synSpecial">}</span>,
  8<span class="synError">   </span>&quot;<span class="synStatement">dependencies</span>&quot;: <span class="synSpecial">{</span>
  9<span class="synError">     </span>&quot;<span class="synStatement">body-parser</span>&quot;: &quot;<span class="synConstant">~1.17.1</span>&quot;,
 10<span class="synError">     </span>&quot;<span class="synStatement">cookie-parser</span>&quot;: &quot;<span class="synConstant">~1.4.3</span>&quot;,
 11<span class="synError">     </span>&quot;<span class="synStatement">debug</span>&quot;: &quot;<span class="synConstant">~2.6.3</span>&quot;,
 12<span class="synError">     </span>&quot;<span class="synStatement">express</span>&quot;: &quot;<span class="synConstant">~4.15.2</span>&quot;,
 13<span class="synError">     </span>&quot;<span class="synStatement">jade</span>&quot;: &quot;<span class="synConstant">~1.11.0</span>&quot;,
 14<span class="synError">     </span>&quot;<span class="synStatement">morgan</span>&quot;: &quot;<span class="synConstant">~1.8.1</span>&quot;,
 15<span class="synError">     </span>&quot;<span class="synStatement">serve-favicon</span>&quot;: &quot;~2.4.2&quot;
 <span class="synConstant">16</span>   <span class="synSpecial">}</span>
</pre>


<p>これを個別で「npm install body-parser」としていくと面倒なので、以下コマンドで、dependenciesに記載されているモジュールをインストールしてくれます。</p>

<pre class="code lang-sh" data-lang="sh" data-unlink><span class="synPreProc">(</span><span class="synSpecial">raspberry_3.5.1</span><span class="synPreProc">)</span> masao<span class="synConstant">-3</span>:legocar_express konoe_mario$ npm install
</pre>


<p>さて、起動してみましょう、というところですが、肝心のエントリーポイントがわかりません。<br/>
何を「node  xxx」で実行すればいいんでしょう。</p>

<p>package.jsonをよくみると、scirpts配下にstartなるものがあります。<br/>
どうもスクリプト経由で実行するのが一般的っぽいです。</p>

<p>スクリプトを実行するには、npmコマンドを使えばよいそうです。</p>

<pre class="code lang-sh" data-lang="sh" data-unlink><span class="synPreProc">(</span><span class="synSpecial">raspberry_3.5.1</span><span class="synPreProc">)</span> masao<span class="synConstant">-3</span>:legocar_express konoe_mario$ npm <span class="synStatement">start</span>
</pre>


<p>もちろん、下記で実行しても同じです。</p>

<pre class="code" data-lang="" data-unlink>(raspberry_3.5.1) masao-3:legocar_express konoe_mario$ node ./bin/www</pre>


<p>少し話がそれますが、node.jsのプログラムを直すたびに、Webサーバーをctrl + cで落として、再度起動させるのは面倒です。</p>

<p>なので、変更があった場合、それを検知して勝手に取込み直してくれるモジュール、nodemonをインストールしておきます。</p>

<pre class="code lang-sh" data-lang="sh" data-unlink><span class="synPreProc">(</span><span class="synSpecial">raspberry_3.5.1</span><span class="synPreProc">)</span> masao<span class="synConstant">-3</span>:legocar_express konoe_mario$ npm install nodemon <span class="synSpecial">-g</span>
</pre>


<p>nodemonの使い方は、単純に「node  xxxx」としていたところを「nodemon xxxx」と置き換えるだけです。</p>

<p>Expressで使用するときには、先ほどのscriptsをnodemonで実行するように置き換えておきます。</p>

<pre class="code lang-json" data-lang="json" data-unlink> 5<span class="synError">   </span>&quot;<span class="synStatement">scripts</span>&quot;: <span class="synSpecial">{</span> 
 6<span class="synError">     </span>&quot;<span class="synStatement">start</span>&quot;: &quot;<span class="synError">nodemon</span> ./<span class="synError">bin</span>/<span class="synError">www</span>&quot;
 <span class="synConstant">7</span>   <span class="synSpecial">}</span>,
</pre>


<p>これで、「npm start」としたときにnodemonで実行されます。</p>

<p>それでは、繰り返しになりますが、以下のコマンドで起動します。</p>

<pre class="code lang-sh" data-lang="sh" data-unlink><span class="synPreProc">(</span><span class="synSpecial">raspberry_3.5.1</span><span class="synPreProc">)</span> masao<span class="synConstant">-3</span>:legocar_express konoe_mario$ npm <span class="synStatement">start</span>
</pre>


<p>その後、「http:localhost:3000」にアクセスしてみると、以下が表示されるかと思います。</p>

<p>※デフォルトのポート番号は3000みたいです。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170721/20170721121713.png" alt="f:id:konoemario:20170721121713p:plain:w500" title="f:id:konoemario:20170721121713p:plain:w500" class="hatena-fotolife" style="width:500px" itemprop="image"></span></p>

<h3 id="もうすこしみていく">もうすこしみていく</h3>

<p>無事、表示されたので、もう少し見ていきます。<br/>
といっても細かいところだだいぶわからない。</p>

<h4 id="ルーティング">ルーティング</h4>

<p>スケルトンで実装されているルーティング例として、「<a href="http://localhost:3000">http://localhost:3000</a>」と「<a href="http://localhost:3000/users">http://localhost:3000/users</a>」とがある。</p>

<p>これをどのように実現しているか見てみる。</p>

<p>冒頭のチュートリアルの例だと、/に対しての割り当ては以下のようにしていた。</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>app.get(<span class="synConstant">'/'</span>,<span class="synIdentifier">function</span>(req, res)<span class="synIdentifier">{</span>
  res.send(<span class="synConstant">'Hello World'</span>);
<span class="synIdentifier">}</span>);
</pre>


<p>スケルトンではもう少し実践的な？内容になっている。</p>

<p>app.jsファイルには、app.useだったり、app.setだったりいろいろあるのだけれども、いきなり何これ状態です。</p>

<p>ここに関しては素敵な記事がありました。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=http%3A%2F%2Fqiita.com%2Fmito_log%2Fitems%2F735f7079f99ec78ea7e6" title="node初心者がexpress-generatorで吐き出されたapp.jsを読んでみる - Qiita" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://qiita.com/mito_log/items/735f7079f99ec78ea7e6">qiita.com</a></cite></p>

<blockquote><p>app.useを使って、指定のpathにきたリクエストに対して、処理を記述できます。</p></blockquote>

<p>な、なるほどね！みたいな感じで次にいきます。</p>

<p><b>app.js</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>app.use(<span class="synConstant">'/'</span>, index);
app.use(<span class="synConstant">'/users'</span>, users);
</pre>


<p>app.useで設定しているindexとusersですが、以下のようにrequireでインスタンス化（この表現があってるのかわかりませんが)したものを設定しています。</p>

<p><b>app.js</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synIdentifier">var</span> index = require(<span class="synConstant">'./routes/index'</span>);
<span class="synIdentifier">var</span> users = require(<span class="synConstant">'./routes/users'</span>);
</pre>


<p>一例として、users.jsを見てみます。</p>

<p><b>users.js</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synIdentifier">var</span> express = require(<span class="synConstant">'express'</span>);
<span class="synIdentifier">var</span> router = express.Router();

<span class="synComment">/* GET users listing. */</span>
router.get(<span class="synConstant">'/'</span>, <span class="synIdentifier">function</span>(req, res, next) <span class="synIdentifier">{</span>
  res.send(<span class="synConstant">'respond with a resource'</span>);
<span class="synIdentifier">}</span>);

module.exports = router;
</pre>


<p>express.Router()と、router.getというものがでてきます。<br/>
router.getについては、冒頭のapp.getと似たようなものと考えればいいのですが、express.Router()はあんましっくりきてないです。</p>

<p>一点、おお、と思ったのが、router.get(&lsquo;/&rsquo;,function)の/ですが、あくまで「<a href="http://localhost:3000/users">http://localhost:3000/users</a>」を/としています。</p>

<p>なので、以下のように「/hoge」を追加した場合、「<a href="http://localhost:3000/users/hoge">http://localhost:3000/users/hoge</a>」に対する処理となります。</p>

<p>express.Routerがこのあたりの仕組みを担っているのでしょうか。</p>

<p><b>users.js</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synIdentifier">var</span> express = require(<span class="synConstant">'express'</span>);
<span class="synIdentifier">var</span> router = express.Router();

<span class="synComment">/* GET users listing. */</span>
router.get(<span class="synConstant">'/'</span>, <span class="synIdentifier">function</span>(req, res, next) <span class="synIdentifier">{</span>
  res.send(<span class="synConstant">'respond with a resource'</span>);
<span class="synIdentifier">}</span>);

<span class="synComment">//追加</span>
router.get(<span class="synConstant">'/hoge'</span>, <span class="synIdentifier">function</span>(req, res, next) <span class="synIdentifier">{</span>
  res.send(<span class="synConstant">'fuga'</span>);
<span class="synIdentifier">}</span>);

module.exports = router;
</pre>


<p>また、これはexpressの話というより、node.jsの話ですが「module.exports = router」の部分はrequrie()したときの返り値になるみたいです。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=http%3A%2F%2Ffernweh.jp%2Fb%2Fnodejs-require-exports%2F" title="[Node.js] モジュールの読み込み(require)・公開(exports)" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://fernweh.jp/b/nodejs-require-exports/">fernweh.jp</a></cite></p>

<p>なので、さきほどのインスタンス化という表現をしていましたが、以下のapp.jsの処理ではexpress.Router()のから返されるオブジェクトが設定されているということがわかりました。</p>

<p><b>app.js</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synIdentifier">var</span> index = require(<span class="synConstant">'./routes/index'</span>);
<span class="synIdentifier">var</span> users = require(<span class="synConstant">'./routes/users'</span>);
</pre>


<p>なんだかわかったようなわからないようなという感じですが、少しすっきりしました。</p>

<h3 id="appuseの補足">app.useの補足</h3>

<p>さきほど、app.useの説明については、参考記事から引用させていただきました。</p>

<blockquote><p>app.useを使って、指定のpathにきたリクエストに対して、処理を記述できます。</p></blockquote>

<p>この部分について、もう少し掘り下げたいと思います。<br/>
ルーティングの箇所でrouter.getとかは置いておいて、基本的なやりかたとしては、以下の書き方になっていました。</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>app.get(<span class="synConstant">'/'</span>,<span class="synIdentifier">function</span>(req, res)<span class="synIdentifier">{</span>
  res.send(<span class="synConstant">'Hello World'</span>);
<span class="synIdentifier">}</span>);
</pre>


<p>これは、こう書いても同じことができるみたいです。</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>app.use(<span class="synConstant">'/'</span>,<span class="synIdentifier">function</span>(req, res)<span class="synIdentifier">{</span>
  res.send(<span class="synConstant">'Hello World'</span>);
<span class="synIdentifier">}</span>);
</pre>


<p>といっても、こうするとさきほどの「/users」にアクセスしたとしても、HelloWorldが表示されてしまいます。</p>

<p>そもそものapp.useの使い方は、とあるリクエストに対して、このミドルウェアを使うとか、そういった場合に使うみたいです。</p>

<p>使い方が非常に怪しいですが、一例をあげます。</p>

<p>以下のような関数、validateとrenderを作成します。<br/>
その上で、app.useで/testというURLに対して、関数を割り当てています。</p>

<p><b>app.js</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>app.use(<span class="synConstant">'/test'</span>,validate,render);

<span class="synComment">//認証っぽい関数</span>
<span class="synIdentifier">function</span> validate(req, res,next)<span class="synIdentifier">{</span>
    <span class="synStatement">if</span>(req.query.id === <span class="synConstant">&quot;100&quot;</span>)<span class="synIdentifier">{</span>
        next();
        <span class="synStatement">return</span>;
    <span class="synIdentifier">}</span>
    res.send(<span class="synConstant">&quot;validate Error&quot;</span>);
<span class="synIdentifier">}</span>

<span class="synComment">//認証OKの場合</span>
<span class="synIdentifier">function</span> render(req, res)<span class="synIdentifier">{</span>
    res.send(<span class="synConstant">&quot;validate OK&quot;</span>);
<span class="synIdentifier">}</span>
</pre>


<p>「<a href="http://localhost:3000/test?id=100">http://localhost:3000/test?id=100</a>」でアクセスすると、validate OKが表示されます。<br/>
ここでのポイントは、validate関数内のnext()になります。<br/>
next()はapp.useで渡した次の引数の関数が呼ばれる仕組みになっているみたいです。</p>

<p>もうすこしミドルウェアっぽい仕組みとして、リクエストがあったら、コンソールにログを出すということをしてみます。</p>

<p>以下のような関数を作成します。</p>

<p><b>app.js</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synComment">//こんなかんじの関数を追加する。</span>
<span class="synIdentifier">function</span> hoge(res,req,next)<span class="synIdentifier">{</span>
   console.log(<span class="synConstant">&quot;hoge&quot;</span>);
   next();
<span class="synIdentifier">}</span>
</pre>


<p>おもむろにapp.useに追加します。</p>

<p><b>app.js</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synComment">//hogeを追加</span>
app.use(hoge);
app.use(<span class="synConstant">'/'</span>, index);
app.use(<span class="synConstant">'/users'</span>, users);
<span class="synIdentifier">}</span>
</pre>


<p>こうすると、ルートディレクトに限らず、どのディレクトリにアクセスしてもコンソールにhogeが表示されるかと思います。</p>

<p>このとき、next()をコメントアウトすると、hoge()だけが呼び出され、肝心のapp.use(&lsquo;/&rsquo;, index)の処理が呼び出されません。</p>

<p><b>app.js</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synComment">//こんなかんじの関数を追加する。</span>
<span class="synIdentifier">function</span> hoge(res,req,next)<span class="synIdentifier">{</span>
   console.log(<span class="synConstant">&quot;hoge&quot;</span>);
   <span class="synComment">//next();</span>
<span class="synIdentifier">}</span>
</pre>


<p>app.useはさきほどのvalidateみたいに、app.user(function1,function2)みたいに書いたり、app.use(function1)、app.user(function2)みたいな書き方でもいいみたいですね。</p>

<p>冗長かもしれませんが、以下のようにapp.useの定義順によっては関数hogeが実行されませんでした。</p>

<p><b>app.js</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>app.use(<span class="synConstant">'/'</span>, index);
app.use(<span class="synConstant">'/users'</span>, users);
<span class="synComment">//ここに追加</span>
app.use(hoge);
<span class="synIdentifier">}</span>
</pre>


<p>こういったことをするあれば、index.js側にもnext()をつけれあげればよさそうです。
あと、関数hogeのnext()は何もないのであれば、削除しときます。</p>

<p><b>index.js</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synIdentifier">var</span> express = require(<span class="synConstant">'express'</span>);
<span class="synIdentifier">var</span> router = express.Router();

<span class="synComment">/* GET home page. */</span>
router.get(<span class="synConstant">'/'</span>, <span class="synIdentifier">function</span>(req, res, next) <span class="synIdentifier">{</span>
  res.render(<span class="synConstant">'index'</span>, <span class="synIdentifier">{</span> title: <span class="synConstant">'Express'</span> <span class="synIdentifier">}</span>);
  next();
<span class="synIdentifier">}</span>);

module.exports = router;
</pre>


-----
--------
AUTHOR: konoemario
TITLE: RaspBerryPiでラジコンをつくる(11)：socket.ioをFlaskで実装する
BASENAME: 2017/07/20/230249
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 07/20/2017 23:02:49
CATEGORY: Node.js
CATEGORY: Python
CATEGORY: プログラム
CATEGORY: ラズパイ
CATEGORY: Flask
CATEGORY: ラジコンシリーズ
IMAGE: https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170720/20170720223155.jpg
-----
BODY:
<h1 id="日記">日記</h1>

<p>ラズパイにはまってから、IoTというキーワードによく反応するようになりました。<br/>
なかでも、トイレの使用状況をお知らせする、なんてのはよく聞く話かと思います。<br/>
先日、サービスエリアに寄った際も、トイレの混雑状況をお知らせする大きな看板が目につきました。<br/>
「空」だったり「混」という文字が出ているのを見て、お！っと思った次第です。<br/>
この仕組み自体は昔からあったものかもしれませんが、嬉しかった私は、奥さんに「見て！すごい目まぐるしく表示がかわってる！」とお伝えし、「<span style="font-size: 200%"><span style="color: #ff0000">満！混！満！混！</span></span>」とはしゃいでいたら、奥さんにいろいろな意味で止めてくれる？、と窘められました。</p>

<p>さて、話はかわりますが、ここにきて、というか最初からかもしれませんが、ブログの目的が曖昧だったりします。<br/>
今はモチベーションを維持するためにも、こうやってやったことを発信できれば、と思っているのですが、成果物が雑だったり、成果物に対してブログを書くことに時間がかなり大きくって、どうなんだろうみたいなものもあって悩みどころです。</p>

<p>メモを取るだけだったら<a class="keyword" href="http://d.hatena.ne.jp/keyword/Evernote">Evernote</a>にも書けばいいとも思いますし、きちんとした意見がほしいのであればQuitaに書いたほうがいいのかな、とか思ったりします。<br/>
モチベーションを保つためにもアクセス数はほしいし、切磋琢磨的なところで意見もほしいし、自分のメモとしても役に立ちたいし、みたいなところがいろいろあって、何が一番大事なのかを見失っています。</p>

<p>が、とりあえずは悩んで何もしないよりかは、まず動いている状態が大事だと思いますので、引き続きよろしくお願い致します。</p>

<h1 id="前回の続き">前回の続き</h1>

<p>前回はnode.jsを使ってsocket.ioを実装し、ブラウザからのキー入力をサーバーに送信するところまでやりました。<br/>
今回は、socket.ioのサーバー側の部分を<a class="keyword" href="http://d.hatena.ne.jp/keyword/python">python</a>のWebアプリケーション<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D5%A5%EC%A1%BC%A5%E0%A5%EF%A1%BC%A5%AF">フレームワーク</a>であるFlaskを使って、実装していきたいと思います。<br/>
理由は前回もありましたが、ラズパイのGPIOをコン<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C8%A5%ED%A1%BC%A5%EB">トロール</a>する部分を<a class="keyword" href="http://d.hatena.ne.jp/keyword/python">python</a>で実装しているためです。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=http%3A%2F%2Ftohutokonsome.hatenablog.com%2Fentry%2F2017%2F07%2F19%2F092401" title="RaspBerryPiでラジコンをつくる(10)：ブラウザから操作する - 豆腐とコンソメ" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://tohutokonsome.hatenablog.com/entry/2017/07/19/092401">tohutokonsome.hatenablog.com</a></cite></p>

<ul class="table-of-contents">
    <li><a href="#日記">日記</a></li>
    <li><a href="#前回の続き">前回の続き</a><ul>
            <li><a href="#Flaskとは">Flaskとは</a></li>
            <li><a href="#初期設定">初期設定</a><ul>
                    <li><a href="#Flaskのインストール">Flaskのインストール</a></li>
                    <li><a href="#Flask-SocketIOのインストール">Flask-SocketIOのインストール</a></li>
                </ul>
            </li>
            <li><a href="#唯一のモジュールのapppyの作成">唯一のモジュールの「app.py」の作成</a></li>
            <li><a href="#controllhtmlの修正">controll.htmlの修正</a></li>
            <li><a href="#疎通確認">疎通確認</a></li>
            <li><a href="#ラズパイコントロール用の処理を追加する">ラズパイコントロール用の処理を追加する</a></li>
        </ul>
    </li>
</ul>

<h2 id="Flaskとは">Flaskとは</h2>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/Python">Python</a>のWebアプリケーション<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D5%A5%EC%A1%BC%A5%E0%A5%EF%A1%BC%A5%AF">フレームワーク</a>。<br/>
以前扱った、<a class="keyword" href="http://d.hatena.ne.jp/keyword/Python">Python</a>のWebアプリケーション<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D5%A5%EC%A1%BC%A5%E0%A5%EF%A1%BC%A5%AF">フレームワーク</a>の「<a class="keyword" href="http://d.hatena.ne.jp/keyword/Django">Django</a>」よりさらに軽量(必要最低限の<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D5%A5%EC%A1%BC%A5%E0%A5%EF%A1%BC%A5%AF">フレームワーク</a>)な気がする。</p>

<p>実際の作業は公式？の<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C1%A5%E5%A1%BC%A5%C8%A5%EA%A5%A2%A5%EB">チュートリアル</a>を見て、試してみました。</p>

<p><a href="http://study-flask.readthedocs.io/ja/latest/01.html#flaskhello-world">1. Web&#x30A2;&#x30D7;&#x30EA;&#x30B1;&#x30FC;&#x30B7;&#x30E7;&#x30F3;&#x3092;&#x4F5C;&#x308B;&#x6E96;&#x5099; &mdash; study flask 1 &#x30C9;&#x30AD;&#x30E5;&#x30E1;&#x30F3;&#x30C8;</a></p>

<p>ここに、socket.ioを実装していきます。</p>

<p>Flaskのsocket.ioについては、以下の記事を参考にさせていただきました。<br/>
<a href="http://qiita.com/nanakenashi/items/6497caf1c56c36f47be9">Flask-SocketIO&#x3067;WebSocket&#x30A2;&#x30D7;&#x30EA;&#x30B1;&#x30FC;&#x30B7;&#x30E7;&#x30F3; - Qiita</a></p>

<p><a href="https://flask-socketio.readthedocs.io/en/latest/">Welcome to Flask-SocketIO&rsquo;s documentation! &mdash; Flask-SocketIO documentation</a></p>

<p><br/></p>

<h2 id="初期設定">初期設定</h2>

<p>ラズパイに、必要な<a class="keyword" href="http://d.hatena.ne.jp/keyword/python">python</a>モジュールをインス<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C8%A1%BC">トー</a>ルしていきます。</p>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/python">python</a>のバージョンは以下を使用しています。</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>pi@raspberrypi:~ $ pyenv version
3.5.1 <span class="synPreProc">(</span><span class="synSpecial">set by /home/pi/.pyenv/version</span><span class="synPreProc">)</span>
</pre>


<h3 id="Flaskのインストール">Flaskのインス<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C8%A1%BC">トー</a>ル</h3>

<p>pipで取得します。</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>pi@raspberrypi:~/myproduct $ sudo pip install Flask
</pre>


<p>地味にsudo権限だと<a class="keyword" href="http://d.hatena.ne.jp/keyword/%B4%C4%B6%AD%CA%D1%BF%F4">環境変数</a>変わるっていうのを忘れていて、混乱した。<br/>
sudoersを編集する必要があった。</p>

<p><a href="http://tohutokonsome.hatenablog.com/entry/2017/05/01/234002">WiringPi&#x3067;&#x30A8;&#x30E9;&#x30FC;&#x306B;&#x306A;&#x3063;&#x305F;&#x5834;&#x5408;&#x306E;&#x30E1;&#x30E2; - &#x8C46;&#x8150;&#x3068;&#x30B3;&#x30F3;&#x30BD;&#x30E1;</a></p>

<p>インス<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C8%A1%BC">トー</a>ルされてますね。</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>pi@raspberrypi:~/myproduct $ sudo pip freeze
<span class="synIdentifier">click</span>=<span class="synStatement">=</span>6.7
<span class="synIdentifier">Flask</span>=<span class="synStatement">=</span>0.12.2
<span class="synIdentifier">itsdangerous</span>=<span class="synStatement">=</span>0.24
<span class="synIdentifier">Jinja2</span>=<span class="synStatement">=</span>2.9.6
<span class="synIdentifier">MarkupSafe</span>=<span class="synStatement">=</span>1.0
<span class="synIdentifier">Werkzeug</span>=<span class="synStatement">=</span>0.12.2
<span class="synIdentifier">wiringpi</span>=<span class="synStatement">=</span>2.32.1
<span class="synIdentifier">wiringpi2</span>=<span class="synStatement">=</span>2.32.3
</pre>


<h3 id="Flask-SocketIOのインストール">Flask-SocketIOのインス<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C8%A1%BC">トー</a>ル</h3>

<p>こちらもFlaskと同様にpipでもってくる。</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>pi@raspberrypi:~/myproduct $ sudo pip install flask-socketio
</pre>


<p>こちらも特に問題なくインス<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C8%A1%BC">トー</a>ルされています。</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>pi@raspberrypi:~/myproduct $ sudo pip freeze
<span class="synIdentifier">click</span>=<span class="synStatement">=</span>6.7
<span class="synIdentifier">Flask</span>=<span class="synStatement">=</span>0.12.2
Flask-<span class="synIdentifier">SocketIO</span>=<span class="synStatement">=</span>2.9.1
<span class="synIdentifier">itsdangerous</span>=<span class="synStatement">=</span>0.24
<span class="synIdentifier">Jinja2</span>=<span class="synStatement">=</span>2.9.6
<span class="synIdentifier">MarkupSafe</span>=<span class="synStatement">=</span>1.0
python-<span class="synIdentifier">engineio</span>=<span class="synStatement">=</span>1.7.0
python-<span class="synIdentifier">socketio</span>=<span class="synStatement">=</span>1.7.6
<span class="synIdentifier">six</span>=<span class="synStatement">=</span>1.10.0
<span class="synIdentifier">Werkzeug</span>=<span class="synStatement">=</span>0.12.2
<span class="synIdentifier">wiringpi</span>=<span class="synStatement">=</span>2.32.1
<span class="synIdentifier">wiringpi2</span>=<span class="synStatement">=</span>2.32.3
</pre>


<h2 id="唯一のモジュールのapppyの作成">唯一のモジュールの「app.py」の作成</h2>

<p>Flaskを使った<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C1%A5%E5%A1%BC%A5%C8%A5%EA%A5%A2%A5%EB">チュートリアル</a>では、ブログを作成していたりしました。 <br/>
しかし、今回必要なのは、以前作成したレゴカーのコン<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C8%A5%ED%A1%BC%A5%EB">トロール</a>部分の橋渡しだけです。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170720/20170720223155.jpg" alt="f:id:konoemario:20170720223155j:plain:w500" title="f:id:konoemario:20170720223155j:plain:w500" class="hatena-fotolife" style="width:500px" itemprop="image"></span></p>

<p>なので、Flaskの基本的な機能については深く考えずに、進めます。</p>

<p>ということで、唯一作成するapp.pyの中身はほぼ以下の記事のままになります。</p>

<p><a href="https://flask-socketio.readthedocs.io/en/latest/">Welcome to Flask-SocketIO&rsquo;s documentation! &mdash; Flask-SocketIO documentation</a></p>

<p><b>app.py</b></p>

<pre class="code lang-python" data-lang="python" data-unlink><span class="synComment"># -*- coding: utf-8 -*-</span>
<span class="synPreProc">from</span> flask <span class="synPreProc">import</span> Flask
<span class="synPreProc">from</span> flask_socketio <span class="synPreProc">import</span> SocketIO,emit

app = Flask(__name__)
app.config[<span class="synConstant">'SECRET_KEY'</span>] = <span class="synConstant">'secret!'</span>
socketio = SocketIO(app)

<span class="synPreProc">@</span><span class="synIdentifier">socketio.on</span>(<span class="synConstant">'connect'</span>,namespace=<span class="synConstant">'/legocar'</span>)
<span class="synStatement">def</span> <span class="synIdentifier">init</span>() :
    <span class="synIdentifier">print</span>(<span class="synConstant">'connected'</span>)

<span class="synPreProc">@</span><span class="synIdentifier">socketio.on</span>(<span class="synConstant">'sendMessage'</span>,namespace=<span class="synConstant">'/legocar'</span>)
<span class="synStatement">def</span> <span class="synIdentifier">recieve_order</span>(order) :

<span class="synComment">#ここにラズパイ操作用のモジュールを組み込む想定</span>
    <span class="synStatement">if</span> order <span class="synStatement">in</span> {<span class="synConstant">'forward'</span>,<span class="synConstant">'back'</span>}:
       <span class="synIdentifier">print</span>(<span class="synConstant">&quot;accell = &quot;</span> +order)
       testmethod(order)
    <span class="synStatement">elif</span> order <span class="synStatement">in</span> {<span class="synConstant">'break'</span>}:
        <span class="synIdentifier">print</span>(<span class="synConstant">&quot;accell stop = &quot;</span> +order)
        testmethod(order)
    <span class="synStatement">elif</span> order <span class="synStatement">in</span> {<span class="synConstant">'right'</span>,<span class="synConstant">'left'</span>}:
       <span class="synIdentifier">print</span>(<span class="synConstant">&quot;handle = &quot;</span> +order)
       testmethod(order)
    <span class="synStatement">else</span>:
        <span class="synStatement">pass</span>


<span class="synPreProc">@</span><span class="synIdentifier">socketio.on</span>(<span class="synConstant">'test'</span>,namespace=<span class="synConstant">'/legocar'</span>)
<span class="synStatement">def</span> <span class="synIdentifier">testmethod</span>(order):
    emit(<span class="synConstant">'test'</span>,order)


<span class="synStatement">if</span> __name__ == <span class="synConstant">'__main__'</span>:
    socketio.run(app,host=<span class="synConstant">'0.0.0.0'</span>,port=<span class="synConstant">5000</span>)
</pre>


<p>検証がいろいろと足りていないのですが、自分のメモがてらポイントを記載しておきます。</p>

<ul>
<li>Flaskは以下のように条件を、@構文で定義して、それに該当する処理である場合、直下の関数が呼ばれるみたい</li>
</ul>


<pre class="code lang-python" data-lang="python" data-unlink><span class="synComment">#URLディスパッチャ、ホスト名のみでアクセスした場合の処理</span>
<span class="synPreProc">@</span><span class="synIdentifier">app.route</span>(<span class="synConstant">'/'</span>)
<span class="synStatement">def</span> <span class="synIdentifier">index</span>():
    <span class="synStatement">return</span> <span class="synConstant">'Hello world!'</span>
</pre>


<ul>
<li><p>node.jsのsocket.onみたいなイベントも同じように@socketio.on(&lsquo;イベント名&rsquo;,namespace)、直下に関数でいける</p></li>
<li><p>node.jsの場合、namespaceは使っていなかったけれども、どうもFlask-SocketIOでは必須？(未検証)</p></li>
<li><p>socketio.run(app)ではなくsocketio.run(app,host=&lsquo;0.0.0.0&rsquo;,port=5000)とすること。
socketio.run(app)の場合、ローカルホスト内でしかFlaskにアクセスできない</p></li>
</ul>


<p>そうしましたら、上記、app.pyをラズパイ上で実行します。</p>

<p><b>Flaskの起動</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>pi@raspberrypi:~/myproduct/legocar/legocar/server $ sudo python app.py 
WebSocket transport not available. Install eventlet or gevent and gevent-websocket <span class="synStatement">for</span> improved performance.
 * Running on http://0.0.0.0:<span class="synConstant">5000</span>/ <span class="synPreProc">(</span>Press CTRL+C to quit<span class="synPreProc">)</span>
</pre>


<p>なにやらいわれていますが、無事起動しました。</p>

<p>これが終わったら、前回作成した「controller.html」を修正します。</p>

<p><br/></p>

<h2 id="controllhtmlの修正">controll.htmlの修正</h2>

<p>前回、サーバー側のsocket.ioはnode.jsで実装していました。<br/>
これをさきほど作成したapp.pyに向きを変えます。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170720/20170720224254.jpg" alt="f:id:konoemario:20170720224254j:plain:w500" title="f:id:konoemario:20170720224254j:plain:w500" class="hatena-fotolife" style="width:500px" itemprop="image"></span></p>

<p>といっても、io.connectに引数として接続先を渡してあげるだけです。</p>

<p><b>controller.html(修正前)</b></p>

<pre class="code lang-html" data-lang="html" data-unlink>    <span class="synIdentifier">&lt;</span><span class="synStatement">script</span><span class="synIdentifier"> </span><span class="synType">src</span><span class="synIdentifier">=</span><span class="synConstant">&quot;//ajax.googleapis.com/ajax/libs/jquery/1.8.0/jquery.min.js&quot;</span><span class="synIdentifier">&gt;&lt;/</span><span class="synStatement">script</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">script</span><span class="synIdentifier"> </span><span class="synType">src</span><span class="synIdentifier">=</span><span class="synConstant">&quot;/socket.io/socket.io.js&quot;</span><span class="synIdentifier">&gt;&lt;/</span><span class="synStatement">script</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">script</span><span class="synIdentifier">&gt;</span>
<span class="synSpecial">        </span><span class="synIdentifier">var</span><span class="synSpecial"> socket = io.connect</span>()<span class="synSpecial">;</span>
</pre>


<p>io.connectは引数なしの場合、デフォルトHTTPリク<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A8%A5%B9">エス</a>トで要求したサーバー（ここではnode.jsのWebサーバー)に接続します。<br/>
引数を渡してあげることで、指定したサーバーに接続することができるみたいです。</p>

<p>また、接続先のアドレスですが、「ラズパイの<a class="keyword" href="http://d.hatena.ne.jp/keyword/IP%A5%A2%A5%C9%A5%EC%A5%B9">IPアドレス</a>:5000/legocar」としています。<br/>
ホスト名以降の/legocarってなんぞって感じなのですが、app.pyのnamespaceで指定したものになります。<br/>
namespaceそのものをあんまり理解してないので、ここではふーん、ぐらいで終えています。</p>

<p><b>controller.html(修正後)</b></p>

<pre class="code lang-html" data-lang="html" data-unlink>    <span class="synIdentifier">&lt;</span><span class="synStatement">script</span><span class="synIdentifier"> </span><span class="synType">src</span><span class="synIdentifier">=</span><span class="synConstant">&quot;//ajax.googleapis.com/ajax/libs/jquery/1.8.0/jquery.min.js&quot;</span><span class="synIdentifier">&gt;&lt;/</span><span class="synStatement">script</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">script</span><span class="synIdentifier"> </span><span class="synType">src</span><span class="synIdentifier">=</span><span class="synConstant">&quot;/socket.io/socket.io.js&quot;</span><span class="synIdentifier">&gt;&lt;/</span><span class="synStatement">script</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">script</span><span class="synIdentifier">&gt;</span>
<span class="synSpecial">        </span><span class="synIdentifier">var</span><span class="synSpecial"> socket = io.connect</span>(<span class="synConstant">'http://ラズパイのIPアドレス:5000/legocar'</span>)<span class="synSpecial">;</span>
</pre>


<h2 id="疎通確認">疎通確認</h2>

<p>それでは、ラズパイにログインして、前回作成したnode.jsのプロジェクトと<a class="keyword" href="http://d.hatena.ne.jp/keyword/python">python</a>のapp.pyを起動してみます。</p>

<p><b>node.jsのWebサーバー起動</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>pi@raspberrypi:~/myproduct/legoCarController $ node server.js
</pre>


<p><b>Flaskの起動(さっきと同じ)</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>pi@raspberrypi:~/myproduct/legocar/legocar/server $ sudo python app.py 
WebSocket transport not available. Install eventlet or gevent and gevent-websocket <span class="synStatement">for</span> improved performance.
 * Running on http://0.0.0.0:<span class="synConstant">5000</span>/ <span class="synPreProc">(</span>Press CTRL+C to quit<span class="synPreProc">)</span>
</pre>


<p>これで、「http://ラズパイのIP:6677/controller」にアクセスすると、controller.htmlが表示され、ブラウザ上では、前回と同様の内容が表示されるます。<br/>
また、Flaskを起動しているコンソール画面には、ブラウザからのキー入力に応じて、app.pyのprintしている内容が表示されることが確認できます。</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>192.168.1.5 - - <span class="synStatement">[</span><span class="synConstant">19</span>/Jul/<span class="synConstant">2017</span> <span class="synConstant">15</span>:<span class="synConstant">58</span>:<span class="synConstant">07</span><span class="synStatement">]</span> <span class="synStatement">&quot;</span><span class="synConstant">POST /socket.io/?EIO=3&amp;transport=polling&amp;t=LrPexJY&amp;sid=9364d0a57e82400da39bf9470d70d056 HTTP/1.1</span><span class="synStatement">&quot;</span> <span class="synConstant">200</span> -
192.168.1.5 - - <span class="synStatement">[</span><span class="synConstant">19</span>/Jul/<span class="synConstant">2017</span> <span class="synConstant">15</span>:<span class="synConstant">58</span>:<span class="synConstant">07</span><span class="synStatement">]</span> <span class="synStatement">&quot;</span><span class="synConstant">GET /socket.io/?EIO=3&amp;transport=polling&amp;t=LrPexJc&amp;sid=9364d0a57e82400da39bf9470d70d056 HTTP/1.1</span><span class="synStatement">&quot;</span> <span class="synConstant">200</span> -
accell <span class="synStatement">=</span> forward
192.168.1.5 - - <span class="synStatement">[</span><span class="synConstant">19</span>/Jul/<span class="synConstant">2017</span> <span class="synConstant">15</span>:<span class="synConstant">58</span>:<span class="synConstant">07</span><span class="synStatement">]</span> <span class="synStatement">&quot;</span><span class="synConstant">POST /socket.io/?EIO=3&amp;transport=polling&amp;t=LrPexSK&amp;sid=9364d0a57e82400da39bf9470d70d056 HTTP/1.1</span><span class="synStatement">&quot;</span> <span class="synConstant">200</span> -
192.168.1.5 - - <span class="synStatement">[</span><span class="synConstant">19</span>/Jul/<span class="synConstant">2017</span> <span class="synConstant">15</span>:<span class="synConstant">58</span>:<span class="synConstant">07</span><span class="synStatement">]</span> <span class="synStatement">&quot;</span><span class="synConstant">GET /socket.io/?EIO=3&amp;transport=polling&amp;t=LrPexMK&amp;sid=9364d0a57e82400da39bf9470d70d056 HTTP/1.1</span><span class="synStatement">&quot;</span> <span class="synConstant">200</span> -
accell <span class="synStatement">stop</span> <span class="synStatement">=</span> <span class="synStatement">break</span>
</pre>


<p>なんだか、POST、GETがsocketと同じタイミングで吐き出されているのが気になりますが。一旦棚にあげています。</p>

<h2 id="ラズパイコントロール用の処理を追加する">ラズパイコン<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C8%A5%ED%A1%BC%A5%EB">トロール</a>用の処理を追加する</h2>

<p>後は、以前以下の記事のときに作成したラズパイコン<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C8%A5%ED%A1%BC%A5%EB">トロール</a>用の処理である「legocar_controller.py 」をapp.pyから呼ぶだけです。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=http%3A%2F%2Ftohutokonsome.hatenablog.com%2Fentry%2F2017%2F05%2F16%2F215317" title="RaspBerryPiでラジコンをつくる(8)：コントローラをつくる - 豆腐とコンソメ" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://tohutokonsome.hatenablog.com/entry/2017/05/16/215317">tohutokonsome.hatenablog.com</a></cite></p>

<p>ひどく汚いコードですが、とりあえず自分の環境では稼働が確認できました。</p>

<pre class="code lang-python" data-lang="python" data-unlink> SocketIO,emit
<span class="synPreProc">import</span> legocar_controller  <span class="synStatement">as</span> LegoCar

app = Flask(__name__)
app.config[<span class="synConstant">'SECRET_KEY'</span>] = <span class="synConstant">'secret!'</span>
socketio = SocketIO(app)


myLegoCar = LegoCar.LegoCarController()


<span class="synPreProc">@</span><span class="synIdentifier">socketio.on</span>(<span class="synConstant">'connect'</span>,namespace=<span class="synConstant">'/legocar'</span>)
<span class="synStatement">def</span> <span class="synIdentifier">init</span>() :
    <span class="synIdentifier">print</span>(<span class="synConstant">'connected'</span>)

<span class="synPreProc">@</span><span class="synIdentifier">socketio.on</span>(<span class="synConstant">'sendMessage'</span>,namespace=<span class="synConstant">'/legocar'</span>)
<span class="synStatement">def</span> <span class="synIdentifier">recieve_order</span>(order) :
<span class="synComment">#</span><span class="synTodo">TODO</span><span class="synComment"> ひどいコードなので直したい</span>
    <span class="synStatement">if</span> order <span class="synStatement">in</span> {<span class="synConstant">'forward'</span>}:
       <span class="synIdentifier">print</span>(<span class="synConstant">&quot;accell forward &quot;</span> +order)
       <span class="synComment">#レゴカーのアクセル(前)</span>
       myLegoCar.accelerator(b<span class="synConstant">&quot;w&quot;</span>)
       testmethod(order)
    <span class="synStatement">elif</span> order <span class="synStatement">in</span> {<span class="synConstant">'back'</span>}:
        <span class="synIdentifier">print</span>(<span class="synConstant">&quot;accell back &quot;</span> +order)
        <span class="synComment">#レゴカーのアクセル(後)</span>
        myLegoCar.accelerator(b<span class="synConstant">&quot;s&quot;</span>)
        testmethod(order)
    <span class="synStatement">elif</span> order <span class="synStatement">in</span> {<span class="synConstant">'break'</span>}:
        <span class="synIdentifier">print</span>(<span class="synConstant">&quot;accell stop &quot;</span> +order)
        myLegoCar.accelerator(b<span class="synConstant">&quot;f&quot;</span>)
        testmethod(order)
    <span class="synStatement">elif</span> order <span class="synStatement">in</span> {<span class="synConstant">'right'</span>}:
       <span class="synIdentifier">print</span>(<span class="synConstant">&quot;handle = &quot;</span> +order)
       <span class="synComment">#レゴカーのハンドル(右)</span>
       myLegoCar.handle(b<span class="synConstant">&quot;d&quot;</span>)
       testmethod(order)
    <span class="synStatement">elif</span> order <span class="synStatement">in</span> {<span class="synConstant">'left'</span>}:
        <span class="synIdentifier">print</span>(<span class="synConstant">&quot;handle = &quot;</span> +order)
        <span class="synComment">#レゴカーのハンドル(右と左)</span>
        myLegoCar.handle(b<span class="synConstant">&quot;a&quot;</span>)
        testmethod(order)
    <span class="synStatement">else</span>:
        <span class="synStatement">pass</span>

<span class="synPreProc">@</span><span class="synIdentifier">socketio.on</span>(<span class="synConstant">'test'</span>,namespace=<span class="synConstant">'/legocar'</span>)
<span class="synStatement">def</span> <span class="synIdentifier">testmethod</span>(order):
    emit(<span class="synConstant">'test'</span>,order)

<span class="synStatement">if</span> __name__ == <span class="synConstant">'__main__'</span>:
    socketio.run(app,host=<span class="synConstant">'0.0.0.0'</span>,port=<span class="synConstant">5000</span>)
</pre>


<p>次回は、操作するUIだったり、カメラ部分を改善していきたいと思います。</p>

-----
--------
AUTHOR: konoemario
TITLE: 「無職です」というのにまだ慣れない
BASENAME: 2017/07/19/095417
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 07/19/2017 09:54:17
CATEGORY: 幸せについて
CATEGORY: 雑談
CATEGORY: 仕事
-----
BODY:
<p>会社を辞めて、そろそろ3週間が経とうとしています。</p>

<p>無職のせいか1日が本当にあっという間に終わってびっくります。</p>

<p>しかし、仕事をしていたときは、仕事さえなければあれもこれもやりたいのに！なんで思っていたのですが、いざ仕事を辞めてみると、むしろやりたいことに対しての生産性が落ちている気がします。</p>

<p>現にこのブログの更新頻度も、落ちてしまいました。</p>

<p>変に時間がある分、いろいろ手をだして目的を見失っている感が半端ないです。<br/>
そして、久しくやってなかったCivlization4もやってみよっかな、とか某<a class="keyword" href="http://d.hatena.ne.jp/keyword/FPS%A5%B2%A1%BC%A5%E0">FPSゲーム</a>のエイム練習もしてみたいな、とかよくわかんないとこでも盛り上がっちゃいます。</p>

<p>さて、本題なのですが未だに（といってもまだ3週間なのかもしれませんが）無職です、っていうことに対してどこか気恥ずかしさがあります。<br/>
昼間のスーパーのお菓子コーナーで、「ドンタコス」と「<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%AD%A5%E3%A5%D9%A5%C4%C2%C0%CF%BA">キャベツ太郎</a>」どっちにするかを3分ほど悩んで 、「やっぱ<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%AD%A5%E3%A5%D9%A5%C4%C2%C0%CF%BA">キャベツ太郎</a>だな！」と声に出して購入した際など、今、すごい無職ぽかった！と感動していたのですが、いかんせん周りに喧伝するのはちょっと気がひけます。</p>

<p>市役所の手続きだったり、携帯の手続きだったりで、職業を書くのが恥ずかしいです。<br/>
紙に書くのだけれあればまだいいのですが、電話や対面で言うのが結構恥ずかしいです。</p>

<p>先日のことでした。</p>

<p>転職活動の面接が終わった後に、免許の更新し忘れで失効してしまった免許を取りに行こうと、駅のベンチに座って免許合宿の申し込みを行いました。</p>

<p>オペレーターのお姉さんに職業を聞かれた際に、「無職です」というと、食い気味で「あ、かしこまりました！」と言われるといろいろ勘ぐってしまいます。<br/>
免許失効してるわ、無職だわでどう思われているんだろうと。<br/>
考えすぎかとは思うのですが、免許合宿に参加するであろう若い方たちと混ざるのだけでもドキドキしているせいか、神経質になっています。</p>

<p>悲しかったのが、電話を終えて一息ついたところで、スーツを来た若い青年に声を掛けられました。</p>

<p>どうも、研修の一貫で、外部の人間と名刺交換をしろというものをやっているらしく、名刺を交換してほしい、と言われました。</p>

<p>自分は面接のためにスーツを来ていたので、外回りをしている営業か何かに見られたのかと思います。<br/>
今思えば、「転職活動中なので名刺ないんですよ」と言えばよかったのですが、免許合宿の申し込みで若干凹んでいたせいか、「今名刺持ってないんだよ、ハハッ」といって切り抜けようとしました。</p>

<p>そしたらあろうことか青年は、一筆だけでもほしいと、紙を渡してきました。</p>

<p>名前だけ書いて返したら、会社名もお願いします、と言ってくるじゃないですか。</p>

<p>心の中で、適当に会社名を書くか、いや、前職の会社名を、、、といろいろ悩んだのですが、正直に「今無職なんで、、、」と答えたところ、青年も、あ、、っていう感じになり名前だけ書いて終わりました。</p>

<p>こんなふざけた研修はいますぐ廃止してほしい。</p>

-----
COMMENT:
AUTHOR: y-k-art-dora
IP: 202.157.227.55
DATE: 07/19/2017 10:02:40
がんばってください！
-----
--------
AUTHOR: konoemario
TITLE: RaspBerryPiでラジコンをつくる(10)：ブラウザから操作する
BASENAME: 2017/07/19/092401
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 07/19/2017 09:24:01
CATEGORY: Node.js
CATEGORY: Python
CATEGORY: プログラム
CATEGORY: ラズパイ
CATEGORY: ラジコンシリーズ
IMAGE: https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170718/20170718110007.png
-----
BODY:
<p>以前、Terminal経由でCUI操作によるラジコンのコントローラーを作りました。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=http%3A%2F%2Fwww.tohuandkonsome.site%2Fentry%2F2017%2F05%2F16%2F215317" title="RaspBerryPiでラジコンをつくる(8)：コントローラをつくる - 豆腐とコンソメ" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://tohutokonsome.hatenablog.com/entry/2017/05/16/215317">tohutokonsome.hatenablog.com</a></cite></p>

<p><iframe src="https://hatenablog-parts.com/embed?url=http%3A%2F%2Fwww.tohuandkonsome.site%2Fentry%2F2017%2F06%2F20%2F103846" title="RaspBerryPiでラジコンをつくる(9)：軽量化問題を解消するためのたったひとつの冴えたやり方 - 豆腐とコンソメ" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://tohutokonsome.hatenablog.com/entry/2017/06/20/103846">tohutokonsome.hatenablog.com</a></cite></p>

<p>動いているところ<br/>
<iframe width="480" height="270" src="https://www.youtube.com/embed/xefm29k8NFY?feature=oembed" frameborder="0" allowfullscreen></iframe><cite class="hatena-citation"><a href="https://www.youtube.com/watch?v=xefm29k8NFY&feature=youtu.be">www.youtube.com</a></cite></p>

<p>今回は、ブラウザごしに操作できるようにしていきたいと思います。</p>

<p>構成ですが、以下を予定しています。<br/>
<span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170719/20170719083402.jpg" alt="f:id:konoemario:20170719083402j:plain:w500" title="f:id:konoemario:20170719083402j:plain:w500" class="hatena-fotolife" style="width:500px" itemprop="image"></span></p>

<p>ブラウザからのキー入力情報をもとに、ラジコンを操作するのですが、socket.ioを使って実現します。<br/>
socket.ioを調べると、node.jsの例がいっぱいでてくるので、それをベースでいろいろと試していました。</p>

<p>ただ、肝心のラズパイを操作する部分を今までPythonで実装してきたので、それはそのまま使いたい気持ちがありsocket.ioの部分はPythonで実装することにしました。<br/>
Pythonでのsocket.ioはPythonの簡易WebフレームワークであるFlaskで使えるみたいなので、こちらを使用することにします。</p>

<p>ブラウザ側のsocket.ioですが、これもPython用のものがあるのですが、せっかくnode.jsを使ってきたので、こっちはnode.jsベースで実装します。</p>

<p>なのでラズパイにはnode.jsとFlaskと二つWebサーバを立てることになります。<br/>
最終的には外部のネットワークから操作したいのですが、この決断がどんな影響がでるのか、なんともいえません。</p>

<p>PythonのWebフレームワークとしてDjangoをやってきたのですが、ここにきてFlaskを使用することになりちょっと悲しいです。<br/>
とはいえ、Djangoでもsocket.ioが使用できないわけでもなさそうなので、どこかでできればなぁと思ってます。</p>

<p>この記事は何回かに分けて書きます。</p>

<p>今回は、とりあえずnode.jsのみでキー入力部分の確認を行います。</p>

<p><br/></p>

<ul class="table-of-contents">
    <li><a href="#nodejsをラズパイにインストールする">node.jsをラズパイにインストールする</a></li>
    <li><a href="#コントロールする画面を作成する">コントロールする画面を作成する</a></li>
    <li><a href="#socketを実装する">socketを実装する。</a></li>
</ul>

<p><br/></p>

<h2 id="nodejsをラズパイにインストールする">node.jsをラズパイにインストールする</h2>

<p>まずは、ラズパイにnode.jsをインストールします。<br/>
Rasbianにはデフォルトでnode.jsが入っているみたいですが、バージョンが古いので新しくします。</p>

<p>こちらの記事を参考に、インストールを行いました。</p>

<p><a href="http://qiita.com/setouchi/items/437e4b62e4210871496f">&#x7B2C;&#x4E09;&#x56DE; Raspberry Pi 3&#x306B;&#x6700;&#x65B0;&#x306E;Node.js&#x3092;&#x30A4;&#x30F3;&#x30B9;&#x30C8;&#x30FC;&#x30EB;&#x3059;&#x308B; - Qiita</a></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>pi@raspberrypi:~ $ sudo apt-get install <span class="synSpecial">-y</span> nodejs npm
</pre>


<p>バージョンを確認。おお、かなり古いっぽい。
※apt-getするまえにやればよかった。もともとラズパイに入ってるバージョンとのこと。</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>pi@raspberrypi:~ $ node <span class="synSpecial">-v</span>
v0.10.29
pi@raspberrypi:~ $ npm <span class="synSpecial">-v</span>
1.4.21
</pre>




<pre class="code lang-sh" data-lang="sh" data-unlink>pi@raspberrypi:~ $ sudo npm cache clean
pi@raspberrypi:~ $ sudo npm install n <span class="synSpecial">-g</span>
pi@raspberrypi:~ $ sudo n stable
</pre>


<p>バージョンを確認したところ、まだ古い。</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>pi@raspberrypi:~ $ node <span class="synSpecial">-v</span>
v0.10.29
</pre>


<p>とりあえす再起動したら新しくなりました。<br/>
Macの検証環境よりバージョン上がってるけれども、これで進めることにした。<br/>
何気に、npmのバージョンもあがってた。</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>pi@raspberrypi:~ $ node <span class="synSpecial">-v</span>
v8.0.0
pi@raspberrypi:~ $ npm <span class="synSpecial">-v</span>
5.0.0
</pre>


<p><br/></p>

<h2 id="コントロールする画面を作成する">コントロールする画面を作成する</h2>

<p>とりあえず、node.jsだけを使ってブラウザでキー入力した情報をリアルタイムでサーバーに連携する機能を作成します。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170719/20170719085247.jpg" alt="f:id:konoemario:20170719085247j:plain:w500" title="f:id:konoemario:20170719085247j:plain:w500" class="hatena-fotolife" style="width:500px" itemprop="image"></span></p>

<p>node.jsの基本的な部分は、以下の記事で試しました。<br/>
<iframe src="https://hatenablog-parts.com/embed?url=http%3A%2F%2Fwww.tohuandkonsome.site%2Fentry%2F2017%2F07%2F04%2F221335" title="Node.jsを使って、簡単なWebアプリケーションをつくる(1) - 豆腐とコンソメ" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://tohutokonsome.hatenablog.com/entry/2017/07/04/221335">tohutokonsome.hatenablog.com</a></cite></p>

<p>なにはともあれ、node.jsのプロジェクトの作成していきます。</p>

<pre class="code lang-sh" data-lang="sh" data-unlink><span class="synPreProc">(</span><span class="synSpecial">raspberry_3.5.1</span><span class="synPreProc">)</span> masao<span class="synConstant">-3</span>:legoCarController konoe_mario$ npm init
name: <span class="synPreProc">(</span><span class="synSpecial">legoCarController</span><span class="synPreProc">)</span> nodeapp
version: <span class="synPreProc">(</span><span class="synSpecial">1.0.0</span><span class="synPreProc">)</span> 
description: legoCarController
entry point: <span class="synPreProc">(</span><span class="synSpecial">index.js</span><span class="synPreProc">)</span> server.js
<span class="synStatement">test</span> <span class="synStatement">command</span>: 
git repository: 
keywords: 
author: tohu
license: <span class="synPreProc">(</span><span class="synSpecial">ISC</span><span class="synPreProc">)</span> 
About to write to /Users/konoe_mario/WebstormProjects/legoCarController/package.json:

<span class="synSpecial">{</span>
  <span class="synStatement">&quot;</span><span class="synConstant">name</span><span class="synStatement">&quot;</span>: <span class="synStatement">&quot;</span><span class="synConstant">nodeapp</span><span class="synStatement">&quot;</span>,
  <span class="synStatement">&quot;</span><span class="synConstant">version</span><span class="synStatement">&quot;</span>: <span class="synStatement">&quot;</span><span class="synConstant">1.0.0</span><span class="synStatement">&quot;</span>,
  <span class="synStatement">&quot;</span><span class="synConstant">description</span><span class="synStatement">&quot;</span>: <span class="synStatement">&quot;</span><span class="synConstant">legoCarController</span><span class="synStatement">&quot;</span>,
  <span class="synStatement">&quot;</span><span class="synConstant">main</span><span class="synStatement">&quot;</span>: <span class="synStatement">&quot;</span><span class="synConstant">server.js</span><span class="synStatement">&quot;</span>,
  <span class="synStatement">&quot;</span><span class="synConstant">scripts</span><span class="synStatement">&quot;</span>: <span class="synSpecial">{</span>
    <span class="synStatement">&quot;</span><span class="synConstant">test</span><span class="synStatement">&quot;</span>: <span class="synStatement">&quot;</span><span class="synConstant">echo </span><span class="synSpecial">\&quot;</span><span class="synConstant">Error: no test specified</span><span class="synSpecial">\&quot;</span><span class="synConstant"> &amp;&amp; exit 1</span><span class="synStatement">&quot;</span>
  <span class="synSpecial">}</span>,
  <span class="synStatement">&quot;</span><span class="synConstant">author</span><span class="synStatement">&quot;</span>: <span class="synStatement">&quot;</span><span class="synConstant">tohu</span><span class="synStatement">&quot;</span>,
  <span class="synStatement">&quot;</span><span class="synConstant">license</span><span class="synStatement">&quot;</span>: <span class="synStatement">&quot;</span><span class="synConstant">ISC</span><span class="synStatement">&quot;</span>
<span class="synSpecial">}</span>
</pre>


<p>続いて、エントリーポイントとなるserver.jsを作成します。<br/>
「http://ラズパイのIP:6677/controller」にアクセスすると、controllr.htmlを返すだけのものになります。</p>

<p><b><span style="font-size: 120%">server.js</span></b></p>

<div style="background: #000000;">
<pre>
<code class="prettyprint linenums" style={  font-size: 14px,line-height: 1.4,font-family: Menlo, Consolas, 'DejaVu Sans Mono', monospace;}>
var http = require("http");
var server = http.createServer();

//urlディスパッチャに使う
var url = require("url");

//htmlファイルの読み込み
var fs = require("fs");

//socket.ioで使う
var io = require("socket.io")(server);


server.on("request",function(req, res){
  console.log("request");

  var incomingUrl = url.parse(req.url);

  if(incomingUrl.pathname === "/controller"){

        fs.readFile("./client/controller.html","utf-8",(err,data)=> {

            if (err) {
                res.writeHead(404, {'Content-Type': 'text/html'});
                res.write('<head><meta charset="UTF-8"></head>');
                res.end("&lt;h1&gt Not Found &lt;/h1&gt");
            }else{
                res.writeHead(200, {'Content-Type': 'text/html'});
                res.write(data);
                res.end();
            }
        });


  }else{
      res.writeHead(404,{'Content-Type':'text/html'});
      res.write('<head><meta charset="UTF-8"></head>');
      res.end("&lt;h1&gt Not Found &lt;/h1&gt");
  }

});


server.listen(6677);
</code>
</pre>
</div>


<p>続いて、「controller.html」はほぼ空っぽですが、こんな感じにしました。</p>

<p><b><span style="font-size: 120%">controller.html</span></b></p>

<div style="font-size: 12px;background: #e6e6e6;line-height: 1.4;font-family: Menlo, Consolas, 'DejaVu Sans Mono',monospace;">

<pre class="code lang-html" data-lang="html" data-unlink><span class="synComment">&lt;!DOCTYPE html&gt;</span>
<span class="synIdentifier">&lt;</span><span class="synStatement">html</span><span class="synIdentifier"> </span><span class="synType">lang</span><span class="synIdentifier">=</span><span class="synConstant">&quot;ja&quot;</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;</span><span class="synStatement">head</span><span class="synIdentifier">&gt;</span>
<span class="synPreProc">    </span><span class="synIdentifier">&lt;</span><span class="synStatement">meta</span><span class="synIdentifier"> </span><span class="synType">charset</span><span class="synIdentifier">=</span><span class="synConstant">&quot;UTF-8&quot;</span><span class="synIdentifier">&gt;</span>
<span class="synPreProc">    </span><span class="synIdentifier">&lt;</span><span class="synStatement">title</span><span class="synIdentifier">&gt;</span>レゴカーコントローラー<span class="synIdentifier">&lt;/</span><span class="synStatement">title</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">head</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;</span><span class="synStatement">body</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">h1</span><span class="synIdentifier">&gt;</span>おはんきー<span class="synIdentifier">&lt;/</span><span class="synStatement">h1</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">body</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">html</span><span class="synIdentifier">&gt;</span>
</pre>
</div>


<p>そうしたら、実際に「http://ラズパイのIP:6677/controller」にブラウザでアクセスして表示されることを確認します。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170718/20170718110003.png" alt="f:id:konoemario:20170718110003p:plain:w500" title="f:id:konoemario:20170718110003p:plain:w500" class="hatena-fotolife" style="width:500px" itemprop="image"></span></p>

<p>controller以外のところにアクセスするとNot Foundとなりますね。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170718/20170718110007.png" alt="f:id:konoemario:20170718110007p:plain:w500" title="f:id:konoemario:20170718110007p:plain:w500" class="hatena-fotolife" style="width:500px" itemprop="image"></span></p>

<h2 id="socketを実装する">socketを実装する。</h2>

<p>次にserver.jsのsocket.ioを実装します。</p>

<p>その前に、socket.ioのモジュールをインストールしておきます。</p>

<pre class="code lang-sh" data-lang="sh" data-unlink><span class="synPreProc">(</span><span class="synSpecial">raspberry_3.5.1</span><span class="synPreProc">)</span> masao<span class="synConstant">-3</span>:legoCarController konoe_mario$ npm install socket.io
</pre>


<p>インストールしたら、server.jsに以下のコードを追加します。  <br/>
追加する場所に注意が必要です。自分は嵌まりました。</p>

<p><a href="http://qiita.com/tohu_masao/items/d46d0f9615b49d145632">Node.js &#x306E;socket.io&#x3067;Can&#39;t set headers after they are sent - Qiita</a></p>

<p><b><span style="font-size: 120%">server.js(抜粋)</span></b></p>

<div style="background: #000000;">
<pre>
<code class="prettyprint linenums" style={  font-size: 14px,line-height: 0.5,font-family: Menlo, Consolas, 'DejaVu Sans Mono', monospace;}>

//socket.ioで使う、server.on("request",function)より後がよい
var io = require("socket.io")(server);

//socket確認用のコード
io.sockets.on("connection",function (socket) {
    console.log("socket connection");

    socket.on("sendMessage",function (data) {
        socket.emit('test',data);
    });

});

</code>
</pre>
</div>


<p>次にcontroller.htmlにも、キー入力情報を受け取る機能と、socket.ioを実装します。</p>

<p><b><span style="font-size: 120%">controller.html</span></b></p>

<div style="font-size: 12px;background: #e6e6e6;line-height: 1.4;font-family: Menlo, Consolas, 'DejaVu Sans Mono',monospace;">


<pre class="code lang-html" data-lang="html" data-unlink><span class="synComment">&lt;!DOCTYPE html&gt;</span>
<span class="synIdentifier">&lt;</span><span class="synStatement">html</span><span class="synIdentifier"> </span><span class="synType">lang</span><span class="synIdentifier">=</span><span class="synConstant">&quot;ja&quot;</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;</span><span class="synStatement">head</span><span class="synIdentifier">&gt;</span>
<span class="synPreProc">    </span><span class="synIdentifier">&lt;</span><span class="synStatement">script</span><span class="synIdentifier"> </span><span class="synType">src</span><span class="synIdentifier">=</span><span class="synConstant">&quot;//ajax.googleapis.com/ajax/libs/jquery/1.8.0/jquery.min.js&quot;</span><span class="synIdentifier">&gt;&lt;/</span><span class="synStatement">script</span><span class="synIdentifier">&gt;</span>
<span class="synPreProc">    </span><span class="synIdentifier">&lt;</span><span class="synStatement">script</span><span class="synIdentifier"> </span><span class="synType">src</span><span class="synIdentifier">=</span><span class="synConstant">&quot;/socket.io/socket.io.js&quot;</span><span class="synIdentifier">&gt;&lt;/</span><span class="synStatement">script</span><span class="synIdentifier">&gt;</span>
<span class="synPreProc">    </span><span class="synIdentifier">&lt;</span><span class="synStatement">script</span><span class="synIdentifier">&gt;</span>
<span class="synSpecial">          </span><span class="synComment">&lt;!--</span><span class="synSpecial">javascript-の処理を書く-&gt;</span>
<span class="synSpecial">    &lt;/sciprt&gt;</span>
<span class="synSpecial">    &lt;meta charset=</span><span class="synConstant">&quot;UTF-8&quot;</span><span class="synSpecial">&gt;</span>
<span class="synSpecial">    &lt;title&gt;レゴカーコントローラー&lt;/title&gt;</span>
<span class="synSpecial">&lt;/head&gt;</span>
<span class="synSpecial">&lt;body&gt;</span>
<span class="synSpecial">    &lt;h1&gt;おはんきー&lt;/h1&gt;</span>
<span class="synSpecial">    &lt;div id=</span><span class="synConstant">&quot;controller&quot;</span><span class="synSpecial">&gt;&lt;/div&gt;</span>
<span class="synSpecial">&lt;/body&gt;</span>
<span class="synSpecial">&lt;/html&gt;</span>
</pre>
</div>


<p>jqueryとsocket.ioの読み込みを追加しました。
ついでに、キー入力結果を表示するようの「<div id="controller"></div>」も追加しています。</p>

<p>その後に、肝心のjavascirptの処理を追加しています。</p>

<p><b><span style="font-size: 120%">controller.html(javascirpt部分を抜粋)</span></b></p>

<div style="background: #000000;">
<pre>
<code class="prettyprint linenums" style={  font-size: 14px,line-height: 0.5,font-family: Menlo, Consolas, 'DejaVu Sans Mono', monospace;}>

        var socket = io.connect();

        $(function() {
            socket.on('connect', function () {
            });

            socket.on('test',function(data){
                render(data)
            });

       });

        function render(data) {
            $("#controller").text(data);
        }

        //キーが押された場合のイベント
        document.onkeydown = function(e){
            isSendMessage(e.keyCode,"keydown");
        };

        //キーが離された場合のイベント
        document.onkeyup = function(e){
            isSendMessage(e.keyCode,"keyup");
        };

        //Windowが非アクティブになったら、エンジンが止まるように決め打ちで送信する。
        window.onblur = function () {
            isSendMessage(87,"keyup");
        };

        //socket通信をするかどうか制御する関数
        function isSendMessage(key_code,keykind){

            switch(key_code){
                //W
                case 87:
                    if(keykind === "keydown"){
                        sendMessage("forward");
                    }else{
                        sendMessage("break");
                    };
                    break;
                //S
                case 83:
                    if(keykind === "keydown"){
                        sendMessage("back");
                    }else{
                        sendMessage("break");
                    };
                    break;
                //D
                case 68:
                    sendMessage("right");
                    break;
                //A
                case 65:
                    sendMessage("left");
                    break;
                default:
                    break;
            }
        }

        //socket通信
        function  sendMessage(message)  {
            socket.emit("sendMessage",message);
        }
</code>
</pre>
</div>


<p>再度、「http://ラズパイのIP:6677/controller」にアクセスすると、以下のようになるかと思います。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170719/20170719090704.png" alt="f:id:konoemario:20170719090704p:plain:w500" title="f:id:konoemario:20170719090704p:plain:w500" class="hatena-fotolife" style="width:500px" itemprop="image"></span></p>

<p>W、A、S、Dを押下すると、それに紐付いた動作名がブラウザに表示されます。</p>

<p>ちなみに、javascrptのキー入力のイベントに関しては、以下のサイトを参考にさせていただきました。<br/>
<a href="http://hakuhin.jp/js/key_board.html">JavaScript&#x30D7;&#x30ED;&#x30B0;&#x30E9;&#x30DF;&#x30F3;&#x30B0;&#x8B1B;&#x5EA7;&#x3010;&#x30AD;&#x30FC;&#x30DC;&#x30FC;&#x30C9;&#x64CD;&#x4F5C;&#x306B;&#x3064;&#x3044;&#x3066;&#x3011;</a></p>

<p>処理の順番としては、以下のようなイメージです。<br/>
<span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170719/20170719080945.jpg" alt="f:id:konoemario:20170719080945j:plain:w500" title="f:id:konoemario:20170719080945j:plain:w500" class="hatena-fotolife" style="width:500px" itemprop="image"></span></p>

<p>次回は、socket.ioのサーバ側をFlaskに置き換えていきます。</p>

-----
--------
AUTHOR: konoemario
TITLE: Flaskメモ
BASENAME: 2017/07/12/232145
STATUS: Draft
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 07/12/2017 23:21:45
-----
BODY:
<h2>参考</h2>

<p><a href="http://study-flask.readthedocs.io/ja/latest/01.html">1. Web&#x30A2;&#x30D7;&#x30EA;&#x30B1;&#x30FC;&#x30B7;&#x30E7;&#x30F3;&#x3092;&#x4F5C;&#x308B;&#x6E96;&#x5099; &mdash; study flask 1 &#x30C9;&#x30AD;&#x30E5;&#x30E1;&#x30F3;&#x30C8;</a></p>

<h2>環境作成</h2>

<p>/Users/konoe_mario/PycharmProjects/testflask/handson</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>masao<span class="synConstant">-3</span>:handson konoe_mario$ pyenv versions
  system
  3.5.1
  3.5.1/envs/raspberry_3.5.1
* 3.5.2 <span class="synPreProc">(</span><span class="synSpecial">set by /Users/konoe_mario/.pyenv/version</span><span class="synPreProc">)</span>
  pypy3-2.4.0
  raspberry_3.5.1
</pre>




<pre class="code lang-sh" data-lang="sh" data-unlink><span class="synPreProc">(</span><span class="synSpecial">raspberry_3.5.1</span><span class="synPreProc">)</span> masao<span class="synConstant">-3</span>:handson konoe_mario$ pip freeze
<span class="synIdentifier">keyboard</span>=<span class="synStatement">=</span>0.9.13
<span class="synIdentifier">py</span>=<span class="synStatement">=</span>1.4.34
<span class="synIdentifier">pygame</span>=<span class="synStatement">=</span>1.9.4.dev0
<span class="synIdentifier">pynput</span>=<span class="synStatement">=</span>1.3.2
pyobjc-<span class="synIdentifier">core</span>=<span class="synStatement">=</span>3.2.1
pyobjc-framework-<span class="synIdentifier">Cocoa</span>=<span class="synStatement">=</span>3.2.1
pyobjc-framework-<span class="synIdentifier">Quartz</span>=<span class="synStatement">=</span>3.2.1
<span class="synIdentifier">PySDL2</span>=<span class="synStatement">=</span>0.9.5
<span class="synIdentifier">six</span>=<span class="synStatement">=</span>1.10.0
</pre>


<p>作成といっても、ラズパイ用につくった環境があるので、それを使用することにする。</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>masao<span class="synConstant">-3</span>:handson konoe_mario$ pyenv global raspberry_3.5.1 
</pre>


<p>インス<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C8%A1%BC">トー</a>ル</p>

<pre class="code lang-sh" data-lang="sh" data-unlink><span class="synPreProc">(</span><span class="synSpecial">raspberry_3.5.1</span><span class="synPreProc">)</span> masao<span class="synConstant">-3</span>:handson konoe_mario$ sudo pip install flask
</pre>




<pre class="code lang-sh" data-lang="sh" data-unlink><span class="synPreProc">(</span><span class="synSpecial">raspberry_3.5.1</span><span class="synPreProc">)</span> masao<span class="synConstant">-3</span>:handson konoe_mario$ pip freeze
<span class="synIdentifier">click</span>=<span class="synStatement">=</span>6.7
<span class="synIdentifier">Flask</span>=<span class="synStatement">=</span>0.12.2
<span class="synIdentifier">itsdangerous</span>=<span class="synStatement">=</span>0.24
<span class="synIdentifier">Jinja2</span>=<span class="synStatement">=</span>2.9.6
<span class="synIdentifier">keyboard</span>=<span class="synStatement">=</span>0.9.13
<span class="synIdentifier">MarkupSafe</span>=<span class="synStatement">=</span>1.0
<span class="synIdentifier">py</span>=<span class="synStatement">=</span>1.4.34
<span class="synIdentifier">pygame</span>=<span class="synStatement">=</span>1.9.4.dev0
<span class="synIdentifier">pynput</span>=<span class="synStatement">=</span>1.3.2
pyobjc-<span class="synIdentifier">core</span>=<span class="synStatement">=</span>3.2.1
pyobjc-framework-<span class="synIdentifier">Cocoa</span>=<span class="synStatement">=</span>3.2.1
pyobjc-framework-<span class="synIdentifier">Quartz</span>=<span class="synStatement">=</span>3.2.1
<span class="synIdentifier">PySDL2</span>=<span class="synStatement">=</span>0.9.5
<span class="synIdentifier">six</span>=<span class="synStatement">=</span>1.10.0
<span class="synIdentifier">Werkzeug</span>=<span class="synStatement">=</span>0.12.2
</pre>


-----
--------
AUTHOR: konoemario
TITLE: ダンスとエンジニアの夢
BASENAME: 2017/07/07/002927
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 07/07/2017 00:29:27
CATEGORY: 雑談
CATEGORY: 幸せについて
CATEGORY: 仕事
-----
BODY:
<p>先月、愛知の友人の結婚式に出席し、その帰りに実家の静岡の友人へもとへ遊びにいった。</p>

<p>静岡の友人とは大学のダンス部がきっかけで仲良くなり、大学の4年間は同じダンスチームのメンバーとして切磋琢磨してきた。</p>

<p>大学は留年さえしなかったけれども、通年を通して単位がろくにとれなかったりするほど講義にはでなかったけれども、ダンスの練習は信じられないくらいやっていたと思う。</p>

<p>チームとしてはいろいろなコンテストに積極的に参加して賞をとったり、クラブイベントにも呼ばれたりして、思い返せば夢のような時間だった。</p>

<p>何をしに大学に入ったんだという批判はもっともだけれども、僕にとっては非常に貴重な時間だったし、いろいろ考えさせられたりもした。</p>

<p>何よりもダンス部に入っていなかったら、きっと友人はできなかっただろうし、卒業もできなかっただろうし、今も結婚することもできなかったはずだ。(それにきっと今でも童貞だったはずだ。)</p>

<p> <br/>
そんな楽しい時間だったのだけれども、後悔していることがある。</p>

<p><br/>
チームとしては、いろいろと挑戦できたし、成果も出すことができた。<br/>
だけれども個としては、もっとうまく、楽しめるようになりたかった。</p>

<p><br/>
ストリートダンスでは、即興で踊るダンスバトルという形式がある。<br/>
僕はそれがかなり苦手だった。</p>

<p><iframe width="480" height="270" src="https://www.youtube.com/embed/Gxvxefecxyw?feature=oembed" frameborder="0" allowfullscreen></iframe><cite class="hatena-citation"><a href="https://www.youtube.com/watch?v=Gxvxefecxyw">www.youtube.com</a></cite></p>

<p>メンタルが弱いせいか、音もよく聞けなくなるし、頭で考えすぎてしまって同じ動きばかりになってしまったりと、あんまりいい経験がない。</p>

<p>だから、ダンスバトルで輝いている人を見ると本当に羨ましくもあったし、その人の頭の中はどうなっているんだろうと思うこともあった。<br/>
なによりダンスを楽しんでるってこういうことだろ！みたいな意識もあった。</p>

<p>練習のときに何気なく、今の感じはよかった、と思うことはあっても、イベントを通して自分がよかったと思えるようなムーブができたことは最後までなかった。</p>

<p><br/></p>

<p>一方の友人は、ダンスを始めた当初から、自分がうまいと勘違いをしていたせいもあって（後日、あのころの自分はひどかったと言っていたから間違いない）、そういったダンスバトルも楽しんでいた。</p>

<p>実力的にはそこまで違いはなかったように思えるのだけれども、ダンスに対する姿勢だったり、メンタル的な部分で負けていたように思える。</p>

<p><br/></p>

<p>とにかくそんな後悔を抱えたまま、自分はなんとなくSEを始めて、今に至る。ダンスはもうやっていない。<br/>
さらに言えば今は無職だけれども。</p>

<p><br/></p>

<p>話を元に戻す。</p>

<p><br/></p>

<p>静岡の友人は今もダンスを続けていて、主にダンススクールの講師として生計を立てている。</p>

<p>僕らの大学のダンス部時代では、スクールの先生といえば雲の上はいいすぎだけれども、それはもうすごい！みたいな存在だった。</p>

<p>今、友人はその立場にいて、クラブイベントも主催していたりして、生活は大変だと言っていたけれども、あのころの僕たちの憧れの存在になっている。</p>

<p>遊びにいったその日の夜は友人主催のクラブイベントに行った。</p>

<p>イベントに来ている人たちは、友人の教え子だったり、ダンサー友達だったり、大抵知り合いみたいで（地方のイベントは大概そんなもんだと思うけれども）みんな友人に声をかけていた。</p>

<p>一方の僕は、従来のメンタルの弱さと人見知りのせいもあって、気後れしながら後ろのほうで音楽を聞いていた。</p>

<p>やっぱりダンスを辞めてしまった自分が、そういった文化のある場所に行くのはなんとなく気後れしていた。</p>

<p>クラブも海外に行く時は観光ついでに行くのだけれども、日本では大学以来遊びにいっていない。</p>

<p>それでも、その日のイベントの選曲は90年代の<a class="keyword" href="http://d.hatena.ne.jp/keyword/HIPHOP">HIPHOP</a>がたくさん流れていて、とてもいい雰囲気だった。</p>

<p>アルコールの力を借りて、時間帯のせいもあってあまり人のいない最前列のスピーカー前に行くことにした。</p>

<p>でっかい音で聞く音楽は、それはそれで良いものがあって、全然動けないなりに一生懸命動いた。</p>

<p>周りから見れば、変なのがいる、と思われたのかもしれないけれども、その時の僕はあの箱の中で一番楽しんでいた自信がある。</p>

<p>時間にすれば1時間もなかったかもしれないけれども、どんなに踊れるダンサーよりも、僕の方が楽しんでいたように思える。</p>

<p>ものすごく疲れたころに、ちょうどピークの時間帯を迎えていて、その頃にはぐったりしていたのだけれども、とても楽しい時間だった。</p>

<p>ダンスを辞めてしまったからとか、もう動けないだとか、最近の音楽を聞いていないだとか、知らない人ばっかだとか、周りの目が恥ずかしいだとか、普段の自分なら楽しめない要素は満載だったように思える。</p>

<p>それでも、それを乗り越えた先は本当に楽しくって、踊れる踊れないは関係なしに音楽を聞けた。</p>

<p>大学のころに足りなかった部分は、周囲との比較や、他人の目を気にし過ぎていて、純粋に楽しむことが足りなかったんだと思う。</p>

<p><br/></p>

<p>さて、タイトルのエンジニア部分に話を移す。</p>

<p><br/>
以前、こんな記事を書いた。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=http%3A%2F%2Ftohutokonsome.hatenablog.com%2Fentry%2F2017%2F05%2F29%2F012000" title="SEとしてのキャリア - 豆腐とコンソメ" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://tohutokonsome.hatenablog.com/entry/2017/05/29/012000">tohutokonsome.hatenablog.com</a></cite></p>

<p><iframe src="https://hatenablog-parts.com/embed?url=http%3A%2F%2Ftohutokonsome.hatenablog.com%2Fentry%2F2017%2F02%2F06%2F013616" title="自分はプログラムが好きなのだろうか - 豆腐とコンソメ" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://tohutokonsome.hatenablog.com/entry/2017/02/06/013616">tohutokonsome.hatenablog.com</a></cite></p>

<p>だらだらといろいろ書いているけれども、エンジニアになりたいんだけれども、そこまでプログラムを書くことが好きな自信がない、みたいな内容である。</p>

<p>これも、結局のところプログラムが好きな他者と比較してしまうと、どうしても自分なんか、みたいな気持ちがでてきてしまうというものである。</p>

<p>実際のところ、僕の今のスキルはうんこみたいなものだし、他者と比較してしまうとそれはもうひどいものだと思う。</p>

<p>それも、やっぱりプログラムを書くのって楽しいなと思える気持ちが自分にはあるのだから、他者どうこうではなく、挑戦したいと思った。</p>

<p>エンジニアになって楽しんでやるという気持ちを持っていきたい。</p>

<p><span style="font-size: 70%">とりあえず、すべては次の会社見つけてからなんですが。</span></p>

<p><br/></p>

<p>最後に、自分の一番好きなダンス動画貼っときます。<br/>
バトル形式ではなく、ショーケースです。</p>

<p><iframe width="459" height="344" src="https://www.youtube.com/embed/6XuGdVtnAVg?feature=oembed" frameborder="0" allowfullscreen></iframe><cite class="hatena-citation"><a href="https://www.youtube.com/watch?v=6XuGdVtnAVg">www.youtube.com</a></cite></p>

<p>ぐっとくるポイントを書きたくなっちゃったので書きます。<br/>
とはいえだいぶ昔の知識なので、間違っていることや曖昧なところが多いです。</p>

<p>動画はbattle of the yearという<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D6%A5%EC%A5%A4%A5%AF%A5%C0%A5%F3%A5%B9">ブレイクダンス</a>の世界大会です。<br/>
年１回開催されていて、各国の予選で勝ち上がったチームが本戦（ドイツ）に出場します。</p>

<p>大会の内容は、チームのショーケース（チームで事前に演目を考えておいて踊るもの）で評価された上位２チームがダンスバトルに進み優勝チームを決めるみたいなやつです。<br/>
※ショーケースの上位４チームか、２チームかはうろ覚え。</p>

<p>動画の内容は、2005年のbattle of the yearのドイツの本戦で、日本の<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A1%D6%B0%EC%B7%E2%A1%D7">「一撃」</a>というチームのショーケースになります。</p>

<p>何がいいかっていう部分なんですが、2005年以前のbattle of the yearでは、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D6%A5%EC%A5%A4%A5%AF%A5%C0%A5%F3%A5%B9">ブレイクダンス</a>のムーブ（ヘッドスピンとか）がかなり進化していて、なんかダンスっていうよりかは、体操選手というかびっくり人間みたいな部分が突出していました。</p>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D6%A5%EC%A5%A4%A5%AF%A5%C0%A5%F3%A5%B9">ブレイクダンス</a>というからには、派手な技の受けはやっぱり重要なのですが、どうしてもダンスの音楽みたいな部分がおろそかになる印象が（自分は見ていて）ありました。</p>

<p>一方、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A1%D6%B0%EC%B7%E2%A1%D7">「一撃」</a>というチームは、昔からbattle of the yearには出場している老舗のチームです。</p>

<p>ただ、2005年当時の印象だと、突出した大技をもっているようなメンバーはおらず、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A1%D6%B0%EC%B7%E2%A1%D7">「一撃」</a>が日本代表になったと聞いて、なんでだろうと思った記憶があります。</p>

<p>しかし、この動画を見て納得しました。<br/>
当時の<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D6%A5%EC%A5%A4%A5%AF%A5%C0%A5%F3%A5%B9">ブレイクダンス</a>のムーブのスキルからいっても突出したものはないのですが、ショーケースの構成や音の取り方が本当にかっこよくって、今でもたまに見ると鳥肌がたちます。</p>

-----
--------
AUTHOR: konoemario
TITLE: Node.jsを使って、簡単なWebアプリケーションをつくる(2)
BASENAME: 2017/07/05/111154
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 07/05/2017 11:11:54
CATEGORY: Node.js
CATEGORY: プログラム
-----
BODY:
<h1 id="前回の続き">前回の続き</h1>

<p>今回は、リク<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A8%A5%B9">エス</a>トしたURLの内容に応じて、ブラウザ側の表示を変えます。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=http%3A%2F%2Ftohutokonsome.hatenablog.com%2Fentry%2F2017%2F07%2F04%2F221335" title="Node.jsを使って、簡単なWebアプリケーションをつくる(1) - 豆腐とコンソメ" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://tohutokonsome.hatenablog.com/entry/2017/07/04/221335">tohutokonsome.hatenablog.com</a></cite></p>

<ul class="table-of-contents">
    <li><a href="#前回の続き">前回の続き</a><ul>
            <li><a href="#URLディスパッチャを実装する">URLディスパッチャを実装する</a></li>
            <li><a href="#htmlファイルを返す">htmlファイルを返す</a></li>
            <li><a href="#動的コンテンツを表示する">動的コンテンツを表示する</a></li>
        </ul>
    </li>
</ul>

<h2 id="URLディスパッチャを実装する">URLディスパッチャを実装する</h2>

<p>まずは、アクセスするURLに応じて、ブラウザに返す内容を変更してみます。</p>

<p><b><span style="font-size: 120%">server.js(前回の状態)</span></b></p>

<div style="background: #000000;">
<pre>
<code class="prettyprint linenums" style={  font-size: 14px,line-height: 1.4,font-family: Menlo, Consolas, 'DejaVu Sans Mono', monospace;}>
var http = require("http");

var server = http.createServer();

server.on("request",function(req, res){
   console.log("リクエストがあったよ");
   
   //HTTPヘッダを編集する。
   res.writeHead(200,{'Content-Type':'text/html','charset':'UTF-8'});
   //サーバーにレスポンスを返す。
   res.end("&lt;h1&gt;おはんきー！&lt;/h1&gt;");
});
</code>
</pre>
</div>


<p>上記の状態を、以下のように修正しました。</p>

<p><b><span style="font-size: 120%">server.js(修正後)</span></b></p>

<div style="background: #000000;">
<pre>
<code class="prettyprint linenums" style={  font-size: 14px,line-height: 1.4,font-family: Menlo, Consolas, 'DejaVu Sans Mono', monospace;}>

var http = require("http");

var server = http.createServer();

//urlディスパッチャに使う
var url = require("url");

server.on("request",function(req, res){
   console.log("リクエストがあったよ");
   
   var incomingUrl = url.parse(req.url);


   //サーバーにレスポンスを返す。
    if (incomingUrl.path === "/hello"){
       res.writeHead(200,{'Content-Type':'text/html'});
       res.write('&lt;head&gt&lt;meta charset="UTF-8"&gt&lt;/head&gt');
       res.end("&lt;h1&gtおはんきー！&lt;/h1&gt");
   }else if(incomingUrl.path === "/bye") {
       res.writeHead(200,{'Content-Type':'text/html'});
       res.write('&lt;head&gt&lt;meta charset="UTF-8"&gt&lt;/head&gt');
       res.end("&lt;h1&gtさよならんきー！&lt;/h1&gt");
   }else{
       res.writeHead(404,{'Content-Type':'text/html'});
       res.write('&lt;head&gt&lt;meta charset="UTF-8"&gt&lt;/head&gt');
       res.end("&lt;h1&gt Not Found &lt;/h1&gt");
    }
 
});
</code>
</pre>
</div>


<p>引数reqにはurlの情報をもっていて、url.parse関数を用いることで解析することができます。<br/>
その情報をもとに、表示の出しわけをしているだけになります。<br/>
すごくあっさりしてますね。</p>

<h2 id="htmlファイルを返す">htmlファイルを返す</h2>

<p>次に、「http://<a class="keyword" href="http://d.hatena.ne.jp/keyword/localhost">localhost</a>:6677/hello」にアクセスしたら、htmlファイルを返却するようにします。</p>

<p>プロジェクトの<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C7%A5%A3%A5%EC%A5%AF%A5%C8">ディレクト</a>リ配下に、client<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C7%A5%A3%A5%EC%A5%AF%A5%C8">ディレクト</a>リを新規で作成し、その中に「index.html」をおきました。</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>masao<span class="synConstant">-3</span>:SampleProject konoe_mario$ tree
.
├── client
│   └── index.html
├── package.json
└── server.js
</pre>


<p>index.htmlは、適当に作成します。</p>

<p><b><span style="font-size: 120%">index.html</span></b></p>

<div style="font-size: 12px;background: #e6e6e6;line-height: 1.4;font-family: Menlo, Consolas, 'DejaVu Sans Mono',monospace;">
<pre class="code lang-html" data-lang="html" data-unlink><span class="synComment">&lt;!DOCTYPE html&gt;</span>
<span class="synIdentifier">&lt;</span><span class="synStatement">html</span><span class="synIdentifier"> </span><span class="synType">lang</span><span class="synIdentifier">=</span><span class="synConstant">&quot;ja&quot;</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;</span><span class="synStatement">head</span><span class="synIdentifier">&gt;</span>
<span class="synPreProc">    </span><span class="synIdentifier">&lt;</span><span class="synStatement">meta</span><span class="synIdentifier"> </span><span class="synType">charset</span><span class="synIdentifier">=</span><span class="synConstant">&quot;UTF-8&quot;</span><span class="synIdentifier">&gt;</span>
<span class="synPreProc">    </span><span class="synIdentifier">&lt;</span><span class="synStatement">title</span><span class="synIdentifier">&gt;</span>おはんきーブログ<span class="synIdentifier">&lt;/</span><span class="synStatement">title</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">head</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;</span><span class="synStatement">body</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">h1</span><span class="synIdentifier">&gt;</span>てきとうにつくった<span class="synIdentifier">&lt;/</span><span class="synStatement">h1</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">form</span><span class="synIdentifier">&gt;</span>
        <span class="synIdentifier">&lt;</span><span class="synStatement">input</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;nickname&quot;</span><span class="synIdentifier"> </span><span class="synType">type</span><span class="synIdentifier">=</span><span class="synConstant">&quot;text&quot;</span><span class="synIdentifier">   </span><span class="synType">name</span><span class="synIdentifier">=</span><span class="synConstant">&quot;nickname&quot;</span><span class="synIdentifier"> placeholder=</span><span class="synConstant">&quot;nickname&quot;</span><span class="synIdentifier">/&gt;</span>
        <span class="synIdentifier">&lt;</span><span class="synStatement">textarea</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;text&quot;</span><span class="synIdentifier"> placeholder=</span><span class="synConstant">&quot;message&quot;</span><span class="synIdentifier"> </span><span class="synType">name</span><span class="synIdentifier">=</span><span class="synConstant">&quot;text&quot;</span><span class="synIdentifier">&gt;&lt;/</span><span class="synStatement">textarea</span><span class="synIdentifier">&gt;</span>
        <span class="synIdentifier">&lt;</span><span class="synStatement">br</span><span class="synIdentifier">/&gt;</span>
        <span class="synIdentifier">&lt;</span><span class="synStatement">br</span><span class="synIdentifier">/&gt;</span>
        <span class="synIdentifier">&lt;</span><span class="synStatement">button</span><span class="synIdentifier"> </span><span class="synType">type</span><span class="synIdentifier">=</span><span class="synConstant">&quot;submit&quot;</span><span class="synIdentifier">&gt;</span>送信<span class="synIdentifier">&lt;/</span><span class="synStatement">button</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;/</span><span class="synStatement">form</span><span class="synIdentifier">&gt;</span>

<span class="synIdentifier">&lt;/</span><span class="synStatement">body</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">html</span><span class="synIdentifier">&gt;</span>
</pre>
</div>


<p>server.js側には、fsモジュールを読み込み、htmlファイルをfs.readFile関数で読み込んでいます。<br/>
読み込んだ結果は、第2引数のcallback関数のdataにあたるんですが、このへんの書き方がまだ慣れないです。</p>

<p><b><span style="font-size: 120%">server.js(抜粋)</span></b></p>

<div style="background: #000000;">
<pre>
<code class="prettyprint linenums" style={  font-size: 14px,line-height: 1.4,font-family: Menlo, Consolas, 'DejaVu Sans Mono', monospace;}>

//htmlファイルの読み込み
var fs = require("fs");

server.on("request",function(req, res){
   console.log("リクエストがあったよ");

   var incomingUrl = url.parse(req.url); 

  //サーバーにレスポンスを返す。
    if (incomingUrl.path === "/hello"){
        //htmlファイルの読み込み
        fs.readFile("./client/index.html",(err,data)=>{
            if(err) {
                res.writeHead(404,{'Content-Type':'text/html'});
                res.write('&lt;head&gt&lt;meta charset="UTF-8"&gt&lt;/head&gt');
                res.end("&lt;h1&gt Not Found &lt;/h1&gt");
            }

            res.writeHead(200,{'Content-Type':'text/html'});
            res.write(data);
            res.end();

        });

</code>
</div>


<p>この状態で、「http://<a class="keyword" href="http://d.hatena.ne.jp/keyword/localhost">localhost</a>:6677/hello」にアクセスすると、index.htmlの内容がブラウザに表示されるかと思います。</p>

<h2 id="動的コンテンツを表示する">動的コンテンツを表示する</h2>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/php">php</a>とか<a class="keyword" href="http://d.hatena.ne.jp/keyword/Django">Django</a>の<a class="keyword" href="http://d.hatena.ne.jp/keyword/python">python</a>でもあったように、htmlの中にサーバー側で処理する<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B9%A5%AF%A5%EA%A5%D7%A5%C8%B8%C0%B8%EC">スクリプト言語</a>を埋め込んで動的に内容をかえたい、とういうことをやっていきます。</p>

<p>まわりくどいですが、最初は自分でなんとかしてみようという発想です。</p>

<p>さきほどの「index.html」にResultみたいなエリアを追加しています。</p>

<p><b><span style="font-size: 120%">index.html</span></b></p>

<div style="font-size: 12px;background: #e6e6e6;line-height: 1.4;font-family: Menlo, Consolas, 'DejaVu Sans Mono',monospace;">

</div>


<pre class="code lang-html" data-lang="html" data-unlink><span class="synComment">&lt;!DOCTYPE html&gt;</span>
<span class="synIdentifier">&lt;</span><span class="synStatement">html</span><span class="synIdentifier"> </span><span class="synType">lang</span><span class="synIdentifier">=</span><span class="synConstant">&quot;ja&quot;</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;</span><span class="synStatement">head</span><span class="synIdentifier">&gt;</span>
<span class="synPreProc">    </span><span class="synIdentifier">&lt;</span><span class="synStatement">meta</span><span class="synIdentifier"> </span><span class="synType">charset</span><span class="synIdentifier">=</span><span class="synConstant">&quot;UTF-8&quot;</span><span class="synIdentifier">&gt;</span>
<span class="synPreProc">    </span><span class="synIdentifier">&lt;</span><span class="synStatement">title</span><span class="synIdentifier">&gt;</span>おはんきーブログ<span class="synIdentifier">&lt;/</span><span class="synStatement">title</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">head</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;</span><span class="synStatement">body</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">h1</span><span class="synIdentifier">&gt;</span>てきとうにつくった<span class="synIdentifier">&lt;/</span><span class="synStatement">h1</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">form</span><span class="synIdentifier">&gt;</span>
        <span class="synIdentifier">&lt;</span><span class="synStatement">input</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;nickname&quot;</span><span class="synIdentifier"> </span><span class="synType">type</span><span class="synIdentifier">=</span><span class="synConstant">&quot;text&quot;</span><span class="synIdentifier">   </span><span class="synType">name</span><span class="synIdentifier">=</span><span class="synConstant">&quot;nickname&quot;</span><span class="synIdentifier"> placeholder=</span><span class="synConstant">&quot;nickname&quot;</span><span class="synIdentifier">/&gt;</span>
        <span class="synIdentifier">&lt;</span><span class="synStatement">textarea</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;text&quot;</span><span class="synIdentifier"> placeholder=</span><span class="synConstant">&quot;message&quot;</span><span class="synIdentifier"> </span><span class="synType">name</span><span class="synIdentifier">=</span><span class="synConstant">&quot;text&quot;</span><span class="synIdentifier">&gt;&lt;/</span><span class="synStatement">textarea</span><span class="synIdentifier">&gt;</span>
        <span class="synIdentifier">&lt;</span><span class="synStatement">br</span><span class="synIdentifier">/&gt;</span>
        <span class="synIdentifier">&lt;</span><span class="synStatement">br</span><span class="synIdentifier">/&gt;</span>
        <span class="synIdentifier">&lt;</span><span class="synStatement">button</span><span class="synIdentifier"> </span><span class="synType">type</span><span class="synIdentifier">=</span><span class="synConstant">&quot;submit&quot;</span><span class="synIdentifier">&gt;</span>送信<span class="synIdentifier">&lt;/</span><span class="synStatement">button</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;/</span><span class="synStatement">form</span><span class="synIdentifier">&gt;</span>
    
 <span class="synComment">&lt;!--なにかを表示させるエリア--&gt;</span>
   <span class="synIdentifier">&lt;</span><span class="synStatement">h1</span><span class="synIdentifier">&gt;</span>Result<span class="synIdentifier">&lt;/</span><span class="synStatement">h1</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;result&quot;</span><span class="synIdentifier">&gt;</span>
       <span class="synIdentifier">&lt;</span><span class="synStatement">h2</span><span class="synIdentifier">&gt;&lt;%=</span><span class="synConstant">hoge</span><span class="synIdentifier"> %&gt;&lt;/</span><span class="synStatement">h2</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>

<span class="synIdentifier">&lt;/</span><span class="synStatement">body</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">html</span><span class="synIdentifier">&gt;</span>
</pre>


<p>「h2」の間に「<a class="keyword" href="http://d.hatena.ne.jp/keyword/hoge">hoge</a>」を%で囲っています。 これは、ただの置き換えする際の目印なのでなんでもいいです。<br/>
ここの部分をserver.jsで書き換えます。</p>

<p><b><span style="font-size: 120%">server.js(抜粋)</span></b></p>

<div style="background: #000000;">
<pre>
<code class="prettyprint linenums" style={  font-size: 14px,line-height: 1.4,font-family: Menlo, Consolas, 'DejaVu Sans Mono', monospace;}>

//htmlファイルの読み込み
var fs = require("fs");

server.on("request",function(req, res){
   console.log("リクエストがあったよ");

   var incomingUrl = url.parse(req.url); 

  //サーバーにレスポンスを返す。
    if (incomingUrl.path === "/hello"){
        //htmlファイルの読み込み
        fs.readFile("./client/index.html","utf-8",(err,data)=>{
            if(err) {
                res.writeHead(404,{'Content-Type':'text/html'});
                res.write('&lt;head&gt&lt;meta charset="UTF-8"&gt&lt;/head&gt');
                res.end("&lt;h1&gt Not Found &lt;/h1&gt");
            }

           //htmlファイルの一部を置き換え 
            var rendarHtml =  data.replace("<%=hoge %>","fuga");
            
            res.writeHead(200,{'Content-Type':'text/html'});
            res.write(rendarHtml);
            res.end();

        });

</code>
</div>


<p>上記のように、fs.readFileで読み込んだhtmlファイルをdata.replaceで置き換えています。<br/>
こうすると、以下のように、置き換えた文字列「fuga」が表示されるかと思います。</p>

<p>ちなみに、こっそりfs.readFileの引数にencodingである<a class="keyword" href="http://d.hatena.ne.jp/keyword/utf-8">utf-8</a>を追加しています。<br/>
これがないと、引数dataは、文字列として扱われないため、replace関数を使用することができません。</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>TypeError: data.replace is not a function
</pre>


<p>みたいなエラーがでるかと思います。</p>

<p><br/>
<br/></p>

<p>さて、動的コンテンツを表示させるのに、毎回上記のようなreplaceを使ったり、htmlファイルをserver.jsで組み立てするのは面倒です。<br/>
なので、こういうときはejsという外部モジュールを使うみたいです。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=http%3A%2F%2Fqiita.com%2Fproelbtn%2Fitems%2Ff6145edacd5a17ec60e8" title="Node.jsを基礎からはじめていく - Qiita" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://qiita.com/proelbtn/items/f6145edacd5a17ec60e8">qiita.com</a></cite></p>

<p>EJSで<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A4%B0%A4%B0%A4%EB">ぐぐる</a>と、それはもう新たな世界が広がりそうで本当に果てがないなぁなんて感じます。</p>

<p>ここでは、深く考えずに使ってみます。</p>

<p>ejsはNode.jsに標準で含まれていない機能になるので、別途インス<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C8%A1%BC">トー</a>ルする必要があります。<br/>
とはいえ、パッケージマネジャーであるnpmを使うことで簡単に終わります。</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>masao<span class="synConstant">-3</span>:SampleProject2 konoe_mario$ npm install ejs
</pre>


<p>上記コマンドをたたくことで、プロジェクト配下に、node_modules<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C7%A5%A3%A5%EC%A5%AF%A5%C8">ディレクト</a>が作成され、その中身をみると、ejs<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C7%A5%A3%A5%EC%A5%AF%A5%C8">ディレクト</a>リが作成されていることが確認できます。</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>├── node_modules
│   ├── ejs
</pre>


<p>あとは、server.js側でrequire(&ldquo;ejs&rdquo;)とするだけで使用ができます。
ejsでは置き換えたい文字列を%で囲む等のルールになっているので、index.htmlの内容は変更していません。</p>

<p><b><span style="font-size: 120%">server.js(抜粋)</span></b></p>

<div style="background: #000000;">
<pre>
<code class="prettyprint linenums" style={  font-size: 14px,line-height: 1.4,font-family: Menlo, Consolas, 'DejaVu Sans Mono', monospace;}>

//htmlファイルの読み込み
var fs = require("fs");

//動的コンテンツを提供するライブラリ
var ejs = require("ejs");

server.on("request",function(req, res){
   console.log("リクエストがあったよ");

   var incomingUrl = url.parse(req.url); 

  //サーバーにレスポンスを返す。
    if (incomingUrl.path === "/hello"){
        //htmlファイルの読み込み
        fs.readFile("./client/index.html","utf-8",(err,data)=>{
            if(err) {
                res.writeHead(404,{'Content-Type':'text/html'});
                res.write('&lt;head&gt&lt;meta charset="UTF-8"&gt&lt;/head&gt');
                res.end("&lt;h1&gt Not Found &lt;/h1&gt");
            }

           //htmlファイルの一部を置き換え 
            var rendarHtml =  ejs.render(data,{hoge:'fuga'});
            
            res.writeHead(200,{'Content-Type':'text/html'});
            res.write(rendarHtml);
            res.end();

        });

</code>
</div>


<p>今回は、ここまでにしたいと思います。</p>

-----
--------
AUTHOR: konoemario
TITLE: 奥さんの扶養に入れない：退職時のメモ
BASENAME: 2017/07/05/120223
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 07/05/2017 12:02:23
CATEGORY: 仕事
CATEGORY: 雑談
-----
BODY:
<p>2017年6月30日を持って、会社を退職しました！</p>

<p>退職しました！なんて、えくすとらなんちゃらやら、エクトプラズムやら正式名称を思い出せない！←これをつけていますが、不安でいっぱいです。</p>

<p>今後再び退職するときのメモになるかと思うので、やったことを書いておきます。</p>

<ul class="table-of-contents">
    <li><a href="#退職時したときの状況">退職時したときの状況</a></li>
    <li><a href="#お金の話">お金の話</a><ul>
            <li><a href="#住民税">住民税</a></li>
            <li><a href="#健康保険">健康保険</a></li>
            <li><a href="#年金">年金</a></li>
            <li><a href="#ハローワークへ行く">ハローワークへ行く</a></li>
            <li><a href="#その他">その他</a></li>
        </ul>
    </li>
</ul>

<h1 id="退職時したときの状況">退職時したときの状況</h1>

<p>退職したときの状況は以下の通り。</p>

<ul>
<li>退職した日は2017年6月30日</li>
<li>自己都合で退職</li>
<li>転職活動中、9月ぐらいから働きたい</li>
<li>扶養家族はいない。働いているパートナーがいる。</li>
<li>年収は500万くらい</li>
</ul>


<h1 id="お金の話">お金の話</h1>

<p>退職しても税金やら年金やらの支払いは当然発生しちゃいます。<br/>
予定として2ヶ月程度、無職ライフを楽しむつもりなのですが、その間の税金を節約できないかといろいろ調べていました。</p>

<p>住民税は無理そうなのですが、健康保険、年金はパートナーの方が働いているのであれば、扶養に入る、というのが一番お得な選択肢になるかと思います。</p>

<p>私も奥さんが働いているので、扶養に入るのを狙っていました。<br/>
手続きは奥さんの会社で行う必要があるので、お願いします！と言っていたのですが、奥さんが会社の上司に確認したところ、<span style="font-size: 200%"><span style="color: #ff0000">そんな旦那とは別れなさい</span></span>、と一蹴されてしまったみたいです。</p>

<p>世間は厳しいなぁと感じている今日このごろです。　　</p>

<p>また、扶養に入るのにはいろいろな手続きが必要で、時間が結構かかるみたいなので、それを狙う方は在職中に、パートナーの方にいろいろと確認してもらったほうがいいみたいです。</p>

<p>今後の教訓としたいです。</p>

<p>以降は、扶養に入れなかったわたしが行った各種手続きになります。</p>

<h2 id="住民税">住民税</h2>

<p>住民税は毎年6月から翌年5月までが一年分に相当する。<br/>
自分の場合、6月末に辞めたので、7月から、翌年5月分までは、会社の給与から引き落とされるのではなく、個別に支払う必要がある。</p>

<p>退職時に、個別で支払う場合どうするか、ということを聞かれる。<br/>
選択肢としては、</p>

<ol>
<li>一括徴収：年度分をまるっと会社に渡して、会社が市町村に支払い</li>
<li>普通徴収：市町村から納付手続きの依頼がくるので、それに従って支払い</li>
</ol>


<p>とがある。</p>

<p>ちなみに給与から引き落とされる場合は、特別徴収というらしい。</p>

<p>住民税は、前年の給与をもとに計算されるので、一括徴収にした場合、どれくらい必要になるのか、ということを調べることができる。 <br/>
自分の場合だと、人事の方が教えてくれて、24,6400円ということがわかった。</p>

<p>先行きが怖かったので、普通徴収でお願いします、とした。<br/>
 普通徴収の場合、年４回、市町村から住民税の支払いの依頼がくるみたい。</p>

<p>なので、市役所にいって手続き等はとくに発生せずに、納付書が来るのを待つのみです。</p>

<h2 id="健康保険">健康保険</h2>

<p>これがないと、歯医者にも満足にいけない。</p>

<p>とりえた選択肢としては以下の通り</p>

<ol>
<li><p>前職の健康保険を任意継続
会社が負担してた保険料分を払うことになるみたいなので、毎月健康保険として給与から引かれていた額の倍の金額を払わねばいけないみたい。
なのでおすすめしない、というとそうでもなく、国民保険もかなり高いみたいなので、選択肢としてはありみたい。参考サイトのモデルケースでは、年収が430万超えるとか、扶養がたくさんいると、任意継続のほうが国民保険よりもお得っていう試算がでている。</p></li>
<li><p>パートナーの扶養に入る
加入条件を満たせば、一番いいかも。
収入の条件に130万とあるが、これは前年ではなく、申請した以降の想定の金額が130万という意味みたい。
今は無職になったので収入の見込みがないということで扶養申請はできる。
が、タイトルの出落ち通り、この選択肢はなくなってしまった。</p></li>
<li><p>国民保険に加入する
結局、市役所に行って国民保険に加入することにした。<br/>
市役所に確認したところ、次々の保険料は14000円ぐらいだった。</p></li>
</ol>


<p>市町村によって、国民保険の金額は恐ろしいほど異なるみたいなので、確認はしたほうがよさそう。</p>

<p>扶養に入るせよ、国民保険に加入するにせよ、組合の健康保険を脱退しましたという脱退証明書の提出が求められる可能性があるので、あらかじめ用意しておくといいかもしれない。<br/>
自分の場合は、加入している組合のWebサイトから申請ができた。</p>

<h2 id="年金">年金</h2>

<p>これも選択肢としては、扶養に入るか、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%B9%F1%CC%B1%C7%AF%B6%E2">国民年金</a>に入るかのどちらかしかない。<br/>
奥さんの扶養に入れないので、市役所にいって<a class="keyword" href="http://d.hatena.ne.jp/keyword/%B9%F1%CC%B1%C7%AF%B6%E2">国民年金</a>加入の手続きを行った。月々16000円ぐらい。</p>

<h2 id="ハローワークへ行く"><a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%CF%A5%ED%A1%BC%A5%EF%A1%BC%A5%AF">ハローワーク</a>へ行く</h2>

<p>これがまだ確認できてないです。 <br/>
<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%CF%A5%ED%A1%BC%A5%EF%A1%BC%A5%AF">ハローワーク</a>いって<a class="keyword" href="http://d.hatena.ne.jp/keyword/%B8%DB%CD%D1%CA%DD%B8%B1">雇用保険</a>申請の手続きをしておくと、再就職時にお祝い金がもらえるそうです。<br/>
ただ、失業保険ベースのお金みたいです。<br/>
ということは、自己都合で会社を辞めた場合、3ヶ月経過しないと失業手当はでないので、自分みたいに2ヶ月程度辞めるといった場合は、受給要件を満たしていないかもしれません。</p>

<p>確認が出来しだい、更新したいと思います。</p>

<h2 id="その他">その他</h2>

<p>他にも年度末の<a class="keyword" href="http://d.hatena.ne.jp/keyword/%BD%EA%C6%C0%C0%C7">所得税</a>に気をつけろ！とかあるかと思いますが、2ヶ月には働いているつもりなので、今回は対象外にしました。 <br/>
<span style="font-size: 200%"><span style="color: #ff0000">2ヶ月後、働いていますよね、、、</span></span></p>

-----
--------
AUTHOR: konoemario
TITLE: コードと奮闘した記録
BASENAME: 2017/07/05/120129
STATUS: Draft
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 07/05/2017 12:01:29
-----
BODY:
<h1>前回の続き</h1>

<p>今回は、リク<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A8%A5%B9">エス</a>トしたURLの内容に応じて、ブラウザ側の表示を変えます。</p>

<h2>server.jsの修正</h2>

<p><b><span style="font-size: 120%">server.js(前回の状態)</span></b></p>

<div style="background: #000000;">
<pre>
<code class="prettyprint linenums" style={  font-size: 14px,line-height: 1.4,font-family: Menlo, Consolas, 'DejaVu Sans Mono', monospace;}>
var http = require("http");

var server = http.createServer();

server.on("request",function(req, res){
   console.log("リクエストがあったよ");
   
   //HTTPヘッダを編集する。
   res.writeHead(200,{'Content-Type':'text/html','charset':'UTF-8'});
   //サーバーにレスポンスを返す。
   res.end("&lt;h1&gt;おはんきー！&lt;/h1&gt;");
});

</code>
</pre>
</div>


<p>上記の状態を、以下のように修正しました。</p>

<p><b><span style="font-size: 120%">server.js(修正後)</span></b></p>

<div style="background: #000000;">
<pre>
<code class="prettyprint linenums" style={  font-size: 14px,line-height: 1.4,font-family: Menlo, Consolas, 'DejaVu Sans Mono', monospace;}>
var http = require("http");

var server = http.createServer();

server.on("request",function(req, res){
   console.log("リクエストがあったよ");
   
   //HTTPヘッダを編集する。
   res.writeHead(200,{'Content-Type':'text/html','charset':'UTF-8'});
   //サーバーにレスポンスを返す。
   res.end("&lt;h1&gt;おはんきー！&lt;/h1&gt;");
});

</code>
</pre>
</div>




<div style="font-size: 12px;background: #e6e6e6;line-height: 1.4;font-family: Menlo, Consolas, 'DejaVu Sans Mono',monospace;">
<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synIdentifier">var</span> http = require(<span class="synConstant">&quot;http&quot;</span>);

<span class="synIdentifier">var</span> server = http.createServer();

server.on(<span class="synConstant">&quot;request&quot;</span>,<span class="synIdentifier">function</span>(req, res)<span class="synIdentifier">{</span>
   console.log(<span class="synConstant">&quot;リクエストがあったよ&quot;</span>);
   
   <span class="synComment">//HTTPヘッダを編集する。</span>
   res.writeHead(200,<span class="synIdentifier">{</span><span class="synConstant">'Content-Type'</span>:<span class="synConstant">'text/html'</span>,<span class="synConstant">'charset'</span>:<span class="synConstant">'UTF-8'</span><span class="synIdentifier">}</span>);
   <span class="synComment">//サーバーにレスポンスを返す。</span>
   res.end(<span class="synConstant">&quot;&amp;lt;h1&amp;gt;おはんきー！&amp;lt;/h1&amp;gt;&quot;</span>);
<span class="synIdentifier">}</span>);
</pre>
</div>




<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synIdentifier">var</span> http = require(<span class="synConstant">&quot;http&quot;</span>);

<span class="synIdentifier">var</span> server = http.createServer();

server.on(<span class="synConstant">&quot;request&quot;</span>,<span class="synIdentifier">function</span>(req, res)<span class="synIdentifier">{</span>
   console.log(<span class="synConstant">&quot;リクエストがあったよ&quot;</span>);
   
   <span class="synComment">//HTTPヘッダを編集する。</span>
   res.writeHead(200,<span class="synIdentifier">{</span><span class="synConstant">'Content-Type'</span>:<span class="synConstant">'text/html'</span>,<span class="synConstant">'charset'</span>:<span class="synConstant">'UTF-8'</span><span class="synIdentifier">}</span>);
   <span class="synComment">//サーバーにレスポンスを返す。</span>
   res.end(<span class="synConstant">&quot;&amp;lt;h1&amp;gt;おはんきー！&amp;lt;/h1&amp;gt;&quot;</span>);
<span class="synIdentifier">}</span>);
</pre>


-----
--------
AUTHOR: konoemario
TITLE: Node.jsを使って、簡単なWebアプリケーションをつくる(1)
BASENAME: 2017/07/04/221335
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 07/04/2017 22:13:35
CATEGORY: Node.js
CATEGORY: プログラム
IMAGE: https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170704/20170704220013.jpg
-----
BODY:
<h1 id="日記">日記</h1>

<p>職業欄に「無職」と書くのはなかなか精神的にくるものがある。</p>

<h2 id="Nodejsとは">Node.jsとは？</h2>

<p>サーバ側で使用できる<a class="keyword" href="http://d.hatena.ne.jp/keyword/javascript">javascript</a>というぐらいの認識しかありません。<br/>
今回使用する目的としては、「Socket.IO」を使ってみたかった、というそれだけの理由になります。</p>

<h2 id="今回作成するもの">今回作成するもの</h2>

<p>定番のチャットアプリを作成してみたいと思います。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170704/20170704220013.jpg" alt="f:id:konoemario:20170704220013j:plain:w500" title="f:id:konoemario:20170704220013j:plain:w500" class="hatena-fotolife" style="width:500px" itemprop="image"></span></p>

<p>参考させていただいた（むしろそのまま）は以下の通りです。
参考記事のほうが圧倒的にわかりやすく、正確です。なのでこの記事は自分の作業メモみたいな立ち位置になりますので、間違い等ご容赦ください。また、ご指摘いただければ幸いです。</p>

<p><a href="http://libro.tuyano.com/index3?id=1126003">Node.js&#x306E;&#x30B9;&#x30AF;&#x30EA;&#x30D7;&#x30C8;&#x306E;&#x57FA;&#x672C;&#x3092;&#x899A;&#x3048;&#x3088;&#x3046;(1/5):&#x30D3;&#x30AE;&#x30CA;&#x30FC;&#x306E;&#x305F;&#x3081;&#x306E; Node.js&#x30D7;&#x30ED;&#x30B0;&#x30E9;&#x30DF;&#x30F3;&#x30B0;&#x5165;&#x9580;</a></p>

<p><a href="https://www.udemy.com/nodejs-y/learn/v4/overview">&#x521D;&#x5FC3;&#x8005;&#x5411;&#x3051;Node.js&#x57FA;&#x790E;&#x8B1B;&#x5EA7; | Udemy</a></p>

<p><a href="https://www.udemy.com/crear-una-aplicacion-web-de-chat-con-nodejs-y-socketio/learn/v4/overview">Crear una aplicaci&oacute;n web de Chat con NodeJS y SocketIO | Udemy</a></p>

<p>流れとしましては、</p>

<ol>
<li>Node.jsでWebサーバーを立てて、リク<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A8%A5%B9">エス</a>ト/レスポンス処理をやってみる</li>
<li><a class="keyword" href="http://d.hatena.ne.jp/keyword/Django">Django</a>でいうURLディスパッチャみたいなものを用意して、リク<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A8%A5%B9">エス</a>トに応じてレスポンスをかえてみる</li>
<li>Node.jsの<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D5%A5%EC%A1%BC%A5%E0%A5%EF%A1%BC%A5%AF">フレームワーク</a>、Expressを少しさわってみる</li>
<li>Socket.IOを使ってチャットアプリケーションをつくってみる</li>
</ol>


<p>を予定しています。</p>

<p>上記が完了しだい、目的であるラズパイのラジコンのコントローラーとしてSocket.IOを使ってみたいと思います。</p>

<p><br/></p>

<ul class="table-of-contents">
    <li><a href="#日記">日記</a><ul>
            <li><a href="#Nodejsとは">Node.jsとは？</a></li>
            <li><a href="#今回作成するもの">今回作成するもの</a><ul>
                    <li><a href="#インストール">インストール</a></li>
                    <li><a href="#プロジェクトの作成">プロジェクトの作成</a></li>
                    <li><a href="#serverjsの作成">server.jsの作成</a></li>
                    <li><a href="#レスポンスを返す">レスポンスを返す</a></li>
                </ul>
            </li>
        </ul>
    </li>
    <li><a href="#次回">次回</a></li>
</ul>

<p><br/></p>

<h3 id="インストール">インス<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C8%A1%BC">トー</a>ル</h3>

<p>推奨版を公式よりダウンロードしてきます。  <br/>
<a href="https://nodejs.org/ja/">Node.js</a></p>

<p><b>使用したバージョン</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>masao<span class="synConstant">-3</span>:DesignPattern konoe_mario$ node <span class="synSpecial">-v</span>
v6.11.0
</pre>


<p><br/></p>

<h3 id="プロジェクトの作成">プロジェクトの作成</h3>

<p>直近で<a class="keyword" href="http://d.hatena.ne.jp/keyword/Python">Python</a>のWebフレームワークである<a class="keyword" href="http://d.hatena.ne.jp/keyword/Django">Django</a>もそうでしたが、Node.jsでもプロジェクトというアプリケーションを管理する考え方があるみたいです。</p>

<p>インス<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C8%A1%BC">トー</a>ルが終わったら、ターミナルで以下のコマンドを打ちます。<br/>
ここでは、任意の<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C7%A5%A3%A5%EC%A5%AF%A5%C8">ディレクト</a>リ「SampleProject」を作成して、その<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C7%A5%A3%A5%EC%A5%AF%A5%C8">ディレクト</a>リに移動して実行しています。</p>

<p><b>プロジェクトの作成</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>masao<span class="synConstant">-3</span>:SampleProject konoe_mario$ npm init
</pre>


<p>「npm init」を入力すると、プロジェクトの初期設定を行う質問がいろいろとでてきます。<br/>
ここでは、プロジェクトの名前である「name」と、Webアプリケーションのエントリーポイントになる、「main」の設定だけ、ちゃんと行い、後は適当にしちゃいました。</p>

<p><b>プロジェクトの設定</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>name: <span class="synPreProc">(</span><span class="synSpecial">SampleProject</span><span class="synPreProc">)</span> nodeapp
version: <span class="synPreProc">(</span><span class="synSpecial">1.0.0</span><span class="synPreProc">)</span> 
description: practice
entry point: <span class="synPreProc">(</span><span class="synSpecial">index.js</span><span class="synPreProc">)</span> server.js
<span class="synStatement">test</span> <span class="synStatement">command</span>: 
git repository: 
keywords: 
author: tohu
license: <span class="synPreProc">(</span><span class="synSpecial">ISC</span><span class="synPreProc">)</span> 
About to write to /Users/konoe_mario/WebstormProjects/SampleProject/package.json:

<span class="synSpecial">{</span>
  <span class="synStatement">&quot;</span><span class="synConstant">name</span><span class="synStatement">&quot;</span>: <span class="synStatement">&quot;</span><span class="synConstant">nodeapp</span><span class="synStatement">&quot;</span>,
  <span class="synStatement">&quot;</span><span class="synConstant">version</span><span class="synStatement">&quot;</span>: <span class="synStatement">&quot;</span><span class="synConstant">1.0.0</span><span class="synStatement">&quot;</span>,
  <span class="synStatement">&quot;</span><span class="synConstant">description</span><span class="synStatement">&quot;</span>: <span class="synStatement">&quot;</span><span class="synConstant">practice</span><span class="synStatement">&quot;</span>,
  <span class="synStatement">&quot;</span><span class="synConstant">main</span><span class="synStatement">&quot;</span>: <span class="synStatement">&quot;</span><span class="synConstant">server.js</span><span class="synStatement">&quot;</span>,
  <span class="synStatement">&quot;</span><span class="synConstant">scripts</span><span class="synStatement">&quot;</span>: <span class="synSpecial">{</span>
    <span class="synStatement">&quot;</span><span class="synConstant">test</span><span class="synStatement">&quot;</span>: <span class="synStatement">&quot;</span><span class="synConstant">echo </span><span class="synSpecial">\&quot;</span><span class="synConstant">Error: no test specified</span><span class="synSpecial">\&quot;</span><span class="synConstant"> &amp;&amp; exit 1</span><span class="synStatement">&quot;</span>
  <span class="synSpecial">}</span>,
  <span class="synStatement">&quot;</span><span class="synConstant">author</span><span class="synStatement">&quot;</span>: <span class="synStatement">&quot;</span><span class="synConstant">tohu</span><span class="synStatement">&quot;</span>,
  <span class="synStatement">&quot;</span><span class="synConstant">license</span><span class="synStatement">&quot;</span>: <span class="synStatement">&quot;</span><span class="synConstant">ISC</span><span class="synStatement">&quot;</span>
<span class="synSpecial">}</span>


Is this ok? <span class="synPreProc">(</span><span class="synSpecial">yes</span><span class="synPreProc">)</span> 
</pre>


<p>ちなみに「npm」とはNode.jsのパッケージマネジャーで、後ほどNode.jsの外部モジュールをインス<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C8%A1%BC">トー</a>ルするときに使ったりします。</p>

<p>プロジェクトが作成し終わると、以下のように「package.<a class="keyword" href="http://d.hatena.ne.jp/keyword/json">json</a>」のみが作成された状態になるかと思います。<br/>
package.<a class="keyword" href="http://d.hatena.ne.jp/keyword/json">json</a>には<a class="keyword" href="http://d.hatena.ne.jp/keyword/json">json</a>形式でさきほどターミナルから入力した内容が設定されています。</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>masao<span class="synConstant">-3</span>:SampleProject konoe_mario$ tree
.
└── package.json
</pre>


<p><br/></p>

<h3 id="serverjsの作成">server.jsの作成</h3>

<p>まず、プロジェクトの設定で入力した、エントリーポイントとなる「server.js」を新規で作成します。<br/>
内容は以下の通りです。</p>

<p><b>server.js</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synIdentifier">var</span> http = require(<span class="synConstant">&quot;http&quot;</span>);

<span class="synIdentifier">var</span> server = http.createServer();


server.on(<span class="synConstant">&quot;request&quot;</span>,<span class="synIdentifier">function</span>(req, res)<span class="synIdentifier">{</span>
   console.log(<span class="synConstant">&quot;リクエストがあったよ&quot;</span>);
<span class="synIdentifier">}</span>);

<span class="synComment">//受け付けるポート番号</span>
server.listen(6677);
</pre>


<p>流れとしては、</p>

<ol>
<li>http.createServerでWebサーバオブジェクトを作成します。</li>
<li><p>server.onでWebサーバーオブジェクトのイベントが発生した場合の処理を書きます。<br/>
ここでは、クライアントからリク<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A8%A5%B9">エス</a>ト処理はあった場合に、コンソールにメッセージを表示しているだけです。</p></li>
<li><p>最後に、待ち受けるポート番号を記載しています。</p></li>
</ol>


<p>書き方によっては、以下のようにすることもできるみたいです。</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synIdentifier">var</span> server = http.createServer(<span class="synIdentifier">function</span> (req,res) <span class="synIdentifier">{</span>
    console.log(<span class="synConstant">&quot;リクエストがあったよ&quot;</span>);
<span class="synIdentifier">}</span>).listen(6677);
</pre>


<p>これは、createServerメソッドの第一引数に書かれた関数はrequestイベントに登録されるというNode.jsの仕様ということと、.listenは<a class="keyword" href="http://d.hatena.ne.jp/keyword/javascript">javascript</a>(jQurery?)のメソッドチェーンという言語仕様の話になります。</p>

<p>server.jsを作成したら、ターミナルで、以下コマンドを叩きます。</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>masao<span class="synConstant">-3</span>:SampleProject2 konoe_mario$ node server.js 
</pre>


<p>その状態で、ブラウザから「<a href="http://localhost:6677">http://localhost:6677</a>」にアクセスしてみます。</p>

<p>ブラウザ側には何も変化は起きないと思いますが、ターミナル上には、console.logで指定した文字列が出力されるかと思います。</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>masao<span class="synConstant">-3</span>:SampleProject2 konoe_mario$ node server.js 
リクエストがあったよ
</pre>


<p><br/></p>

<h3 id="レスポンスを返す">レスポンスを返す</h3>

<p>さきほど、「<a href="http://localhost:6677">http://localhost:6677</a>」にアクセスしてもブラウザには何も変化がありませんでした。
これは、ブラウザからWebサーバーにリク<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A8%A5%B9">エス</a>ト処理は行っているのですが、レスポンスがないため、ブラウザが待っているよう状態になります。</p>

<p>なので、次にWebサーバーからレスポンスを返すようにします。</p>

<p><b>server.js</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synIdentifier">var</span> http = require(<span class="synConstant">&quot;http&quot;</span>);

<span class="synIdentifier">var</span> server = http.createServer();

server.on(<span class="synConstant">&quot;request&quot;</span>,<span class="synIdentifier">function</span>(req, res)<span class="synIdentifier">{</span>
   console.log(<span class="synConstant">&quot;リクエストがあったよ&quot;</span>);
   <span class="synComment">//サーバーにレスポンスを返す。</span>
   res.end(<span class="synConstant">&quot;&lt;h1&gt;おはんきー！&lt;/h1&gt;&quot;</span>);
<span class="synIdentifier">}</span>);

<span class="synComment">//受け付けるポート番号</span>
server.listen(6677);
</pre>


<p>一行、「res.end()」を追加しています。<br/>
これを行うことで、サーバ側の処理はもう終わったよ！といってクライアントにメッセージを送信します。<br/>
このタイミングでコネクションが切れるのかな、とかそういった事に関しては自分自身まったくわかってないです。</p>

<p>この状態で、ブラウザから「<a href="http://localhost:6677">http://localhost:6677</a>」にアクセスします。</p>

<p>すると、以下のように文字化けした状態で表示されるかと思います。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170704/20170704220106.png" alt="f:id:konoemario:20170704220106p:plain:w500" title="f:id:konoemario:20170704220106p:plain:w500" class="hatena-fotolife" style="width:500px" itemprop="image"></span></p>

<p>ブラウザ側に<a class="keyword" href="http://d.hatena.ne.jp/keyword/%CA%B8%BB%FA%A5%B3%A1%BC%A5%C9">文字コード</a>を教えてあげる必要があります。
なので、htmlファイルのheadタグにcharsetの指定を追加します。</p>

<p><b>server.js</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synIdentifier">var</span> http = require(<span class="synConstant">&quot;http&quot;</span>);

<span class="synIdentifier">var</span> server = http.createServer();

server.on(<span class="synConstant">&quot;request&quot;</span>,<span class="synIdentifier">function</span>(req, res)<span class="synIdentifier">{</span>
   console.log(<span class="synConstant">&quot;リクエストがあったよ&quot;</span>);
   
   res.write(<span class="synConstant">'&lt;head&gt;&lt;meta charset=&quot;UTF-8&quot;&gt;&lt;/head&gt;'</span>);
   <span class="synComment">//サーバーにレスポンスを返す。</span>
   res.end(<span class="synConstant">&quot;&lt;h1&gt;おはんきー！&lt;/h1&gt;&quot;</span>);
<span class="synIdentifier">}</span>);
&lt;br/&gt;

<span class="synComment">//受け付けるポート番号</span>
server.listen(6677);
</pre>


<p>追加した「res.write()」ですが、前述の「res.end()」とは異なり、送信するデータあれば何回でも追記できるみたいです。<br/>
こうすることで、無事、表示されたかと思います。<br/>
<br/></p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170704/20170704220218.png" alt="f:id:konoemario:20170704220218p:plain:w500" title="f:id:konoemario:20170704220218p:plain:w500" class="hatena-fotolife" style="width:500px" itemprop="image"></span></p>

<p>ちなみに、最初はHTTPヘッダの<a class="keyword" href="http://d.hatena.ne.jp/keyword/%CA%B8%BB%FA%A5%B3%A1%BC%A5%C9">文字コード</a>を<a class="keyword" href="http://d.hatena.ne.jp/keyword/utf-8">utf-8</a>にしなきゃいけないんだ！と思い、以下のようにヘッダファイルを編集する「writeHead()」でcharsetの設定を行っていたのですが、まったく変わらずに時間をとっちゃいました。</p>

<p><b>server.js</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synIdentifier">var</span> http = require(<span class="synConstant">&quot;http&quot;</span>);

<span class="synIdentifier">var</span> server = http.createServer();

server.on(<span class="synConstant">&quot;request&quot;</span>,<span class="synIdentifier">function</span>(req, res)<span class="synIdentifier">{</span>
   console.log(<span class="synConstant">&quot;リクエストがあったよ&quot;</span>);
   
   <span class="synComment">//HTTPヘッダを編集する。</span>
   res.writeHead(200,<span class="synIdentifier">{</span><span class="synConstant">'Content-Type'</span>:<span class="synConstant">'text/html'</span>,<span class="synConstant">'charset'</span>:<span class="synConstant">'UTF-8'</span><span class="synIdentifier">}</span>);
   <span class="synComment">//サーバーにレスポンスを返す。</span>
   res.end(<span class="synConstant">&quot;&lt;h1&gt;おはんきー！&lt;/h1&gt;&quot;</span>);
<span class="synIdentifier">}</span>);
</pre>


<p>ちなみに、ブラウザは<a class="keyword" href="http://d.hatena.ne.jp/keyword/Chrome">Chrome</a>を使っているのですが、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C4%A1%BC%A5%EB%A5%D0%A1%BC">ツールバー</a>の表示->開発/管理-><a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C7%A5%D9%A5%ED%A5%C3%A5%D1">デベロッパ</a>ーツールより、HTTPレスポンスヘッダの内容やリク<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A8%A5%B9">エス</a>トヘッダの内容を確認することができます。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170704/20170704220800.png" alt="f:id:konoemario:20170704220800p:plain:w500" title="f:id:konoemario:20170704220800p:plain:w500" class="hatena-fotolife" style="width:500px" itemprop="image"></span></p>

<p>また、いまさらですが、Webサーバーオブジェクトのメソッドとか、イベントは素敵な公式？ドキュメントがあるので<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A4%B3%A4%C1">こち</a>らを参照しています。</p>

<p><a href="http://nodejs.jp/nodejs.org_ja/api/http.html#http_response_write_chunk_encoding">HTTP Node.js v0.11.11 Manual &amp; Documentation</a></p>

<p>こんなペースで大丈夫か、と不安になるのですが今日はここまでにしたいと思います。</p>

<h1 id="次回">次回</h1>

<p><iframe src="https://hatenablog-parts.com/embed?url=http%3A%2F%2Ftohutokonsome.hatenablog.com%2Fentry%2F2017%2F07%2F05%2F111154" title="Node.jsを使って、簡単なWebアプリケーションをつくる(2) - 豆腐とコンソメ" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://tohutokonsome.hatenablog.com/entry/2017/07/05/111154">tohutokonsome.hatenablog.com</a></cite></p>

-----
--------
AUTHOR: konoemario
TITLE: Node.jsの非同期処理について、いまいち理解できていない
BASENAME: 2017/07/03/004133
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 07/03/2017 00:41:33
CATEGORY: プログラム
CATEGORY: Node.js
-----
BODY:
<h1>日記</h1>

<p>退職のため、連日送別会を開催いただき、ブログをさぼっていました。  <br/>
転職活動はあいかわらず、お祈りの嵐で、目の前が真っ暗なのですが元気に生きています。</p>

<p>何も書かないとまずい！ということで解決していない問題を一旦記載します。</p>

<h1>Node.jsの非同期処理についていまいち理解できていない</h1>

<p>本題です。<br/>
ラズパイのラジコンについて、今はターミナルからコマンドで操作しているのですが、将来的に<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B9%A5%DE%A5%DB">スマホ</a>からも操作できることを想定して、ブラウザから操作できないかな、と考え始めました。<br/>
socket通信やらなんやら調べていると、「Node.js」に行き着いたので、Udemyの入門編(無料)を初めて見ました。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fwww.udemy.com%2Fnodejs-y%2Flearn%2Fv4%2Foverview" title="初心者向けNode.js基礎講座 - Udemy" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://www.udemy.com/nodejs-y/learn/v4/overview">www.udemy.com</a></cite></p>

<p>ちょっと話はそれますが、映像よりも本のほうが自分のペースで進められるし、見返せるから圧倒的に本のほうが好きでした。<br/>
ですが、実際の作業風景を見ると、<a class="keyword" href="http://d.hatena.ne.jp/keyword/IDE">IDE</a>の使い方だったり、そもそもパソコンのショートカットの機能だったり、本筋とは違うことかもしれませんが、いろいろと為になることが多いです。<br/>
反面、見返すのが面倒なので、ちょっと時間があいたりすると厳しいのですが、そこはブログに学習記事をアップすることでカバーすることができそうです。</p>

<p>話を元に戻します。</p>

<p>前述の入門編を進めていて、非同期の部分の話が前半にあるのですが、いまいち理解できませんでした。</p>

<p>ちょっと処理を変えていますが、以下の時間がかかる処理を想定した、関数たちを３つ用意します。<br/>
関数の中の「writeFIle(&lsquo;ファイル名&rsquo;,&lsquo;書き込み回数&rsquo;)」は、「ファイル名」に指定したファイルに「書き込み回数」分、書き込み処理を行う自分で書いた関数です。</p>

<p><b>関数たち</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synComment">//重い処理1</span>
<span class="synIdentifier">var</span> func_one = <span class="synIdentifier">function</span>(callback)<span class="synIdentifier">{</span>
    console.log(<span class="synConstant">&quot;func_one start&quot;</span>);

    writeFile(<span class="synConstant">&quot;./1.json&quot;</span>,1000);

    <span class="synStatement">if</span>(callback)<span class="synIdentifier">{</span>
        callback();
    <span class="synIdentifier">}</span>
    console.log(<span class="synConstant">&quot;func_one end&quot;</span>);
<span class="synIdentifier">}</span>;

<span class="synComment">//重い処理2</span>
<span class="synIdentifier">var</span> func_two = <span class="synIdentifier">function</span>(callback)<span class="synIdentifier">{</span>
    console.log(<span class="synConstant">&quot;function_two start&quot;</span>);

    writeFile(<span class="synConstant">&quot;./2.json&quot;</span>,1000);

    <span class="synStatement">if</span>(callback)<span class="synIdentifier">{</span>
        callback();
    <span class="synIdentifier">}</span>
    console.log(<span class="synConstant">&quot;function_two end&quot;</span>);
<span class="synIdentifier">}</span>;
<span class="synComment">//重い処理3</span>
<span class="synIdentifier">var</span> func_three = <span class="synIdentifier">function</span>(callback)<span class="synIdentifier">{</span>
    console.log(<span class="synConstant">&quot;function three start&quot;</span>);

    writeFile(<span class="synConstant">&quot;./3.json&quot;</span>,1000);

    <span class="synStatement">if</span>(callback)<span class="synIdentifier">{</span>
        callback();
    <span class="synIdentifier">}</span>
    console.log(<span class="synConstant">&quot;function three  end&quot;</span>);
<span class="synIdentifier">}</span>;
</pre>


<p>次に、上記関数を呼ぶ、処理は以下の通りです。</p>

<p><b>メイン処理</b></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synIdentifier">var</span> startTime = <span class="synStatement">new</span> <span class="synType">Date</span>().getTime();

func_one();
func_two();
func_three();

<span class="synIdentifier">var</span> endTime = <span class="synStatement">new</span> <span class="synType">Date</span>().getTime();

console.log(<span class="synConstant">&quot;処理時間 = &quot;</span> + (endTime - startTime));
</pre>


<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/%A4%B3%A4%C1">こち</a>らの処理結果は、特になんの疑問もなく、func_oneから順に処理を行っていくので結果は以下の通りです。</p>

<pre class="code" data-lang="" data-unlink>func_one start
func_one end
function_two start
function_two end
function three start
function three  end
処理時間 = 92</pre>


<p>次に、メイン処理を以下のように非同期というやり方で書いてみる。</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synIdentifier">var</span> startTime = <span class="synStatement">new</span> <span class="synType">Date</span>().getTime();

<span class="synComment">//いわゆるcallback地獄</span>
func_one(<span class="synIdentifier">function</span>() <span class="synIdentifier">{</span>
    func_two(<span class="synIdentifier">function</span>()<span class="synIdentifier">{</span>
        func_three();
        <span class="synIdentifier">}</span>);
<span class="synIdentifier">}</span>);

<span class="synIdentifier">var</span> endTime = <span class="synStatement">new</span> <span class="synType">Date</span>().getTime();

console.log(<span class="synConstant">&quot;処理時間 = &quot;</span> + (endTime - startTime));
</pre>


<p>結果は以下の通り。<br/>
といっても、特に不思議なことなく、予想した結果になっている。</p>

<pre class="code" data-lang="" data-unlink>func_one start
function_two start
function three start
function three  end
function_two end
func_one end
処理時間 = 91</pre>


<p>いまいちわかってないのが、callbackを使うことで非同期を実現する、というところ。<br/>
上記の処理は非同期ではなく、普通の同期処理のような気がしています。</p>

<p>というのも、function_threeが終わってから、funciton_twoの関数に戻って、そこからfunction_oneに戻ってるので。</p>

<p>非同期処理というと、以下の関数で言えば、writeFileという適当な自作関数の結果を待たずして、callback関数を呼び出すイメージでした。</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synIdentifier">var</span> func_two = <span class="synIdentifier">function</span>(callback)<span class="synIdentifier">{</span>
    console.log(<span class="synConstant">&quot;function_two start&quot;</span>);

    writeFile(<span class="synConstant">&quot;./2.json&quot;</span>,10);

    <span class="synStatement">if</span>(callback)<span class="synIdentifier">{</span>
        callback();
    <span class="synIdentifier">}</span>
    console.log(<span class="synConstant">&quot;function_two end&quot;</span>);
<span class="synIdentifier">}</span>;
</pre>


<p>しかし、funciton_oneの結果を待たずして、callbackであるfunction_twoを呼び出しているという意味では、非同期が実現できるているのでしょうか。</p>

<p>何かいろいろと勘違いをしている気がします。</p>

-----
--------
AUTHOR: konoemario
TITLE: RaspBerryPiでラジコンをつくる(9)：軽量化問題を解消するためのたったひとつの冴えたやり方
BASENAME: 2017/06/20/103846
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 06/20/2017 10:38:46
CATEGORY: プログラム
CATEGORY: ラズパイ
CATEGORY: ラジコンシリーズ
IMAGE: https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170619/20170619215609.gif
-----
BODY:
<p>久々のラジコン記事です。<br/>
<a class="keyword" href="http://d.hatena.ne.jp/keyword/Django">Django</a>やら転職活動やらで書けてなかったのですが、ちょ<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A4%B3%A4%C1">こち</a>ょこやってはいたので、成果を書きます！</p>

<h1>前回のつづき</h1>

<p><iframe src="https://hatenablog-parts.com/embed?url=http%3A%2F%2Ftohutokonsome.hatenablog.com%2Fentry%2F2017%2F05%2F16%2F215317" title="RaspBerryPiでラジコンをつくる(8)：コントローラをつくる - 豆腐とコンソメ" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://tohutokonsome.hatenablog.com/entry/2017/05/16/215317">tohutokonsome.hatenablog.com</a></cite></p>

<p>とりあえずですが、<span style="font-size: 150%"><span style="color: #ff0000">当初の目標は達成できました！</span></span></p>

<blockquote cite="http://tohutokonsome.hatenablog.com/entry/2017/02/26/005009" data-uuid="8599973812271871799"><p>その過去の代償を払うためには私自身がラジコンを作る必要があるのではないのでしょうか。 そして完成したラジコンは今は亡き、お婆ちゃんに捧げます。</p><cite><a href="http://tohutokonsome.hatenablog.com/entry/2017/02/26/005009">ラズパイ（RaspberyyPi3)を買ってきた - 豆腐とコンソメ</a></cite></blockquote>


<p>3ヶ月前の記事を見返したのですが、目標であるラジコンをつくる、という部分は改善点はあるものの、以下のとおりのものができました。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170619/20170619215609.gif" alt="f:id:konoemario:20170619215609g:plain" title="f:id:konoemario:20170619215609g:plain" class="hatena-fotolife" itemprop="image"></span></p>

<p>これだけでもかなり嬉しいのですが、いざやってみると、カメラをつけたいとか、音楽も鳴らしたいとかいろいろでてきてしまうわけです。</p>

<p>しかし、ラジコンに最低限必要な部品を載せるだけで、以下の通りいっぱいいっぱいなのです。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170619/20170619215744.jpg" alt="f:id:konoemario:20170619215744j:plain:w500" title="f:id:konoemario:20170619215744j:plain:w500" class="hatena-fotolife" style="width:500px" itemprop="image"></span></p>

<p>軽量化にしても、ラズパイZeroをつかったり、バッテリーを小さなものを買ったりとしていて、自身のできる範囲ではこれ以上はないように思えます。</p>

<p><br/>
ではどうするか。</p>

<p><br/></p>

<p><span style="color: #ff0000"><span style="font-size: 200%">車を大きくすればいいじゃないか。</span></span></p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170619/20170619220133.jpg" alt="f:id:konoemario:20170619220133j:plain:w500" title="f:id:konoemario:20170619220133j:plain:w500" class="hatena-fotolife" style="width:500px" itemprop="image"></span></p>

<p>ということで「レゴ (<a class="keyword" href="http://d.hatena.ne.jp/keyword/LEGO">LEGO</a>) テクニック <a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%E1%A5%EB%A5%BB%A5%C7%A5%B9%A1%A6%A5%D9%A5%F3%A5%C4">メルセデス・ベンツ</a> アロクス 」を買ってきました。</p>

<p>レゴショップで購入したのですが、子供たちが小さなパッケージを、ご両親にねだっている隣で、特大のパッケージを買うのはなんとも言えない優越感を覚えました。「これが大人ってやつだよ」というのを見せつけちゃいましたね。
ただ、奥さんから<span style="font-size: 150%"><span style="color: #ff0000">「お前、来月から無職じゃねえかよ！」</span></span>といろいろと罵倒されましたが、「結婚指輪はいらないので、レゴブロックを買ってください！と懇願することで、奥さんに買っていただけることになりました。</p>

<h1>組み立て</h1>

<p>勢いで買ってきたものの、こいつの大きさは半端ないです。
わかりにくい比較で、申し訳ないのですが前回のラジコンカーの箱と比べるとこんな感じです。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170619/20170619222512.jpg" alt="f:id:konoemario:20170619222512j:plain:w500" title="f:id:konoemario:20170619222512j:plain:w500" class="hatena-fotolife" style="width:500px" itemprop="image"></span></p>

<p>そして部品はこんな感じで、<br/>
<span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170619/20170619222721.jpg" alt="f:id:konoemario:20170619222721j:plain:w500" title="f:id:konoemario:20170619222721j:plain:w500" class="hatena-fotolife" style="width:500px" itemprop="image"></span></p>

<p>説明書もPCゲームの「<a class="keyword" href="http://d.hatena.ne.jp/keyword/Age%20of%20Empires">Age of Empires</a> II 」を買ったとき並の分厚さです。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170619/20170619222702.jpg" alt="f:id:konoemario:20170619222702j:plain:w500" title="f:id:konoemario:20170619222702j:plain:w500" class="hatena-fotolife" style="width:500px" itemprop="image"></span></p>

<p>これの組み立てなのですが、平日の仕事終わりに2時間組み立てては片付け、週末は集中というサイクルでやっていったのですが15時間くらいはかかった気がします。</p>

<p>以降は、完全に個人の思い出なのですが、日々の成長の様子になります。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170619/20170619223234.jpg" alt="f:id:konoemario:20170619223234j:plain:w500" title="f:id:konoemario:20170619223234j:plain:w500" class="hatena-fotolife" style="width:500px" itemprop="image"></span><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170619/20170619223246.jpg" alt="f:id:konoemario:20170619223246j:plain:w500" title="f:id:konoemario:20170619223246j:plain:w500" class="hatena-fotolife" style="width:500px" itemprop="image"></span><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170619/20170619223327.jpg" alt="f:id:konoemario:20170619223327j:plain:w500" title="f:id:konoemario:20170619223327j:plain:w500" class="hatena-fotolife" style="width:500px" itemprop="image"></span><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170619/20170619223422.jpg" alt="f:id:konoemario:20170619223422j:plain:w500" title="f:id:konoemario:20170619223422j:plain:w500" class="hatena-fotolife" style="width:500px" itemprop="image"></span><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170619/20170619223516.jpg" alt="f:id:konoemario:20170619223516j:plain:w500" title="f:id:konoemario:20170619223516j:plain:w500" class="hatena-fotolife" style="width:500px" itemprop="image"></span><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170619/20170619223609.jpg" alt="f:id:konoemario:20170619223609j:plain:w500" title="f:id:konoemario:20170619223609j:plain:w500" class="hatena-fotolife" style="width:500px" itemprop="image"></span><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170619/20170619223737.jpg" alt="f:id:konoemario:20170619223737j:plain:w500" title="f:id:konoemario:20170619223737j:plain:w500" class="hatena-fotolife" style="width:500px" itemprop="image"></span></p>

<p>７日目にしてようやく完成しましたが、前回のラジコンカーと比べるとかなり大きいです。</p>

<h1>解体する</h1>

<p>完成してビールを飲みながら１時間程度堪能したら、ある程度、<span style="font-size: 200%"><span style="color: #ff0000">解体しました。</span></span></p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170619/20170619224126.jpg" alt="f:id:konoemario:20170619224126j:plain:w500" title="f:id:konoemario:20170619224126j:plain:w500" class="hatena-fotolife" style="width:500px" itemprop="image"></span></p>

<p>前回も前々回も、作り終わったら解体する、ということを経験してきたのですが、今回はかなりつらい作業になりました。</p>

<p>なんで解体するの？っていう点ですが、このダンプカーは、走る、曲がるという機能について考慮はされているのですが、デフォルトの状態では、走ったり曲がったりはしません。<br/>
標準のモーターの機能では、ダンプカーの荷台を持ち上げる、ショベルカー部分を動かす等になります。</p>

<p>興味のある方は、以下の動画が参考になるかと思います。</p>

<p><iframe width="480" height="270" src="https://www.youtube.com/embed/ot8_nzBAXm8?feature=oembed" frameborder="0" allowfullscreen></iframe><cite class="hatena-citation"><a href="https://youtu.be/ot8_nzBAXm8">youtu.be</a></cite></p>

<p>ある程度<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D0%A5%E9">バラ</a>し終わったら、前回のラジコンカーと同様に、モーターやら<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B5%A1%BC%A5%DC%A5%E2%A1%BC%A5%BF">サーボモータ</a>ーやらをつけていきます。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170619/20170619225917.jpg" alt="f:id:konoemario:20170619225917j:plain:w500" title="f:id:konoemario:20170619225917j:plain:w500" class="hatena-fotolife" style="width:500px" itemprop="image"></span></p>

<p>以前はMモーターの中身を開けて、ジャンパー線をつけていたのですが、今回はモーターの付属のケーブルを切って、中の線にジャンパー線をつなぐというアプローチをとってみました。</p>

<p>XLモーターだけで3000円くらいするので、結構ドキドキしながら以下のように切っちゃいます。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170619/20170619225936.jpg" alt="f:id:konoemario:20170619225936j:plain:w500" title="f:id:konoemario:20170619225936j:plain:w500" class="hatena-fotolife" style="width:500px" itemprop="image"></span></p>

<p>電池ボックスと同じ要領で、以下のように、2本目と3本目を剥きます。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170619/20170619230042.jpg" alt="f:id:konoemario:20170619230042j:plain:w500" title="f:id:konoemario:20170619230042j:plain:w500" class="hatena-fotolife" style="width:500px" itemprop="image"></span></p>

<p>モータードライバー経由で動くことを確認をしました。
※電池ボックスも前回使用したものを使ってます。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170619/20170619230011.jpg" alt="f:id:konoemario:20170619230011j:plain:w500" title="f:id:konoemario:20170619230011j:plain:w500" class="hatena-fotolife" style="width:500px" itemprop="image"></span></p>

<p>最後にジャンパー線をくっつけてモーター完成です。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170619/20170619230045.jpg" alt="f:id:konoemario:20170619230045j:plain:w500" title="f:id:konoemario:20170619230045j:plain:w500" class="hatena-fotolife" style="width:500px" itemprop="image"></span></p>

<h1>とりあえず完成</h1>

<p>いろいろと雑ですが、こんな感じで動くものができました！
<span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170619/20170619231211.jpg" alt="f:id:konoemario:20170619231211j:plain:w500" title="f:id:konoemario:20170619231211j:plain:w500" class="hatena-fotolife" style="width:500px" itemprop="image"></span></p>

<p>荷台の部品たちはかなり適当に詰め込んでいますが、ラズパイzeroや小型ブレッドボード等一切気にしない状態でも、問題なく収納できます。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170619/20170619231215.jpg" alt="f:id:konoemario:20170619231215j:plain:w500" title="f:id:konoemario:20170619231215j:plain:w500" class="hatena-fotolife" style="width:500px" itemprop="image"></span></p>

<p>また、地味にカメラも購入したので適当につけました。<br/>
本当は、真ん中のシャベルカー部分だった回転する箇所に取り付けたいのですが、カメラモジュールのケーブルが短くって、いまのところつけられません。今度長いケーブルを買う予定です。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170619/20170619231218.jpg" alt="f:id:konoemario:20170619231218j:plain:w500" title="f:id:konoemario:20170619231218j:plain:w500" class="hatena-fotolife" style="width:500px" itemprop="image"></span></p>

<p>また、曲がるための<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B5%A1%BC%A5%DC%A5%E2%A1%BC%A5%BF">サーボモータ</a>ーも適当につけました。<br/>
ちょっとマイクロサーボだと車体が重いせいかタイヤの動きがよくないです。<br/>
もう一ランク上の<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B5%A1%BC%A5%DC%A5%E2%A1%BC%A5%BF">サーボモータ</a>ーを購入してみようかと思います。<br/>
<span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170619/20170619231312.jpg" alt="f:id:konoemario:20170619231312j:plain:w500" title="f:id:konoemario:20170619231312j:plain:w500" class="hatena-fotolife" style="width:500px" itemprop="image"></span></p>

<h1>動かす</h1>

<p>動かすとこんな感じです！</p>

<p><iframe width="480" height="270" src="https://www.youtube.com/embed/xefm29k8NFY?feature=oembed" frameborder="0" allowfullscreen></iframe><cite class="hatena-citation"><a href="https://youtu.be/xefm29k8NFY">youtu.be</a></cite></p>

<p>コントローラのUI部分と、ラジコンの見た目等、いろいろ改善点はありますが、ここまでこれてよかったです！</p>

<p>が、記事を見返して思ったのですが、<span style="font-size: 200%"><span style="color: #ff0000">このときと発想がかわっていない</span></span>ことに自分で驚きました。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170311/20170311000933.jpg" alt="f:id:konoemario:20170311000933j:plain:w500" title="f:id:konoemario:20170311000933j:plain:w500" class="hatena-fotolife" style="width:500px" itemprop="image"></span></p>

<p>以上。</p>

-----
--------
AUTHOR: konoemario
TITLE: スクラム講習に行ってきた
BASENAME: 2017/06/19/152724
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 06/19/2017 15:27:24
CATEGORY: プログラム
CATEGORY: 仕事
-----
BODY:
<h1>日記</h1>

<p>転職に苦戦しています。<br/>
元<a class="keyword" href="http://d.hatena.ne.jp/keyword/COBOLER">COBOLER</a>でも入れる、素敵な<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B9%A5%AF%A5%E9%A5%E0">スクラム</a>開発を採用している企業様はありませんでしょうか。</p>

<h1>本題</h1>

<p>先日、知人の方に誘われて、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B9%A5%AF%A5%E9%A5%E0">スクラム</a>の無料講習に行ってまいりました。</p>

<p><a href="https://training.odd-e.jp/seminars/attend_detail/48/course#seminar-tab">Odd-e Training</a></p>

<p><b>「ザ・<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A6%A5%A9%A1%BC%A5%BF%A1%BC%A5%D5%A5%A9%A1%BC%A5%EB">ウォーターフォール</a>」</b>みたいな職場なので流行りの<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A5%B8%A5%E3%A5%A4%A5%EB">アジャイル</a>？<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B9%A5%AF%A5%E9%A5%E0">スクラム</a>？、短期間でリリースしてくやつ？みたいな感覚で受講しました。</p>

<p>講習内容は自体は、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B9%A5%AF%A5%E9%A5%E0">スクラム</a>とは？から始まり、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B9%A5%AF%A5%E9%A5%E0">スクラム</a>開発を行う上での要素や全体の流れを学びました。</p>

<p>受講後は以下のような感想を受けました。</p>

<ul>
<li><a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B9%A5%AF%A5%E9%A5%E0">スクラム</a>開発、やってみたい！</li>
<li><a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B9%A5%AF%A5%E9%A5%E0">スクラム</a>開発導入にあたっての課題は結構ありそう</li>
<li><a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A6%A5%A9%A1%BC%A5%BF%A1%BC%A5%D5%A5%A9%A1%BC%A5%EB">ウォーターフォール</a> VS <a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A5%B8%A5%E3%A5%A4%A5%EB">アジャイル</a>(<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B9%A5%AF%A5%E9%A5%E0">スクラム</a>)みたいな図式はちょっと違うかも？</li>
</ul>


<p>ここでは、雑記となってしまいますが、印象に残ったこと・思ったことをメモがてら書いていこうと思います。</p>

<p><br/></p>

<h2><a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A5%B8%A5%E3%A5%A4%A5%EB">アジャイル</a>、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B9%A5%AF%A5%E9%A5%E0">スクラム</a>、その意味は？</h2>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/%A4%BD%A4%E2%A4%BD%A4%E2">そもそも</a><a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A5%B8%A5%E3%A5%A4%A5%EB">アジャイル</a>ってなんだっけ、ってことなんですが、これは</p>

<p><strong>よりよい開発をしていく状態</strong></p>

<p>を指すみたいです。<br/>
(肝心の部分なんですが、メモが汚くって少し間違っているかもしれない！)</p>

<p>ですので、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A5%B8%A5%E3%A5%A4%A5%EB">アジャイル</a>をやるみたいな表現は間違っていて、正確には<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A5%B8%A5%E3%A5%A4%A5%EB">アジャイル</a>を目指す、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A5%B8%A5%E3%A5%A4%A5%EB">アジャイル</a>になるみたいな表現が正しいみたいです。</p>

<p>知っている人には常識なのかもしれませんが、知らなかった私にとっては、衝撃でした。</p>

<p>一方、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B9%A5%AF%A5%E9%A5%E0">スクラム</a>ですが、これは</p>

<p><strong>現状を認識するための<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D5%A5%EC%A1%BC%A5%E0%A5%EF%A1%BC%A5%AF">フレームワーク</a></strong></p>

<p>を指します。</p>

<p>なので、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B9%A5%AF%A5%E9%A5%E0">スクラム</a>やると生産性や品質があがるとか、プロジェクトの炎上が防げるとかいろいろと思うことあったのですが、結果的にそうなるかも、というだけであって、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B9%A5%AF%A5%E9%A5%E0">スクラム</a>の目的はそこではないということです。 <br/>
あくまでも、現状を認識するため、の手法です。</p>

<p>これには、驚かされましたが、一方でなるほどなぁと考えさせられたりもしました。</p>

<p><br/></p>

<h2>私たちが抱える課題</h2>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B7%A5%B9%A5%C6%A5%E0%B3%AB%C8%AF">システム開発</a>の難しさって、目に見えない部分っていうのが非常に大きいと思います。</p>

<p>顧客が、本当に欲しかったものは動かしてみないとわからない。
開発に必要な工数も、現時点のチームメンバーの力量にもよるし、実装方法にもよるし、よくわからない。
性能要求も実装が全て終わってからでないと、本当に達成できるのかわからない。</p>

<p>といろいろとあるのですが、ようは<strong>やってみなきゃわからない</strong>んですね。</p>

<p>なので、現状を認識する、つまりやってみることによって、自分たちが今開発した場合にどれくらい工数がかかるのか、顧客が必要そうなものをいつ・どれくらいに実装できるのか、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A4%BD%A4%E2%A4%BD%A4%E2">そもそも</a>顧客がほしいものこれなのか、ということを把握していくわけです。</p>

<h2>で、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B9%A5%AF%A5%E9%A5%E0">スクラム</a>開発ってどうやるの</h2>

<p>すみません、これに至っては、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A4%B3%A4%C1">こち</a>らの講習の事前資料として掲載されている、下記pdfファイルを読んでいただいた方が正確です。<br/>
興味のある方はぜひご一読を。</p>

<p><a href="https://www.pastoraldog.com/THESCRUMPRIMER_ja.pdf">https://www.pastoraldog.com/THESCRUMPRIMER_ja.pdf</a></p>

<p><br/></p>

<h2>課題</h2>

<p>ここでは、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B9%A5%AF%A5%E9%A5%E0">スクラム</a>を導入するにあたって感じた課題を書きます。<br/>
<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A4%BD%A4%E2%A4%BD%A4%E2">そもそも</a><a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B9%A5%AF%A5%E9%A5%E0">スクラム</a>の理解が誤っていたらご指摘いただければと思います。</p>

<h3>チーム作り</h3>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B9%A5%AF%A5%E9%A5%E0">スクラム</a>の重要なエッセンスに、「透明性・検証・適合」というものがあります。 <br/>
透明性は、前述のとおり「現状を認識する」という意味での透明性になります。<br/>
一方、検証・適合というものは、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B9%A5%AF%A5%E9%A5%E0">スクラム</a>のスプリント(1〜4週間)を通して、都度振り返りを行い改善していこうぜ、という考え方です。<br/>
なので、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B9%A5%AF%A5%E9%A5%E0">スクラム</a>におけるチームというものは、ただの開発チームではなく<a class="keyword" href="http://d.hatena.ne.jp/keyword/RPG">RPG</a>でいうパーティーみたいなものじゃないかという印象を受けました。<br/>
チームとしても成長していきますし、メンバーそれぞれを成長を促していきます。</p>

<p>とはいえ、現状の<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B7%A5%B9%A5%C6%A5%E0%B3%AB%C8%AF">システム開発</a>の大半は、いろんなパードナー会社から人を集め、プロジェクトが終わったら<a class="keyword" href="http://d.hatena.ne.jp/keyword/%B2%F2%BB%B6">解散</a>し、残ったメンバーもジョブローテーションという名のもと、どこかに行ってしまいます。</p>

<p>短期間でチームをつくっていくという技術そのものは必要ですが、長期的にチームを組んでいくというのは業界構造そのものをかえないと難しかったりするのかなぁと思いました。</p>

<h3>プロダクトオーナーの存在</h3>

<p>私の理解では、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B9%A5%AF%A5%E9%A5%E0">スクラム</a>における「現状を認識する」対象には顧客も含まれると思っています。
実際に動く製品を触ってみて、顧客が欲しいものを顧客自身が認識していくからです。</p>

<p>前述のpdfファイルを見ますと、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B9%A5%AF%A5%E9%A5%E0">スクラム</a>においては、プロダクトオーナー = 顧客となることも当然あるみたいです。<br/>
プロダクトオーナーは、要求事項を出して、スプリント内で実装すべき機能の優先順位をつけたり、スプリントで開発された製品に対して検査を行ったりします。</p>

<p>このやり方は、プロダクトオーナー(=顧客自身)がこういった形でチームと一丸になって、開発をしていくという姿は理想的なのですが、なかなか難しいのかなって思ってしまいます。</p>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B9%A5%AF%A5%E9%A5%E0">スクラム</a>どうこうではなく、要求もあいまいなまま丸投げしてくる発注側や、顧客が忙しくてシステム側と話す時間を取れない、もしくはそれを考えるのが君たちの仕事だ！みたいな方もたくさんいるのかな、と思います。</p>

<p>これに関しては、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A6%A5%A9%A1%BC%A5%BF%A1%BC%A5%D5%A5%A9%A1%BC%A5%EB">ウォーターフォール</a>だろうが、なんだろうが顧客自身も開発に参加してもらわないといいものはできないっていうのが当たり前になってかないと、なかなか変わらないのかなって思っちゃいました。</p>

<h2>まとめ</h2>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B9%A5%AF%A5%E9%A5%E0">スクラム</a>をやれば、（当たり前だけれども）なんでも解決するっていうものじゃない。<br/>
でも、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B9%A5%AF%A5%E9%A5%E0">スクラム</a>の現状を認識する、という点には<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B7%A5%B9%A5%C6%A5%E0%B3%AB%C8%AF">システム開発</a>に関わらず、全てに領域に当てはまることだなぁと思う。</p>

<p>（これも<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B7%A5%B9%A5%C6%A5%E0%B3%AB%C8%AF">システム開発</a>っていえばそうだけれども）<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A6%A5%A9%A1%BC%A5%BF%A1%BC%A5%D5%A5%A9%A1%BC%A5%EB">ウォーターフォール</a>の要件定義書を書く、というフェーズ部分だけを切り出しても、期間を短く切って成果物を都度出して、顧客を巻き込んで確認していく、って当たり前のことなんだけれどもできてないことって多いですよね。</p>

<p>今回学んだことを実践できる場が私にはあるのか微妙なんですが、ぜひやってみたいなと思いました。</p>

<p>なので<span style="font-size: 200%">私に仕事をください！  </span></p>

-----
--------
AUTHOR: konoemario
TITLE: Djangoを学ぶ(4)：リンクをはる
BASENAME: 2017/06/13/233808
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 06/13/2017 23:38:08
CATEGORY: Django
CATEGORY: Python
CATEGORY: プログラム
-----
BODY:
<p>前回の続き</p>

<p><iframe src="http://tohutokonsome.hatenablog.com/embed/2017/06/10/211145" title="Djangoを学ぶ(3):画像の表示 - 豆腐とコンソメ" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://tohutokonsome.hatenablog.com/entry/2017/06/10/211145">tohutokonsome.hatenablog.com</a></cite></p>

<p>今回は、以下のようにトップ画面から個別記事に飛ぶようにリンクを貼っていきます。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170613/20170613232718.png" alt="f:id:konoemario:20170613232718p:plain:w500" title="f:id:konoemario:20170613232718p:plain:w500" class="hatena-fotolife" style="width:500px" itemprop="image"></span></p>

<ul class="table-of-contents">
    <li><a href="#個別記事を返す関数をviewspyに追加する">個別記事を返す関数をviews.pyに追加する。</a></li>
    <li><a href="#urlspyの編集">urls.pyの編集</a></li>
    <li><a href="#homehtmlの編集">home.htmlの編集</a></li>
    <li><a href="#post_detailhtmlの作成">post_detail.htmlの作成</a></li>
    <li><a href="#次回はしばらくないかも">次回はしばらくないかも</a></li>
</ul>

<h1 id="個別記事を返す関数をviewspyに追加する">個別記事を返す関数をviews.pyに追加する。</h1>

<p>まず、前回のhome.htmlを返すhome関数と同様に、個別記事を返す「post_details」関数を作成します。<br/>
ポイントは、Postオブジェクトの取得方法です。</p>

<p><b>views.pyを抜粋</b></p>

<pre class="code lang-python" data-lang="python" data-unlink><span class="synPreProc">from</span> django.shortcuts <span class="synPreProc">import</span> render
<span class="synPreProc">from</span> .models <span class="synPreProc">import</span> Post

<span class="synStatement">def</span> <span class="synIdentifier">post_details</span>(request, post_id):

    post = Post(pk=post_id)

    <span class="synStatement">return</span> render(request,<span class="synConstant">'posts/post_details.html'</span>, {<span class="synConstant">'post'</span>:post})
</pre>


<p>前回のhome.htmlでは、トップ画面に記事一覧を表示するために、Postオブジェクトをすべて取得していました。</p>

<pre class="code lang-python" data-lang="python" data-unlink>  <span class="synComment">#Postオブジェクトを取得</span>
    posts =  Post.objects.order_by(<span class="synConstant">'pub_date'</span>)
</pre>


<p>ですが、今回必要なのは、個別記事に表示するひとつのPostオブジェクトのみ必要になります。<br/>
ここでは、特定のPostオブジェクトを取得するための方法として、</p>

<pre class="code lang-python" data-lang="python" data-unlink> post = Post(pk=post_id)
</pre>


<p>という書き方をしています。</p>

<p>※参考<br/>
<a href="http://docs.djangoproject.jp/en/latest/topics/db/queries.html">&#x30AF;&#x30A8;&#x30EA;&#x3092;&#x751F;&#x6210;&#x3059;&#x308B; &mdash; Django 1.4 documentation</a></p>

<p>pkは字のごとくプライマリキーを表しており、管理者画面から投稿した記事にはデフォルトでidなるプライマリキーが振られています。<br/>
ここでは、引数から与えられたpost_idをもとに、一意のPostオブジェクトを取得しています。<br/>
取得したPostオブジェクトは、「post_details.html」に渡します。</p>

<p>次に、post_details関数を呼び出すための定義をurls.pyに追加します。</p>

<p><br/></p>

<h1 id="urlspyの編集">urls.pyの編集</h1>

<p><b>urls.pyを抜粋</b></p>

<pre class="code lang-python" data-lang="python" data-unlink>urlpatterns = [
    url(<span class="synConstant">r'^admin/'</span>, admin.site.urls),
    <span class="synComment">#home</span>
    url(<span class="synConstant">r'^$'</span>,posts.views.home, name=<span class="synConstant">'home'</span>),
    <span class="synComment">#detail</span>
    url(<span class="synConstant">r'^posts/(?P&lt;post_id&gt;[0-9]+)/$'</span>,posts.views.post_details, name=<span class="synConstant">&quot;post_detail&quot;</span>),
] + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)
</pre>


<p>ちょっとわかりずらいのですが、「P&lt;post_id>」の部分がポイントなのかなぁと思っています。<br/>
<a class="keyword" href="http://d.hatena.ne.jp/keyword/Django">Django</a>は、「<a href="http://localhost/posts/">http://localhost/posts/</a>[0-9]+」にマッチするリク<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A8%A5%B9">エス</a>トがあった場合に、さきほど作成した「post_details」関数を呼び出します。<br/>
このとき、「P&lt;引数名>」書いておくと、<a class="keyword" href="http://d.hatena.ne.jp/keyword/Django">Django</a>は、post_details関数に名前付き引数として、引数を渡すみたいです。</p>

<p>これによって、前述のpost_details関数は、受け取ったpost_idをキーに、Postオブジェクトを取得することができます。</p>

<p>ちなみに、「P&lt;post_id>」と書かないと、関数に引数を渡さないような印象を受けますが、特に書かなくても<a class="keyword" href="http://d.hatena.ne.jp/keyword/%C0%B5%B5%AC%C9%BD%B8%BD">正規表現</a>でキャプチャした値は、関数に渡す仕組みになっているようです。<br/>
ただ、「P&lt;post_id>」としておくと、名前付き引数として扱えるので、引数の順番を意識する必要がなくなるというわけです。</p>

<p>※参考<br/>
<a href="http://docs.djangoproject.jp/en/latest/topics/http/urls.html">URL &#x30C7;&#x30A3;&#x30B9;&#x30D1;&#x30C3;&#x30C1;&#x30E3; &mdash; Django 1.4 documentation</a></p>

<p><br/></p>

<h1 id="homehtmlの編集">home.htmlの編集</h1>

<p>home.htmlでは、記事のタイトルに<a>タグをつけて、記事へのリンクを貼ることにします。</p>

<p><b>home.htmlより抜粋</b></p>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synComment">&lt;!-- postオブジェクトは複数あるので、こんな感じでループさせる。--&gt;</span>
{% for post in posts.all %}
     <span class="synIdentifier">&lt;</span><span class="synStatement">h1</span><span class="synIdentifier">&gt;</span>{{ post.title }}<span class="synIdentifier">&lt;/</span><span class="synStatement">h1</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span> {{ post.pub_date }}<span class="synIdentifier">&lt;/</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">img</span><span class="synIdentifier"> </span><span class="synType">src</span><span class="synIdentifier">=</span><span class="synConstant">&quot;{{url 'post_dettail' post.id}}&quot;</span><span class="synIdentifier"> </span><span class="synType">style</span><span class="synIdentifier">=</span><span class="synConstant">&quot;max-height:300px&quot;</span><span class="synIdentifier">/&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span> {{ post.body }} <span class="synIdentifier">&lt;/</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>

{% endfor %}
</pre>


<p>「{{url &lsquo;urls.pyに定義したname&rsquo;}}」は前回同様なのですが、post.idをここに書くことで、引数として渡せるみたいです。</p>

<p><br/></p>

<h1 id="post_detailhtmlの作成">post_detail.htmlの作成</h1>

<p>最後に、個別記事のhtmlを作成します。<br/>
といっても、ほぼhome.htmlをコピペしただけの内容になっています。</p>

<p><b>post_detail.htmlの抜粋<b/></p>

<pre class="code lang-html" data-lang="html" data-unlink>    <span class="synIdentifier">&lt;</span><span class="synStatement">a</span><span class="synIdentifier"> </span><span class="synType">href</span><span class="synIdentifier">=</span><span class="synConstant">&quot;{% url 'post_detail' post.id %}&quot;</span><span class="synIdentifier">&gt;&lt;</span><span class="synStatement">h1</span><span class="synIdentifier">&gt;</span><span class="synUnderlined">{{ post.title }}</span><span class="synIdentifier">&lt;/</span><span class="synStatement">h1</span><span class="synIdentifier">&gt;&lt;/</span><span class="synStatement">a</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span> {{ post.pub_date }}<span class="synIdentifier">&lt;/</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">img</span><span class="synIdentifier"> </span><span class="synType">src</span><span class="synIdentifier">=</span><span class="synConstant">&quot;{{post.image.url}}&quot;</span><span class="synIdentifier"> </span><span class="synType">style</span><span class="synIdentifier">=</span><span class="synConstant">&quot;max-height:300px&quot;</span><span class="synIdentifier">/&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span> {{ post.body }} <span class="synIdentifier">&lt;/</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>
</pre>


<h1 id="次回はしばらくないかも">次回はしばらくないかも</h1>

<p>とりえず、ここまでの内容でトップ画面から個別記事に遷移するブログちっくな機能の実装ができました。</p>

<p>画面のレイアウトについては、cssの話になってしまうので、メモが必要な局面がでてきたら更新していこうかと思います。</p>

-----
--------
AUTHOR: konoemario
TITLE: ラズパイ：100円のスピーカーレビューと注意事項
BASENAME: 2017/06/11/194055
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 06/11/2017 19:40:55
CATEGORY: ラズパイ
-----
BODY:
<p>そろそろ、ラズパイで音でも出してみよっか！ということで、100均一(セリア)スピーカーを購入して参りました。</p>

<p>今回は、タイトルのスピーカーのレビューと注意事項を記載します。</p>

<ul class="table-of-contents">
    <li><a href="#キューブ型">キューブ型</a></li>
    <li><a href="#マルチメディア型">マルチメディア型</a></li>
    <li><a href="#注意事項">注意事項</a></li>
    <li><a href="#結論">結論</a></li>
</ul>

<p>USBタイプのものだと、電源をラズパイから供給しなきゃいけないのでは？みたいな不安があったので  より手軽なステレオピンジャック用のスピーカーを選ぶことにしました。</p>

<p>そして、購入したものは、以下の二つになります。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170611/20170611191143.jpg" alt="f:id:konoemario:20170611191143j:plain:w500" title="f:id:konoemario:20170611191143j:plain:w500" class="hatena-fotolife" style="width:500px" itemprop="image"></span></p>

<p><strong>「音を大きするための商品ではございません。」</strong>
の注意書きが気になりましたが、とりあえず購入しました。</p>

<p><br/></p>

<h1 id="キューブ型">キューブ型</h1>

<p>まずは、キューブ型です。<br/>
<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A4%B3%A4%C1">こち</a>ら、モノラルスピーカーなのですが、二つ購入することでステレオスピーカーに進化することができます。<br/>
すごい！</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170611/20170611192051.jpg" alt="f:id:konoemario:20170611192051j:plain:w500" title="f:id:konoemario:20170611192051j:plain:w500" class="hatena-fotolife" style="width:500px" itemprop="image"></span></p>

<p>早速、ラズパイのステレオジャックに接続して、再生してみたところ、</p>

<p><span style="color: #ff0000"><span style="font-size: 200%">すごく音が小さいです。</span></span></p>

<p>静かな場所で聞く分にはいいのですが、うーん、という音量でした。</p>

<p>ただ、ラズパイではなく、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B9%A5%DE%A5%DB">スマホ</a>とかにつなげる分にはそれなりに音がでます。<br/>
でも、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B9%A5%DE%A5%DB">スマホ</a>内臓の音量とそんなかわらないです。</p>

<p>説明文の「音を大きするための商品ではございません。」は謙遜でもなんでもなく真実でした。</p>

<p><br/></p>

<h1 id="マルチメディア型">マルチメディア型</h1>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/%A4%B3%A4%C1">こち</a>らは、キューブ型に比べるとそこそこ音はでます。<br/>
マルチメディア型を最初に使っていたら、うーん、となっていたかもしれませんが、キューブ型の音量を知った私にとっては、いけるじゃない！という出来でした。</p>

<p><br/></p>

<h1 id="注意事項">注意事項</h1>

<p>今回、購入したスピーカーですが、使用用途としてはラジコンカーにつけて、なにかしらしたかったわけです。</p>

<p>ですが、ラジコンカーと、ステレオジャックピンの相性は（もしかしたら）非常に悪いです。</p>

<p>ラズパイのトピックにも上がっていますが、</p>

<p><a href="https://www.raspberrypi.org/forums/viewtopic.php?t=152687&p=1000614">Raspberry Pi &bull; View topic - ALSA not working properly: aplay: pcm_write:1939: write erro</a></p>

<p><strong>ハードウェアPWM信号を使っていると、ステレオジャックピンが動作してくれないみたいです。  </strong></p>

<p>どうもステレオジャックピンもPWM信号を使っているみたいで、競合しちゃうみたいです。</p>

<p>私の場合は、ラジコンカーに<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B5%A1%BC%A5%DC%A5%E2%A1%BC%A5%BF">サーボモータ</a>ーを使用しており、そこでハードウェアPWM信号を使用しています。</p>

<p>なので、ラジコンカーの処理をセットアップする前は、以下のように再生できるのですが、</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>pi@raspberrypi:~ $ aplay test.wav 
再生中 WAVE <span class="synStatement">'</span><span class="synConstant">test.wav</span><span class="synStatement">'</span> : Signed <span class="synConstant">16</span> bit Little Endian, レート <span class="synConstant">44100</span> Hz, ステレオ
</pre>


<p>ラジコンカーのためのGPIOの設定を行うと、以下のエラーがでてしまいます。</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>pi@raspberrypi:~ $ aplay test.wav 
再生中 WAVE <span class="synStatement">'</span><span class="synConstant">denpa.wav</span><span class="synStatement">'</span> : Signed <span class="synConstant">16</span> bit Little Endian, レート <span class="synConstant">44100</span> Hz, ステレオ
aplay: pcm_write:<span class="synConstant">1939</span>: 書込エラー: 入力/出力エラーです
</pre>


<p>前述のラズパイのトピックでも、解決策はない？みたい。</p>

<p><br/></p>

<h1 id="結論">結論</h1>

<p>ハードウェアPWMを使用しているのであれば、USBスピーカーを購入したほうがよさそう。<br/>
そうでなく手軽に音楽を流したいなら、マルチメディアスピーカーでも事足りるかも。</p>

-----
COMMENT:
AUTHOR: まっさん
IP: 123.225.35.70
DATE: 11/27/2019 08:42:25
こんにちは。
なぜかいつの間にかaplayで書込みエラーになって…
PWMが競合していたんですね。PWM変化させるとすぐaplayがエラーになりました。
ありがとうございます、大変参考になりました。
-----
--------
AUTHOR: konoemario
TITLE: RaspBerryPiでカメラ
BASENAME: 2017/08/08/224623
STATUS: Draft
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 06/11/2017 18:16:21
CATEGORY: ラズパイ
-----
BODY:
<p>この記事は、</p>

<p>これが必要みたい。</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>sudo modprobe bcm2835-v4l2
</pre>


<p>「mjpg_streamer」があるディレクトリに移動。</p>

<pre class="code lang-sh" data-lang="sh" data-unlink><span class="synStatement">cd</span> /home/pi/mjpg-streamer/mjpg-streamer-experimental
</pre>


<p>何も考えずに実行する。</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>sudo ./mjpg_streamer <span class="synSpecial">-i</span> <span class="synStatement">&quot;</span><span class="synConstant">./input_uvc.so -f 10 -r 320x240 -d /dev/video0 -y -n</span><span class="synStatement">&quot;</span> <span class="synSpecial">-o</span> <span class="synStatement">&quot;</span><span class="synConstant">./output_http.so -w ./www -p 8080</span><span class="synStatement">&quot;</span>
</pre>




<pre class="code lang-sh" data-lang="sh" data-unlink>pi@raspberrypi:~/mjpg-streamer/mjpg-streamer-experimental $ sudo ./mjpg_streamer <span class="synSpecial">-i</span> <span class="synStatement">&quot;</span><span class="synConstant">./input_uvc.so -f 10 -r 320x240 -d /dev/video0 -y -n</span><span class="synStatement">&quot;</span> <span class="synSpecial">-o</span> <span class="synStatement">&quot;</span><span class="synConstant">./output_http.so -w ./www -p 8080</span><span class="synStatement">&quot;</span>
MJPG Streamer Version.: 2.0
 i: Using V4L2 device.: /dev/video0
 i: Desired Resolution: <span class="synConstant">320</span> x <span class="synConstant">240</span>
 i: Frames Per Second.: <span class="synConstant">10</span>
 i: Format............: YUYV
 i: JPEG Quality......: <span class="synConstant">80</span>
 i: TV-Norm...........: DEFAULT
 o: www-folder-path......: ./www/
 o: HTTP TCP port........: <span class="synConstant">8080</span>
 o: HTTP Listen Address..: <span class="synPreProc">(</span><span class="synSpecial">null</span><span class="synPreProc">)</span>
 o: username:password....: disabled
 o: commands.............: enabled
libv4l2: error turning on stream: Invalid argument
Unable to <span class="synStatement">start</span> capture: Invalid argument
 i: Error grabbing frames
</pre>


-----
--------
AUTHOR: konoemario
TITLE: RaspBerryPiで録音と再生
BASENAME: 2017/06/11/194441
STATUS: Draft
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 06/11/2017 01:27:42
-----
BODY:
<p>この記事は検索すれば、いくらでもでてくる内容を、自分の環境用にメモしたものです。</p>

<p>ラズパイの環境は以下の通り。</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>pi@raspberrypi:~ $ lsb_release <span class="synSpecial">-a</span>
No LSB modules are available.
Distributor ID: Raspbian
Description:    Raspbian GNU/Linux 8.0 <span class="synPreProc">(</span><span class="synSpecial">jessie</span><span class="synPreProc">)</span>
Release:    8.0
Codename:   jessie
</pre>


<ul class="table-of-contents">
    <li><a href="#録音">録音</a><ul>
            <li><a href="#デバイス認識しているかどうか">デバイス認識しているかどうか</a></li>
            <li><a href="#現在の優先度確認">現在の優先度確認</a></li>
            <li><a href="#優先順位の変更">優先順位の変更</a></li>
            <li><a href="#優先順位の変更がうまくいかない">優先順位の変更がうまくいかない</a></li>
            <li><a href="#録音テスト">録音テスト</a></li>
        </ul>
    </li>
    <li><a href="#再生">再生</a><ul>
            <li><a href="#基本設定">基本設定</a></li>
            <li><a href="#音量調整">音量調整</a></li>
            <li><a href="#テスト">テスト</a></li>
        </ul>
    </li>
</ul>

<h1 id="録音">録音</h1>

<p>基本的に以下内容を参考にした。
<iframe src="https://hatenablog-parts.com/embed?url=http%3A%2F%2Fmagayengineer.hatenablog.com%2Fentry%2F2016%2F07%2F06%2F231533" title="Raspberry Piで音声認識してカメラで写真を撮ってメールで送ってみた - 俺の備忘録" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://magayengineer.hatenablog.com/entry/2016/07/06/231533">magayengineer.hatenablog.com</a></cite></p>

<h4 id="デバイス認識しているかどうか">デ<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D0%A5%A4%A5%B9">バイス</a>認識しているかどうか</h4>

<pre class="code lang-sh" data-lang="sh" data-unlink>pi@raspberrypi:~ $ lsusb
Bus <span class="synConstant">001</span> Device <span class="synConstant">005</span>: ID <span class="synConstant">8086</span>:<span class="synConstant">0808</span> Intel Corp. 
Bus <span class="synConstant">001</span> Device <span class="synConstant">003</span>: ID <span class="synConstant">0424</span>:ec00 Standard Microsystems Corp. SMSC9512/<span class="synConstant">9514</span> Fast Ethernet Adapter
Bus <span class="synConstant">001</span> Device <span class="synConstant">002</span>: ID <span class="synConstant">0424</span>:<span class="synConstant">9514</span> Standard Microsystems Corp. 
Bus <span class="synConstant">001</span> Device <span class="synConstant">001</span>: ID 1d6b:<span class="synConstant">0002</span> Linux Foundation 2.0 root hub
</pre>


<p>たぶんこれ。<br/>
「Bus 001 Device 005: ID 8086:0808 <a class="keyword" href="http://d.hatena.ne.jp/keyword/Intel">Intel</a> Corp. 」</p>

<h4 id="現在の優先度確認">現在の優先度確認</h4>

<pre class="code lang-sh" data-lang="sh" data-unlink>pi@raspberrypi:~ $ sudo cat /proc/asound/modules
 <span class="synConstant">0</span> snd_bcm2835
 <span class="synConstant">1</span> snd_usb_audio
</pre>


<h4 id="優先順位の変更">優先順位の変更</h4>

<p>「<a class="keyword" href="http://d.hatena.ne.jp/keyword/alsa">alsa</a>-base.conf」を新規に作成して、viで2行追加。</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>pi@raspberrypi:~ $ sudo vi /etc/modprobe.d/alsa-base.conf
options snd_usb_audio <span class="synIdentifier">index</span>=<span class="synConstant">0</span>
options snd_bcm2835 <span class="synIdentifier">index</span>=<span class="synConstant">1</span>
</pre>


<p>終わったらリブート。</p>

<h4 id="優先順位の変更がうまくいかない">優先順位の変更がうまくいかない</h4>

<p>再起動前は認識できていたのに、認識してくれなくなる。</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>pi@raspberrypi:~ $ arecord <span class="synSpecial">-l</span>
**** ハードウェアデバイス CAPTURE のリスト ****
</pre>


<p>「<a class="keyword" href="http://d.hatena.ne.jp/keyword/alsa">alsa</a>-base.conf」が怪しいと思ったので、一旦削除。<br/>
リブートしたら認識してくれた。</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>pi@raspberrypi:~ $ arecord <span class="synSpecial">-l</span>
**** ハードウェアデバイス CAPTURE のリスト ****
カード <span class="synConstant">1</span>: Device <span class="synStatement">[</span>USB PnP Sound Device<span class="synStatement">]</span>, デバイス <span class="synConstant">0</span>: USB Audio <span class="synStatement">[</span>USB Audio<span class="synStatement">]</span>
  サブデバイス: <span class="synConstant">1</span>/<span class="synConstant">1</span>
  サブデバイス <span class="synComment">#0: subdevice #0</span>
</pre>


<p>優先度変更って必須なのかいまいちわかってないので、この作業は保留にした。  <br/>
というのも、後続の録音テストで、録音デ<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D0%A5%A4%A5%B9">バイス</a>をオプションで指定できるので。</p>

<p>以下は、優先度変更が必要になったときに、見る記事。</p>

<p>「<a class="keyword" href="http://d.hatena.ne.jp/keyword/alsa">alsa</a>-base.conf」ではなく、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%B4%C4%B6%AD%CA%D1%BF%F4">環境変数</a>に優先度を定義。<br/>
  手軽だったので、.bashrcに追加したのだけれども、arecordのDオプションなしでは、エラーのまま。<br/>
<iframe src="//hatenablog-parts.com/embed?url=http%3A%2F%2Fqiita.com%2Ffumisoro%2Fitems%2Fa110ca2c0899fa63516a" title="Raspbianで/etc/modprobe.d/alsa-base.confがないとき - Qiita" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://qiita.com/fumisoro/items/a110ca2c0899fa63516a">qiita.com</a></cite></p>

<p>「<a class="keyword" href="http://d.hatena.ne.jp/keyword/alsa">alsa</a>-base.conf」を使用。3行追加してる。<br/>
<iframe src="//hatenablog-parts.com/embed?url=http%3A%2F%2Fqiita.com%2Flutecia16v%2Fitems%2F9f60b01770f6262b1d5d" title="Raspberry pi 2で音声認識してみる - Qiita" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://qiita.com/lutecia16v/items/9f60b01770f6262b1d5d">qiita.com</a></cite></p>

<h4 id="録音テスト">録音テスト</h4>

<pre class="code lang-sh" data-lang="sh" data-unlink>arecord <span class="synSpecial">-D</span> plughw:<span class="synConstant">1</span>,<span class="synConstant">0</span> <span class="synSpecial">-f</span> <span class="synStatement">cd</span> test.wav
</pre>


<p>オプションについては「arecord -h」でヘルプを見ればいいだけれども、調べたことを記載。</p>

<ul>
<li>-D 使用するデ<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D0%A5%A4%A5%B9">バイス</a>を指定</li>
<li>-f サンプルフォーマットを指定</li>
</ul>


<p>サンプルフォーマットの一覧は、「arecord -h」としたときに最下部にでるんだけれども「cd」というフォーマットは見当たらない。</p>

<p>ググったら素敵な内容が書かれていました。</p>

<p><a href="http://d.hatena.ne.jp/cupnes/20130331/1364709523">&#x30DE;&#x30A4;&#x30AF;&#x5165;&#x529B;&#x306E;&#x9332;&#x97F3; - &#x3078;&#x306B;&#x3083;&#x307A;&#x3093;&#x3066;&#xFF20;&#x65E5;&#x3005;&#x52C9;&#x5F37;&#x306E;&#x307E;&#x3068;&#x3081;</a></p>

<blockquote><p>よく見る例では、
「-f cd」
としている例が多いけれども、
これは、「-f S16_LE -c2 -r44100」の短縮形で、
「-f dat」
の時よりも、サンプリング周波数が低いです。</p></blockquote>

<p>ちなみに、Dオプションをつけないで実行すると、エラーになる。<br/>
優先度を変更するとうまくいくのだろうか。</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>pi@raspberrypi:~ $ arecord <span class="synSpecial">-f</span> <span class="synStatement">cd</span> test2.wav
arecord: main:<span class="synConstant">722</span>: audio open error: そのようなファイルやディレクトリはありません
</pre>


<p>とりあえず録音はできるようになりました。</p>

<h1 id="再生">再生</h1>

<h2 id="基本設定">基本設定</h2>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/HDMI">HDMI</a>をさしてなければ、自動判別でもうまくいったので、特にこのへんの設定は必要なし。</p>

<p>音の出力先を、ライン出力に固定する。</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>sudo amixer cset <span class="synIdentifier">numid</span>=<span class="synConstant">3</span> <span class="synConstant">1</span>
</pre>


<p>ライン出力ではなく、<a class="keyword" href="http://d.hatena.ne.jp/keyword/HDMI">HDMI</a>もある。</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>sudo amixer cset <span class="synIdentifier">numid</span>=<span class="synConstant">3</span> <span class="synConstant">2</span>
</pre>


<p>自動判別はこれ。</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>sudo amixer cset <span class="synIdentifier">numid</span>=<span class="synConstant">3</span> <span class="synConstant">0</span>
</pre>


<p>設定確認</p>

<p>最終行のvaluesの値。ここでは0になってるので、自動判別になっていることがわかる。</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>pi@raspberrypi:~ $ amixer cget <span class="synIdentifier">numid</span>=<span class="synConstant">3</span>
<span class="synIdentifier">numid</span>=<span class="synIdentifier">3,iface</span>=<span class="synIdentifier">MIXER,name</span>=<span class="synStatement">'</span><span class="synConstant">PCM Playback Route</span><span class="synStatement">'</span>
  ; <span class="synStatement">type=</span><span class="synIdentifier">INTEGER,access</span>=rw------,<span class="synIdentifier">values</span>=<span class="synIdentifier">1,min</span>=<span class="synIdentifier">0,max</span>=<span class="synIdentifier">2,step</span>=<span class="synConstant">0</span>
  <span class="synComment">:</span> <span class="synIdentifier">values</span>=<span class="synConstant">0</span>
pi@raspberrypi:
</pre>


<h2 id="音量調整">音量調整</h2>

<pre class="code lang-sh" data-lang="sh" data-unlink>pi@raspberrypi:~ $ amixer controls
<span class="synIdentifier">numid</span>=<span class="synIdentifier">3,iface</span>=<span class="synIdentifier">MIXER,name</span>=<span class="synStatement">'</span><span class="synConstant">PCM Playback Route</span><span class="synStatement">'</span>
<span class="synIdentifier">numid</span>=<span class="synIdentifier">2,iface</span>=<span class="synIdentifier">MIXER,name</span>=<span class="synStatement">'</span><span class="synConstant">PCM Playback Switch</span><span class="synStatement">'</span>
<span class="synIdentifier">numid</span>=<span class="synIdentifier">1,iface</span>=<span class="synIdentifier">MIXER,name</span>=<span class="synStatement">'</span><span class="synConstant">PCM Playback Volume</span><span class="synStatement">'</span>
<span class="synIdentifier">numid</span>=<span class="synIdentifier">5,iface</span>=<span class="synIdentifier">PCM,name</span>=<span class="synStatement">'</span><span class="synConstant">IEC958 Playback Con Mask</span><span class="synStatement">'</span>
<span class="synIdentifier">numid</span>=<span class="synIdentifier">4,iface</span>=<span class="synIdentifier">PCM,name</span>=<span class="synStatement">'</span><span class="synConstant">IEC958 Playback Default</span><span class="synStatement">'</span>
</pre>


<p>Volumeと書かれている行のnumidを覚えておく。
ここでは、numid = 1。</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>sudo amixer cset <span class="synIdentifier">numid</span>=<span class="synConstant">1</span> <span class="synConstant">100</span>%
</pre>


<p>さきほどのnumidに対して音量を指定する。<br/>
100均一のスピーカーを使用しているので、100%でも音量はかなり小さい。</p>

<h2 id="テスト">テスト</h2>

<p>デフォルトで用意されている音声を再生する。</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>aplay /usr/share/sounds/alsa/Front_Center.wav
</pre>


-----
--------
AUTHOR: konoemario
TITLE: Djangoを学ぶ(3):画像の表示
BASENAME: 2017/06/10/211145
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 06/10/2017 21:11:45
CATEGORY: Django
CATEGORY: Python
CATEGORY: プログラム
IMAGE: https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170610/20170610205858.png
-----
BODY:
<h1 id="前回からの続き">前回からの続き</h1>

<p>今回は前回表示できていなかった、画像を表示していきたいと思います。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170610/20170610205858.png" alt="f:id:konoemario:20170610205858p:plain:w500" title="f:id:konoemario:20170610205858p:plain:w500" class="hatena-fotolife" style="width:500px" itemprop="image"></span></p>

<ul class="table-of-contents">
    <li><a href="#前回からの続き">前回からの続き</a></li>
    <li><a href="#staticファイルの公開">staticファイルの公開</a><ul>
            <li><a href="#ヘッダー画像を表示する">ヘッダー画像を表示する</a></li>
            <li><a href="#管理者画面で投稿した画像を表示する">管理者画面で投稿した画像を表示する</a><ul>
                    <li><a href="#他のディレクトリを公開する">他のディレクトリを公開する。</a></li>
                </ul>
            </li>
        </ul>
    </li>
</ul>

<h1 id="staticファイルの公開">staticファイルの公開</h1>

<p>画像とかjsとか<a class="keyword" href="http://d.hatena.ne.jp/keyword/css">css</a>とかのいわゆるstaticファイルと呼ばれる。  <br/>
これを<a class="keyword" href="http://d.hatena.ne.jp/keyword/Django">Django</a>で扱うには、ちょっと作業がいる。  <br/>
適当な<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C7%A5%A3%A5%EC%A5%AF%A5%C8">ディレクト</a>リに置いて、その<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C7%A5%A3%A5%EC%A5%AF%A5%C8">ディレクト</a>リを公開すればいいんじゃない？って考えてしまうのですが、<a class="keyword" href="http://d.hatena.ne.jp/keyword/Django">Django</a>には以下の機能が備わっているみたいです。</p>

<p><a href="http://docs.djangoproject.jp/en/latest/howto/static-files.html">&#x9759;&#x7684;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x306E;&#x516C;&#x958B;&#x65B9;&#x6CD5; &mdash; Django 1.4 documentation</a></p>

<p>上記より抜粋。</p>

<blockquote><p>小さなプロジェクトではこのことは大きな問題になりません。 Web サーバが見つけら れる場所で静的ファイルを単に管理することができるからです。しかし、もっと大きな プロジェクトで、特に複数のアプリケーションからなる場合は、各アプリケーションが 持っている静的ファイルの集まりを複数扱うことになり、ややこしくなってきます。</p>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/django">django</a>.contrib.staticfiles はまさにそのためにあります。これは静的なファイルを各アプリケーションから (さらに指定した別の場所からも) 一つの場所に集め、運用環境で公開しやすくするものです。</p></blockquote>

<p>大きなプロジェクトを作成しないと、有り難みがわからないかもしれませんが、ざっと見ていきます。</p>

<h2 id="ヘッダー画像を表示する">ヘッダー画像を表示する</h2>

<p>まず、管理者画面から投稿した画像を表示する前に、通常の画像を扱う方法を見ていきます。<br/>
ここでは、以下のようにTOP画面のヘッダー画像を表示していきます。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170610/20170610194010.png" alt="f:id:konoemario:20170610194010p:plain:w500" title="f:id:konoemario:20170610194010p:plain:w500" class="hatena-fotolife" style="width:500px" itemprop="image"></span></p>

<p>前述の「<a class="keyword" href="http://d.hatena.ne.jp/keyword/django">django</a>.contrib.staticfiles」ですが、setting.pyのINSTLLED_APPSに標準搭載されているのが確認できるので、特になにもしなくても使えそうです。</p>

<p><b>setting.py</b></p>

<pre class="code lang-python" data-lang="python" data-unlink><span class="synComment"># Application definition</span>

INSTALLED_APPS = [
    <span class="synConstant">'django.contrib.admin'</span>,
    <span class="synConstant">'django.contrib.auth'</span>,
    <span class="synConstant">'django.contrib.contenttypes'</span>,
    <span class="synConstant">'django.contrib.sessions'</span>,
    <span class="synConstant">'django.contrib.messages'</span>,
<span class="synComment">#↓これのこと</span>
    <span class="synConstant">'django.contrib.staticfiles'</span>,  
    <span class="synConstant">'posts'</span>,
]
</pre>


<p>そして、「<a class="keyword" href="http://d.hatena.ne.jp/keyword/django">django</a>.contrib.staticfiles」は「setting.py」の「STATIC_URL」配下を探しにいくみたいです。<br/>
デフォルトでは、「/static/」が既に記載されています。</p>

<p><b>setting.py</b></p>

<pre class="code lang-python" data-lang="python" data-unlink><span class="synComment"># Static files (CSS, JavaScript, Images)</span>
<span class="synComment"># https://docs.djangoproject.com/en/1.11/howto/static-files/</span>

<span class="synComment">#staticlファイルの定義</span>
STATIC_URL = <span class="synConstant">'/static/'</span>
</pre>


<p>このへんを確認したら、実際に表示したい画像を置きます。
アプリケーション「posts」配下にstatic<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C7%A5%A3%A5%EC%A5%AF%A5%C8">ディレクト</a>リを新規に作成して、その配下にアプリケーション名「posts」の<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C7%A5%A3%A5%EC%A5%AF%A5%C8">ディレクト</a>リを作成した上で、「home.jpg」を置きます。</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>└── posts
    ├── __init__.py
    ├── __pycache__
    ├── admin.py
    ├── apps.py
    ├── migrations
    ├── models.py
<span class="synComment">#staticディレクトリを作成した</span>
    ├── static
    │   └── posts
    │       └── home.jpg
</pre>


<p>前回のtemplatesもそうだったのですが、</p>

<p>アプリケーションの<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C7%A5%A3%A5%EC%A5%AF%A5%C8">ディレクト</a>リ&ndash;>templates とか　static とか&ndash;>アプリケーション名&ndash;>ファイル</p>

<p>という構成になってます。  <br/>
(このへんの仕組みを書いたドキュメントがあったのですが、わからなくなっちゃいました。)</p>

<p>次に、html側を修正していきます。<br/>
以下のようにします。</p>

<p><b>home.html</b></p>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synComment">&lt;!--staticファイルの参照方法--&gt;</span>
{% load static%}
<span class="synIdentifier">&lt;</span><span class="synStatement">img</span><span class="synIdentifier"> </span><span class="synType">src</span><span class="synIdentifier">=</span><span class="synConstant">&quot;{% static &quot;</span><span class="synIdentifier">posts/home.jpg</span><span class="synConstant">&quot;%}&quot;</span><span class="synIdentifier"> </span><span class="synType">style</span><span class="synIdentifier">=</span><span class="synConstant">&quot;max-height:500px&quot;</span><span class="synIdentifier">/&gt;</span>
</pre>


<p>「{% load static %}」と 「{% static &ldquo;<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C7%A5%A3%A5%EC%A5%AF%A5%C8">ディレクト</a>リ名&rdquo; %}」を追加しています。<br/>
   実際に、クライアントに返されるhtmlは以下の通りとなります。</p>

<p><b>home.html</b></p>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span><span class="synStatement">img</span><span class="synIdentifier"> </span><span class="synType">src</span><span class="synIdentifier">=</span><span class="synConstant">&quot;/static/posts/home.jpg&quot;</span><span class="synIdentifier"> </span><span class="synType">style</span><span class="synIdentifier">=</span><span class="synConstant">&quot;max-height:500px&quot;</span><span class="synIdentifier">/&gt;</span>
</pre>


<p>実際にTOP画面にアクセスすると、画像が表示されることが確認できるかと思います。</p>

<h2 id="管理者画面で投稿した画像を表示する">管理者画面で投稿した画像を表示する</h2>

<p>次に、管理者画面で投稿した画像を表示していきます。</p>

<p>現在の状態ですが、html側のソースを見てみると、「media/pinky2.jpg」となっていることが確認できます。</p>

<p><b>home.html</b></p>

<pre class="code lang-html" data-lang="html" data-unlink> <span class="synIdentifier">&lt;</span><span class="synStatement">h3</span><span class="synIdentifier">&gt;</span> 彼女とデートなう<span class="synIdentifier">&lt;/</span><span class="synStatement">h3</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span> June 5, 2017, midnight<span class="synIdentifier">&lt;/</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">img</span><span class="synIdentifier"> </span><span class="synType">src</span><span class="synIdentifier">=</span><span class="synConstant">&quot;media/pinky2.jpg&quot;</span><span class="synIdentifier">/&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span> 彼女ともんじゃ焼きを食べに行きました <span class="synIdentifier">&lt;/</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>
</pre>


<p>クライアントに返す前の状態はこんな感じでした。</p>

<p><b>home.html</b></p>

<pre class="code lang-html" data-lang="html" data-unlink>{% for post in posts.all %}
    <span class="synIdentifier">&lt;</span><span class="synStatement">h3</span><span class="synIdentifier">&gt;</span> {{ post.title }}<span class="synIdentifier">&lt;/</span><span class="synStatement">h3</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span> {{ post.pub_date }}<span class="synIdentifier">&lt;/</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">img</span><span class="synIdentifier"> </span><span class="synType">src</span><span class="synIdentifier">=</span><span class="synConstant">&quot;{{ post.image.url }}&quot;</span><span class="synIdentifier">/&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span> {{ post.body }} <span class="synIdentifier">&lt;/</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>

{% endfor %}
</pre>


<p>そもそもmedia<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C7%A5%A3%A5%EC%A5%AF%A5%C8">ディレクト</a>リってなんだっけ？ってなったのですが、
Postクラスのimageにアップロード先の<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C7%A5%A3%A5%EC%A5%AF%A5%C8">ディレクト</a>リを定義していました。</p>

<pre class="code lang-python" data-lang="python" data-unlink><span class="synStatement">class</span> <span class="synIdentifier">Post</span>(models.Model):
    <span class="synComment">#適当な画像</span>
    image = models.ImageField(upload_to=<span class="synConstant">'media/'</span>)
</pre>


<p>そして、管理者画面から投稿した画像は、media<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C7%A5%A3%A5%EC%A5%AF%A5%C8">ディレクト</a>リに置かれてますね。</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>├── db.sqlite3
├── manage.py
├── media
│   ├── django?\<span class="synConstant">205</span>??\<span class="synConstant">226</span>\200.png
│   ├── jingyi-wang-195381.jpg
│   ├── pinky2.jpg
│   └── remi-skatulski-88995.jpg
├── ohankyblog
</pre>


<p>なのでここでやりたいことはヘッダー画像のようにstatic<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C7%A5%A3%A5%EC%A5%AF%A5%C8">ディレクト</a>リ配下に置いたものを見せる、というものではなく<br/>
管理者画面で投稿したmedia<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C7%A5%A3%A5%EC%A5%AF%A5%C8">ディレクト</a>リ配下に置いたものを見せる、ということになります。</p>

<h3 id="他のディレクトリを公開する">他の<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C7%A5%A3%A5%EC%A5%AF%A5%C8">ディレクト</a>リを公開する。</h3>

<p>あんまりしっくりきてないのですが、メモがてら書きます。<br/>
さらにいえば、こんへんのやり方は<strong>開発環境用のもので実際に運用する際にはいろいろと問題がある</strong>みたいです。<br/>
最終的にはインターネットの世界に公開していきたいので、どこかでちゃんとした運用を紹介できればと思います。</p>

<p>まず、「setting.py」に「MEDIA_URL」と「MEDIA_ROOT」を追加しています。</p>

<p><b>setting.py</b></p>

<pre class="code lang-python" data-lang="python" data-unlink><span class="synComment"># Static files (CSS, JavaScript, Images)</span>
<span class="synComment"># https://docs.djangoproject.com/en/1.11/howto/static-files/</span>

STATIC_URL = <span class="synConstant">'/static/'</span>
MEDIA_URL = <span class="synConstant">'/pics/'</span>
MEDIA_ROOT = BASE_DIR
</pre>


<p>次に、urls.pyを以下のように編集しています。</p>

<p><b>urls.py</b></p>

<pre class="code lang-python" data-lang="python" data-unlink><span class="synPreProc">from</span> django.conf.urls <span class="synPreProc">import</span> url
<span class="synPreProc">from</span> django.contrib <span class="synPreProc">import</span> admin
<span class="synPreProc">import</span> posts.views

<span class="synComment">#以下の定義を追加</span>
<span class="synPreProc">from</span> django.conf <span class="synPreProc">import</span> settings
<span class="synPreProc">from</span> django.conf.urls.static <span class="synPreProc">import</span> static

urlpatterns = [
    url(<span class="synConstant">r'^admin/'</span>, admin.site.urls),
    <span class="synComment">#home</span>
    url(<span class="synConstant">r'^$'</span>,posts.views.home, name=<span class="synConstant">'home'</span>),
<span class="synComment">#以下の定義を追加</span>
] + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)
</pre>


<p>こうすることで、あら不思議、管理者画面で投稿した画像たちが表示されます。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170610/20170610205637.png" alt="f:id:konoemario:20170610205637p:plain:w500" title="f:id:konoemario:20170610205637p:plain:w500" class="hatena-fotolife" style="width:500px" itemprop="image"></span></p>

<p>実際のhtmlソースは以下のように編集されています。</p>

<pre class="code lang-html" data-lang="html" data-unlink>    <span class="synIdentifier">&lt;</span><span class="synStatement">h3</span><span class="synIdentifier">&gt;</span> 彼女とデートなう<span class="synIdentifier">&lt;/</span><span class="synStatement">h3</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span> June 5, 2017, midnight<span class="synIdentifier">&lt;/</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>
    
    <span class="synIdentifier">&lt;</span><span class="synStatement">img</span><span class="synIdentifier"> </span><span class="synType">src</span><span class="synIdentifier">=</span><span class="synConstant">&quot;/pics/media/pinky2.jpg&quot;</span><span class="synIdentifier"> </span><span class="synType">style</span><span class="synIdentifier">=</span><span class="synConstant">&quot;max-height:300px&quot;</span><span class="synIdentifier">/&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span> 彼女ともんじゃ焼きを食べに行きました <span class="synIdentifier">&lt;/</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>
</pre>


<p>setting.pyで設定した「MEDIA_URL」は画像が置かれているディレクリを指定しているわけではなく、URLでどう見せるのかという設定だということがわかります。</p>

<p>なんで<a class="keyword" href="http://d.hatena.ne.jp/keyword/Django">Django</a>はmedia<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C7%A5%A3%A5%EC%A5%AF%A5%C8">ディレクト</a>リに画像があるって知ってるんだろうなぁ、とか考えていたのですが<br/>
Postsクラスのimageフィールドがあるのか、思ったら納得しました。</p>

<p>試しに、<a class="keyword" href="http://d.hatena.ne.jp/keyword/sqlite">sqlite</a>でテーブルの中身を確認したところ、imageフィールドには、画像のパスが定義されていました。<br/>
(media以外にも格納先を「tekitou」とかに変えてみたりしていました)</p>

<pre class="code lang-sql" data-lang="sql" data-unlink>sqlite&gt; <span class="synStatement">select</span> * <span class="synSpecial">from</span> posts_post2;
      id = <span class="synConstant">1</span>
   title = aaaa
pub_date = <span class="synConstant">2017-06-10</span> <span class="synConstant">11</span>:<span class="synConstant">26</span>:<span class="synConstant">18</span>
    body = aaaaaa
   image = tekitou/pinky2.jpg
</pre>


<p>ちょっと中途半端ですが、今回はここまでです。</p>

-----
--------
AUTHOR: konoemario
TITLE: Djangoを学ぶ(2)：ブログサイトの作成
BASENAME: 2017/06/08/163004
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 06/08/2017 16:30:04
CATEGORY: Python
CATEGORY: プログラム
CATEGORY: Django
IMAGE: https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170608/20170608162649.png
-----
BODY:
<h1 id="前回からの続き">前回からの続き</h1>

<p><iframe src="https://hatenablog-parts.com/embed?url=http%3A%2F%2Ftohutokonsome.hatenablog.com%2Fentry%2F2017%2F06%2F03%2F221238" title="Djangoを学ぶ(1) - 豆腐とコンソメ" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://tohutokonsome.hatenablog.com/entry/2017/06/03/221238">tohutokonsome.hatenablog.com</a></cite></p>

<p>前回は、<a class="keyword" href="http://d.hatena.ne.jp/keyword/Django">Django</a>で作成したプロジェクトに対して、手動でviews.pyを作成して、簡単なWebページを作成した。</p>

<p>今回はより<a class="keyword" href="http://d.hatena.ne.jp/keyword/Django">Django</a>らしい機能を使っていきます。</p>

<ul class="table-of-contents">
    <li><a href="#前回からの続き">前回からの続き</a></li>
    <li><a href="#今回作成するもの">今回作成するもの</a></li>
    <li><a href="#プロジェクトの作成とモデルの作成">プロジェクトの作成とモデルの作成</a><ul>
            <li><a href="#templatesとhomehtmlの作成">templatesとhome.htmlの作成</a></li>
            <li><a href="#viewspyとurlspyの編集">views.pyとurls.pyの編集</a></li>
            <li><a href="#settingpyの編集">setting.pyの編集</a></li>
            <li><a href="#モデルの作成">モデルの作成</a></li>
            <li><a href="#makemigrationとmigration">makemigrationとmigration</a></li>
        </ul>
    </li>
    <li><a href="#Django-Admin">Django Admin</a><ul>
            <li><a href="#管理ユーザーの作成">管理ユーザーの作成</a></li>
            <li><a href="#管理画面をさわってみる">管理画面をさわってみる</a></li>
        </ul>
    </li>
    <li><a href="#管理者画面で作成したデータをpythonでさわる">管理者画面で作成したデータをpythonでさわる</a></li>
    <li><a href="#一旦ここまでをまとめ">一旦、ここまでをまとめ</a></li>
</ul>

<h1 id="今回作成するもの">今回作成するもの</h1>

<p>以下のようなブログサイトを作成してみたいと思います。</p>

<p><b>TOP画面</b><br/>
<span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170608/20170608151428.jpg" alt="f:id:konoemario:20170608151428j:plain:w500" title="f:id:konoemario:20170608151428j:plain:w500" class="hatena-fotolife" style="width:500px" itemprop="image"></span></p>

<p><b>詳細画面</b>  <br/>
  　　
<span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170608/20170608151432.jpg" alt="f:id:konoemario:20170608151432j:plain:w500" title="f:id:konoemario:20170608151432j:plain:w500" class="hatena-fotolife" style="width:500px" itemprop="image"></span></p>

<h1 id="プロジェクトの作成とモデルの作成">プロジェクトの作成とモデルの作成</h1>

<p>前回同様に、まずプロジェクトを作成します。<br/>
ブログサイトの名前は「ohankyblog」としました。</p>

<pre class="code lang-sh" data-lang="sh" data-unlink><span class="synComment">#プロジェクトの名前はohankyblog</span>
masao<span class="synConstant">-3</span>:myblog konoe_mario$ django-admin startproject ohankyblog
</pre>


<p>そして、前回と大きく異なる点として、「startapp」なるコマンドを用いてアプリケーションを作成します。<br/>
記事を管理するアプリケーションということで、「posts」とします。<br/>
アプリケーションがどういった単位で作成すべきなのか、という点がイメージできていませんが、とりあえず続行します。</p>

<pre class="code lang-sh" data-lang="sh" data-unlink><span class="synComment">#作成するアプリケーションはposts</span>
masao<span class="synConstant">-3</span>:myblog konoe_mario$ python manage.py startapp posts
</pre>


<p>この「startapp posts」とすることで、新たにposts<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C7%A5%A3%A5%EC%A5%AF%A5%C8">ディレクト</a>リとその配下にいろいろなファイルが追加されているのが確認できます。</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>masao<span class="synConstant">-3</span>:myblog konoe_mario$ tree
.
├── manage.py
├── ohankyblog
│   ├── __init__.py
│   ├── __pycache__
│   ├── settings.py
│   ├── urls.py
│   └── wsgi.py
<span class="synComment">#startapp potstsを行う事で作成されるファイルたち</span>
└── posts
    ├── __init__.py
    ├── admin.py
    ├── apps.py
    ├── migrations
    │   └── __init__.py
    ├── models.py
    ├── tests.py
    └── views.py
</pre>


<p>その配下のファイルには、前回手動で作成した、「views.py」が作成されていることに気づきます。<br/>
きっと、作成されたviews.pyにHTTPリク<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A8%A5%B9">エス</a>トから呼ばれる関数を書くんだな、と想像できますね。</p>

<h2 id="templatesとhomehtmlの作成">templatesとhome.htmlの作成</h2>

<p>とりあえず、前回と同様にトップ画面を作成していきます。  <br/>
トップ画面である、home.htmlファイルを以下のようにtemplates<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C7%A5%A3%A5%EC%A5%AF%A5%C8">ディレクト</a>リ配下におきます。<br/>
templates<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C7%A5%A3%A5%EC%A5%AF%A5%C8">ディレクト</a>リの中にさらにposts<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C7%A5%A3%A5%EC%A5%AF%A5%C8">ディレクト</a>リを置く意図がいまいちわかりませんが、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A4%B3%A4%C1">こち</a>らもUdemyの動画に<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A4%CA%A4%E9%A4%A4">ならい</a>ます。<br/>
home.htmlはこの段階では適当な内容なので、内容は割愛します。</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>└── posts
    ├── __init__.py
    ├── __pycache__
    ├── admin.py
    ├── apps.py
    ├── migrations
    ├── models.py
<span class="synComment">#posts配下にtemplatesとhome.htmlを作成した。</span>
    ├── templates
    │   └── posts
    │       └── home.html
    ├── tests.py
    └── views.py
</pre>


<h2 id="viewspyとurlspyの編集">views.pyとurls.pyの編集</h2>

<p>このへんは慣れてきました。<br/>
posts配下のviews.pyにhome.htmlを返す関数と、urls.pyにurlの情報を定義します。</p>

<p><b>views.py</b></p>

<pre class="code lang-python" data-lang="python" data-unlink><span class="synPreProc">from</span> django.shortcuts <span class="synPreProc">import</span> render

<span class="synComment"># Create your views here.</span>
<span class="synStatement">def</span> <span class="synIdentifier">home</span>(request):
    <span class="synStatement">return</span> render(request, <span class="synConstant">'posts/home.html'</span>)
</pre>


<p><b>urls.py</b></p>

<pre class="code lang-python" data-lang="python" data-unlink><span class="synPreProc">from</span> django.conf.urls <span class="synPreProc">import</span> url
<span class="synPreProc">from</span> django.contrib <span class="synPreProc">import</span> admin
<span class="synPreProc">import</span> posts.views

urlpatterns = [
    url(<span class="synConstant">r'^admin/'</span>, admin.site.urls),
    <span class="synComment">#home</span>
    url(<span class="synConstant">r'^$'</span>,posts.views.home, name=<span class="synConstant">'home'</span>),
]
</pre>


<p>前回は言われるがままに書いていましたが、「r'^$&lsquo;」って<a class="keyword" href="http://d.hatena.ne.jp/keyword/%C0%B5%B5%AC%C9%BD%B8%BD">正規表現</a>で、「^」は先頭一致、「$」は末尾一致で、組み合わせることで何も入力されていない(つまり、ルート<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C7%A5%A3%A5%EC%A5%AF%A5%C8">ディレクト</a>リである)ことを表現している気がします。</p>

<h2 id="settingpyの編集">setting.pyの編集</h2>

<p>urls.pyとviews.pyを編集したらもう参照できるかな？と思いきや、前回定義したhome.htmlの場所を定義していません。<br/>
前回は、setting.pyのTEMPLATESに記載しましたが、startappでアプリケーションを作成する正規の方法では、setting.pyのINSTALL_APPSに作成したアプリケーション「posts」を追加すればいいみたいです。</p>

<p><b>setting.py</b></p>

<pre class="code lang-python" data-lang="python" data-unlink>INSTALLED_APPS = [
    <span class="synConstant">'django.contrib.admin'</span>,
    <span class="synConstant">'django.contrib.auth'</span>,
    <span class="synConstant">'django.contrib.contenttypes'</span>,
    <span class="synConstant">'django.contrib.sessions'</span>,
    <span class="synConstant">'django.contrib.messages'</span>,
    <span class="synConstant">'django.contrib.staticfiles'</span>,
    <span class="synConstant">'posts'</span>,    &lt;----これ
]
</pre>


<p>これを行うことで、<a class="keyword" href="http://d.hatena.ne.jp/keyword/Django">Django</a>はpostsアプリケーションがあるんだなって認識してくれるみたいです。  <br/>
この状態でrunserverして、ルート<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C7%A5%A3%A5%EC%A5%AF%A5%C8">ディレクト</a>リにアクセスすれば、home.htmlが表示されるかと思います。</p>

<h2 id="モデルの作成">モデルの作成</h2>

<p>さて、モデルというものがここででてきます。</p>

<p>いまいちよくわかってませんが、データをもってるクラスって思っていればいいのかもしれません。<br/>
<a class="keyword" href="http://d.hatena.ne.jp/keyword/MVC">MVC</a>モデルのMの部分だよってことなのかな。</p>

<p>※このへんをみるとモデルとは、データベースの定義と追加の<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%E1%A5%BF%A5%C7%A1%BC%A5%BF">メタデータ</a>の定義とある。<br/>
<a href="http://djangoproject.jp/doc/ja/1.0/intro/tutorial01.html">&#x306F;&#x3058;&#x3081;&#x3066;&#x306E; Django &#x30A2;&#x30D7;&#x30EA;&#x4F5C;&#x6210;&#x3001;&#x305D;&#x306E; 1 &mdash; Django v1.0 documentation</a></p>

<p>さっそく、posts配下にあるmodels.pyを編集していきます。</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>└── posts
    ├── __init__.py
    ├── __pycache__
    ├── admin.py
    ├── apps.py
    ├── migrations
    ├── models.py   <span class="synStatement">&lt;</span>---これ！
    ├── templates
    │   └── posts
    │       └── home.html
    ├── tests.py
    └── views.py
</pre>


<p>編集した内容は以下の通りです。</p>

<p><b>models.py</b></p>

<pre class="code lang-python" data-lang="python" data-unlink><span class="synPreProc">from</span> django.db <span class="synPreProc">import</span> models

<span class="synComment"># Create your models here.</span>

<span class="synStatement">class</span> <span class="synIdentifier">Post</span>(models.Model):
    <span class="synConstant">'''</span>
<span class="synConstant">    記事の内容を管理するクラスと思われる。  </span>

<span class="synConstant">    modelの定義はここに詳しく書いてある。</span>
<span class="synConstant">    https://docs.djangoproject.com/ja/1.11/ref/models/fields/</span>
<span class="synConstant">    '''</span>
    <span class="synComment">#タイトル</span>
    title = models.CharField(max_length=<span class="synConstant">250</span>)
    <span class="synComment">#発行日</span>
    pub_date = models.DateTimeField()
    <span class="synComment">#適当な画像</span>
    image = models.ImageField(upload_to=<span class="synConstant">'media/'</span>)
    <span class="synComment">#記事本文</span>
    body = models.TextField()
</pre>


<p>いろいろとでていますが、 記事の内容を構成する要素を定義しています。 <br/>
気になる、models.CharField()あたりですが、これがデータの型を表しているみたいです。<br/>
title要素は、Char型の要素ですよ、っていうのと、引数にmax_lengthを与えることで最大250文字ってことを定義しているみたいです。</p>

<p>詳細は以下に書いてあります。<br/>
<a href="https://docs.djangoproject.com/ja/1.11/ref/models/fields/">&#x30E2;&#x30C7;&#x30EB;&#x30D5;&#x30A3;&#x30FC;&#x30EB;&#x30C9;&#x30EA;&#x30D5;&#x30A1;&#x30EC;&#x30F3;&#x30B9; | Django documentation | Django</a></p>

<p>さてさて、ここで「title」は「Char型」だよと定義する意味なんですが、冒頭の「モデルとはデータベースの定義」ということを思い出します。</p>

<p>つまり、ここで定義したデータ型をもつPostsテーブルを<a class="keyword" href="http://d.hatena.ne.jp/keyword/Django">Django</a>が作成してくれるみたいです。<br/>
テーブルっていっても、データベースなんかどこにあるんだっけ、と思ったのですが、setting.pyをみたりすると、sqlliteなる記述を発見できるかと思います。<br/>
つまり、デフォルトでsqlliteというデータベースが存在しているみたいです。</p>

<h2 id="makemigrationとmigration">makemigrationとmigration</h2>

<p>モデルに情報を定義したら、その次は、「makemigration」と「migration」コマンドを実行します。</p>

<p>一旦、テスト用のWebサーバーを起動していたら、落としときます。  <br/>
※必須じゃないかも。</p>

<p>「makemigration」を実行することで、さきほどのモデルに定義した情報をもとにファイル「0001_initial.py」が作成されます。</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>masao<span class="synConstant">-3</span>:myblog konoe_mario$ python3 manage.py makemigrations
Migrations <span class="synStatement">for</span> <span class="synStatement">'</span><span class="synConstant">posts</span><span class="synStatement">'</span>:
  posts/migrations/0001_initial.py
    - Create model Posts
</pre>


<p>これは、DBの<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B9%A5%AD%A1%BC%A5%DE">スキーマ</a>を作成するための<a class="keyword" href="http://d.hatena.ne.jp/keyword/python">python</a>コードが書かれているみたい。<br/>
sqlmigrateコマンドを実行すことで、<a class="keyword" href="http://d.hatena.ne.jp/keyword/DDL">DDL</a>文の形式で確認することができます。</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>masao<span class="synConstant">-3</span>:ohankyblog konoe_mario$  python manage.py sqlmigrate posts <span class="synConstant">0001</span>
BEGIN;
--
-- Create model Post
--
CREATE TABLE <span class="synStatement">&quot;</span><span class="synConstant">posts_post</span><span class="synStatement">&quot;</span> <span class="synPreProc">(</span><span class="synStatement">&quot;</span><span class="synConstant">id</span><span class="synStatement">&quot;</span><span class="synSpecial"> </span><span class="synStatement">integer</span><span class="synSpecial"> NOT NULL PRIMARY KEY AUTOINCREMENT, </span><span class="synStatement">&quot;</span><span class="synConstant">title</span><span class="synStatement">&quot;</span><span class="synSpecial"> varchar</span><span class="synPreProc">(</span><span class="synConstant">250</span><span class="synPreProc">)</span><span class="synSpecial"> NOT NULL, </span><span class="synStatement">&quot;</span><span class="synConstant">pub_date</span><span class="synStatement">&quot;</span><span class="synSpecial"> datetime NOT NULL, </span><span class="synStatement">&quot;</span><span class="synConstant">image</span><span class="synStatement">&quot;</span><span class="synSpecial"> varchar</span><span class="synPreProc">(</span><span class="synConstant">100</span><span class="synPreProc">)</span><span class="synSpecial"> NOT NULL, </span><span class="synStatement">&quot;</span><span class="synConstant">body</span><span class="synStatement">&quot;</span><span class="synSpecial"> text NOT NULL</span><span class="synPreProc">)</span>;
COMMIT;
</pre>


<p>そして、この<a class="keyword" href="http://d.hatena.ne.jp/keyword/DDL">DDL</a>文を実行するコマンドが、「migrate」になります。</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>masao<span class="synConstant">-3</span>:ohankyblog konoe_mario$  python manage.py migrate
Operations to perform:
  Apply all migrations: admin, auth, contenttypes, posts, sessions
Running migrations:
  Applying contenttypes.0001_initial... OK
  Applying auth.0001_initial... OK
  Applying admin.0001_initial... OK
  Applying admin.0002_logentry_remove_auto_add... OK
  Applying contenttypes.0002_remove_content_type_name... OK
  Applying auth.0002_alter_permission_name_max_length... OK
  Applying auth.0003_alter_user_email_max_length... OK
  Applying auth.0004_alter_user_username_opts... OK
  Applying auth.0005_alter_user_last_login_null... OK
  Applying auth.0006_require_contenttypes_0002... OK
  Applying auth.0007_alter_validators_add_error_messages... OK
  Applying auth.0008_alter_user_username_max_length... OK
  Applying posts.0001_initial... OK
  Applying sessions.0001_initial... OK
</pre>


<p>初回のmigrateなんで、いろいろでてる。<br/>
postsも表示されているので、うまくいったみたい。</p>

<p><br/>
<br/></p>

<h1 id="Django-Admin"><a class="keyword" href="http://d.hatena.ne.jp/keyword/Django">Django</a> Admin</h1>

<p>さきほど、モデルを編集して、migrateして〜みたいなことをしたので、sqlliteにPostsモデルの定義をもつテーブルが作成されたはずです。</p>

<p>では、実際に作成したテーブルに値を入れるにはどうしたらいいんだろう、ということで、前回スルーした以下の<a class="keyword" href="http://d.hatena.ne.jp/keyword/Django">Django</a>管理者画面について触れていきます。</p>

<pre class="code lang-python" data-lang="python" data-unlink><span class="synPreProc">from</span> django.conf.urls <span class="synPreProc">import</span> url
<span class="synPreProc">from</span> django.contrib <span class="synPreProc">import</span> admin
<span class="synComment">#views.pyのohanky関数を呼ぶためにimport</span>
<span class="synPreProc">from</span> . <span class="synPreProc">import</span> views

urlpatterns = [
    <span class="synComment">#Djangoの管理者画面。今回触れないんだ。  </span>
    url(<span class="synConstant">r'^admin/'</span>, admin.site.urls),
    <span class="synComment">#ohankyworld/でアクセスすると関数ohankyworldが呼び出される</span>
    url(<span class="synConstant">r'^ohankyworld/'</span>, views.ohankyworld),
]
</pre>


<p>「<a href="http://localhost:8000/admin">http://localhost:8000/admin</a>」にアクセスすると、以下のような画面が開きます。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170606/20170606222553.png" alt="f:id:konoemario:20170606222553p:plain:w500" title="f:id:konoemario:20170606222553p:plain:w500" class="hatena-fotolife" style="width:500px" itemprop="image"></span></p>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/Django">Django</a>はこの管理画面からさきほど作成したモデルのデータを作成することができます。</p>

<h2 id="管理ユーザーの作成">管理ユーザーの作成</h2>

<p>まず、管理画面を使用するユーザーを作成する。<br/>
「createsuperuser」でuser名とアドレス(適当)、パスワードを設定して、サクッとつくります。</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>masao<span class="synConstant">-3</span>:ohankyblog konoe_mario$ python manage.py createsuperuser
Username <span class="synPreProc">(</span><span class="synSpecial">leave blank to use </span><span class="synStatement">'</span><span class="synConstant">konoe_mario</span><span class="synStatement">'</span><span class="synPreProc">)</span>: admin
Email address: admin@admin.jp
Password: 
Password <span class="synPreProc">(</span><span class="synSpecial">again</span><span class="synPreProc">)</span>: 
Superuser created successfully.
</pre>


<h2 id="管理画面をさわってみる">管理画面をさわってみる</h2>

<p>ログインすると、以下の画面が表示されます。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170606/20170606223719.png" alt="f:id:konoemario:20170606223719p:plain:w500" title="f:id:konoemario:20170606223719p:plain:w500" class="hatena-fotolife" style="width:500px" itemprop="image"></span></p>

<p>が、このままでは作成したPostモデルを触ることができません。</p>

<p>編集できるようにするには、「admin.py」に以下の定義を追加する必要があります。</p>

<p><b>admin.py</b></p>

<pre class="code lang-python" data-lang="python" data-unlink><span class="synPreProc">from</span> django.contrib <span class="synPreProc">import</span> admin

<span class="synComment"># Register your models here.</span>
<span class="synPreProc">from</span> .models <span class="synPreProc">import</span> Post

<span class="synComment">#admin管理画面でさわれるようにする。</span>
admin.site.register(Post)
</pre>


<p>定義を追加したあとに、管理者画面をリロードすると、以下のように作成したモデル（というよりアプリケーション？）が追加されます。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170606/20170606223721.png" alt="f:id:konoemario:20170606223721p:plain:w500" title="f:id:konoemario:20170606223721p:plain:w500" class="hatena-fotolife" style="width:500px" itemprop="image"></span></p>

<p>追加されたPostをクリックすると、まだなんもない状態であることがわかります。</p>

<p>そこから画面右上のADD POSTを押下します。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170606/20170606224614.png" alt="f:id:konoemario:20170606224614p:plain:w500" title="f:id:konoemario:20170606224614p:plain:w500" class="hatena-fotolife" style="width:500px" itemprop="image"></span></p>

<p>そうすると、以下の画面のように、モデルに定義したフィールドを持つ入力画面が表示されるではありませんか！</p>

<p>さっそくデータを適当に入力してみました。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170606/20170606224757.png" alt="f:id:konoemario:20170606224757p:plain:w500" title="f:id:konoemario:20170606224757p:plain:w500" class="hatena-fotolife" style="width:500px" itemprop="image"></span></p>

<p>さらにさらに、合計4件ほど追加しました。<br/>
「Post object」なるものが4件ほどあるのがわかるかと思います。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170606/20170606224905.png" alt="f:id:konoemario:20170606224905p:plain:w500" title="f:id:konoemario:20170606224905p:plain:w500" class="hatena-fotolife" style="width:500px" itemprop="image"></span></p>

<p><br/>
<br/></p>

<h1 id="管理者画面で作成したデータをpythonでさわる">管理者画面で作成したデータを<a class="keyword" href="http://d.hatena.ne.jp/keyword/python">python</a>でさわる</h1>

<p>さきほど管理者画面で作成したデータをviews.pyからさわります。</p>

<p>さわるといっても、すごく簡単です。</p>

<pre class="code lang-python" data-lang="python" data-unlink><span class="synPreProc">from</span> django.shortcuts <span class="synPreProc">import</span> render
<span class="synPreProc">from</span> .models <span class="synPreProc">import</span> Post

<span class="synComment"># Create your views here.</span>
<span class="synStatement">def</span> <span class="synIdentifier">home</span>(request):

    <span class="synComment">#Postオブジェクトを取得</span>
    posts =  Post.objects.order_by(<span class="synConstant">'pub_date'</span>)

    <span class="synComment">#home.htmlにはディクショナリ形式の引数を与えることでデータを渡すことができる！</span>
    <span class="synStatement">return</span> render(request, <span class="synConstant">'posts/home.html'</span>,{<span class="synConstant">'posts'</span>:posts})
</pre>


<p>postモジュールをimportするだけです。<br/>
取得したモデルは、前回同様、ディクショナリ形式でrender関数に渡すだけで、html側で参照できます。</p>

<p>home.html側はこんな感じです。</p>

<p><b>home.html</b></p>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synComment">&lt;!DOCTYPE html&gt;</span>
<span class="synIdentifier">&lt;</span><span class="synStatement">html</span><span class="synIdentifier"> </span><span class="synType">lang</span><span class="synIdentifier">=</span><span class="synConstant">&quot;en&quot;</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;</span><span class="synStatement">head</span><span class="synIdentifier">&gt;</span>
<span class="synPreProc">    </span><span class="synIdentifier">&lt;</span><span class="synStatement">meta</span><span class="synIdentifier"> </span><span class="synType">charset</span><span class="synIdentifier">=</span><span class="synConstant">&quot;UTF-8&quot;</span><span class="synIdentifier">&gt;</span>
<span class="synPreProc">    </span><span class="synIdentifier">&lt;</span><span class="synStatement">title</span><span class="synIdentifier">&gt;</span>Title<span class="synIdentifier">&lt;/</span><span class="synStatement">title</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">head</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;</span><span class="synStatement">body</span><span class="synIdentifier">&gt;</span>
<span class="synComment">&lt;!-- postオブジェクトは複数あるので、こんな感じでループさせる。--&gt;</span>
{% for post in posts.all %}
    <span class="synIdentifier">&lt;</span><span class="synStatement">h3</span><span class="synIdentifier">&gt;</span> {{ post.title }}<span class="synIdentifier">&lt;/</span><span class="synStatement">h3</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span> {{ post.pub_date }}<span class="synIdentifier">&lt;/</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">img</span><span class="synIdentifier"> </span><span class="synType">src</span><span class="synIdentifier">=</span><span class="synConstant">&quot;{{ post.image.url }}&quot;</span><span class="synIdentifier">/&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span> {{ post.body }} <span class="synIdentifier">&lt;/</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>

{% endfor %}
<span class="synIdentifier">&lt;/</span><span class="synStatement">body</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">html</span><span class="synIdentifier">&gt;</span>
</pre>


<p>上記、定義を追加したあとに実際に「<a href="http://localhost:8000/">http://localhost:8000/</a>」にアクセスすると、<br/>
管理者画面から追加した内容が表示されていることが確認できます。  <br/>
※イメージが表示できてないのは個別で設定が必要。  <br/>
<span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170608/20170608150639.png" alt="f:id:konoemario:20170608150639p:plain:w500" title="f:id:konoemario:20170608150639p:plain:w500" class="hatena-fotolife" style="width:500px" itemprop="image"></span></p>

<h1 id="一旦ここまでをまとめ">一旦、ここまでをまとめ</h1>

<p>関係性をかんたんに書きました。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170608/20170608162649.png" alt="f:id:konoemario:20170608162649p:plain:w500" title="f:id:konoemario:20170608162649p:plain:w500" class="hatena-fotolife" style="width:500px" itemprop="image"></span></p>

<p>長くなったので、次回に続くかもです。</p>

<p>次回
<iframe src="https://hatenablog-parts.com/embed?url=http%3A%2F%2Ftohutokonsome.hatenablog.com%2Fentry%2F2017%2F06%2F10%2F211145" title="Djangoを学ぶ(3):画像の表示 - 豆腐とコンソメ" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://tohutokonsome.hatenablog.com/entry/2017/06/10/211145">tohutokonsome.hatenablog.com</a></cite></p>

-----
--------
AUTHOR: konoemario
TITLE: Djangoを学ぶ(1)
BASENAME: 2017/06/03/221238
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 06/03/2017 22:12:38
CATEGORY: Python
CATEGORY: プログラム
CATEGORY: Django
IMAGE: https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170603/20170603185035.png
-----
BODY:
<p>せっかくだし<a class="keyword" href="http://d.hatena.ne.jp/keyword/python">python</a>を使って、Webアプリケーションも作りたいな！と思って<a class="keyword" href="http://d.hatena.ne.jp/keyword/Django">Django</a>にたどり着きました。<br/>
そして都合がよい事にオンライン学習の「Udemy」でセールがあった際に「<a class="keyword" href="http://d.hatena.ne.jp/keyword/Django">Django</a>の入門編」を見つけて購入していたので、始めることにしました。</p>

<p><iframe src="//hatenablog-parts.com/embed?url=https%3A%2F%2Fwww.udemy.com%2Fthe-ultimate-beginners-guide-to-django-python-web-dev-website%2Flearn%2Fv4%2Foverview" title="The Ultimate Beginner&#39;s Guide to Django - Udemy" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://www.udemy.com/the-ultimate-beginners-guide-to-django-python-web-dev-website/learn/v4/overview">www.udemy.com</a></cite></p>

<p>当初は、オンライン学習のみをこつこつとやっていたのですが、動画ベースの講座なので時間が開くとさっぱり忘れちゃっていて、思い出すにも動画を見返さないといけなくって結構しんどいです。</p>

<p>なので、ここでは学習サイトでやった部分のうち、重要だと思われる部分を抜粋して記載していこうかと思います。</p>

<p> ただ、英語がぜんぜんわからないのに、英語の動画を見ているので、作業内容はともかく、口頭でいっているかもしれない重要なエッセンスは結構な頻度で漏らしている可能性があります。</p>

<p>そういった部分があれば、コメント等でご指摘いただければ幸いです。</p>

<ul class="table-of-contents">
    <li><a href="#Djangoのインストール">Djangoのインストール</a></li>
    <li><a href="#プロジェクトの作成">プロジェクトの作成</a></li>
    <li><a href="#Webサーバーの立ち上げ">Webサーバーの立ち上げ</a></li>
    <li><a href="#HelloWorld">HelloWorld</a><ul>
            <li><a href="#viewspyの作成">views.pyの作成</a></li>
            <li><a href="#urlpyの編集">url.pyの編集</a></li>
        </ul>
    </li>
    <li><a href="#簡単なWebページを作成してみる">簡単なWebページを作成してみる</a><ul>
            <li><a href="#homehtmlの作成">home.htmlの作成</a></li>
            <li><a href="#templatesの作成">templatesの作成</a></li>
            <li><a href="#settingpyの編集">setting.pyの編集</a></li>
            <li><a href="#ohankyhtmlを一旦作成">ohanky.htmlを一旦作成</a></li>
            <li><a href="#homehtmlからohankyhtmlへの遷移">home.htmlからohanky.htmlへの遷移</a><ul>
                    <li><a href="#homehtmlの入力内容をohankyhtmlに表示する">home.htmlの入力内容をohanky.htmlに表示する。</a></li>
                </ul>
            </li>
        </ul>
    </li>
</ul>

<h1 id="Djangoのインストール"><a class="keyword" href="http://d.hatena.ne.jp/keyword/Django">Django</a>のインス<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C8%A1%BC">トー</a>ル</h1>

<p>まずは、導入作業から。<br/>
pipでとってくるだけ。</p>

<pre class="code" data-lang="" data-unlink>masao-3:~ konoe_mario$ sudo pip3 install django</pre>


<h1 id="プロジェクトの作成">プロジェクトの作成</h1>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/Django">Django</a>には、プロジェクトという概念があるみたい。<br/>
プロジェクト単位にテスト用のWebサーバを立ち上げたりできる。</p>

<p>今回は、「sample」という名前でプロジェクトを作った。</p>

<pre class="code lang-sh" data-lang="sh" data-unlink><span class="synComment">#django-admin startproject プロジェクト名</span>
django-admin startproject sample
</pre>


<p>プロジェクトを作成すると、以下のファイルが作成される。<br/>
「db.sqllite3」は後述のrunserverを行うことで作成されるみたいなので 、この時点でなくても大丈夫。</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>masao<span class="synConstant">-3</span>:sample konoe_mario$ tree
.
├── db.sqlite3
├── manage.py
└── sample
    ├── __init__.py
    ├── __pycache__
    ├── settings.py
    ├── urls.py
    └── wsgi.py
</pre>


<h1 id="Webサーバーの立ち上げ">Webサーバーの立ち上げ</h1>

<p>プロジェクトを作成した際に、作成される「manage.py」でWebサーバーを立ち上げることができる。</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>masao<span class="synConstant">-3</span>:sample konoe_mario$ python manage.py runserver
</pre>


<p>上記、コマンドを実行すると、「<a href="http://127.0.0.1:8000/">http://127.0.0.1:8000/</a>」でテスト用のWebサーバが起動しているよ！とのメッセージが表示される。</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>Performing system checks...

System check identified no issues <span class="synPreProc">(</span><span class="synConstant">0</span><span class="synSpecial"> silenced</span><span class="synPreProc">)</span>.

You have <span class="synConstant">13</span> unapplied migration<span class="synPreProc">(</span><span class="synSpecial">s</span><span class="synPreProc">)</span>. Your project may not work properly <span class="synStatement">until you apply the migrations for</span> app<span class="synPreProc">(</span>s<span class="synPreProc">)</span>: admin, auth, contenttypes, sessions.
Run <span class="synStatement">'</span><span class="synConstant">python manage.py migrate</span><span class="synStatement">'</span> to apply them.

June <span class="synConstant">03</span>, <span class="synConstant">2017</span> - <span class="synConstant">09</span>:<span class="synConstant">45</span>:<span class="synConstant">20</span>
Django version 1.11, using settings <span class="synStatement">'</span><span class="synConstant">sample.settings</span><span class="synStatement">'</span>
Starting development server at http://127.0.0.1:<span class="synConstant">8000</span>/
Quit the server with CONTROL-C.
</pre>


<p>さっそく、ブラウザでアクセスしてみると、以下の画面が表示され、無事起動できていることが確認できた。<br/>
<span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170603/20170603185035.png" alt="f:id:konoemario:20170603185035p:plain:w500" title="f:id:konoemario:20170603185035p:plain:w500" class="hatena-fotolife" style="width:500px" itemprop="image"></span></p>

<p>ポート番号をデフォルトの8000以外にしたいときは、runserver時にポート番号を指定することで変更できるみたい。</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>masao<span class="synConstant">-3</span>:sample konoe_mario$ python manage.py runserver <span class="synConstant">8080</span>
</pre>


<p>終了したいときはctrl+cで終了する。</p>

<p><br></p>

<h1 id="HelloWorld">HelloWorld</h1>

<p>とりあえず、ブラウザから特定のURLにアクセスして、<a class="keyword" href="http://d.hatena.ne.jp/keyword/python">python</a>コードで「<a class="keyword" href="http://d.hatena.ne.jp/keyword/Hello%20World">Hello World</a>」ちっくなことをやってみる。</p>

<h2 id="viewspyの作成">views.pyの作成</h2>

<p>プロジェクトのsample配下に「views.py」を作成する。<br/>
この中に、HTTPリク<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A8%A5%B9">エス</a>トから呼ばれる関数を書く。<br/>
名前に関しては「views.py」じゃなきゃいけないということではなさそうだけれども、動画の通りに作成した。</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>masao<span class="synConstant">-3</span>:sample konoe_mario$ tree
.
├── db.sqlite3
├── manage.py
├── sample
   ├── __init__.py
   ├── settings.py
   ├── urls.py
   ├── views.py ←----------これ
   └── wsgi.py
</pre>


<p><br></p>

<p>views.pyの内容は以下の通り。 <br/>
クライアントからのHTTPリク<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A8%A5%B9">エス</a>トでohankywolrd関数が呼ばれ、レスポンスとして「OhankyWorld」を返すだけ。</p>

<p><b>views.py</b></p>

<pre class="code lang-python" data-lang="python" data-unlink><span class="synPreProc">from</span> django.http <span class="synPreProc">import</span> HttpResponse

<span class="synStatement">def</span> <span class="synIdentifier">ohankyworld</span>(request):
    <span class="synStatement">return</span> HttpResponse(<span class="synConstant">&quot;Ohanky World&quot;</span>)
</pre>


<h2 id="urlpyの編集">url.pyの編集</h2>

<p>さきほど作成した「ohankyworld」関数をURLと紐づける。
プロジェクト作成時に作成されるurl.pyファイルを開くと、urlと関数の紐付けを定義する箇所がある。</p>

<p>ここに作成した、「ohankyworld」を追加する。<br/>
view.pyをimportしないと、ohankyworldはurls.pyからは見えないので追加する。</p>

<p><b>urls.py</b></p>

<pre class="code lang-python" data-lang="python" data-unlink><span class="synPreProc">from</span> django.conf.urls <span class="synPreProc">import</span> url
<span class="synPreProc">from</span> django.contrib <span class="synPreProc">import</span> admin
<span class="synComment">#views.pyのohanky関数を呼ぶためにimport</span>
<span class="synPreProc">from</span> . <span class="synPreProc">import</span> views

urlpatterns = [
    <span class="synComment">#Djangoの管理者画面。今回触れないんだ。  </span>
    url(<span class="synConstant">r'^admin/'</span>, admin.site.urls),
    <span class="synComment">#ohankyworld/でアクセスすると関数ohankyworldが呼び出される</span>
    url(<span class="synConstant">r'^ohankyworld/'</span>, views.ohankyworld),
]
</pre>


<p>上記設定後に、「<a href="http://localhost:8000/ohankyworld">http://localhost:8000/ohankyworld</a>」にアクセスしてみれば、「Ohanky World！」と表示される。</p>

<p><br>
<br></p>

<h1 id="簡単なWebページを作成してみる">簡単なWebページを作成してみる</h1>

<p>次に<a class="keyword" href="http://d.hatena.ne.jp/keyword/Django">Django</a>の基本を理解するために、簡単なWebページを作成してみる。  <br/>
作成するWebサイトの構成は以下のとおり。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170603/20170603213320.png" alt="f:id:konoemario:20170603213320p:plain:w500" title="f:id:konoemario:20170603213320p:plain:w500" class="hatena-fotolife" style="width:500px" itemprop="image"></span></p>

<h2 id="homehtmlの作成">home.htmlの作成</h2>

<p>まず、新規に「templates」<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C7%A5%A3%A5%EC%A5%AF%A5%C8">ディレクト</a>リを作成して、その配下に「home.html」を置く。</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>masao<span class="synConstant">-3</span>:sample konoe_mario$ tree
.
├── db.sqlite3
├── manage.py
├── sample
│   ├── __init__.py
│   ├── __pycache__
│   ├── settings.py
│   ├── urls.py
│   ├── views.py
│   └── wsgi.py
└── templates    ←---------------これ
    ├── home.html
</pre>


<p><br></p>

<p>home.htmlを抜粋すると以下の通り。
<br>    <br/>
<b>home.html</b></p>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span><span class="synStatement">h1</span><span class="synIdentifier">&gt;</span>おはんきーてすと<span class="synIdentifier">&lt;/</span><span class="synStatement">h1</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;</span><span class="synStatement">form</span><span class="synIdentifier"> </span><span class="synType">action</span><span class="synIdentifier">=</span><span class="synConstant">&quot;xxxxx&quot;</span><span class="synIdentifier">&gt;</span>
        <span class="synIdentifier">&lt;</span><span class="synStatement">input</span><span class="synIdentifier"> </span><span class="synType">type</span><span class="synIdentifier">=</span><span class="synConstant">&quot;text&quot;</span><span class="synIdentifier">  </span><span class="synType">name</span><span class="synIdentifier">=</span><span class="synConstant">&quot;myText1&quot;</span><span class="synIdentifier">/&gt;</span>
        <span class="synIdentifier">&lt;</span><span class="synStatement">br</span><span class="synIdentifier">&gt;</span>
        <span class="synIdentifier">&lt;</span><span class="synStatement">input</span><span class="synIdentifier"> </span><span class="synType">type</span><span class="synIdentifier">=</span><span class="synConstant">&quot;text&quot;</span><span class="synIdentifier">  </span><span class="synType">name</span><span class="synIdentifier">=</span><span class="synConstant">&quot;myText2&quot;</span><span class="synIdentifier">/&gt;</span>
        <span class="synIdentifier">&lt;</span><span class="synStatement">br</span><span class="synIdentifier">&gt;</span>
        <span class="synIdentifier">&lt;</span><span class="synStatement">input</span><span class="synIdentifier"> </span><span class="synType">type</span><span class="synIdentifier">=</span><span class="synConstant">&quot;submit&quot;</span><span class="synIdentifier"> </span><span class="synType">value</span><span class="synIdentifier">=</span><span class="synConstant">&quot;Button&quot;</span><span class="synIdentifier">/&gt;</span>
    <span class="synIdentifier">&lt;/</span><span class="synStatement">form</span><span class="synIdentifier">&gt;</span>
</pre>


<p>formタグのAcitonがポイントになるのだけれども、ちょっと話がそれるので一旦xxxxとしています。</p>

<p><br></p>

<h2 id="templatesの作成">templatesの作成</h2>

<p>さきほど作成した<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C7%A5%A3%A5%EC%A5%AF%A5%C8">ディレクト</a>リのtemplatesのこと書く。<br/>
HelloWorldを試したときは、HttpResoponseとして文字列「Ohanky World!」を返した。</p>

<p><b>views.py</b></p>

<pre class="code lang-python" data-lang="python" data-unlink><span class="synPreProc">from</span> django.http <span class="synPreProc">import</span> HttpResponse

<span class="synStatement">def</span> <span class="synIdentifier">onankyworld</span>(request):
    <span class="synStatement">return</span> HttpResponse(<span class="synConstant">&quot;Ohanky World&quot;</span>)
</pre>


<p>文字列ではなく、htmlファイルをレスポンスとして返したい場合、templatesの機能を使うことで簡単にできる。</p>

<p><b>views.py</b></p>

<pre class="code lang-python" data-lang="python" data-unlink><span class="synPreProc">from</span> django.http <span class="synPreProc">import</span> HttpResponse
<span class="synComment">#templatesの機能を使うのに必要</span>
<span class="synPreProc">from</span> django.shortcuts <span class="synPreProc">import</span> render

<span class="synStatement">def</span> <span class="synIdentifier">home</span>(request):
   <span class="synComment">#render関数に返却するhtmlファイルを指定</span>
   <span class="synStatement">return</span> render(request, <span class="synConstant">'home.html'</span>)
</pre>


<p>ただし、このままではうまくいかない。<br/>
home.htmlがどこにあるを定義する必要がある。</p>

<p><br></p>

<h2 id="settingpyの編集">setting.pyの編集</h2>

<p>render関数に指定したhtmlファイルがどこにあるかは、プロジェクトを作成した際に自動で作成される「setting.py」で指定する。  <br/>
「setting.py」のTEMPLATESに、home.htmlを置いた<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C7%A5%A3%A5%EC%A5%AF%A5%C8">ディレクト</a>リ「templates」を指定する。 <br/>
こうすることで、render関数はtemplates配下のファイルを探しに行ってくれるみたい。</p>

<p><b>setting.py</b></p>

<pre class="code lang-python" data-lang="python" data-unlink>TEMPLATES = [
    {
        <span class="synConstant">'BACKEND'</span>: <span class="synConstant">'django.template.backends.django.DjangoTemplates'</span>,
        <span class="synConstant">'DIRS'</span>: [<span class="synConstant">'templates'</span>],     ←-------ここ
        <span class="synConstant">'APP_DIRS'</span>: <span class="synIdentifier">True</span>,
        <span class="synConstant">'OPTIONS'</span>: {
            <span class="synConstant">'context_processors'</span>: [
                <span class="synConstant">'django.template.context_processors.debug'</span>,
                <span class="synConstant">'django.template.context_processors.request'</span>,
                <span class="synConstant">'django.contrib.auth.context_processors.auth'</span>,
                <span class="synConstant">'django.contrib.messages.context_processors.messages'</span>,
            ],
        },
    },
]
</pre>


<p>また忘れずに、「url.py」にもhome.htmlの定義を追加しておく。</p>

<p><b>urls.py</b></p>

<pre class="code lang-python" data-lang="python" data-unlink><span class="synPreProc">from</span> django.conf.urls <span class="synPreProc">import</span> url
<span class="synPreProc">from</span> django.contrib <span class="synPreProc">import</span> admin
<span class="synPreProc">from</span> . <span class="synPreProc">import</span> views

urlpatterns = [
    url(<span class="synConstant">r'^admin/'</span>, admin.site.urls),
    <span class="synComment">#home.htmlを返す</span>
    url(<span class="synConstant">r'^home/'</span>, views.home),
]
</pre>


<p>ここまでやったら、「<a href="http://localhost:8000/home">http://localhost:8000/home</a>」でhomeにアクセスしてみる。</p>

<p>無事、表示されることが確認できた。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170603/20170603205643.png" alt="f:id:konoemario:20170603205643p:plain:w500" title="f:id:konoemario:20170603205643p:plain:w500" class="hatena-fotolife" style="width:500px" itemprop="image"></span></p>

<p><br></p>

<h2 id="ohankyhtmlを一旦作成">ohanky.htmlを一旦作成</h2>

<p>次にhome.htmlの入力内容を表示するohanky.htmlを作成する。<br/>
home.htmlと同じtemplates<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C7%A5%A3%A5%EC%A5%AF%A5%C8">ディレクト</a>リ配下に作成する。</p>

<p><b>ohanky.html</b></p>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span><span class="synStatement">h1</span><span class="synIdentifier">&gt;</span>ここに、home.htmlで入力した内容を表示したい<span class="synIdentifier">&lt;/</span><span class="synStatement">h1</span><span class="synIdentifier">&gt;</span>
</pre>


<p>また、views.py、urls.pyにもohanky.htmlが参照できるように追記しておく。</p>

<p><b>views.py</b></p>

<pre class="code lang-python" data-lang="python" data-unlink><span class="synPreProc">from</span> django.http <span class="synPreProc">import</span> HttpResponse
<span class="synComment">#setting.pyでtemplatesの設定をした</span>
<span class="synPreProc">from</span> django.shortcuts <span class="synPreProc">import</span> render

<span class="synStatement">def</span> <span class="synIdentifier">home</span>(request):
   <span class="synStatement">return</span> render(request, <span class="synConstant">'home.html'</span>)

<span class="synStatement">def</span> <span class="synIdentifier">ohanky</span>(request):
   <span class="synStatement">return</span> render(request, <span class="synConstant">'ohanky.html'</span>)
</pre>


<p><b>urls.py</b></p>

<pre class="code lang-python" data-lang="python" data-unlink><span class="synPreProc">from</span> django.conf.urls <span class="synPreProc">import</span> url
<span class="synPreProc">from</span> django.contrib <span class="synPreProc">import</span> admin
<span class="synPreProc">from</span> . <span class="synPreProc">import</span> views

urlpatterns = [
    url(<span class="synConstant">r'^admin/'</span>, admin.site.urls),
    <span class="synComment">#home.htmlを返す</span>
    url(<span class="synConstant">r'^home/'</span>, views.home),
    <span class="synComment">#ohanky.htmlを返す</span>
    url(<span class="synConstant">r'^ohanky/'</span>, views.ohanky),
]
</pre>


<p>「<a href="http://localhost:8000/ohanky">http://localhost:8000/ohanky</a>」にアクセスするとhtmlの内容が表示される。</p>

<p> <span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170603/20170603215348.png" alt="f:id:konoemario:20170603215348p:plain:w500" title="f:id:konoemario:20170603215348p:plain:w500" class="hatena-fotolife" style="width:500px" itemprop="image"></span></p>

<p><br></p>

<h2 id="homehtmlからohankyhtmlへの遷移">home.htmlからohanky.htmlへの遷移</h2>

<p>ここで、さきほど端折ったButtonを押したときのacitonについて書く。   action=&ldquo;xxxx"だった部分について、以下のように変更する。
昔さわった<a class="keyword" href="http://d.hatena.ne.jp/keyword/php">php</a>を思い出した。</p>

<p><b>home.html</b></p>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span><span class="synStatement">h1</span><span class="synIdentifier">&gt;</span>おはんきーてすと<span class="synIdentifier">&lt;/</span><span class="synStatement">h1</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;</span><span class="synStatement">form</span><span class="synIdentifier"> </span><span class="synType">action</span><span class="synIdentifier">=</span><span class="synConstant">&quot;{% url  'ohanky' %}&quot;</span><span class="synIdentifier">&gt;</span>
        <span class="synIdentifier">&lt;</span><span class="synStatement">input</span><span class="synIdentifier"> </span><span class="synType">type</span><span class="synIdentifier">=</span><span class="synConstant">&quot;text&quot;</span><span class="synIdentifier">  </span><span class="synType">name</span><span class="synIdentifier">=</span><span class="synConstant">&quot;myText1&quot;</span><span class="synIdentifier">/&gt;</span>
        <span class="synIdentifier">&lt;</span><span class="synStatement">br</span><span class="synIdentifier">&gt;</span>
        <span class="synIdentifier">&lt;</span><span class="synStatement">input</span><span class="synIdentifier"> </span><span class="synType">type</span><span class="synIdentifier">=</span><span class="synConstant">&quot;text&quot;</span><span class="synIdentifier">  </span><span class="synType">name</span><span class="synIdentifier">=</span><span class="synConstant">&quot;myText2&quot;</span><span class="synIdentifier">/&gt;</span>
        <span class="synIdentifier">&lt;</span><span class="synStatement">br</span><span class="synIdentifier">&gt;</span>
        <span class="synIdentifier">&lt;</span><span class="synStatement">input</span><span class="synIdentifier"> </span><span class="synType">type</span><span class="synIdentifier">=</span><span class="synConstant">&quot;submit&quot;</span><span class="synIdentifier"> </span><span class="synType">value</span><span class="synIdentifier">=</span><span class="synConstant">&quot;Button&quot;</span><span class="synIdentifier">/&gt;</span>
    <span class="synIdentifier">&lt;/</span><span class="synStatement">form</span><span class="synIdentifier">&gt;</span>
</pre>


<p>さらに、urls.pyのohaky.html部分のurl関数に引数nameを与える。<br/>
このnameが前述のform actionで指定する名前になる。</p>

<p><b>urls.py</b></p>

<pre class="code lang-python" data-lang="python" data-unlink><span class="synPreProc">from</span> django.conf.urls <span class="synPreProc">import</span> url
<span class="synPreProc">from</span> django.contrib <span class="synPreProc">import</span> admin
<span class="synPreProc">from</span> . <span class="synPreProc">import</span> views

urlpatterns = [
    url(<span class="synConstant">r'^admin/'</span>, admin.site.urls),
    <span class="synComment">#home.htmlを返す</span>
    url(<span class="synConstant">r'^home/'</span>, views.home),
    <span class="synComment">#ohanky.htmlを返す</span>
    url(<span class="synConstant">r'^ohanky/'</span>, views.ohanky, name=<span class="synConstant">'ohanky'</span>),
]
</pre>


<p>この状態でButtonを押すと、「ohanky.html」に遷移してくれると思う。</p>

<p><br></p>

<h3 id="homehtmlの入力内容をohankyhtmlに表示する">home.htmlの入力内容をohanky.htmlに表示する。</h3>

<p>さきほど作成した、ohanky関数にrequest.GETメソッドを追加することでhome.htmlの入力フォームの内容を取得することができる。<br/>
これを、render関数の引数にディクショナリ形式で渡す。</p>

<p><b>views.py</b></p>

<pre class="code lang-python" data-lang="python" data-unlink><span class="synPreProc">from</span> django.http <span class="synPreProc">import</span> HttpResponse
<span class="synComment">#setting.pyでtemplatesの設定をした</span>
<span class="synPreProc">from</span> django.shortcuts <span class="synPreProc">import</span> render

<span class="synStatement">def</span> <span class="synIdentifier">home</span>(request):
   <span class="synStatement">return</span> render(request, <span class="synConstant">'home.html'</span>)

<span class="synStatement">def</span> <span class="synIdentifier">ohanky</span>(request):
    <span class="synComment">#request.GETメソッドtextを取得する。</span>
    mytext1 = request.GET[<span class="synConstant">'myText1'</span>]
    mytext2 = request.GET[<span class="synConstant">'myText2'</span>]

    <span class="synComment">#ディクショナリ形式の引数を渡す</span>
    <span class="synStatement">return</span> render(request, <span class="synConstant">'ohanky.html'</span>,{<span class="synConstant">'mytext1'</span>:mytext1,<span class="synConstant">'mytext2'</span>:mytext2})
</pre>


<p>ohanky.html側には、「{{ディクショナリのキー}}」を記載することで表示することができる。</p>

<p><b>ohanky.html</b></p>

<pre class="code lang-html" data-lang="html" data-unlink>    <span class="synIdentifier">&lt;</span><span class="synStatement">h1</span><span class="synIdentifier">&gt;</span>
        {{ mytext1}}
        {{ mytext2}}
    <span class="synIdentifier">&lt;/</span><span class="synStatement">h1</span><span class="synIdentifier">&gt;</span>
</pre>


<p>次回に続きます。<br/>
<iframe src="https://hatenablog-parts.com/embed?url=http%3A%2F%2Ftohutokonsome.hatenablog.com%2Fentry%2F2017%2F06%2F08%2F163004" title="Djangoを学ぶ(2)：ブログサイトの作成 - 豆腐とコンソメ" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://tohutokonsome.hatenablog.com/entry/2017/06/08/163004">tohutokonsome.hatenablog.com</a></cite></p>

-----
--------
AUTHOR: konoemario
TITLE: RaspBerryPiでapt-getがエラーになった
BASENAME: 2017/05/30/234645
STATUS: Draft
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 05/30/2017 23:46:45
-----
BODY:
<p>久しぶりにapt-getしたら、以下のエラーがでた。</p>

<p>結果的に、固定IPにしたときに、<a class="keyword" href="http://d.hatena.ne.jp/keyword/DNS">DNS</a>の設定をミスしてたことが原因だったのだけれども、やったことをメモ。</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>pi@raspberrypi:/etc $ sudo apt-get update
エラー http://archive.raspberrypi.org jessie InRelease
  
エラー http://archive.raspberrypi.org jessie Release.gpg 
  <span class="synStatement">'</span><span class="synConstant">archive.raspberrypi.org</span><span class="synStatement">'</span> を解決できませんでした
エラー http://mirrordirector.raspbian.org jessie InRelease
  
エラー http://mirrordirector.raspbian.org jessie Release.gpg
  <span class="synStatement">'</span><span class="synConstant">mirrordirector.raspbian.org</span><span class="synStatement">'</span> を解決できませんでした
<span class="synStatement">'''</span>

<span class="synConstant">##cat /etc/resolv.conf</span>


<span class="synConstant">#</span>
<span class="synConstant">PC側のDNSの設定</span>
<span class="synStatement">'''</span>sh
<span class="synPreProc">(</span><span class="synSpecial">raspberry_3.5.1</span><span class="synPreProc">)</span> masao<span class="synConstant">-3</span>:~ konoe_mario$ cat /etc/resolv.conf
<span class="synComment">#</span>
<span class="synComment"># Mac OS X Notice</span>
<span class="synComment">#</span>
<span class="synComment"># This file is not used by the host name and address resolution</span>
<span class="synComment"># or the DNS query routing mechanisms used by most processes on</span>
<span class="synComment"># this Mac OS X system.</span>
<span class="synComment">#</span>
<span class="synComment"># This file is automatically generated.</span>
<span class="synComment">#</span>
search flets-east.jp iptvf.jp
nameserver 8.8.8.8
nameserver 8.8.8.4
</pre>


<p>ラズパイ側の設定</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>空っぽ
</pre>


-----
--------
AUTHOR: konoemario
TITLE: モータードライバ(DRV8835)でレゴのモーターがまわるようになった
BASENAME: 2017/05/30/204052
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 05/30/2017 20:40:52
CATEGORY: ラズパイ
-----
BODY:
<p>なぜか、うまくいった記事なのでだいぶ消化不良な内容になっています。<br/>
時間があるときに、事象の再現等、試してみます。</p>

<h1>以前の問題</h1>

<p><iframe src="http://tohutokonsome.hatenablog.com/embed/2017/05/14/132237" title="レゴMモーターがモータードライバーを使用した場合に回転しない（知恵袋用) - 豆腐とコンソメ" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://tohutokonsome.hatenablog.com/entry/2017/05/14/132237">tohutokonsome.hatenablog.com</a></cite></p>

<ul>
<li><p>モータードライバ(DRV8835)を使用してレゴのMモーターを接続してもピーという音が聞こえるだけで動かない</p></li>
<li><p>同様の事象が発生している記事を教えていただいた。レゴMモーターの付属の<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%C7%A5%F3%A5%B5">コンデンサ</a>が10uFと大きく、これが原因ではないかとのこと</p></li>
<li><p>ただ、私が作業してこの事象が発生しているときには<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%C7%A5%F3%A5%B5">コンデンサ</a>の容量を10uF→0.1uFに変更していたので、状況が少し違う。原因は謎のまま、諦めムード</p></li>
<li><p>さきほど、試してみたらなぜか動いた　←今日の内容</p></li>
</ul>


<h1>前回と違うところ</h1>

<p>前回の回路図のメモが足りず、比較ができないのがいまいちなのですが、
ダメだった例と、うまくいった例を並べてます。</p>

<p>(ダメだったとき)<br/>
<span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170530/20170530202945.png" alt="f:id:konoemario:20170530202945p:plain:w500" title="f:id:konoemario:20170530202945p:plain:w500" class="hatena-fotolife" style="width:500px" itemprop="image"></span></p>

<p>(うまくいったとき)<br/>
<span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170530/20170530202949.png" alt="f:id:konoemario:20170530202949p:plain:w500" title="f:id:konoemario:20170530202949p:plain:w500" class="hatena-fotolife" style="width:500px" itemprop="image"></span></p>

<p>図を並べるまでもないのですが、VCCの電圧を3.3Vから5Vに変更したら動きました。</p>

<p>こちらの<a href="http://akizukidenshi.com/download/ds/ti/drv8835.pdf">データシート</a>や、
<a href="https://www.pololu.com/product/2135">こちらを</a>みると、モータードライバーの制御用電源(VCC)は2V〜7Vとあります。</p>

<p>なので、気にせず3.3Vを使用していたのですが、モーターが回転しませんでした。</p>

<p>こちら5Vに変えることで無事に回るようになりました。</p>

<p>こちらについては、レゴのMモーター、Lモーター、XLモーターで回ることを確認できました。</p>

<p><div class="hatena-asin-detail"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B0014QXN08/hatena-blog-22/"><img src="https://images-fe.ssl-images-amazon.com/images/I/51T6Ly0dCxL._SL160_.jpg" class="hatena-asin-detail-image" alt="レゴ (LEGO) テクニック パワーファンクション・モーターセット 8293" title="レゴ (LEGO) テクニック パワーファンクション・モーターセット 8293"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B0014QXN08/hatena-blog-22/">レゴ (LEGO) テクニック パワーファンクション・モーターセット 8293</a></p><ul><li><span class="hatena-asin-detail-label">出版社/メーカー:</span> レゴ (<a class="keyword" href="http://d.hatena.ne.jp/keyword/LEGO">LEGO</a>)</li><li><span class="hatena-asin-detail-label">発売日:</span> 2009/02/22</li><li><span class="hatena-asin-detail-label">メディア:</span> おもちゃ＆ホビー</li><li><span class="hatena-asin-detail-label">購入</span>: 1人 <span class="hatena-asin-detail-label">クリック</span>: 17回</li><li><a href="http://d.hatena.ne.jp/asin/B0014QXN08/hatena-blog-22" target="_blank">この商品を含むブログ (3件) を見る</a></li></ul></div><div class="hatena-asin-detail-foot"></div></div><br/>
<div class="hatena-asin-detail"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00G5ZMAUC/hatena-blog-22/"><img src="https://images-fe.ssl-images-amazon.com/images/I/310cN8HHt%2BL._SL160_.jpg" class="hatena-asin-detail-image" alt="レゴ パワーファンクション L-モーター LEGO 88003 Power Functions L-Motor 【並行輸入品】" title="レゴ パワーファンクション L-モーター LEGO 88003 Power Functions L-Motor 【並行輸入品】"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00G5ZMAUC/hatena-blog-22/">レゴ パワーファンクション L-モーター LEGO 88003 Power Functions L-Motor 【並行輸入品】</a></p><ul><li><span class="hatena-asin-detail-label">出版社/メーカー:</span> レゴ</li><li><span class="hatena-asin-detail-label">メディア:</span> おもちゃ＆ホビー</li><li><a href="http://d.hatena.ne.jp/asin/B00G5ZMAUC/hatena-blog-22" target="_blank">この商品を含むブログを見る</a></li></ul></div><div class="hatena-asin-detail-foot"></div></div><br/>
<div class="hatena-asin-detail"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00G5ZM3CM/hatena-blog-22/"><img src="https://images-fe.ssl-images-amazon.com/images/I/41P7SZPPOmL._SL160_.jpg" class="hatena-asin-detail-image" alt="レゴ パワーファンクション XL-モーター LEGO 8882 Power Functions XL-Motor 【並行輸入品】" title="レゴ パワーファンクション XL-モーター LEGO 8882 Power Functions XL-Motor 【並行輸入品】"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00G5ZM3CM/hatena-blog-22/">レゴ パワーファンクション XL-モーター LEGO 8882 Power Functions XL-Motor 【並行輸入品】</a></p><ul><li><span class="hatena-asin-detail-label">出版社/メーカー:</span> レゴ</li><li><span class="hatena-asin-detail-label">メディア:</span> おもちゃ＆ホビー</li><li><a href="http://d.hatena.ne.jp/asin/B00G5ZM3CM/hatena-blog-22" target="_blank">この商品を含むブログを見る</a></li></ul></div><div class="hatena-asin-detail-foot"></div></div></p>

<h1>検証すること</h1>

<ul>
<li><a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%C7%A5%F3%A5%B5">コンデンサ</a>を変更していないMモーターで動くかどうか</li>
<li>VCCが3.3Vで、通常のDCモーターが回転するかどうか</li>
</ul>


-----
--------
AUTHOR: konoemario
TITLE: SEとしてのキャリア
BASENAME: 2017/05/29/012000
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 05/29/2017 01:20:00
CATEGORY: 仕事
CATEGORY: 幸せについて
CATEGORY: 雑談
-----
BODY:
<p>2017年6月をもって、現在の会社を辞めることになった。</p>

<p>どうして辞めるの、と人に聞かれても答えはいつも微妙に違っていて、自分でもよくわかっていないんだと思う。</p>

<p>その中で、一度退職というものを経験してみたい、っていうのは理由だけは間違いない。</p>

<p>思えば、小学校〜大学とそれぞれを卒業していくっていう感覚は、とても切なくって、すごく好きだった。</p>

<p>なんとなく、忙しかったものが、徐々に徐々に手元から消えていって、周りとの会話も、これから共に何かをするっていう話より、過去の事だったり、それぞれ個人の未来だったりに変わっていくあの3月の雰囲気はすごく素敵。</p>

<p>仕事は、今年で8年目で、小学校〜大学を通して一番長い期間、同じところにいることになる。</p>

<p>いなくなるときを想像する。<br/>
もうこの建物にくる事はないんだとか、駅もなかなか降りないんだろうなとか、お昼によくいっていたお店も、会うたびに憂鬱になっていた顧客も、ちょっと気になる後輩の女の子だったりも、全部過去のものになると思うと、たまらなくなる。</p>

<p>3月の退職ではないのが、少し残念だけれども、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%AF%A5%E9%A5%E0%A5%DC%A5%F3">クラムボン</a>の「Folklore」を見つけてから6月退職も素敵に思えている。<br/>
<iframe width="480" height="270" src="https://www.youtube.com/embed/YibGpBSPibI?start=2952&feature=oembed" frameborder="0" allowfullscreen></iframe><cite class="hatena-citation"><a href="https://www.youtube.com/watch?v=YibGpBSPibI#t=49m12s">www.youtube.com</a></cite></p>

<p>これからのことなんだけれども、「エンジニア」になりたいのか、違うことをやりたいのかはあんまり見えていない。</p>

<p>今までは、<a class="keyword" href="http://d.hatena.ne.jp/keyword/COBOL">COBOL</a>の設計・製造から上流工程オンリーへとシフトしてきて、それだけしかやってこなかった。</p>

<p>だから「エンジニア」と呼ばれる存在には、すごい憧れがある。</p>

<p>でも、それを仕事としてやっていくことにはとても不安がある。<br/>
<iframe src="http://tohutokonsome.hatenablog.com/embed/2017/02/06/013616" title="自分はプログラムが好きなのだろうか - 豆腐とコンソメ" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://tohutokonsome.hatenablog.com/entry/2017/02/06/013616">tohutokonsome.hatenablog.com</a></cite></p>

<p>今週、初めて転職エージェントの方と面談をしてきた。<br/>
事前に送った経歴をもとに、提案いただいた内容は、ITコンサルだったり、金融系システムのPMポジションだったりが多い。</p>

<p>自分の経歴からすると、キャリアとしては、そっち方面が多いみたいだ。</p>

<p>来週は、エンジニア系の転職専門のエージェントの面談に行く。</p>

<p>年収を下げて、憧れのエンジニアの道にいくのか、それとも趣味でやっていくのか、未だに見えない。　　</p>

<p>でも、何かが変わればいいと思う。あと少しで。</p>

-----
--------
AUTHOR: konoemario
TITLE: PyCharmでsudo権限でデバックする方法
BASENAME: 2017/05/28/223046
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 05/28/2017 22:30:46
CATEGORY: Python
CATEGORY: プログラム
IMAGE: https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170528/20170528222447.png
-----
BODY:
<h1>日記</h1>

<p>退職が決まって、怒涛のラストスパートでいろいろ捗らない。</p>

<h1>PyCharmでsudo権限でデバックする方法</h1>

<p>前回、<a class="keyword" href="http://d.hatena.ne.jp/keyword/python">python</a>でキーボードのイベントを取得する方法を書きました。<br/>
<iframe src="https://hatenablog-parts.com/embed?url=http%3A%2F%2Ftohutokonsome.hatenablog.com%2Fentry%2F2017%2F05%2F22%2F002531" title="Pythonでキーイベントを取得したかったけどできなかった話←できました。←やっぱりだめ。 - 豆腐とコンソメ" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://tohutokonsome.hatenablog.com/entry/2017/05/22/002531">tohutokonsome.hatenablog.com</a></cite></p>

<p>最後にできました！と書いておいて、いろいろ試していたら、キー入力をうまく認識していないことが発覚しました。</p>

<p>どこに問題があるのかを調べたいのですが、使用しているモジュール、pynputはsudo権限で実行しないと、キー入力を検知してくれません。</p>

<p>PyCharmでデバック実行するときは、sudo権限で実行しなければいけなかったので、ここにやったことを記載します。</p>

<p>※参考にさせていただいた記事<br/>
<a href="https://esmithy.net/2015/05/05/rundebug-as-root-in-pycharm/">Run/Debug as root in PyCharm</a></p>

<h2>sudoersを編集する</h2>

<p>sudoの設定ファイル、sudoersを編集します。</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ sudo visudo
</pre>


<p>ファイルを開いたら、以下の一行を追加します。</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>実行ユーザー名  <span class="synIdentifier">ALL</span>=NOPASSWD:実行するpythonのpath

<span class="synPreProc">(</span><span class="synSpecial">例</span><span class="synPreProc">)</span>
komoe_mario  <span class="synIdentifier">ALL</span>=NOPASSWD:/Users/konoe_mario/.pyenv/versions/raspberry_3.5.1/bin/python
</pre>


<p>これを行うことで、指定した<a class="keyword" href="http://d.hatena.ne.jp/keyword/python">python</a>はsudoで実行してもパスワードを求められなくなります。</p>

<p>sudoersについては、以下の記事を参考にさせていただきました。<br/>
<iframe src="https://hatenablog-parts.com/embed?url=http%3A%2F%2Fqiita.com%2FRyodoTanaka%2Fitems%2Fe9b15d579d17651650b7" title="sudo のパスワードを入力なしで使うには - Qiita" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://qiita.com/RyodoTanaka/items/e9b15d579d17651650b7">qiita.com</a></cite></p>

<h2><a class="keyword" href="http://d.hatena.ne.jp/keyword/python">python</a>-sudo.shの作成</h2>

<p>なぜ、これが必要か？っていうところがあんまりわかってないです。
ここで作ったシェルを、後ほどPycharmの<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%BF%A5%D7%A5%EA%A5%BF">インタプリタ</a>に指定します。</p>

<pre class="code lang-sh" data-lang="sh" data-unlink><span class="synComment">#!/bin/bash</span>
<span class="synComment"># sudo 実行するpythonのpathを指定</span>
sudo /Users/konoe_mario/.pyenv/versions/raspberry_3.5.1/bin/python <span class="synStatement">&quot;</span><span class="synPreProc">$@</span><span class="synStatement">&quot;</span>
</pre>


<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%BF%A5%D7%A5%EA%A5%BF">インタプリタ</a>をsudoで実行しているところがポイントなのかしら。</p>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/python">python</a>ではなくシェルを<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%BF%A5%D7%A5%EA%A5%BF">インタプリタ</a>に指定できるっていうところに驚きです。</p>

<p>時間があるときに検証したいのですが、とりあえず書いちゃいます。</p>

<h2><a class="keyword" href="http://d.hatena.ne.jp/keyword/python">python</a>-sudo.shに実行権限を付与する</h2>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ <span class="synStatement">chmod</span> <span class="synSpecial">+x</span> python-sudo.sh
</pre>


<h2>PyCharmの<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%BF%A5%D7%A5%EA%A5%BF">インタプリタ</a>にptyhon-sudo.shを指定する</h2>

<p>PyCharmCommunityEditon->Preferences->Project:Project名から変更できます。<br/>
<span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170528/20170528222447.png" alt="f:id:konoemario:20170528222447p:plain:w500" title="f:id:konoemario:20170528222447p:plain:w500" class="hatena-fotolife" style="width:500px" itemprop="image"></span><br/>
ちょっと隠れてしまっているけれども、歯車のアイコンを選んで、AddLocalを選択。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170528/20170528222450.png" alt="f:id:konoemario:20170528222450p:plain:w500" title="f:id:konoemario:20170528222450p:plain:w500" class="hatena-fotolife" style="width:500px" itemprop="image"></span><br/>
<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%BF%A5%D7%A5%EA%A5%BF">インタプリタ</a>に、作成した<a class="keyword" href="http://d.hatena.ne.jp/keyword/python">python</a>-sudo.shを選択する。</p>

<p>以上になります。</p>

<h2>追記(2017.7.12)</h2>

<p>久しぶりにPyCharmを起動して、sudo権限で実行しようとしたら以下のエラーメッセージがでた。</p>

<pre class="code lang-sh" data-lang="sh" data-unlink> sudo: no tty present and no askpass program specified
</pre>


<p>エラーメッセージがでるあたり、そもそも以前できていたのか不安になった。</p>

<p>とりあえず、シェルそのものについてもsudoersに追加したら使えました。</p>

<pre class="code lang-sh" data-lang="sh" data-unlink><span class="synComment">#!/bin/bash</span>
<span class="synComment"># sudo 実行するpythonのpathを指定</span>
 komoe_mario  <span class="synIdentifier">ALL</span>=NOPASSWD:/Users/konoe_mario/.pyenv/versions/raspberry_3.5.1/bin/python
<span class="synComment">#実行するシェルも追加</span>
 komoe_mario  <span class="synIdentifier">ALL</span>=NOPASSWD:/Users/konoe_mario/PycharmProjects/Basic/keyboard/python-sudo.sh
</pre>


<p>あと、「<a class="keyword" href="http://d.hatena.ne.jp/keyword/python">python</a>-sudo.sh」をPycharmのインタラプタに指定すると、インス<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C8%A1%BC">トー</a>ルしたパッケージを認識してくれなくて動かないみたいなこともあった。<br/>
以前、認識したプロジェクトを開いてみたところ問題なく使用ができた。<br/>
その後、問題があった別プロジェクトを開くと、今度は「<a class="keyword" href="http://d.hatena.ne.jp/keyword/python">python</a>-sudo.sh」を指定してもパッケージを認識してくれていた。</p>

<p>原因は不明です。。。</p>

-----
--------
AUTHOR: konoemario
TITLE: Pythonでキーイベントを取得したかったけどできなかった話←できました。
BASENAME: 2017/05/22/002531
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 05/22/2017 00:25:31
CATEGORY: Python
CATEGORY: プログラム
-----
BODY:
<p><iframe src="https://hatenablog-parts.com/embed?url=http%3A%2F%2Ftohutokonsome.hatenablog.com%2Fentry%2F2017%2F05%2F16%2F215317" title="RaspBerryPiでラジコンをつくる(8)：コントローラをつくる - 豆腐とコンソメ" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://tohutokonsome.hatenablog.com/entry/2017/05/16/215317">tohutokonsome.hatenablog.com</a></cite></p>

<p>以前、ラジコンのコントローラーをつくった記事を書きました。</p>

<p>その中で、キーボードから入力した値をもとに操作する機能は、以下の機能を参考にさせていただきました。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=http%3A%2F%2Fqiita.com%2Ftortuepin%2Fitems%2Fe6c72f48115f20744ace" title="pythonでキー入力を検出する(tty) - Qiita" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://qiita.com/tortuepin/items/e6c72f48115f20744ace">qiita.com</a></cite></p>

<p>ただ、特定キーを押している状態、特定キーを離した状態というイベントを検出できると、よりコントローラぽくなるので、そんなことができる素敵な<a class="keyword" href="http://d.hatena.ne.jp/keyword/python">python</a>モジュールがないかを探してました。</p>

<p>その中で、一番よさそうな<a class="keyword" href="http://d.hatena.ne.jp/keyword/python">python</a>モジュールを見つけました。<br/>
が、<strong>想定通りの動作ができていないです。</strong><br/>
解決策が見つけたら書くぞ！という意気込みを兼ねて、一旦記事に起こします。</p>

<ul class="table-of-contents">
    <li><a href="#pynput">pynput</a><ul>
            <li><a href="#実行環境とインストール">実行環境とインストール</a></li>
            <li><a href="#サンプルコード">サンプルコード</a></li>
            <li><a href="#動かない">動かない</a></li>
            <li><a href="#sudoが足りなかった">sudoが足りなかった</a></li>
            <li><a href="#よくみるとKeyCodeを認識していない">よくみるとKeyCodeを認識していない</a></li>
            <li><a href="#2017712追記">2017.7.12追記</a></li>
        </ul>
    </li>
    <li><a href="#その他候補">その他候補</a><ul>
            <li><a href="#msvrct">msvrct</a></li>
            <li><a href="#keyboard">keyboard</a></li>
            <li><a href="#Pygame">Pygame</a></li>
            <li><a href="#PySDL2">PySDL2</a></li>
        </ul>
    </li>
</ul>

<h2 id="pynput">pynput</h2>

<p>キーボードやマウスを制御したり、入力内容の監視がシンプルにできるみたい。<br/>
<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%AD%A1%BC%A5%ED%A5%AC%A1%BC">キーロガー</a>とかで使ったりするのかしら。<br/>
<iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fpypi.python.org%2Fpypi%2Fpynput" title="pynput 1.3.5 : Python Package Index" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://pypi.python.org/pypi/pynput">pypi.python.org</a></cite></p>

<h3 id="実行環境とインストール">実行環境とインス<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C8%A1%BC">トー</a>ル</h3>

<pre class="code lang-sh" data-lang="sh" data-unlink><span class="synPreProc">(</span><span class="synSpecial">raspberry_3.5.1</span><span class="synPreProc">)</span> masao<span class="synConstant">-3</span>:keyboard konoe_mario$ sw_vers
ProductName:    Mac OS X
ProductVersion: 10.10.5
BuildVersion:   14F1713

<span class="synPreProc">(</span><span class="synSpecial">raspberry_3.5.1</span><span class="synPreProc">)</span> masao<span class="synConstant">-3</span>:keyboard konoe_mario$ pyenv versions
  system
  3.5.1
  3.5.1/envs/raspberry_3.5.1
  3.5.2
  pypy3-2.4.0
* raspberry_3.5.1 <span class="synPreProc">(</span><span class="synSpecial">set by /Users/konoe_mario/.pyenv/version</span><span class="synPreProc">)</span>

<span class="synPreProc">(</span><span class="synSpecial">raspberry_3.5.1</span><span class="synPreProc">)</span> masao<span class="synConstant">-3</span>:keyboard konoe_mario$ sudo pip install pynput
</pre>


<h3 id="サンプルコード">サンプルコード</h3>

<p>公式サイトの入力内容の監視を行うmサンプルコードをそのまま使用。<br/>
キー入力をlistenerがキャッチしてくれて、キー入力が行われると、<a class="keyword" href="http://d.hatena.ne.jp/keyword/on_">on_</a>pressに設定した関数を呼んで、キーが離されると<a class="keyword" href="http://d.hatena.ne.jp/keyword/on_">on_</a>releaseに設定した関数が呼ばれる。</p>

<pre class="code lang-python" data-lang="python" data-unlink><span class="synPreProc">from</span> pynput.keyboard <span class="synPreProc">import</span> Key, Listener

<span class="synStatement">def</span> <span class="synIdentifier">print_something</span>():
<span class="synConstant">'''</span>
<span class="synConstant">デバック用</span>
<span class="synConstant">'''</span>
    <span class="synIdentifier">print</span>(<span class="synConstant">'hi tohu!'</span>)

<span class="synStatement">def</span> <span class="synIdentifier">on_press</span>(key):
    <span class="synComment">#この関数が呼ばれているかどうかチェックするための処理</span>
    print_something()

    <span class="synStatement">try</span>:
        <span class="synIdentifier">print</span>(<span class="synConstant">'alphanumeric key {0} pressed'</span>.<span class="synIdentifier">format</span>(
            key.char))
    <span class="synStatement">except</span> <span class="synType">AttributeError</span>:
        <span class="synIdentifier">print</span>(<span class="synConstant">'special key {0} pressed'</span>.<span class="synIdentifier">format</span>(
            key))


<span class="synStatement">def</span> <span class="synIdentifier">on_release</span>(key):
    <span class="synIdentifier">print</span>(<span class="synConstant">'{0} released'</span>.<span class="synIdentifier">format</span>(key))

    <span class="synStatement">if</span> key == Key.esc:
        <span class="synComment"># Stop listener</span>
        <span class="synStatement">return</span> <span class="synIdentifier">False</span>

<span class="synStatement">if</span> __name__ == <span class="synConstant">'__main__'</span>:

    <span class="synStatement">with</span> Listener(
        on_press = on_press,
        on_release= on_release
    ) <span class="synStatement">as</span> listener:
        listener.join()
</pre>


<h3 id="動かない">動かない</h3>

<p>上記サンプルコードを、ターミナルで実行すると、「Command」「Shift」「Control」「option」などの入力は検知するのだけれども、通常の英数字のキー入力は検知してくれていない。</p>

<p>StackOverFlowにすごくそれっぽい質問もあがってたのだけれども、どうも原因が違うのではないかと思う。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=http%3A%2F%2Fstackoverflow.com%2Fquestions%2F42603000%2Fpynput-keylogger-only-returning-shift-command-space-and-capslock-keys" title="Pynput Keylogger Only Returning Shift, Command, Space and Capslock Keys" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://stackoverflow.com/questions/42603000/pynput-keylogger-only-returning-shift-command-space-and-capslock-keys">stackoverflow.com</a></cite></p>

<p>そもそも、<a class="keyword" href="http://d.hatena.ne.jp/keyword/on_">on_</a>press関数内のprint関数が英数字の場合は呼ばれていない。</p>

<pre class="code lang-sh" data-lang="sh" data-unlink><span class="synPreProc">(</span><span class="synSpecial">raspberry_3.5.1</span><span class="synPreProc">)</span> masao<span class="synConstant">-3</span>:keyboard konoe_mario$ python pynput_sample.py 

<span class="synPreProc">(</span><span class="synSpecial">raspberry_3.5.1</span><span class="synPreProc">)</span> masao<span class="synConstant">-3</span>:keyboard konoe_mario$ python pynput_sample.py 
<span class="synComment">##キー入力を検知すると、on_press内の「hi tohu」が出力される</span>
hi tohu!
special key Key.cmd pressed
Key.cmd released
hi tohu!
special key Key.alt pressed
Key.alt released
hi tohu!
special key Key.shift pressed
Key.shift released
hi tohu!
special key Key.ctrl pressed
Key.ctrl released

<span class="synComment">##こっから下は英数字の入力を行ったところ</span>
<span class="synConstant">1111</span>
<span class="synConstant">111</span>
ugokanai
^<span class="synStatement">[</span>^<span class="synStatement">[</span>^<span class="synStatement">[</span>
^<span class="synStatement">[[</span>A
</pre>


<p>英数字の場合、コンソールに普通に入力できてしまうので、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B9%A5%DA%A5%B7%A5%E3">スペシャ</a>ルキーとは挙動が違うのかもしれない。<br/>
ただ、StackOverFlowの質問を見る限り、特になんの制御もなくできてるっぽいんですよね。。。</p>

<h3 id="sudoが足りなかった">sudoが足りなかった</h3>

<p>sudo実行で普通にできました。Kさん、ありがとうございました。</p>

<pre class="code lang-sh" data-lang="sh" data-unlink><span class="synPreProc">(</span><span class="synSpecial">raspberry_3.5.1</span><span class="synPreProc">)</span> masao<span class="synConstant">-3</span>:keyboard konoe_mario$ sudo python pynput_sample.py 
Password:
hi tohu!
alphanumeric key None pressed
a<span class="synStatement">&lt;</span><span class="synConstant">0</span><span class="synStatement">&gt;</span> released
hi tohu!
alphanumeric key None pressed
s<span class="synStatement">&lt;</span><span class="synConstant">1</span><span class="synStatement">&gt;</span> released
hi tohu!
alphanumeric key None pressed
d<span class="synStatement">&lt;</span><span class="synConstant">2</span><span class="synStatement">&gt;</span> released
hi tohu!
alphanumeric key None pressed
f<span class="synStatement">&lt;</span><span class="synConstant">3</span><span class="synStatement">&gt;</span> released
</pre>


<h3 id="よくみるとKeyCodeを認識していない">よくみるとKeyCodeを認識していない</h3>

<p>うまくいってませんでした。。。<br/>
デバックでいろいろ見ていたのですが、<a class="keyword" href="http://d.hatena.ne.jp/keyword/OSX">OSX</a>のキー入力のあたりから調べないとちょっと厳しそう。<br/>
進展がありしだい追記します。</p>

<pre class="code lang-sh" data-lang="sh" data-unlink><span class="synPreProc">(</span><span class="synSpecial">raspberry_3.5.1</span><span class="synPreProc">)</span> masao<span class="synConstant">-3</span>:keyboard konoe_mario$ sudo python pynput_sample.py 
Password:
alphanumeric key None pressed ←押されたキー入力がNoneになっている。
</pre>


<h3 id="2017712追記">2017.7.12追記</h3>

<p>久しぶりに別件で起動してたら、KeyCodeを認識していることに気づいた。
なぜだろう。。。</p>

<pre class="code lang-sh" data-lang="sh" data-unlink><span class="synPreProc">(</span><span class="synSpecial">raspberry_3.5.1</span><span class="synPreProc">)</span> masao<span class="synConstant">-3</span>:keyboard konoe_mario$ sudo python  pynput_sample.py 
alphanumeric key <span class="synStatement">&lt;</span><span class="synConstant">13</span><span class="synStatement">&gt;</span> pressed
w<span class="synStatement">&lt;</span><span class="synConstant">13</span><span class="synStatement">&gt;</span> released
alphanumeric key <span class="synStatement">&lt;</span><span class="synConstant">1</span><span class="synStatement">&gt;</span> pressed
s<span class="synStatement">&lt;</span><span class="synConstant">1</span><span class="synStatement">&gt;</span> released
alphanumeric key <span class="synStatement">&lt;</span><span class="synConstant">0</span><span class="synStatement">&gt;</span> pressed
a<span class="synStatement">&lt;</span><span class="synConstant">0</span><span class="synStatement">&gt;</span> released
alphanumeric key <span class="synStatement">&lt;</span><span class="synConstant">2</span><span class="synStatement">&gt;</span> pressed
d<span class="synStatement">&lt;</span><span class="synConstant">2</span><span class="synStatement">&gt;</span> released
</pre>


<h2 id="その他候補">その他候補</h2>

<p>すっごい適当だけれども、pynput以外に試したものを、メモがてらに記載しています。</p>

<h3 id="msvrct">msvrct</h3>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/Windows">Windows</a>でしか動かないので、採用しなかった。</p>

<h3 id="keyboard">keyboard</h3>

<p>ホットキーの設定をしたり、キーイベントの監視をしたりいろいろとできそうだった。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fpypi.python.org%2Fpypi%2Fkeyboard" title="keyboard 0.9.13 : Python Package Index" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://pypi.python.org/pypi/keyboard">pypi.python.org</a></cite></p>

<p>が実行するとOSErrorになる。</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>OSError: <span class="synStatement">[</span>Errno <span class="synConstant">45</span><span class="synStatement">]</span> Operation not supported: <span class="synStatement">'</span><span class="synConstant">/dev/uinput</span><span class="synStatement">'</span>
</pre>


<p>公式をよく読んでみると、ちゃんと書いてありました。<br/>
「Hook and simulate keyboard events on <a class="keyword" href="http://d.hatena.ne.jp/keyword/Windows">Windows</a> and <a class="keyword" href="http://d.hatena.ne.jp/keyword/Linux">Linux</a>」</p>

<h3 id="Pygame"><a class="keyword" href="http://d.hatena.ne.jp/keyword/Pygame">Pygame</a></h3>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/python">python</a>のゲーム開発向けのモジュール。<br/>
導入するだけしてみたけれども、今回やりたいことだけにしては、大掛かりな印象を持った。<br/>
<a class="keyword" href="http://d.hatena.ne.jp/keyword/GUI">GUI</a>画面を用いてコントローラーにするのには、いいのかもしれない。<br/>
でも、python3.5.1では、キー入力のイベント検知が動かなかった。</p>

<h3 id="PySDL2">PySDL2</h3>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/Pygame">Pygame</a>の後継らしい。<br/>
こっちではpython3.5.1でもキー入力イベントを検知することができた。</p>

-----
COMMENT:
AUTHOR: ne
IP: 106.163.99.120
DATE: 04/17/2019 02:30:09
今更のコメント、大変申し訳ございません。
現在pynputを用いてキーロガーを作成しており、記事を参考にさせていただいております。
一つお伺いしたいのですが、
入力文字のあとに<>で括られたキーコードの表示は、どのようにコーディングされていますでしょうか？
お手数ですが、ご回答いただけたら有難いです。
よろしくお願い致します。
-----
COMMENT:
AUTHOR: konoemario
IP: 126.212.249.10
DATE: 07/26/2017 14:18:22
コメントありがとうございます！モチベーションあげる材料をいただきました。
mindstormいいですね！お値段が結構するのでなかなか手が出せないです。
コントローラーに関してはスマホから操作するとかを想定して、ブラウザでの操作を試している最中なので、そちらも記事があがりましたら、よろしくお願いします。

-----
COMMENT:
AUTHOR: tsu-nera
IP: 60.67.161.131
DATE: 07/25/2017 22:12:36
LEGO mindstormsで、同じようにキーボードからロボットカーをリモート操作をしたいと思い、記事を参考にさせてもらいました。ありがとうございます。
-----
--------
AUTHOR: konoemario
TITLE: RaspBerryPiでラジコンをつくる(8)：コントローラをつくる
BASENAME: 2017/05/16/215317
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 05/16/2017 21:53:17
CATEGORY: Python
CATEGORY: プログラム
CATEGORY: ラズパイ
CATEGORY: ラジコンシリーズ
IMAGE: https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170515/20170515231731.jpg
-----
BODY:
<p><iframe src="http://tohutokonsome.hatenablog.com/embed/2017/05/15/221112" title="RaspBerryPiでラジコンをつくる(7)：少し改善 - 豆腐とコンソメ" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://tohutokonsome.hatenablog.com/entry/2017/05/15/221112">tohutokonsome.hatenablog.com</a></cite></p>

<p>とりあえず簡単なコントローラーができたので、日記がてら書きます！</p>

<p>ここでは、初歩的にPCのコンソール画面からキーボードで操作することを目標にやってみます。</p>

<p>全体図は以下になります。<br/>
<span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170515/20170515231731.jpg" alt="f:id:konoemario:20170515231731j:plain:w500" title="f:id:konoemario:20170515231731j:plain:w500" class="hatena-fotolife" style="width:500px" itemprop="image"></span></p>

<ul class="table-of-contents">
    <li><a href="#コントローラ部分">コントローラ部分</a><ul>
            <li><a href="#余談というか後で改善するところ">余談というか後で改善するところ</a></li>
        </ul>
    </li>
    <li><a href="#受信部分">受信部分</a><ul>
            <li><a href="#受信部分に関しての課題">受信部分に関しての課題</a></li>
        </ul>
    </li>
</ul>

<h2 id="コントローラ部分">コントローラ部分</h2>

<p>キーボードから入力した値を、socket通信でRaspBerryPiZeroに連携します。<br/>
具体的には、以下の制御で動かそうと思います。</p>

<ul>
<li>W:前進</li>
<li>S:後退</li>
<li>A:タイヤの向きを左に</li>
<li>D:タイヤの向きを右に</li>
</ul>


<p>キーボード入力の値は、input関数なんかは</p>

<p>①キー入力<br/>
②Enter</p>

<p>という操作をしないといけなくて、煩わしいので以下の記事を参考（というかそのまま）にさせていただきました。<br/>
「termios」という<a class="keyword" href="http://d.hatena.ne.jp/keyword/python">python</a>モジュールを使用することで、Enterを押さずして、1文字ずつ値を取得できます。</p>

<p>取得した文字は、取得するたびにsocket通信でRaspBerryPiに送信します。</p>

<p>※参考にさせていただいた記事<br/>
<a href="http://qiita.com/tortuepin/items/9ede6ca603ddc74f91ba">Python&#x3067;&#x30AD;&#x30FC;&#x5165;&#x529B;&#x3092;&#x691C;&#x51FA;&#x3059;&#x308B;(Enter&#x7121;&#x3057;&#x3067;) - Qiita</a><br/>
<a href="http://qiita.com/nadechin/items/28fc8970d93dbf16e81b">Python&#x306B;&#x3088;&#x308B;&#x901A;&#x4FE1;&#x51E6;&#x7406; - Qiita</a></p>

<p>実際のコントローラーの制御は、以下の通りです。</p>

<p><script src="https://gist.github.com/7be27c7b6c15e3fc2ed05b87e111f8cc.js"> </script></p>

<p><a href="https://gist.github.com/7be27c7b6c15e3fc2ed05b87e111f8cc">legocarの制御(コントローラー)</a></p>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/%A4%BD%A4%E2%A4%BD%A4%E2">そもそも</a>、PC側にコントローラーを用意しなくても、RaspBerryPiに<a class="keyword" href="http://d.hatena.ne.jp/keyword/SSH">SSH</a>でログインして、直接操作することも、もちろんできるんだけれども、せっかくなのでsocketで通信することにした。</p>

<p>ちなみに接続方式は、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A5%C9%A5%DB%A5%C3%A5%AF">アドホック</a>で接続しています。<br/>
<a href="http://tohutokonsome.hatenablog.com/entry/2017/05/05/202821">&#x30E9;&#x30BA;&#x30D1;&#x30A4;&#x3092;&#x30A2;&#x30C9;&#x30DB;&#x30C3;&#x30AF;&#x63A5;&#x7D9A;&#x3067;&#x4F7F;&#x7528;&#x3059;&#x308B; - &#x8C46;&#x8150;&#x3068;&#x30B3;&#x30F3;&#x30BD;&#x30E1;</a></p>

<h3 id="余談というか後で改善するところ">余談というか後で改善するところ</h3>

<p>「termios」によるキーボード入力を検知する方法もよいのだけでども、キーボードイベントをもっと手軽に取得したかった。 <br/>
（特定のキーをおしっぱにしている状態を検知するとか)</p>

<p>参考にさせていただいたサイトにもあるんだけれども、「msvcrt」モジュールが、どうやらそれっぽい。 <br/>
ただ、<a class="keyword" href="http://d.hatena.ne.jp/keyword/Windows">Windows</a>でしか動かないみたいなので実装は見送った。</p>

<p>これ以外にも、<a class="keyword" href="http://d.hatena.ne.jp/keyword/python">python</a>のゲームライブラリである「<a class="keyword" href="http://d.hatena.ne.jp/keyword/PyGame">PyGame</a>」やその後継？の「PySDL2」なんかも試したが、とりあえず「termios」で落ちるついた。<br/>
これ以外にも、ホットキーを割り当てるいい感じのモジュールがありそうだったので、検証しだい別途まとめます。</p>

<p><br></p>

<h2 id="受信部分">受信部分</h2>

<p>今度はRaspBerryPi側に置くコードです。</p>

<p>以下の機能ごとにモジュールを作成しました。</p>

<ul>
<li>クライアントのsocketのデータを取得してレゴカーを制御する機能に値を渡す。</li>
<li>受け取ったデータをもとにレゴカーを制御する。</li>
</ul>


<p>実際のコードは以下の通りです。</p>

<p><script src="https://gist.github.com/5a237e0b7e834559d4fbe283f81b5154.js"> </script></p>

<p><a href="https://gist.github.com/5a237e0b7e834559d4fbe283f81b5154">クライアントからの命令を受信して、レゴカーに渡す</a></p>

<p><script src="https://gist.github.com/e1a0ba956a0d81e2a74cb7f909de64ee.js"> </script></p>

<p><a href="https://gist.github.com/e1a0ba956a0d81e2a74cb7f909de64ee">レゴカーの制御</a></p>

<h3 id="受信部分に関しての課題">受信部分に関しての課題</h3>

<ul>
<li>アクセルとハンドルが並列で処理できるようにする</li>
<li>socket通信をもう少ししっかり学ぶ</li>
</ul>


<p><iframe src="http://blog.amedama.jp/embed/2017/03/29/080000" title="Python: ソケットプログラミングのアーキテクチャパターン - CUBE SUGAR CONTAINER" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://blog.amedama.jp/entry/2017/03/29/080000">blog.amedama.jp</a></cite></p>

-----
--------
AUTHOR: konoemario
TITLE: RaspBerryPiでラジコンをつくる(7)：少し改善
BASENAME: 2017/05/15/221112
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 05/15/2017 22:11:12
CATEGORY: ラズパイ
IMAGE: https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170506/20170506195209.jpg
-----
BODY:
<p>前回、作成したレゴカーに少しだけ改善を行ったのでまとめます。</p>

<p><iframe src="http://tohutokonsome.hatenablog.com/embed/2017/05/06/210309" title="RaspBerryPiでラジコンをつくる(6)：とりあえず動くものができました - 豆腐とコンソメ" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://tohutokonsome.hatenablog.com/entry/2017/05/06/210309">tohutokonsome.hatenablog.com</a></cite></p>

<ul class="table-of-contents">
    <li><a href="#レゴの電池ボックスを使用する">レゴの電池ボックスを使用する</a></li>
    <li><a href="#ラズパイZeroのケースをレゴに固定する">ラズパイZeroのケースをレゴに固定する</a></li>
    <li><a href="#改善後">改善後</a></li>
</ul>

<h2 id="レゴの電池ボックスを使用する">レゴの電池ボックスを使用する</h2>

<p>今までは、単三電池*4の電池ボックスを使用していました。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170506/20170506195209.jpg" alt="f:id:konoemario:20170506195209j:plain:w500" title="f:id:konoemario:20170506195209j:plain:w500" class="hatena-fotolife" style="width:500px" itemprop="image"></span></p>

<p>しかし、手元にはレゴの電池ケースがあったので、こちらを使用してみることにしました。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170515/20170515214612.jpg" alt="f:id:konoemario:20170515214612j:plain:w500" title="f:id:konoemario:20170515214612j:plain:w500" class="hatena-fotolife" style="width:500px" itemprop="image"></span></p>

<p>これは、単三電池６本を格納することができるので、合計で9Vになります。</p>

<p>ただ、残念なことにこのレゴ電池ケースは、以下のようにレシーバにブロックで接続できる便利仕様となっています。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170515/20170515214833.jpg" alt="f:id:konoemario:20170515214833j:plain:w500" title="f:id:konoemario:20170515214833j:plain:w500" class="hatena-fotolife" style="width:500px" itemprop="image"></span></p>

<p>ラズパイに接続する際はブレッドボードで使いたいので、このままでは使うことができません。</p>

<p>もっといい方法があるかもしれませんが、ここでは思い切って、コードを切ってしまいました。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170515/20170515215242.jpg" alt="f:id:konoemario:20170515215242j:plain:w500" title="f:id:konoemario:20170515215242j:plain:w500" class="hatena-fotolife" style="width:500px" itemprop="image"></span></p>

<p>線は4本あるのですが、こちらの動画の1:35、およびQuitaの記載内容を信じて真ん中２本を使用しましたが、問題なく動いています。</p>

<p><iframe width="480" height="270" src="https://www.youtube.com/embed/uw3exu_3qD0?feature=oembed" frameborder="0" allowfullscreen></iframe><cite class="hatena-citation"><a href="https://www.youtube.com/watch?v=uw3exu_3qD0">www.youtube.com</a></cite></p>

<p><iframe src="//hatenablog-parts.com/embed?url=http%3A%2F%2Fqiita.com%2Fchi9rin%2Fitems%2F0c01c18c5048c64ffb0c" title="レゴ パワーファンクション 8881 バッテリーボックスの電極の極性 - Qiita" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://qiita.com/chi9rin/items/0c01c18c5048c64ffb0c">qiita.com</a></cite></p>

<p>最終的にはブレッドボートとこんな感じでセットにすることができました。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170515/20170515220935.jpg" alt="f:id:konoemario:20170515220935j:plain:w500" title="f:id:konoemario:20170515220935j:plain:w500" class="hatena-fotolife" style="width:500px" itemprop="image"></span></p>

<h2 id="ラズパイZeroのケースをレゴに固定する">ラズパイZeroのケースをレゴに固定する</h2>

<p>こちらは、定番ですが、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D5%A5%EA%A5%B9%A5%AF">フリスク</a>のケースを買ってきて、プラスチックカッターで適当に切り抜きました。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170515/20170515215738.jpg" alt="f:id:konoemario:20170515215738j:plain:w500" title="f:id:konoemario:20170515215738j:plain:w500" class="hatena-fotolife" style="width:500px" itemprop="image"></span></p>

<p>100均のプラスチックカッターだと、結構な力を必要として手がいたくなったので、大きいものがあるとよさそうです。<br/>
ただ、あまり力をいれすぎてもケースが割れるということも起こります。</p>

<p>簡単なケースを作成したら、レゴに固定していきます。</p>

<p>ここでは、ネジを使って固定することにしました。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170515/20170515220038.jpg" alt="f:id:konoemario:20170515220038j:plain:w500" title="f:id:konoemario:20170515220038j:plain:w500" class="hatena-fotolife" style="width:500px" itemprop="image"></span></p>

<p>このネジを使って<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D5%A5%EA%A5%B9%A5%AF">フリスク</a>にネジ穴をぐりぐりとあけます。</p>

<p>マイナスドライバーとドリルネジみないたものを使ってむりやりあけました。</p>

<p>その後、こんな感じで穴を通します。<br/>
これでラズパイZeroと<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D5%A5%EA%A5%B9%A5%AF">フリスク</a>のケースが固定されます。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170515/20170515220311.jpg" alt="f:id:konoemario:20170515220311j:plain:w500" title="f:id:konoemario:20170515220311j:plain:w500" class="hatena-fotolife" style="width:500px" itemprop="image"></span></p>

<p>ここからさらにレゴのブロックとネジについている付属の六角ナットとシャーシ？（っていうんですかね）を用いて、ネジを固定すると、いい感じにレゴブロックにくっつくけることができます。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170515/20170515220321.jpg" alt="f:id:konoemario:20170515220321j:plain:w500" title="f:id:konoemario:20170515220321j:plain:w500" class="hatena-fotolife" style="width:500px" itemprop="image"></span></p>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D5%A5%EA%A5%B9%A5%AF">フリスク</a>のふたがものすごく雑ですが、こんな感じで取り付けてます。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170515/20170515220755.jpg" alt="f:id:konoemario:20170515220755j:plain:w500" title="f:id:konoemario:20170515220755j:plain:w500" class="hatena-fotolife" style="width:500px" itemprop="image"></span></p>

<h2 id="改善後">改善後</h2>

<p>少しだけすっきりしました。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170515/20170515221008.jpg" alt="f:id:konoemario:20170515221008j:plain:w500" title="f:id:konoemario:20170515221008j:plain:w500" class="hatena-fotolife" style="width:500px" itemprop="image"></span></p>

<p>次回は、コントローラーの作成を行います。</p>

<p><iframe src="http://tohutokonsome.hatenablog.com/embed/2017/05/16/215317" title="RaspBerryPiでラジコンをつくる(8)：コントローラをつくる - 豆腐とコンソメ" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://tohutokonsome.hatenablog.com/entry/2017/05/16/215317">tohutokonsome.hatenablog.com</a></cite></p>

-----
--------
AUTHOR: konoemario
TITLE: レゴMモーターがモータードライバーを使用した場合に回転しない（知恵袋用)
BASENAME: 2017/05/14/132237
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 05/14/2017 13:22:37
CATEGORY: ラズパイ
IMAGE: https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170514/20170514125335.png
-----
BODY:
<p>Yahoo知恵袋に質問する際に、状況説明がしづらいのでこちらに記載します。</p>

<ul class="table-of-contents">
    <li><a href="#回答をいただいたので追記します2017530">回答をいただいたので追記します(2017/5/30)</a></li>
    <li><a href="#状況">状況</a></li>
    <li><a href="#2017515-追記">2017/5/15 追記</a></li>
</ul>

<h1 id="回答をいただいたので追記します2017530">回答をいただいたので追記します(2017/5/30)</h1>

<p><iframe src="//hatenablog-parts.com/embed?url=https%3A%2F%2Fdetail.chiebukuro.yahoo.co.jp%2Fqa%2Fquestion_detail%2Fq12174131932" title="モータードライバー(DRV8835)を使用して、レゴのMモーターを接続した場合、ピーという音がなるだけで、動作しません。" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://detail.chiebukuro.yahoo.co.jp/qa/question_detail/q12174131932">detail.chiebukuro.yahoo.co.jp</a></cite><br/>
<iframe src="//hatenablog-parts.com/embed?url=https%3A%2F%2Felectronics.stackexchange.com%2Fquestions%2F111046%2Fdrv8835-ocp-false-trip" title="DRV8835 OCP false trip?" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://electronics.stackexchange.com/questions/111046/drv8835-ocp-false-trip">electronics.stackexchange.com</a></cite></p>

<p>上記に、書いたことをまとめると</p>

<ul>
<li>レゴのMモーターでは、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%C7%A5%F3%A5%B5">コンデンサ</a>に10uFという容量の大きい<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%C7%A5%F3%A5%B5">コンデンサ</a>がつけられている</li>
<li>容量の大きな<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%C7%A5%F3%A5%B5">コンデンサ</a>がつながっていることで、モーター起動時の突入電流が大きくなりDRV8835のOCP機能(想定以上の電流が流れた場合に回路を保護する機能)が働き、ピーという音のみが聞こえる状態となる。</li>
</ul>


<p>気になる解決策は私の英語理解力では、見当たりませんでした。</p>

<p>ですので、レゴMモーターを使用する際は、<strong>DRV8835は使わずにTA7291を使用する</strong>しか今のところ見当たりません。</p>

<p>仮に<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%C7%A5%F3%A5%B5">コンデンサ</a>の容量を下げればどうなのだろうか、と思い実験してみようと思ったのですが、
よくよく考えてみると、<span style="font-size: 150%"><span style="color: #ff0000">既に<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%C7%A5%F3%A5%B5">コンデンサ</a>は交換済みでした。 </span></span> <br/>
というのも、状況の方に書いた写真を見て欲しいのですが、ジャンパー線につなげるために、モーターの中を開けて、はんだごてをする際に、付属の<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%C7%A5%F3%A5%B5">コンデンサ</a>を誤ってとってしまいました。<br/>
代わりに、手元にあった0.1uFの<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%C7%A5%F3%A5%B5">コンデンサ</a>をつけてあります。</p>

<p>ですので、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%C7%A5%F3%A5%B5">コンデンサ</a>の容量が大きくって動かないっていうのは、また異なる事象のような気もします。</p>

<p>原因がいまいちわからないのですが、この課題はクローズしてしまいます。</p>

<p>回答いただいた</p>

<p>creeping_catさん、mpcsp079さん、<span style="font-size: 150%"><span style="color: #ff0000">ありがとうございました！</span></span></p>

<p><span style="font-size: 150%"><span style="color: #0000cc">そして、なぜか動き始めたので、追記してます。  </span></span></p>

<p><iframe src="http://tohutokonsome.hatenablog.com/embed/2017/05/30/204052" title="モータードライバ(DRV8835)でレゴのモーターがまわるようになった - 豆腐とコンソメ" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://tohutokonsome.hatenablog.com/entry/2017/05/30/204052">tohutokonsome.hatenablog.com</a></cite></p>

<h1 id="状況">状況</h1>

<p>こちらのDCモーターと、モータードライバ(DRV8835)を使用しています。<br/>
<a href="http://akizukidenshi.com/catalog/g/gP-09169/">&#xFF24;&#xFF23;&#x30E2;&#x30FC;&#x30BF;&#x30FC; &#xFF26;&#xFF21;&minus;&#xFF11;&#xFF13;&#xFF10;&#xFF32;&#xFF21;&minus;&#xFF12;&#xFF12;&#xFF17;&#xFF10;&#xFF2C;: &#x30D1;&#x30FC;&#x30C4;&#x4E00;&#x822C; &#x79CB;&#x6708;&#x96FB;&#x5B50;&#x901A;&#x5546; &#x96FB;&#x5B50;&#x90E8;&#x54C1; &#x30CD;&#x30C3;&#x30C8;&#x901A;&#x8CA9;</a></p>

<p>DRV8835データシート<br/>
<a href="http://akizukidenshi.com/download/ds/akizuki/AE-DRV8835-Ss.pdf">http://akizukidenshi.com/download/ds/akizuki/AE-DRV8835-Ss.pdf</a></p>

<p>以下の回路で接続しています。<br/>
<span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170514/20170514125335.png" alt="f:id:konoemario:20170514125335p:plain:w500" title="f:id:konoemario:20170514125335p:plain:w500" class="hatena-fotolife" style="width:500px" itemprop="image"></span></p>

<p>このとき、このDCモーターは<strong>正常に回転します。</strong></p>

<p>一方、正常に回転したDCモーターの代わりに、レゴのMモーターをまったく同じ回路で接続すると、<strong>ピーという音が聞こえるのみで回転しません。</strong><br/>
試しに、回転方向に手動で力を加えて回してあげると、回転しはじめます。</p>

<p>※レゴのMモーター<br/>
<a href="http://www.suzumori.shop/shopdetail/000000000068/ct8/page1/order/">&#x30EC;&#x30B4; &#x30D1;&#x30EF;&#x30FC;&#x30E2;&#x30FC;&#x30BF;&#x30FC;M &#x30B5;&#x30A4;&#x30A8;&#x30F3;&#x30B9;&amp;&#x30C6;&#x30AF;&#x30CE;&#x30ED;&#x30B8;&#x30FC; &#x30B7;&#x30EA;&#x30FC;&#x30BA;&#x7528; 8883 | &#x30EC;&#x30B4; &#x30B5;&#x30A4;&#x30A8;&#x30F3;&#x30B9;&#xFF06;&#x30C6;&#x30AF;&#x30CE;&#x30ED;&#x30B8;&#x30FC; EV3 | &#x30EC;&#x30B4; &#x30A8;&#x30C7;&#x30E5;&#x30B1;&#x30FC;&#x30B7;&#x30E7;&#x30F3;&#x901A;&#x8CA9; SUZUMORI &#x30B7;&#x30E7;&#x30C3;&#x30D4;&#x30F3;&#x30B0;</a></p>

<p>より正確に書きますと、レゴモーターは分解して、以下のようになっております。<br/>
<span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170514/20170514131258.jpg" alt="f:id:konoemario:20170514131258j:plain:w500" title="f:id:konoemario:20170514131258j:plain:w500" class="hatena-fotolife" style="width:500px" itemprop="image"></span></p>

<p><br/></p>

<p>尚、レゴモーター自体の動作確認は、以下のように電池と直接つないだ時に、正常に回転することを確認しています。<br/>
※レゴのMモーターの動作電圧9Vと書いてあったのですが、6Vでも動作することを確認しています。<br/>
<span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170514/20170514125350.png" alt="f:id:konoemario:20170514125350p:plain:w500" title="f:id:konoemario:20170514125350p:plain:w500" class="hatena-fotolife" style="width:500px" itemprop="image"></span></p>

<p>こちらは蛇足かもしれませんが、気になったので記載します。<br/>
以下のように、テスターを経由してモーターに接続した場合には、レゴモーターが回転することが確認できました。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170514/20170514125344.png" alt="f:id:konoemario:20170514125344p:plain:w500" title="f:id:konoemario:20170514125344p:plain:w500" class="hatena-fotolife" style="width:500px" itemprop="image"></span></p>

<p>申し訳ありませんが、よろしくお願い致します。</p>

<h1 id="2017515-追記">2017/5/15 追記</h1>

<p>いまだに、事象は解決していない。<br/>
TA7291のモータードライバーを使用すれば、レゴのMモーターを動かすことはできることは確認済み。</p>

<p><a href="http://akizukidenshi.com/catalog/g/gI-02001/">&#x30E2;&#x30FC;&#x30BF;&#x30FC;&#x30C9;&#x30E9;&#x30A4;&#x30D0;&#x30FC; &#xFF34;&#xFF21;&#xFF17;&#xFF12;&#xFF19;&#xFF11;&#xFF30; &#xFF08;&#xFF12;&#x500B;&#x5165;&#xFF09;: &#x534A;&#x5C0E;&#x4F53; &#x79CB;&#x6708;&#x96FB;&#x5B50;&#x901A;&#x5546; &#x96FB;&#x5B50;&#x90E8;&#x54C1; &#x30CD;&#x30C3;&#x30C8;&#x901A;&#x8CA9;</a></p>

-----
--------
AUTHOR: konoemario
TITLE: 勉強中や趣味でやってる言語の成果物はどうやって管理してる？
BASENAME: 2017/05/10/222506
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 05/10/2017 22:25:06
CATEGORY: Python
CATEGORY: プログラム
CATEGORY: 雑談
IMAGE: https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170510/20170510211329.png
-----
BODY:
<h3>日記</h3>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/Python">Python</a>について勉強します、と言い出してラズパイに手をだしてからは、
なぜかレゴブロックをいじっている時間が一番多い今日このごろ。</p>

<p>ラジコンのコントローラーにようやく着手しはじめたので、<a class="keyword" href="http://d.hatena.ne.jp/keyword/Python">Python</a>を再度触り始めました。</p>

<p>エディタはPycharmを使っているのですが、あまりの自分の煩雑さに愕然としたというただの日記です。</p>

<p>※役に立つアド<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D0%A5%A4%A5%B9">バイス</a>等は一切ないのです。</p>

<h4>プロジェクトの中がぐちゃぐちゃ</h4>

<p>頻繁に使用している（正確に書くのであれば、このプロジェクトしかない)Pychmaプロジェクトをキャプってみました。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170510/20170510211329.png" alt="f:id:konoemario:20170510211329p:plain:w500" title="f:id:konoemario:20170510211329p:plain:w500" class="hatena-fotolife" style="width:500px" itemprop="image"></span></p>

<p>モジュール名の<a class="keyword" href="http://d.hatena.ne.jp/keyword/%CC%BF%CC%BE%B5%AC%C2%A7">命名規則</a>もぐっちゃぐっちゃですが、初めたころからの「HelloWorld」から、本を見ながら書いたコードや、試してみたいコードやらなんやらでカオスです。</p>

<p>VisualStudioみたいな<a class="keyword" href="http://d.hatena.ne.jp/keyword/IDE">IDE</a>つかっててもそうなんですが、ソリューションやプロジェクトの構成単位ってのが、あんまりわかってないです。
DLLやexeが〜ってのはなんとなくわかるのですが。</p>

<p>話がそれましたが、<a class="keyword" href="http://d.hatena.ne.jp/keyword/Python">Python</a>のPychamによるプロジェクトであれば、どんな単位で作成するのが適切なんでしょうか。</p>

<h4>リソースを管理する<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C7%A5%A3%A5%EC%A5%AF%A5%C8">ディレクト</a>リがぐちゃぐちゃ</h4>

<p>これも昔からなんですが、ちょっと勉強してみるか、と始めた系のソースやらなんやらが、いたるところに散らばっていて悲しくなります。</p>

<pre class="code" data-lang="" data-unlink>（例）ぐちゃぐちゃの例
~/PycharmProjects 
~/git
~/html
~/myc
~/work/php
~/work/html
~/Desktop/Project/Empty
/Library/WebServer/Documents/phpfile</pre>


<p>きっちりやってる方はどう管理しているのかを知りたいです。</p>

<h4><a class="keyword" href="http://d.hatena.ne.jp/keyword/github">github</a>の<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%EA%A5%DD%A5%B8%A5%C8%A5%EA">リポジトリ</a>もぐちゃぐちゃ</h4>

<p>自端末でリソースを管理するからだめなんだ！とおもいたちgitを導入しましたが、ものすごく中途半端な状態で放置されています。<br/>
これも冒頭のプロジェクトと同様で<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%EA%A5%DD%A5%B8%A5%C8%A5%EA">リポジトリ</a>の適切な単位がわかってないせいかと思います。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170510/20170510221758.png" alt="f:id:konoemario:20170510221758p:plain:w500" title="f:id:konoemario:20170510221758p:plain:w500" class="hatena-fotolife" style="width:500px" itemprop="image"></span></p>

<h4>電子工作の収納箱もぐちゃぐちゃ</h4>

<p>ここまでくると、人間の問題も多いにあるよな、、、と反省するのですが、電子工作で使用した部品も自分の本能に従って整理整頓されています。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170510/20170510221702.jpg" alt="f:id:konoemario:20170510221702j:plain:w500" title="f:id:konoemario:20170510221702j:plain:w500" class="hatena-fotolife" style="width:500px" itemprop="image"></span></p>

<p>何かおすすめの管理術があれば書籍でもいいので教えてください。。。</p>

-----
--------
AUTHOR: konoemario
TITLE: 銭湯のドライヤーに感心した
BASENAME: 2017/05/08/191722
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 05/08/2017 19:17:22
CATEGORY: 雑談
CATEGORY: 幸せについて
IMAGE: https://images-fe.ssl-images-amazon.com/images/I/31a0YrNaNqL._SL160_.jpg
-----
BODY:
<h2>日記</h2>

<p>GW明けの今日、風邪を引いて会社を休んだ。</p>

<p>日曜の朝から体調が悪く、夕方には悪寒と共に寝込んでしまった。</p>

<p>定期的に適当な体調不良で会社を休んでるだけに、本気で体調が悪い時にどうしたらいいのか悩む。</p>

<p>これだけ体調が悪いのだから、前日から明日休むといったほうが真実味が出るかもしれない、でも社会人って一晩寝て様子みるのが常識なんじゃないか、ただGW明けの朝連絡すると、長期休暇明けで案の定こいつ休んだなと思われてしまう、と。</p>

<p>結果、翌朝さらに体調が悪化していたので、死にそうになりながら連絡をした。<br/>
人間余裕がないと、その辺もどうでもよくなる。</p>

<p>これを普段の生活でコン<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C8%A5%ED%A1%BC%A5%EB">トロール</a>できればもっといいのにとお思う。</p>

<h2>本題</h2>

<p>GWが実家に帰省しました。</p>

<p>お風呂はせっかくなので、近所の銭湯へ。</p>

<p>ちょっと混んでたけれども、満喫できました。<br/>
サウナ入った後の水風呂が大好き。水風呂に入ると、いつも<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%BF%A5%A4%A5%BF%A5%CB%A5%C3%A5%AF">タイタニック</a>の終盤シーンを思い出す。</p>

<p>お風呂から上がって、髪を乾かそうとドライヤーを手にとった。</p>

<p>ふと隣のドライヤーを見ると、「ナノドライヤー　髪がつやつやに！」みたいな広告と共に、実際にナノドライヤーが置いてあった。</p>

<p><div class="hatena-asin-detail"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B01I1B8ARY/hatena-blog-22/"><img src="https://images-fe.ssl-images-amazon.com/images/I/31a0YrNaNqL._SL160_.jpg" class="hatena-asin-detail-image" alt="パナソニック ヘアドライヤー ナノケア 白 EH-NA98-W" title="パナソニック ヘアドライヤー ナノケア 白 EH-NA98-W"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B01I1B8ARY/hatena-blog-22/">パナソニック ヘアドライヤー ナノケア 白 EH-NA98-W</a></p><ul><li><span class="hatena-asin-detail-label">出版社/メーカー:</span> <a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D1%A5%CA%A5%BD%A5%CB%A5%C3%A5%AF">パナソニック</a></li><li><span class="hatena-asin-detail-label">発売日:</span> 2016/09/01</li><li><span class="hatena-asin-detail-label">メディア:</span> ホーム&キッチン</li><li><a href="http://d.hatena.ne.jp/asin/B01I1B8ARY/hatena-blog-22" target="_blank">この商品を含むブログ (1件) を見る</a></li></ul></div><div class="hatena-asin-detail-foot"></div></div></p>

<p>昔からあることなのかもしれないけれども、この手法に感動した。<br/>
銭湯って風呂上がりに髪を乾かすから、ドライヤーって必要になるし、こういった場で実際に使ってみて効果があるのであれば欲しくなっちゃうよなーって。</p>

<p>他にも、使ってみて驚くシャンプーとか、そういうのもいけるなぁと思い、さっそくナノドライヤーを使ってみようとしたところ、「5分　100円」の文字が目に飛び込んだ。</p>

<p>僕は普通のドライヤーを使うことにした。</p>

<p>冷静に考えると不思議。</p>

<p>てっきり、ナノドライヤーは、メーカーから銭湯側に、タダでもいいから置いて欲しいと言われているのかと思っていた。</p>

<p>そうではなく、銭湯側が、ナノドライヤーを独自に購入して、5分100円で原価を回収しにいっているのだろうか。<br/>
もしくは、なのドライヤーレンタルプランがあるのだろうか。</p>

<p>答えをしっている方がいたら教えていただきたい。</p>

<p>（追記)勝手な想像<br/>
銭湯のコーヒー牛乳やら、フルーツオレの瓶が120円の銭湯屋はほんとにわかってない、みたいな記事を書こうとしていた。</p>

<p>というのも、脱衣所の貸しロッカーの金額が100円で、お風呂から上がって、ロッカー開けたら100円戻ってくるじゃないですか。</p>

<p>この100円、財布に戻してもいいんですが、風呂上がりで暑いし、服着てないなかで財布触るのも煩わしいので、使っちゃってもいいかなっていつも思うんですよ。</p>

<p>そこで、前述のコーヒー牛乳が100円で購入できると、即座に買ってしまうわけです。<br/>
それなのに120円としていると、わざわざ財布から20円ださなきゃいけないじゃないですか。</p>

<p>これがいけてないなぁって思います。</p>

<p><span style="font-size: 80%">僕は風呂上がりのフルーツオレが好きなので、142円でもなんでも買いますが。  </span></p>

<p>で話が元に戻ると、ナノドライヤーの100円も同じ理屈なのでしょうか。<br/>
さらにいえば、銭湯に置いてあるマッサージ系の機器もそれ系なんでしょうか。<br/>
(こちらは100円かどうか知りませんが)</p>

<p>銭湯マイスター教えてください。</p>

-----
--------
AUTHOR: konoemario
TITLE: Pythonでキーイベントを取得する
BASENAME: 2017/05/08/212729
STATUS: Draft
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 05/07/2017 15:00:02
-----
BODY:
<h1>#</h1>

<h2><a class="keyword" href="http://d.hatena.ne.jp/keyword/Pygame">Pygame</a>のインス<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C8%A1%BC%A5%EB">トール</a></h2>

<pre class="code lang-sh" data-lang="sh" data-unlink><span class="synPreProc">(</span><span class="synSpecial">raspberry_3.5.1</span><span class="synPreProc">)</span> masao<span class="synConstant">-3</span>:raspberry konoe_mario$ sudo pip install pygame

・
（省略）
・

    <span class="synComment">#include &quot;SDL.h&quot;</span>
             ^
    <span class="synConstant">1</span> error generated.
    error: <span class="synStatement">command</span> <span class="synStatement">'</span><span class="synConstant">clang</span><span class="synStatement">'</span> failed with <span class="synStatement">exit</span> <span class="synStatement">status</span> <span class="synConstant">1</span>
</pre>


<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/Mercurial">Mercurial</a>のインス<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C8%A1%BC%A5%EB">トール</a></p>

<pre class="code lang-sh" data-lang="sh" data-unlink><span class="synPreProc">(</span><span class="synSpecial">raspberry_3.5.1</span><span class="synPreProc">)</span> masao<span class="synConstant">-3</span>:raspberry konoe_mario$ brew install mercurial
<span class="synStatement">==&gt;</span> Downloading https://homebrew.bintray.com/bottles/mercurial-3.4.2.yosemite.bottle.tar.gz
<span class="synComment">######################################################################## 100.0%</span>
<span class="synStatement">==&gt;</span> Pouring mercurial-3.4.2.yosemite.bottle.tar.gz
<span class="synStatement">==&gt;</span> Caveats
Bash completion has been installed to:
  /usr/<span class="synStatement">local</span>/etc/bash_completion.d

zsh completion has been installed to:
  /usr/<span class="synStatement">local</span>/share/zsh/site-<span class="synStatement">functions</span>

Python modules have been installed and Homebrew<span class="synStatement">'</span><span class="synConstant">s site-packages is not</span>
<span class="synConstant">in your Python sys.path, so you will not be able to import the modules</span>
<span class="synConstant">this formula installed. If you plan to develop with these modules,</span>
<span class="synConstant">please run:</span>
<span class="synConstant">  mkdir -p /Users/konoe_mario/.local/lib/python3.5/site-packages</span>
<span class="synConstant">  echo </span><span class="synStatement">'</span>import site; site.addsitedir<span class="synPreProc">(</span><span class="synStatement">&quot;</span><span class="synConstant">/usr/local/lib/python2.7/site-packages</span><span class="synStatement">&quot;</span><span class="synPreProc">)</span><span class="synStatement">'</span><span class="synConstant"> &gt;&gt; /Users/konoe_mario/.local/lib/python3.5/site-packages/homebrew.pth</span>
<span class="synConstant">==&gt; Summary</span>
<span class="synConstant">🍺  /usr/local/Cellar/mercurial/3.4.2: 370 files, 5.1M</span>
</pre>




<pre class="code lang-sh" data-lang="sh" data-unlink><span class="synPreProc">(</span><span class="synSpecial">raspberry_3.5.1</span><span class="synPreProc">)</span> masao<span class="synConstant">-3</span>:raspberry konoe_mario$ brew install sdl sdl_image sdl_mixer sdl_ttf smpeg portmidi
</pre>




<pre class="code lang-sh" data-lang="sh" data-unlink><span class="synPreProc">(</span><span class="synSpecial">raspberry_3.5.1</span><span class="synPreProc">)</span> masao<span class="synConstant">-3</span>:raspberry konoe_mario$ sudo pip install hg+http://bitbucket.org/pygame/pygame

・
<span class="synPreProc">(</span><span class="synSpecial">省略</span><span class="synPreProc">)</span>
・
Successfully installed pygame-1.9.4.dev0

<span class="synPreProc">(</span><span class="synSpecial">raspberry_3.5.1</span><span class="synPreProc">)</span> masao<span class="synConstant">-3</span>:raspberry konoe_mario$ pip freeze
<span class="synIdentifier">pygame</span>=<span class="synStatement">=</span>1.9.4.dev0
</pre>


-----
--------
AUTHOR: konoemario
TITLE: 
BASENAME: 2017/05/07/021520
STATUS: Draft
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 05/06/2017 22:28:32
-----
BODY:
<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/lego">lego</a> battery boxをあける</p>

<p><iframe width="459" height="344" src="https://www.youtube.com/embed/QJtt5_XaYKM?feature=oembed" frameborder="0" allowfullscreen></iframe><cite class="hatena-citation"><a href="https://www.youtube.com/watch?v=QJtt5_XaYKM">www.youtube.com</a></cite></p>

<p><iframe width="480" height="270" src="https://www.youtube.com/embed/uw3exu_3qD0?feature=oembed" frameborder="0" allowfullscreen></iframe><cite class="hatena-citation"><a href="https://www.youtube.com/watch?v=uw3exu_3qD0">www.youtube.com</a></cite></p>

<p><iframe src="//hatenablog-parts.com/embed?url=http%3A%2F%2Fqiita.com%2Fchi9rin%2Fitems%2F0c01c18c5048c64ffb0c" title="レゴ パワーファンクション 8881 バッテリーボックスの電極の極性 - Qiita" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://qiita.com/chi9rin/items/0c01c18c5048c64ffb0c">qiita.com</a></cite></p>

-----
--------
AUTHOR: konoemario
TITLE: RaspBerryPiでラジコンをつくる(6)：とりあえず動くものができました
BASENAME: 2017/05/06/210309
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 05/06/2017 21:03:09
CATEGORY: プログラム
CATEGORY: ラズパイ
CATEGORY: ラジコンシリーズ
IMAGE: https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170506/20170506162521.jpg
-----
BODY:
<p>電子工作経験がゼロでしたが、とりあえず動くものができたのでまとめます！</p>

<p>いろいろと試行錯誤してお金が地味にかかったので、これからはじめる方の最短距離になればと思います。</p>

<p>ただ、制御部分がさっぱりできていなかったり、モーターがいまいちだったり、改善点はいっぱいあるので、変更しだい記事を上げていこうかと思います。</p>

<p>お子様がいる方には、夏休みの宿題とかに、<span style="font-size: 150%"><span style="color: #ff0000">かなりおすすめです。</span></span></p>

<p><a href="http://tohutokonsome.hatenablog.com/entry/2017/03/05/200409">RaspBerryPi&#x3067;&#x30E2;&#x30FC;&#x30BF;&#x30FC;&#x3092;&#x52D5;&#x304B;&#x3059;(1) - &#x8C46;&#x8150;&#x3068;&#x30B3;&#x30F3;&#x30BD;&#x30E1;</a><br/>
<a href="http://tohutokonsome.hatenablog.com/entry/2017/03/06/223721">RaspBerryPi&#x3067;&#x30E2;&#x30FC;&#x30BF;&#x30FC;&#x3092;&#x52D5;&#x304B;&#x3059;(2) - &#x8C46;&#x8150;&#x3068;&#x30B3;&#x30F3;&#x30BD;&#x30E1;</a> <br/>
<a href="http://tohutokonsome.hatenablog.com/entry/2017/03/11/001512">RaspBerryPi&#x3067;&#x30E2;&#x30FC;&#x30BF;&#x30FC;&#x3092;&#x52D5;&#x304B;&#x3059;(3):&#x5727;&#x5012;&#x7684;&#x529B;&#x4E0D;&#x8DB3; - &#x8C46;&#x8150;&#x3068;&#x30B3;&#x30F3;&#x30BD;&#x30E1;</a><br/>
<a href="http://tohutokonsome.hatenablog.com/entry/2017/04/02/174735">RaspBerryPi&#x3067;&#x30E2;&#x30FC;&#x30BF;&#x30FC;&#x3092;&#x52D5;&#x304B;&#x3059;(4) - &#x8C46;&#x8150;&#x3068;&#x30B3;&#x30F3;&#x30BD;&#x30E1;</a><br/>
<a href="http://tohutokonsome.hatenablog.com/entry/2017/04/23/122526">RaspBerryPi&#x3067;&#x30E9;&#x30B8;&#x30B3;&#x30F3;&#x3092;&#x3064;&#x304F;&#x308B;(5) - &#x8C46;&#x8150;&#x3068;&#x30B3;&#x30F3;&#x30BD;&#x30E1;</a></p>

<ul class="table-of-contents">
    <li><a href="#できるもの">できるもの</a><ul>
            <li><a href="#必要なもの">必要なもの</a><ul>
                    <li><a href="#RaspBerryPiおよび周辺機器">RaspBerryPiおよび、周辺機器</a><ul>
                            <li><a href="#購入する場合のリンク">購入する場合のリンク</a></li>
                        </ul>
                    </li>
                    <li><a href="#電子工作で必要なもの">電子工作で必要なもの</a><ul>
                            <li><a href="#購入する場合のリンク-1">購入する場合のリンク</a></li>
                        </ul>
                    </li>
                    <li><a href="#ラジコンのモーターを扱う上で必要なもの">ラジコンのモーターを扱う上で必要なもの</a><ul>
                            <li><a href="#購入する場合のリンク-2">購入する場合のリンク</a></li>
                        </ul>
                    </li>
                    <li><a href="#ラジコンのモーター">ラジコンのモーター</a><ul>
                            <li><a href="#レゴ-M-Motor">レゴ M-Motor</a><ul>
                                    <li><a href="#レゴ-M-Motorの線をジャンパー線にする">レゴ M-Motorの線をジャンパー線にする</a></li>
                                </ul>
                            </li>
                            <li><a href="#マイクロサーボモーター">マイクロサーボモーター</a></li>
                        </ul>
                    </li>
                    <li><a href="#ラジコンカー本体">ラジコンカー本体</a></li>
                    <li><a href="#モバイルバッテリー-追記">モバイルバッテリー （追記)</a></li>
                </ul>
            </li>
        </ul>
    </li>
</ul>

<h1 id="できるもの">できるもの</h1>

<p>ものすごくごちゃごちゃしてますが、とりあえずの完成図はこちら！
<span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170506/20170506162521.jpg" alt="f:id:konoemario:20170506162521j:plain" title="f:id:konoemario:20170506162521j:plain" class="hatena-fotolife" itemprop="image"></span></p>

<p>動いているところ<br/>
<iframe width="459" height="344" src="https://www.youtube.com/embed/8BDsm5SkzCc?feature=oembed" frameborder="0" allowfullscreen></iframe><cite class="hatena-citation"><a href="https://youtu.be/8BDsm5SkzCc">youtu.be</a></cite></p>

<h2 id="必要なもの">必要なもの</h2>

<p>作成にあたって、実際に使用したものを書きます。  <br/>
ただ、ラジコンパーツにレゴを使っているので、やっぱり高くなっちゃいます。<br/>
なので安く済ませたいという方は、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%BF%A5%DF%A5%E4">タミヤ</a>の楽しい工作シリーズを使用する路線のほうが安くすみそうです。<br/>
でも、レゴそのものも楽しいので、悪くない買い物だと思います！</p>

<h3 id="RaspBerryPiおよび周辺機器">RaspBerryPiおよび、周辺機器</h3>

<p>まずは本体と周辺機器です。<br/>
このへんはラジコンどうのこのではなくラズパイセットアップ共通のものになるので、詳しい内容は割愛しちゃってます。</p>

<p>その都度、おすすめのものがでたりしているので、個々で検索してもらったほうがよさそうです。</p>

<ul>
<li>RaspBerryPi Zero 600円</li>
<li><a class="keyword" href="http://d.hatena.ne.jp/keyword/microSD">microSD</a>カード8GB    　1000円〜</li>
<li><a class="keyword" href="http://d.hatena.ne.jp/keyword/Wifi">Wifi</a>ドングル                      1000円〜</li>
<li>マイクロUSB-USB変換     500円ぐらい</li>
<li>USB電源アダプタ(5V 2A〜2.5A) 1500円〜</li>
<li><a class="keyword" href="http://d.hatena.ne.jp/keyword/HDMI">HDMI</a>ケーブル　　　　　 1000円〜</li>
<li><a class="keyword" href="http://d.hatena.ne.jp/keyword/HDMI">HDMI</a>アダプタ(ミニ to 標準) 200円ぐらい</li>
<li>gpio-hammmer-header   800円ぐらい</li>
<li>キーボード (自宅にあったものを流用)</li>
</ul>


<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170506/20170506192914.jpg" alt="f:id:konoemario:20170506192914j:plain:w500" title="f:id:konoemario:20170506192914j:plain:w500" class="hatena-fotolife" style="width:500px" itemprop="image"></span></p>

<hr />

<p>以下はあったら便利なもの</p>

<ul>
<li>USBハブ 1000円〜</li>
<li>RaspBerryPiZero用のケース</li>
</ul>


<p>USBハブは、あったら便利なもの、としてますがあったほうが絶対にいいです。  また、USBハブには電源をラズパイから供給するバスタイプと、別途外部から電源をもらうセルフタイプがありますが、バスタイプにして、いろいろとUSB機器を挿すと、ラズパイの電源がもたないみたいな記事を見たことがあったので、セルプタイプを購入しました。</p>

<p><div class="hatena-asin-detail"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B002K6EU3K/hatena-blog-22/"><img src="https://images-fe.ssl-images-amazon.com/images/I/41RxKi%2BrEDL._SL160_.jpg" class="hatena-asin-detail-image" alt="エレコム USBハブ 2.0対応 4ポート ACアダプタ付 1.0m ブラック U2H-TZ410SBK" title="エレコム USBハブ 2.0対応 4ポート ACアダプタ付 1.0m ブラック U2H-TZ410SBK"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B002K6EU3K/hatena-blog-22/">エレコム USBハブ 2.0対応 4ポート ACアダプタ付 1.0m ブラック U2H-TZ410SBK</a></p><ul><li><span class="hatena-asin-detail-label">出版社/メーカー:</span> <a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A8%A5%EC%A5%B3%A5%E0">エレコム</a></li><li><span class="hatena-asin-detail-label">発売日:</span> 2009/08/19</li><li><span class="hatena-asin-detail-label">メディア:</span> Personal Computers</li><li><span class="hatena-asin-detail-label">購入</span>: 1人 <span class="hatena-asin-detail-label">クリック</span>: 2回</li><li><a href="http://d.hatena.ne.jp/asin/B002K6EU3K/hatena-blog-22" target="_blank">この商品を含むブログを見る</a></li></ul></div><div class="hatena-asin-detail-foot"></div></div></p>

<hr />

<h4 id="購入する場合のリンク">購入する場合のリンク</h4>

<p>ここでは、本体とピンヘッダーだけ紹介します。
在庫の関係で、別々のサイトになっちゃいました。<br/>
ラズパイについては送料の方が高くつきます。<br/>
<br/>
ここでZeroをひとつ買ってみました。<br/>
<a href="https://raspberry-pi.ksyic.com/news/page/nwp.id/46">Raspberry Pi Zero &#x53D6;&#x6271;&#x958B;&#x59CB;&#x306E;&#x304A;&#x77E5;&#x3089;&#x305B; - Raspberry Pi Shop by KSY</a><br/>
こっちでgpio-hammer-headerを買いました。<br/>
<a href="https://www.switch-science.com/catalog/3189/">GPIO Hammer Header - &#x30B9;&#x30A4;&#x30C3;&#x30C1;&#x30B5;&#x30A4;&#x30A8;&#x30F3;&#x30B9;</a></p>

<p><br/>
<br/></p>

<h3 id="電子工作で必要なもの">電子工作で必要なもの</h3>

<p>こちらは電子工作で使ったものをあげています。</p>

<ul>
<li>はんだごて  1000円〜</li>
<li>はんだ吸い取り線 150円</li>
<li>ジャンパー線(オス-オス、オス-メスを10本ずつぐらい)  500円ぐらい</li>
<li>ブレッドボード 130円</li>
<li><a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B0%A5%EB%A1%BC%A5%AC%A5%F3">グルーガン</a> 300円〜</li>
<li>プラスチックカッター 100円</li>
<li>やすり 100円</li>
<li>各種ドライバー (自宅にあったものを使用)</li>
</ul>


<p><br/>
<span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170506/20170506193942.jpg" alt="f:id:konoemario:20170506193942j:plain:w500" title="f:id:konoemario:20170506193942j:plain:w500" class="hatena-fotolife" style="width:500px" itemprop="image"></span></p>

<p>はんだごていらないかと思いきや、レゴのモーターを触る場合に必要になっちゃいます。その際、はんだ吸い取り線もあるといいので一緒に。</p>

<p>ブレッドボードで思い出しましたが、<a class="keyword" href="http://d.hatena.ne.jp/keyword/LEGO">LEGO</a>にくっつけることができる「Cake Board ケーキボード」も試してみました。<br/>
が、思った以上に外れやすいので、あまりお勧めできません。</p>

<p>プラスチックカッター、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B0%A5%EB%A1%BC%A5%AC%A5%F3">グルーガン</a>は100均一で売ってるみたいですが、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B0%A5%EB%A1%BC%A5%AC%A5%F3">グルーガン</a>は見つけることができず、ホームセンターで購入しました。 <br/>
この辺りがでてきちゃうと、レゴだけじゃ無理だったんだなと察する方がいらっしゃるかと思います。</p>

<h4 id="購入する場合のリンク-1">購入する場合のリンク</h4>

<p>はんだごて、吸い取り線、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B0%A5%EB%A1%BC%A5%AC%A5%F3">グルーガン</a>、プラスチックカッター、やすりは近所で購入しました。<br/>
<a href="http://akizukidenshi.com/catalog/g/gC-08933/">&#x30D6;&#x30EC;&#x30C3;&#x30C9;&#x30DC;&#x30FC;&#x30C9;&#x30FB;&#x30B8;&#x30E3;&#x30F3;&#x30D1;&#x30FC;&#x30B3;&#x30FC;&#x30C9;&#xFF08;&#x30AA;&#x30B9;&minus;&#x30E1;&#x30B9;&#xFF09; &#xFF11;&#xFF15;&#xFF43;&#xFF4D;&#xFF08;&#x8D64;&#xFF09; &#xFF08;&#xFF11;&#xFF10;&#x672C;&#x5165;&#xFF09;: &#x30D1;&#x30FC;&#x30C4;&#x4E00;&#x822C; &#x79CB;&#x6708;&#x96FB;&#x5B50;&#x901A;&#x5546; &#x96FB;&#x5B50;&#x90E8;&#x54C1; &#x30CD;&#x30C3;&#x30C8;&#x901A;&#x8CA9;</a>  <br/>
<a href="http://akizukidenshi.com/catalog/g/gC-05371/">&#x30D6;&#x30EC;&#x30C3;&#x30C9;&#x30DC;&#x30FC;&#x30C9;&#x30FB;&#x30B8;&#x30E3;&#x30F3;&#x30D1;&#x30FC;&#x30B3;&#x30FC;&#x30C9;&#xFF08;&#x30AA;&#x30B9;&minus;&#x30AA;&#x30B9;&#xFF09;&#xFF08;&#xFF11;&#xFF10;&#xFF43;&#xFF4D;&#xFF09;&#xFF12;&#xFF10;&#x672C;&#x30BB;&#x30C3;&#x30C8;: &#x30D1;&#x30FC;&#x30C4;&#x4E00;&#x822C; &#x79CB;&#x6708;&#x96FB;&#x5B50;&#x901A;&#x5546; &#x96FB;&#x5B50;&#x90E8;&#x54C1; &#x30CD;&#x30C3;&#x30C8;&#x901A;&#x8CA9;</a><br/>
<a href="http://akizukidenshi.com/catalog/g/gP-05155/">&#x30DF;&#x30CB;&#x30D6;&#x30EC;&#x30C3;&#x30C9;&#x30DC;&#x30FC;&#x30C9; &#xFF22;&#xFF22;&minus;&#xFF16;&#xFF10;&#xFF11;&#xFF08;&#x767D;&#xFF09;: &#x30D1;&#x30FC;&#x30C4;&#x4E00;&#x822C; &#x79CB;&#x6708;&#x96FB;&#x5B50;&#x901A;&#x5546; &#x96FB;&#x5B50;&#x90E8;&#x54C1; &#x30CD;&#x30C3;&#x30C8;&#x901A;&#x8CA9;</a></p>

<p><br/>
<br/></p>

<h3 id="ラジコンのモーターを扱う上で必要なもの">ラジコンのモーターを扱う上で必要なもの</h3>

<ul>
<li>モータードライバ　300円</li>
<li>抵抗(3kΩ以上) 100円</li>
<li>単三電池ボックス4本用　70円</li>
<li>単三電池4本　80円
<br/></li>
</ul>


<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170506/20170506195209.jpg" alt="f:id:konoemario:20170506195209j:plain:w500" title="f:id:konoemario:20170506195209j:plain:w500" class="hatena-fotolife" style="width:500px" itemprop="image"></span></p>

<p>電池と、モーターを制御するためのモータードライバが必要になります。<br/>
モータードライバーを使用するにあたり、抵抗も必要みたいなので合わせて揃えます。</p>

<p>テスト用のDCモーター(130円ぐらい)を合わせて購入したら便利かもしれません。</p>

<h4 id="購入する場合のリンク-2">購入する場合のリンク</h4>

<p><a href="http://akizukidenshi.com/catalog/g/gI-02001/">&#x30E2;&#x30FC;&#x30BF;&#x30FC;&#x30C9;&#x30E9;&#x30A4;&#x30D0;&#x30FC; &#xFF34;&#xFF21;&#xFF17;&#xFF12;&#xFF19;&#xFF11;&#xFF30; &#xFF08;&#xFF12;&#x500B;&#x5165;&#xFF09;: &#x534A;&#x5C0E;&#x4F53; &#x79CB;&#x6708;&#x96FB;&#x5B50;&#x901A;&#x5546; &#x96FB;&#x5B50;&#x90E8;&#x54C1; &#x30CD;&#x30C3;&#x30C8;&#x901A;&#x8CA9;</a><br/>
<a href="http://akizukidenshi.com/catalog/g/gR-25512/">&#x30AB;&#x30FC;&#x30DC;&#x30F3;&#x62B5;&#x6297;&#xFF08;&#x70AD;&#x7D20;&#x76AE;&#x819C;&#x62B5;&#x6297;&#xFF09; &#xFF11;&#xFF0F;&#xFF14;&#xFF37; &#xFF15;&#xFF0E;&#xFF11;&#xFF4B;&Omega; &#xFF08;&#xFF11;&#xFF10;&#xFF10;&#x672C;&#x5165;&#xFF09;: &#x30D1;&#x30FC;&#x30C4;&#x4E00;&#x822C; &#x79CB;&#x6708;&#x96FB;&#x5B50;&#x901A;&#x5546; &#x96FB;&#x5B50;&#x90E8;&#x54C1; &#x30CD;&#x30C3;&#x30C8;&#x901A;&#x8CA9;</a><br/>
<a href="http://akizukidenshi.com/catalog/g/gP-02671/">&#x96FB;&#x6C60;&#x30DC;&#x30C3;&#x30AF;&#x30B9; &#x5358;&#xFF13;&times;&#xFF14;&#x672C; &#x30EA;&#x30FC;&#x30C9;&#x7DDA;: &#x30D1;&#x30FC;&#x30C4;&#x4E00;&#x822C; &#x79CB;&#x6708;&#x96FB;&#x5B50;&#x901A;&#x5546; &#x96FB;&#x5B50;&#x90E8;&#x54C1; &#x30CD;&#x30C3;&#x30C8;&#x901A;&#x8CA9;</a><br/>
<a href="http://akizukidenshi.com/catalog/g/gB-03256/">&#x5358;&#xFF13;&#x5F62;&#x30A2;&#x30EB;&#x30AB;&#x30EA;&#x4E7E;&#x96FB;&#x6C60; &#x30B4;&#x30FC;&#x30EB;&#x30C7;&#x30F3;&#x30D1;&#x30EF;&#x30FC;&#x88FD; &#xFF2C;&#xFF32;&#xFF16; &#xFF08;&#xFF14;&#x672C;&#x5165;&#xFF09;: &#x96FB;&#x6C60;&#x4E00;&#x822C; &#x79CB;&#x6708;&#x96FB;&#x5B50;&#x901A;&#x5546; &#x96FB;&#x5B50;&#x90E8;&#x54C1; &#x30CD;&#x30C3;&#x30C8;&#x901A;&#x8CA9;</a><br/>
<a href="http://akizukidenshi.com/catalog/g/gP-09169/">&#xFF24;&#xFF23;&#x30E2;&#x30FC;&#x30BF;&#x30FC; &#xFF26;&#xFF21;&minus;&#xFF11;&#xFF13;&#xFF10;&#xFF32;&#xFF21;&minus;&#xFF12;&#xFF12;&#xFF17;&#xFF10;&#xFF2C;: &#x30D1;&#x30FC;&#x30C4;&#x4E00;&#x822C; &#x79CB;&#x6708;&#x96FB;&#x5B50;&#x901A;&#x5546; &#x96FB;&#x5B50;&#x90E8;&#x54C1; &#x30CD;&#x30C3;&#x30C8;&#x901A;&#x8CA9;</a></p>

<h3 id="ラジコンのモーター">ラジコンのモーター</h3>

<p>ここからはレゴのパーツが出てきます。</p>

<ul>
<li>レゴ M-Motor 8883 (通称、Mモーター)  1650円</li>
<li>マイクロ<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B5%A1%BC%A5%DC%A5%E2%A1%BC%A5%BF">サーボモータ</a>ー   400円</li>
</ul>


<h4 id="レゴ-M-Motor">レゴ M-Motor</h4>

<p>車を動かす肝となるモーターです。<br/>
Mモーターは「パワーファンクションセット」に含まれています。<br/>
ただ、パワーファンクションセットは5000円ぐらいするので、単品のモーターだけ購入したほうがお買い得です。</p>

<p>(自分は、<a href="http://d.hatena.ne.jp/asin/B01J41LWFW/hatena-blog-22">レゴ (LEGO) テクニック RCトラックレーサー 42065</a>を購入した際、一緒に入っていたのを使ってます。)</p>

<p><div class="hatena-asin-detail"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B003S88XH8/hatena-blog-22/"><img src="https://images-fe.ssl-images-amazon.com/images/I/2182ksYIQQL._SL160_.jpg" class="hatena-asin-detail-image" alt="LEGO (レゴ) Functions Power Functions M-Motor 8883 ブロック おもちゃ （並行輸入）" title="LEGO (レゴ) Functions Power Functions M-Motor 8883 ブロック おもちゃ （並行輸入）"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B003S88XH8/hatena-blog-22/">LEGO (レゴ) Functions Power Functions M-Motor 8883 ブロック おもちゃ （並行輸入）</a></p><ul><li><span class="hatena-asin-detail-label">出版社/メーカー:</span> レゴ (<a class="keyword" href="http://d.hatena.ne.jp/keyword/LEGO">LEGO</a>)</li><li><span class="hatena-asin-detail-label">メディア:</span> おもちゃ＆ホビー</li><li><a href="http://d.hatena.ne.jp/asin/B003S88XH8/hatena-blog-22" target="_blank">この商品を含むブログを見る</a></li></ul></div><div class="hatena-asin-detail-foot"></div></div></p>

<p>単品だと1650円で、当初は割高だなぁって思ってました。
というのも、一番安いDCモーターなら130円程度で購入できるのです。<br/>
ただ、130円のDCモーターで試したのですが、トルクが足りなくって動きませんでした。</p>

<p>こちらのレゴのモーターのトルクを参考にさせていただきました。<br/>
<iframe src="//hatenablog-parts.com/embed?url=http%3A%2F%2Flego.masa-lab.net%2Fmodules%2Fd3blog%2Fdetails.php%3Fbid%3D53" title="LEGOTechLab - LEGO パワーファンクションモーターの種類" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://lego.masa-lab.net/modules/d3blog/details.php?bid=53">lego.masa-lab.net</a></cite></p>

<p>これと同じレベルのモーターを買うとした場合、1000円以上はするんじゃないかと勝手に思ってます。だとすれば、そこまで高くないかもしれません。</p>

<p>とはいえ、Mモーターを使っている現時点もパワー不足が否めないので、モーター関係は改善しだい別途まとめます。</p>

<h5 id="レゴ-M-Motorの線をジャンパー線にする">レゴ M-Motorの線をジャンパー線にする</h5>

<p>レゴのM-Motorですが、ケーブルがレゴの電池にくっつくようになってます。<br/>
今回、モーターはモータードライバーとブレッドボート経由で接続したいのですが、このままでは接続できません。<br/>
なので、モーターの中身を開けて、ジャンパー線とつなぐようにします。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170506/20170506203301.jpg" alt="f:id:konoemario:20170506203301j:plain:w500" title="f:id:konoemario:20170506203301j:plain:w500" class="hatena-fotolife" style="width:500px" itemprop="image"></span></p>

<p>モーターの開け方は、こちらの動画が参考になります。<br/>
<iframe width="480" height="270" src="https://www.youtube.com/embed/9y-k5yYG2hY?feature=oembed" frameborder="0" allowfullscreen></iframe><cite class="hatena-citation"><a href="https://www.youtube.com/watch?v=9y-k5yYG2hY">www.youtube.com</a></cite></p>

<p>肝心の作業風景ですが、集中のあまり、全く撮っていませんでした。。。<br/>
130円のDCモーターとジャンパー線を一度つなげてみて、感覚を掴んでからやったほうがよさげです。</p>

<p>需要があれば、もっかいモーターの中身を開けようかと思いますので、ご連絡いただければと思います。</p>

<h4 id="マイクロサーボモーター">マイクロ<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B5%A1%BC%A5%DC%A5%E2%A1%BC%A5%BF">サーボモータ</a>ー</h4>

<p>車を曲げるために必要なモーター。
レゴ公式の<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B5%A1%BC%A5%DC%A5%E2%A1%BC%A5%BF">サーボモータ</a>ーもあるみたいだけれども、市販の<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B5%A1%BC%A5%DC%A5%E2%A1%BC%A5%BF">サーボモータ</a>ーで間に合いました。</p>

<p><a href="http://akizukidenshi.com/catalog/g/gM-08761/">&#x30DE;&#x30A4;&#x30AF;&#x30ED;&#x30B5;&#x30FC;&#x30DC;&#xFF19;&#xFF47; &#xFF33;&#xFF27;&minus;&#xFF19;&#xFF10;: &#x30B5;&#x30FC;&#x30DC; &#x79CB;&#x6708;&#x96FB;&#x5B50;&#x901A;&#x5546; &#x96FB;&#x5B50;&#x90E8;&#x54C1; &#x30CD;&#x30C3;&#x30C8;&#x901A;&#x8CA9;</a></p>

<p>とはいえ、M-motorと同じで、そのままは使えないです。</p>

<p>こちらは、プラスチックカッター、やすりで不要な部分を削って、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B0%A5%EB%A1%BC%A5%AC%A5%F3">グルーガン</a>でレゴの部品とくっつける工程が必要になります。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170506/20170506204430.jpg" alt="f:id:konoemario:20170506204430j:plain:w500" title="f:id:konoemario:20170506204430j:plain:w500" class="hatena-fotolife" style="width:500px" itemprop="image"></span>
<span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170506/20170506204602.jpg" alt="f:id:konoemario:20170506204602j:plain:w500" title="f:id:konoemario:20170506204602j:plain:w500" class="hatena-fotolife" style="width:500px" itemprop="image"></span>
<span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170506/20170506204718.jpg" alt="f:id:konoemario:20170506204718j:plain:w500" title="f:id:konoemario:20170506204718j:plain:w500" class="hatena-fotolife" style="width:500px" itemprop="image"></span></p>

<p>これは以下の参考動画をそのまま真似しました。<br/>
<iframe width="480" height="270" src="https://www.youtube.com/embed/qTcIXiINAu4?feature=oembed" frameborder="0" allowfullscreen></iframe><cite class="hatena-citation"><a href="https://www.youtube.com/watch?v=qTcIXiINAu4">www.youtube.com</a></cite></p>

<h3 id="ラジコンカー本体">ラジコンカー本体</h3>

<p>そして最後に、車の本体です。</p>

<ul>
<li><a class="keyword" href="http://d.hatena.ne.jp/keyword/LEGO">LEGO</a> テクニック [42037]  8500円</li>
</ul>


<p><div class="hatena-asin-detail"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00NGJCED8/hatena-blog-22/"><img src="https://images-fe.ssl-images-amazon.com/images/I/51nO3mbI9bL._SL160_.jpg" class="hatena-asin-detail-image" alt="レゴ (LEGO) テクニック フォーミュラ・オフロードカー 42037" title="レゴ (LEGO) テクニック フォーミュラ・オフロードカー 42037"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00NGJCED8/hatena-blog-22/">レゴ (LEGO) テクニック フォーミュラ・オフロードカー 42037</a></p><ul><li><span class="hatena-asin-detail-label">出版社/メーカー:</span> レゴ (<a class="keyword" href="http://d.hatena.ne.jp/keyword/LEGO">LEGO</a>)</li><li><span class="hatena-asin-detail-label">発売日:</span> 2015/01/16</li><li><span class="hatena-asin-detail-label">メディア:</span> おもちゃ＆ホビー</li><li><a href="http://d.hatena.ne.jp/asin/B00NGJCED8/hatena-blog-22" target="_blank">この商品を含むブログを見る</a></li></ul></div><div class="hatena-asin-detail-foot"></div></div></p>

<p>8500円かよ！たけえ！となるかもしれませんが、個人的にこのレゴの車は感動しました。作っていて、すげええ！となります。<br/>
極端な話、今回のラズパイのラジコンカーという挑戦を抜きにしても、素敵な商品だと思います。</p>

<p>ステアリング機構がうまくできないなぁなんて悩んでいただけに、公式のステアリングの出来の良さにびびりました。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170506/20170506205509.jpg" alt="f:id:konoemario:20170506205509j:plain:w500" title="f:id:konoemario:20170506205509j:plain:w500" class="hatena-fotolife" style="width:500px" itemprop="image"></span></p>

<p>また、エンジン部分もギアが絡まって、かっこよさが滲み出ています。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170506/20170506205646.jpg" alt="f:id:konoemario:20170506205646j:plain:w500" title="f:id:konoemario:20170506205646j:plain:w500" class="hatena-fotolife" style="width:500px" itemprop="image"></span></p>

<p>以上で、必要な部品は揃ったので、あとはそれを組み合わせていくだけです！</p>

<p>長くなったので、別の記事で書こうと思います。</p>

<p>ぜひ読んでいるみなさんも車作ってみてください！</p>

<h3 id="モバイルバッテリー-追記">モバイルバッテリー （追記)</h3>

<p>肝心なものを忘れてました。<br/>
ラジコンなので、コンセントから電源を供給するのではなく、モバイルバッテリーから電源を供給します。</p>

<ul>
<li>モバイルバッテリー(5V 2A〜) 1300円〜</li>
</ul>


<p>いろいろあるかと思いますが、以下を使用しました。</p>

<p><div class="hatena-asin-detail"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B01F8X7LFA/hatena-blog-22/"><img src="https://images-fe.ssl-images-amazon.com/images/I/31DbdFS1lUL._SL160_.jpg" class="hatena-asin-detail-image" alt="cheero Power Plus 3 mini 5200mAh コンパクト モバイルバッテリー iPhone&Android対応 パナソニック電池搭載 (ブラック) CHE-071-BK" title="cheero Power Plus 3 mini 5200mAh コンパクト モバイルバッテリー iPhone&Android対応 パナソニック電池搭載 (ブラック) CHE-071-BK"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B01F8X7LFA/hatena-blog-22/">cheero Power Plus 3 mini 5200mAh コンパクト モバイルバッテリー iPhone&Android対応 パナソニック電池搭載 (ブラック) CHE-071-BK</a></p><ul><li><span class="hatena-asin-detail-label">出版社/メーカー:</span> cheero</li><li><span class="hatena-asin-detail-label">メディア:</span> エレクトロニクス</li><li><a href="http://d.hatena.ne.jp/asin/B01F8X7LFA/hatena-blog-22" target="_blank">この商品を含むブログを見る</a></li></ul></div><div class="hatena-asin-detail-foot"></div></div></p>

<p><iframe src="http://tohutokonsome.hatenablog.com/embed/2017/05/15/221112" title="RaspBerryPiでラジコンをつくる(7)：少し改善 - 豆腐とコンソメ" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://tohutokonsome.hatenablog.com/entry/2017/05/15/221112">tohutokonsome.hatenablog.com</a></cite></p>

-----
--------
AUTHOR: konoemario
TITLE: ラズパイをアドホック接続で使用する
BASENAME: 2017/05/05/202821
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 05/05/2017 20:28:21
CATEGORY: ラズパイ
CATEGORY: プログラム
IMAGE: https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170504/20170504211457.png
-----
BODY:
<p>ラズパイを自宅で使う分には、今回のような設定はいらないと思う。<br/>
ラスパイでラジコンを作るにあたって、必要になりそうなので<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A5%C9%A5%DB%A5%C3%A5%AF">アドホック</a>接続の設定を行った。</p>

<ul class="table-of-contents">
    <li><a href="#アドホック接続とは">アドホック接続とは</a><ul>
            <li><a href="#IPを固定する">IPを固定する</a><ul>
                    <li><a href="#etcdhcpcdconf">/etc/dhcpcd.conf</a></li>
                    <li><a href="#etcnetworkinterfaces">/etc/network/interfaces</a></li>
                </ul>
            </li>
            <li><a href="#ifdownifupコマンドで確認">ifdown、ifupコマンドで確認</a></li>
            <li><a href="#アドホックの設定を行う">アドホックの設定を行う</a><ul>
                    <li><a href="#etcnetworkinterfaces-1">/etc/network/interfaces</a><ul>
                            <li><a href="#微妙にはまるところ">微妙にはまるところ</a><ul>
                                    <li><a href="#wireless-key">wireless-key</a></li>
                                    <li><a href="#-misplaced-option"># misplaced option</a></li>
                                </ul>
                            </li>
                        </ul>
                    </li>
                </ul>
            </li>
            <li><a href="#PC側のIPも固定する">PC側のIPも固定する</a><ul>
                    <li><a href="#Mac-OS-X-の場合">Mac OS X の場合</a></li>
                </ul>
            </li>
            <li><a href="#DHCPが降り出すIPとかぶらないようにする">DHCPが降り出すIPとかぶらないようにする</a></li>
            <li><a href="#アドホック接続を行う">アドホック接続を行う</a></li>
        </ul>
    </li>
</ul>

<h2 id="アドホック接続とは"><a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A5%C9%A5%DB%A5%C3%A5%AF">アドホック</a>接続とは</h2>

<p>以下に一般的な接続方法と<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A5%C9%A5%DB%A5%C3%A5%AF">アドホック</a>接続の絵を書いてみた。</p>

<p>図１ 一般的な接続方法の図 <br/>
<span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170504/20170504211457.png" alt="f:id:konoemario:20170504211457p:plain:w300" title="f:id:konoemario:20170504211457p:plain:w300" class="hatena-fotolife" style="width:300px" itemprop="image"></span></p>

<p>アクセスポイントである<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%EB%A1%BC%A5%BF%A1%BC">ルーター</a>を介して、ラズパイと接続している。<br/>
ラズパイをPCみたいな使い方をする分にはこちらで事足りる。</p>

<p>図2 <a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A5%C9%A5%DB%A5%C3%A5%AF">アドホック</a>接続<br/>
<span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170504/20170504211458.png" alt="f:id:konoemario:20170504211458p:plain:w300" title="f:id:konoemario:20170504211458p:plain:w300" class="hatena-fotolife" style="width:300px" itemprop="image"></span></p>

<p>対して、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A5%C9%A5%DB%A5%C3%A5%AF">アドホック</a>接続は、PCとラズパイが直接通信を行う。<br/>
これは、アクセスポイントである<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%EB%A1%BC%A5%BF%A1%BC">ルーター</a>が届かない範囲でラズパイを動かしたいときに使える。<br/>
ラジコンも外で動かしたいので、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A5%C9%A5%DB%A5%C3%A5%AF">アドホック</a>接続で設定を行うことにする。</p>

<p>PCとラズパイが通信できる距離がどんなもんなのかは、ラジコンを動かし始めたら測定してみる。</p>

<p>尚、ラズパイに<a class="keyword" href="http://d.hatena.ne.jp/keyword/sim%A5%AB%A1%BC%A5%C9">simカード</a>を挿して通信することも可能みたいで、そうなれば距離の制約はなくなるんじゃないか！と夢が広がります。</p>

<p>以降は、実際に<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A5%C9%A5%DB%A5%C3%A5%AF">アドホック</a>接続の設定を行った際の作業内容をメモする。<br/>
<a class="keyword" href="http://d.hatena.ne.jp/keyword/ssh">ssh</a>経由で設定を行ってもいいんだけれども、接続確認で<a class="keyword" href="http://d.hatena.ne.jp/keyword/NIC">NIC</a>の再起動をすると、きっと<a class="keyword" href="http://d.hatena.ne.jp/keyword/ssh">ssh</a>の接続が切れたり、設定がうまくいかないと、<a class="keyword" href="http://d.hatena.ne.jp/keyword/ssh">ssh</a>接続そのものができなくなる。</p>

<p>なので、キーボードやら<a class="keyword" href="http://d.hatena.ne.jp/keyword/HDMI">HDMI</a>ケーブルやら用意して作業した方が無難。</p>

<h3 id="IPを固定する">IPを固定する</h3>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A5%C9%A5%DB%A5%C3%A5%AF">アドホック</a>接続では、<a class="keyword" href="http://d.hatena.ne.jp/keyword/DHCP">DHCP</a>サーバーの役割を担っている、<a class="keyword" href="http://d.hatena.ne.jp/keyword/Wifi">Wifi</a><a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%EB%A1%BC%A5%BF%A1%BC">ルーター</a>を経由しないことになる。<br/>
つまり、<a class="keyword" href="http://d.hatena.ne.jp/keyword/IP%A5%A2%A5%C9%A5%EC%A5%B9">IPアドレス</a>は固定で振り出す必要がある。</p>

<p>ここでは、二度手間感があるけれども、<a class="keyword" href="http://d.hatena.ne.jp/keyword/IP%A5%A2%A5%C9%A5%EC%A5%B9">IPアドレス</a>の固定を行った後に、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A5%C9%A5%DB%A5%C3%A5%AF">アドホック</a>の設定を行った。</p>

<h4 id="etcdhcpcdconf">/etc/dhcpcd.conf</h4>

<p>固定するIPをdhcpcd.confに記載する。<br/>
後述のinterfaceに記載してもいけるけれども、推奨はこっちとのこと。</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>interface wlan0
static <span class="synIdentifier">ip_address</span>=192.168.1.12/<span class="synConstant">24</span>
static <span class="synIdentifier">routers</span>=192.168.1.1
staitc <span class="synIdentifier">domain_name_servers</span>=192.168.1.1
~                                      
</pre>


<h4 id="etcnetworkinterfaces">/etc/network/interfaces</h4>

<p>iface wlan0 inet の部分を、<a class="keyword" href="http://d.hatena.ne.jp/keyword/dhcp">dhcp</a>→manualに変更する。</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>auto wlan0
allow-hotplug wlan0
iface wlan0 inet manual
wpa-conf /etc/wpa_supplicant/wpa_supplicant.conf
</pre>


<p><br></p>

<p>ここの定義の仕方で挙動がどう変わるのかが、しっくりきてない。<br/>
試した結果(ちょっと怪しい)を以下に残す。</p>

<ul>
<li><p><a class="keyword" href="http://d.hatena.ne.jp/keyword/dhcp">dhcp</a>：<a class="keyword" href="http://d.hatena.ne.jp/keyword/IP%A5%A2%A5%C9%A5%EC%A5%B9">IPアドレス</a>を<a class="keyword" href="http://d.hatena.ne.jp/keyword/DHCP">DHCP</a>サーバーから取得する。<br/>
            dhcpcd.confに固定IPを記述しても、interfaceの定義が優先されそう。</p></li>
<li><p>static：<a class="keyword" href="http://d.hatena.ne.jp/keyword/IP%A5%A2%A5%C9%A5%EC%A5%B9">IPアドレス</a>を固定する。<br/>
            ただ、staticにすると、interfaceにその定義を追加しなきゃいけないっぽい。</p></li>
<li><p>manual：dhcpcd.confを見にいってくれるみたい。<br/>
でもdhcpcd.confで<a class="keyword" href="http://d.hatena.ne.jp/keyword/DHCP">DHCP</a>サーバから取ってこいって書くことってあるのかな。</p></li>
</ul>


<h3 id="ifdownifupコマンドで確認">ifdown、ifupコマンドで確認</h3>

<p>前述の設定を行ったら、<a class="keyword" href="http://d.hatena.ne.jp/keyword/IP%A5%A2%A5%C9%A5%EC%A5%B9">IPアドレス</a>が固定されていること、今まで通り<a class="keyword" href="http://d.hatena.ne.jp/keyword/ssh">ssh</a>で接続できること、を確認する。</p>

<p>再起動するのもいいんだけれども、うまくいっていない場合、何がうまくいっていないかわからないことが多い。</p>

<p>ここでは、<a class="keyword" href="http://d.hatena.ne.jp/keyword/NIC">NIC</a>の有効化、無効化を行う、ifdown、ifupコマンドを使って確認を行った。</p>

<p><b>・インタフェースを一旦、無効化してから</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>pi@raspberrypi:~ <span class="synPreProc">$ifdown</span> wlan0
</pre>


<p><b>・インタフェースを、再度有効化する</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>pi@raspberrypi:~ <span class="synPreProc">$ifup</span> wlan0
</pre>


<p>このとき、interfaceの定義に問題があったりすると、エラーメッセージを表示してくれる。</p>

<p>その後、ifconfigコマンドで、wlan0に固定した<a class="keyword" href="http://d.hatena.ne.jp/keyword/IP%A5%A2%A5%C9%A5%EC%A5%B9">IPアドレス</a>が設定されていれば大丈夫。</p>

<h3 id="アドホックの設定を行う"><a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A5%C9%A5%DB%A5%C3%A5%AF">アドホック</a>の設定を行う</h3>

<p>設定はシンプル。  <br/>
interfacesに内容を少し変更する。</p>

<ul>
<li>wirelss〜の定義を追加する</li>
<li>wpa_conf〜を<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B3%A5%E1%A5%F3%A5%C8%A5%A2%A5%A6%A5%C8">コメントアウト</a>する</li>
</ul>


<p>だけ。</p>

<h4 id="etcnetworkinterfaces-1">/etc/network/interfaces</h4>

<pre class="code lang-sh" data-lang="sh" data-unlink>auto wlan0
allow-hotplug wlan0
iface wlan0 inet manual
<span class="synComment">#wpa-conf /etc/wpa_supplicant/wpa_supplicant.conf</span>

<span class="synComment">#ad-hoc用の設定　有効にする場合コメント解除して、wpa-confをコメントアウト</span>
<span class="synComment">#チャンネルの番号はなんでもよいみたい。うまくいかないときにかえてみる </span>
wireless-channel <span class="synConstant">1</span>
wireless-mode ad-hoc
wireless-essid pi
wireless-key <span class="synConstant">1616116161</span>
</pre>


<h5 id="微妙にはまるところ">微妙にはまるところ</h5>

<h6 id="wireless-key">wireless-key</h6>

<p>wireless-keyは<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A5%C9%A5%DB%A5%C3%A5%AF">アドホック</a>接続の際に必要となるパスワードを適当に決めて書く。<br/>
ただ、なんでもいいというわけではなく、ルールがあるみたい。</p>

<p>10桁か26桁の16進数である必要がある？っぽいです。</p>

<p><iframe src="//hatenablog-parts.com/embed?url=https%3A%2F%2Faskubuntu.com%2Fquestions%2F83165%2Fhow-to-setup-wifi-using-the-command-line" title="How to setup Wifi using the command-line?" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://askubuntu.com/questions/83165/how-to-setup-wifi-using-the-command-line">askubuntu.com</a></cite></p>

<p>これに則っていない場合、前述のifdown、ifupコマンドを実行してみると、以下のエラーが吐かれます。</p>

<pre class="code lang-sh" data-lang="sh" data-unlink> Error <span class="synStatement">for</span> wireless request <span class="synStatement">&quot;</span><span class="synConstant">Set Encode</span><span class="synStatement">&quot;</span> <span class="synPreProc">(</span>8B2A<span class="synPreProc">)</span> :
 SET failed on device wlan0 ; Invalid argument.
</pre>


<p>とはいえ、wireless-kyeの設定がエラーの場合でも、接続自体は問題なくできます。ログイン時にパスワードを求められなくなるだけです。</p>

<h6 id="-misplaced-option"># misplaced option</h6>

<p>設定をいろいろ試している最中でinterfacesを編集し終わって、ifdown、ifupを試したところ出力されたエラー。</p>

<p>単純に、interfacesファイル冒頭の説明文の<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B3%A5%E1%A5%F3%A5%C8%A5%A2%A5%A6%A5%C8">コメントアウト</a>を誤って消していた。viエディタで作業するときは、あるあるな気がするので、記載しておく。</p>

<h3 id="PC側のIPも固定する">PC側のIPも固定する</h3>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A5%C9%A5%DB%A5%C3%A5%AF">アドホック</a>接続する際には、ラズパイ側だけではなく、片方の端末もIPを固定する必要がある。</p>

<p>理屈がいまいちよくわかっていないので、さくっとメモがてら記載。</p>

<h4 id="Mac-OS-X-の場合"><a class="keyword" href="http://d.hatena.ne.jp/keyword/Mac%20OS%20X">Mac OS X</a> の場合</h4>

<p>「システム環境設定」-「ネットワーク」-「<a class="keyword" href="http://d.hatena.ne.jp/keyword/Wifi">Wifi</a>の詳細」-「<a class="keyword" href="http://d.hatena.ne.jp/keyword/TCP/IP">TCP/IP</a>タブ」で以下の設定を行った。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170506/20170506123812.png" alt="f:id:konoemario:20170506123812p:plain:w300" title="f:id:konoemario:20170506123812p:plain:w300" class="hatena-fotolife" style="width:300px" itemprop="image"></span></p>

<h3 id="DHCPが降り出すIPとかぶらないようにする"><a class="keyword" href="http://d.hatena.ne.jp/keyword/DHCP">DHCP</a>が降り出すIPとかぶらないようにする</h3>

<p>固定したIPと<a class="keyword" href="http://d.hatena.ne.jp/keyword/DHCP">DHCP</a>が降り出すIPが重複してしまうと、よろしくないので、<a class="keyword" href="http://d.hatena.ne.jp/keyword/DHCP">DHCP</a>側の設定を行う。<br/>
具体的にどうよろしくないかは、あんまりよくわかってないんだ。</p>

<p>また、<a class="keyword" href="http://d.hatena.ne.jp/keyword/DHCP">DHCP</a>側の設定も<a class="keyword" href="http://d.hatena.ne.jp/keyword/DHCP">DHCP</a>の機能を担っている機器によってさまざまなので、ここにあるのは自身のメモになる。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170506/20170506125104.png" alt="f:id:konoemario:20170506125104p:plain:w300" title="f:id:konoemario:20170506125104p:plain:w300" class="hatena-fotolife" style="width:300px" itemprop="image"></span></p>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/DHCP">DHCP</a>の機能を担っている<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%EB%A1%BC%A5%BF%A1%BC">ルーター</a>にログイン後、<a class="keyword" href="http://d.hatena.ne.jp/keyword/DHCP">DHCP</a>が割り当てるIPの個数を9個にしただけ。</p>

<p>割り当て開始が、192.168.1.2なので、192.168.1.10まで<a class="keyword" href="http://d.hatena.ne.jp/keyword/DHCP">DHCP</a>が振ってくれると思われる。</p>

<p>同一ページに「<a class="keyword" href="http://d.hatena.ne.jp/keyword/DHCP">DHCP</a><a class="keyword" href="http://d.hatena.ne.jp/keyword/%B8%C7%C4%EAIP%A5%A2%A5%C9%A5%EC%A5%B9">固定IPアドレス</a>設定」ってあるけれども、きっとこれはとある端末が<a class="keyword" href="http://d.hatena.ne.jp/keyword/DHCP">DHCP</a>サーバーにIPを要求した場合、常に同じIPを返却してくれるという仕組みだと思う。</p>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/DHCP">DHCP</a>サーバーありきの仕組みなので、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A5%C9%A5%DB%A5%C3%A5%AF">アドホック</a>接続の場合利用できないはず。</p>

<h3 id="アドホック接続を行う"><a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A5%C9%A5%DB%A5%C3%A5%AF">アドホック</a>接続を行う</h3>

<p>PC側のIPの固定が終えると、<a class="keyword" href="http://d.hatena.ne.jp/keyword/wifi">wifi</a>のネットワーク一覧にラズパイの「wireless-essid」に設定したESSIDが表示される。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170506/20170506125411.png" alt="f:id:konoemario:20170506125411p:plain:w300" title="f:id:konoemario:20170506125411p:plain:w300" class="hatena-fotolife" style="width:300px" itemprop="image"></span></p>

<p>こちらを選択すれば、パスワードの設定をしていれば、入力を求められた上で入力を行い、接続ができる状態になる。</p>

<p>あとはその状態で、<a class="keyword" href="http://d.hatena.ne.jp/keyword/ssh">ssh</a>接続を行えば、いつもどおり使用ができる。</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ ssh pi@192.168.1.12
</pre>




-----
COMMENT:
AUTHOR: ラズベリー
IP: 220.23.213.149
DATE: 03/07/2020 19:44:13
adhoc接続でwebserverをみようと試みたのですが上手く出来ないです。スマホからraspberrypiの内蔵無線LANにadhoc接続して127.0.0.1:3000のwebserverを見れる様にする為に、loとwlan0のipを同じにすることはできるのでしょうか？ご教授頂けたら幸いです。
-----
--------
AUTHOR: konoemario
TITLE: WiringPiでエラーになった場合のメモ
BASENAME: 2017/05/01/234002
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 05/01/2017 23:40:02
CATEGORY: Python
CATEGORY: ラズパイ
CATEGORY: プログラム
-----
BODY:
<p><iframe src="http://tohutokonsome.hatenablog.com/embed/2017/04/30/163148" title="ラズパイZeroでWringPiが使えるまでメモ - 豆腐とコンソメ" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://tohutokonsome.hatenablog.com/entry/2017/04/30/163148">tohutokonsome.hatenablog.com</a></cite></p>

<p>前回、ラズパイZeroの初期セットアップした結果、問題になった部分をメモ</p>

<ul class="table-of-contents">
    <li><a href="#WiringPiが使用できない">WiringPiが使用できない</a><ul>
            <li><a href="#ファームウェアをダウングレードする">ファームウェアをダウングレードする</a></li>
        </ul>
    </li>
    <li><a href="#WiringPiがpython-nomodule-named">WiringPiがpython nomodule named</a></li>
</ul>

<h2 id="WiringPiが使用できない">WiringPiが使用できない</h2>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/python">python</a>で「import wiringpi」しているプログラムを実行すると、以下のエラーが出た。</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>pi@raspberrypi:~/myproduct $ sudo python servo.py 
Unable to determine hardware version. I see: Hardware   : BCM2835
,
 - expecting BCM2708 or BCM2709.
If this is a genuine Raspberry Pi <span class="synError">then</span> please report this
to projects@drogon.net. If this is not a Raspberry Pi <span class="synError">then</span> you
are on your own as wiringPi is designed to support the
Raspberry Pi ONLY.
</pre>


<p>どうも前回「sudo ape-get upgrade」を行った際に、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D5%A5%A1%A1%BC%A5%E0%A5%A6%A5%A7%A5%A2">ファームウェア</a>が最新になったことが原因みたい。</p>

<p>※参考URL<br/>
<a href="https://www.domoticz.com/forum/viewtopic.php?t=16852">https://www.domoticz.com/forum/viewtopic.php?t=16852</a><br/>
<a href="https://raspberrypi.akaneiro.jp/archives/1431">Raspberry Pi &#x306E;&#x30D5;&#x30A1;&#x30FC;&#x30E0;&#x30A6;&#x30A7;&#x30A2;&#x306E;&#x30A2;&#x30C3;&#x30D7;&#x30C7;&#x30FC;&#x30C8; | Raspberry Pi</a></p>

<h3 id="ファームウェアをダウングレードする"><a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D5%A5%A1%A1%BC%A5%E0%A5%A6%A5%A7%A5%A2">ファームウェア</a>をダウングレードする</h3>

<p>rpi-updateをインス<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C8%A1%BC%A5%EB">トール</a>する。</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>pi@raspberrypi:~/myproduct $ sudo apt-get install rpi-update
Reading package lists... Done
Building dependency tree       
Reading state information... Done
The following NEW packages will be installed:
  rpi-update
<span class="synConstant">0</span> upgraded, <span class="synConstant">1</span> newly installed, <span class="synConstant">0</span> to remove and <span class="synConstant">0</span> not upgraded.
Need to get <span class="synConstant">4408</span> B of archives.
After this operation, 45.1 kB of additional disk space will be used.
Get:<span class="synConstant">1</span> http://archive.raspberrypi.org/debian/ jessie/main rpi-update all <span class="synConstant">20140705</span> <span class="synStatement">[</span><span class="synConstant">4408</span> B<span class="synStatement">]</span>
Fetched <span class="synConstant">4408</span> B <span class="synError">in</span> 0s <span class="synPreProc">(</span><span class="synConstant">5263</span><span class="synSpecial"> B/s</span><span class="synPreProc">)</span>                           
Selecting previously unselected package rpi-update.
<span class="synPreProc">(</span><span class="synSpecial">Reading database ... </span><span class="synConstant">38765</span><span class="synSpecial"> files and directories currently installed.</span><span class="synPreProc">)</span>
Preparing to unpack .../rpi-update_20140705_all.deb ...
Unpacking rpi-update <span class="synPreProc">(</span><span class="synConstant">20140705</span><span class="synPreProc">)</span> ...
Setting up rpi-update <span class="synPreProc">(</span><span class="synConstant">20140705</span><span class="synPreProc">)</span> ...
</pre>


<p><br />
<br />
<a href="https://www.domoticz.com/forum/viewtopic.php?t=16852">参考URL</a>そのままのバージョンを取得する。<br/>
再起動後、wiringpiが使用できた。</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>pi@raspberrypi:~/myproduct $ sudo rpi-update 52241088c1da59a359110d39c1875cda56496764
 *** Raspberry Pi firmware updater by Hexxeh, enhanced by AndrewS and Dom
 *** Performing self-update
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
<span class="synConstant">100</span> <span class="synConstant">12762</span>  <span class="synConstant">100</span> <span class="synConstant">12762</span>    <span class="synConstant">0</span>     <span class="synConstant">0</span>  <span class="synConstant">51628</span>      <span class="synConstant">0</span> <span class="synSpecial">--:--:--</span> <span class="synSpecial">--:--:--</span> <span class="synSpecial">--:--:--</span> <span class="synConstant">51878</span>
 *** Relaunching after update
 *** Raspberry Pi firmware updater by Hexxeh, enhanced by AndrewS and Dom
 *** We<span class="synStatement">'</span><span class="synConstant">re running for the first time</span>
<span class="synConstant"> *** Backing up files (this will take a few minutes)</span>
<span class="synConstant"> *** Backing up firmware</span>
<span class="synConstant"> *** Backing up modules 4.9.24+</span>
<span class="synConstant">This update bumps to rpi-4.4.y linux tree</span>
<span class="synConstant">Be aware there could be compatibility issues with some drivers</span>
<span class="synConstant">Discussion here:</span>
<span class="synConstant">https://www.raspberrypi.org/forums/viewtopic.php?f=29&amp;t=144087</span>
<span class="synConstant">##############################################################</span>
<span class="synConstant"> *** Downloading specific firmware revision (this will take a few minutes)</span>
<span class="synConstant">  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</span>
<span class="synConstant">                                 Dload  Upload   Total   Spent    Left  Speed</span>
<span class="synConstant">100   168    0   168    0     0    316      0 --:--:-- --:--:-- --:--:--   317</span>
<span class="synConstant">100 52.3M  100 52.3M    0     0   454k      0  0:01:57  0:01:57 --:--:--  293k</span>
<span class="synConstant"> *** Updating firmware</span>
<span class="synConstant"> *** Updating kernel modules</span>
<span class="synConstant"> *** depmod 4.4.50-v7+</span>
<span class="synConstant"> *** depmod 4.4.50+</span>
<span class="synConstant"> *** Updating VideoCore libraries</span>
<span class="synConstant"> *** Using HardFP libraries</span>
<span class="synConstant"> *** Updating SDK</span>
<span class="synConstant"> *** Running ldconfig</span>
<span class="synConstant"> *** Storing current firmware revision</span>
<span class="synConstant"> *** Deleting downloaded files</span>
<span class="synConstant"> *** Syncing changes to disk</span>
<span class="synConstant"> *** If no errors appeared, your firmware was successfully updated to 52241088c1da59a359110d39c1875cda56496764</span>
<span class="synConstant"> *** A reboot is needed to activate the new firmware</span>
</pre>


<h2 id="WiringPiがpython-nomodule-named">WiringPiが<a class="keyword" href="http://d.hatena.ne.jp/keyword/python">python</a> nomodule named</h2>

<p>こっちもはまった。</p>

<p>前回、このコマンドでwiringpiの設定を行った。
これが、よくなかった。</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>pi@raspberrypi:~ <span class="synPreProc">$sudo</span> pip install wiringpi2
</pre>


<p><br />
<br /></p>

<p>問題となるのは、「sudo」の部分。<br/>
何気なく<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%EB%A1%BC%A5%C8%B8%A2">ルート権</a>限でやろうぐらいの気持ちだったが、sudoで実行すると<a class="keyword" href="http://d.hatena.ne.jp/keyword/%B4%C4%B6%AD%CA%D1%BF%F4">環境変数</a>が引き継がれない。</p>

<p>コマンドのパスを調べる便利なコマンド「which」を使うと、わかりやすい。</p>

<p><b>・sudoを使用した場合</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>pi@raspberrypi:/usr/<span class="synStatement">local</span>/lib/python2.7/site-packages $ sudo which pip
/usr/bin/pip

sudoの環境変数で定義してあるPATHのpipが使われる。  
</pre>


<p><b>・sudoを使用しない場合</b></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>pi@raspberrypi:/usr/<span class="synStatement">local</span>/lib/python2.7/site-packages $ which pip
/home/pi/.pyenv/shims/pip

個別に定義したPATHのpipが使われる。
</pre>


<p><br /></p>

<p>なので、sudo pip　で　wiringpiをインス<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C8%A1%BC%A5%EB">トール</a>すると、以下の<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C7%A5%A3%A5%EC%A5%AF%A5%C8">ディレクト</a>リにパッケージがインス<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C8%A1%BC%A5%EB">トール</a>されることになる。</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>/usr/<span class="synStatement">local</span>/lib/python2.7/site-packages
</pre>


<p><br /></p>

<p>sudoをつけないでpipを使えば、pyenv配下のバージョンごとのsite-packagesにインス<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C8%A1%BC%A5%EB">トール</a>される。</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>~/.pyenv/versions/3.5.1/lib/python3.5/site-packages $ 
</pre>


<p><br /></p>

<p>とにかくsudo使わなきゃいいんじゃない？ってなるんだけれども、wiringpiをimportしている<a class="keyword" href="http://d.hatena.ne.jp/keyword/python">python</a>プログラムを実行する場合、sudo権限で実行しなきゃいけないっていう部分で、これにはまった。</p>

<p>以下のような場合、実行している<a class="keyword" href="http://d.hatena.ne.jp/keyword/python">python</a>はどれだろうってなります。</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>sudo python xxxxx.py
</pre>


<p><br /></p>

<p>簡単な解決策として以下を参考に、sudoersにenv_keepを追加しました。</p>

<p><iframe src="//hatenablog-parts.com/embed?url=http%3A%2F%2Fqiita.com%2Fakito1986%2Fitems%2Fe9ca48cfcd56fdbf4c9d" title="sudo時にPATHを引き継ぐ方法 - Qiita" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://qiita.com/akito1986/items/e9ca48cfcd56fdbf4c9d">qiita.com</a></cite></p>

<p>以上。</p>

-----
--------
AUTHOR: konoemario
TITLE: ラズパイZeroでWringPiが使えるまでメモ
BASENAME: 2017/04/30/163148
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 04/30/2017 16:31:48
CATEGORY: Python
CATEGORY: ラズパイ
CATEGORY: プログラム
-----
BODY:
<p>ラズパイZeroで無事ssh接続ができたので、pythonの設定を行っていきます。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=http%3A%2F%2Fwww.tohuandkonsome.site%2Fentry%2F2017%2F04%2F29%2F223718" title="RaspBerry Pi Zeroの初期設定メモ  - 豆腐とコンソメ" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://tohutokonsome.hatenablog.com/entry/2017/04/29/223718">tohutokonsome.hatenablog.com</a></cite></p>

<p>ラズパイ3を購入したときに、同じことをやっているはずなんですが、全く記録に残してなかったので、新たな気持ちでメモをします。</p>

<ul class="table-of-contents">
    <li><a href="#とりあえずOSのパッケージ関連を最新化">とりあえずOSのパッケージ関連を最新化</a><ul>
            <li><a href="#sudo-apt-get-update">sudo apt-get update</a></li>
            <li><a href="#sudo-apt-get-upgrade--y">sudo apt-get upgrade -y</a></li>
            <li><a href="#sudo-apt-get-dist-upgrade">sudo apt-get dist-upgrade</a></li>
        </ul>
    </li>
    <li><a href="#Pythonの環境構築">Pythonの環境構築</a><ul>
            <li><a href="#pythonのバージョン確認">pythonのバージョン確認</a></li>
            <li><a href="#pyenvを入手する">pyenvを入手する</a><ul>
                    <li><a href="#gitをインストール">gitをインストール</a></li>
                    <li><a href="#pyenvのインストール">pyenvのインストール</a></li>
                </ul>
            </li>
            <li><a href="#python351をインストール1時間ぐらいかかるかも">python3.5.1をインストール(1時間ぐらいかかるかも)</a></li>
            <li><a href="#ちょっと注意2017921-追記">ちょっと注意(2017/9/21 追記)</a></li>
            <li><a href="#WringPiをインストール">WringPiをインストール</a></li>
        </ul>
    </li>
    <li><a href="#FTPの設定も行っておく">FTPの設定も行っておく</a></li>
</ul>

<h2 id="とりあえずOSのパッケージ関連を最新化">とりあえずOSのパッケージ関連を最新化</h2>

<p>こちらを参考にさせていただきました。  <br/>
<a href="http://qiita.com/white_aspara25/items/723ae4ebf0bfefe2115c#-apt-get-update">[Ubuntu] apt-get &#x307E;&#x3068;&#x3081; - Qiita</a><br/>
<a href="http://make-muda.weblike.jp/2016/03/3631/">Raspberry Pi&#x3067;&#x306E;Python 3.5&#x74B0;&#x5883;&#x69CB;&#x7BC9; | MUDA&#x306A;&#x3053;&#x3068;&#x3092;&#x3057;&#x3088;&#x3046;&#x3002;</a></p>

<p><br/></p>

<h4 id="sudo-apt-get-update">sudo apt-get update</h4>

<p>パッケージの「リスト」を最新化するコマンド。<br/>
最新のパッケージを落としてくるわけではなく、リストが新しくなる。</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ sudo apt-get update
</pre>


<p><br/></p>

<h4 id="sudo-apt-get-upgrade--y">sudo apt-get upgrade -y</h4>

<p>最新のパッケージをインストールする。</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ sudo apt-get upgrade <span class="synSpecial">-y</span>
</pre>


<p><br/></p>

<h4 id="sudo-apt-get-dist-upgrade">sudo apt-get dist-upgrade</h4>

<p>upgradeは追加で更新が必要になったパッケージがあれば、更新を止めるのに対して、こちらはそのへんもがんがん更新してくれるっぽい。<br/>
今回は、upgradeとdist-upgrade両方やっているのだけれども、こっちだけでよかったりするのかしら。</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ sudo apt-get dist-upgrade
</pre>


<h2 id="Pythonの環境構築">Pythonの環境構築</h2>

<p>OS周りのアップデートが終わったら、こっち。</p>

<h3 id="pythonのバージョン確認">pythonのバージョン確認</h3>

<p>現在、インストールされているpythonのバージョンを確認する。</p>

<p>デフォルトで2.7.9がインストールされている。</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>pi@raspberrypi:~ $ python <span class="synSpecial">-V</span>
Python 2.7.9
</pre>


<p>pytnon3もデフォルトでインストールされているという内容をみた気がするのだけでども 「Raspbian Jessie Lite」にはないのかも。</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>pi@raspberrypi:~ $ pytnon3 <span class="synSpecial">-V</span>
-bash: pytnon3: <span class="synStatement">command</span> not found
</pre>


<h3 id="pyenvを入手する">pyenvを入手する</h3>

<p>python3.5.1をインストールするのに最も手軽そうなのでpyenvを入手する。<br/>
pyenvはpythonのバージョンをインストールしたり、簡単に切り替えたりできる模様。<br/>
pyenvのプラグインっぽいものでvirtualenvというものもあって、こちらは同一バージョンのpython間でも切り替えができるというもの。<br/>
同一バージョンのpython3.5.1に対して、こっちは、このパッケージをいれて、こっちには入れないみたいな使い分けをするときに便利なのかな。<br/>
今回はとりあえずpyenvのみ導入。</p>

<h4 id="gitをインストール">gitをインストール</h4>

<p>pyenvをインストールする前にpyenvのリソースがgithubにあるので、gitをインストール</p>

<pre class="code" data-lang="" data-unlink>pi@raspberrypi:~ $ sudo apt-get install git</pre>


<h4 id="pyenvのインストール">pyenvのインストール</h4>

<p>githubからpyenvリソースを取得してホームディレクトリに置きます。</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>pi@raspberrypi:~ $ git clone https://github.com/yyuu/pyenv.git ~/.pyenv
</pre>


<p>pyenv用の環境変数の設定をします。</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>pi@raspberrypi:~ $ <span class="synStatement">echo</span><span class="synConstant"> </span><span class="synStatement">'</span><span class="synConstant">export PYENV_ROOT=&quot;$HOME/.pyenv&quot;</span><span class="synStatement">'</span><span class="synConstant"> </span><span class="synStatement">&gt;&gt;</span> ~/.profile
pi@raspberrypi:~ $ <span class="synStatement">echo</span><span class="synConstant"> </span><span class="synStatement">'</span><span class="synConstant">export PATH=&quot;$PYENV_ROOT/bin:$PATH&quot;</span><span class="synStatement">'</span><span class="synConstant"> </span><span class="synStatement">&gt;&gt;</span> ~/.profile
pi@raspberrypi:~ $ <span class="synStatement">echo</span><span class="synConstant"> </span><span class="synStatement">'</span><span class="synConstant">eval &quot;$(pyenv init -)&quot;</span><span class="synStatement">'</span><span class="synConstant"> </span><span class="synStatement">&gt;&gt;</span> ~/.profile
</pre>


<p>環境変数を反映させます。</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>pi@raspberrypi:~ $ <span class="synStatement">source</span> .profile
</pre>


<h3 id="python351をインストール1時間ぐらいかかるかも">python3.5.1をインストール(1時間ぐらいかかるかも)</h3>

<p>と、ここまできたらpyenvを使って目的のバージョンをインストールします。</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>pi@raspberrypi:~ $ pyenv install 3.5.1
</pre>


<p>インストールが終わったらバージョンが追加されているかを、pyenvのコマンドで確認。 <br/>
以下のように追加されてればOK。</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>pi@raspberrypi:~ $ pyenv versions
* system <span class="synPreProc">(</span><span class="synSpecial">set by /home/pi/.pyenv/version</span><span class="synPreProc">)</span>
  3.5.1
</pre>


<p>使用するバージョンを3.5.1にする。</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>pi@raspberrypi:~ $ pyenv global 3.5.1
pi@raspberrypi:~ $ pyenv versions
  system
* 3.5.1 <span class="synPreProc">(</span><span class="synSpecial">set by /home/pi/.pyenv/version</span><span class="synPreProc">)</span>
</pre>


<h3 id="ちょっと注意2017921-追記">ちょっと注意(2017/9/21 追記)</h3>

<p>pyenvでpython3.5.1がインストールできなかった。<br/>
python3.5.3なら問題なくできた。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=http%3A%2F%2Fwww.tohuandkonsome.site%2Fentry%2F2017%2F09%2F22%2F235340" title="pyenvでpythonをインストールできなかった - 豆腐とコンソメ" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://www.tohuandkonsome.site/entry/2017/09/22/235340">www.tohuandkonsome.site</a></cite></p>

<h3 id="WringPiをインストール">WringPiをインストール</h3>

<p>PythonでラズパイのGPIOを制御するためのモジュール。<br/>
pipはpythonのパッケージ管理システム。これを使ってwringpi2をインストール。</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>pi@raspberrypi:~ <span class="synPreProc">$sudo</span> pip install wiringpi2
</pre>


<p><br/></p>

<p><span style="color: #ff0000">(2017/5/1　追記)</span>
sudoはいらない。<a href="http://tohutokonsome.hatenablog.com/entry/2017/05/01/234002">微妙にはまった。</a></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>pi@raspberrypi:~ <span class="synPreProc">$pip</span> install wiringpi2
</pre>


<p><br/>
<br/></p>

<p>終わったら、wringpiがインストールされたかをpipのコマンドで確認する。<br/>
wringpiとwringpi2があればOK。</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>pi@raspberrypi:~/myproduct $ pip freeze
<span class="synIdentifier">wiringpi</span>=<span class="synStatement">=</span>2.32.1
<span class="synIdentifier">wiringpi2</span>=<span class="synStatement">=</span>2.32.3
</pre>


<h2 id="FTPの設定も行っておく">FTPの設定も行っておく</h2>

<p>以下を参考にしました。<br/>
<iframe src="https://hatenablog-parts.com/embed?url=http%3A%2F%2Fyamaryu0508.hatenablog.com%2Fentry%2F2014%2F12%2F02%2F102648" title="Raspberry Piの設定【FTPサーバ（vsftpd）の設定】 - Aldebaranな人のブログ" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://yamaryu0508.hatenablog.com/entry/2014/12/02/102648">yamaryu0508.hatenablog.com</a></cite></p>

<p>以上。</p>

-----
--------
AUTHOR: konoemario
TITLE: RaspBerry Pi Zeroの初期設定メモ 
BASENAME: 2017/04/29/223718
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 04/29/2017 22:37:18
CATEGORY: ラズパイ
CATEGORY: プログラム
IMAGE: https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170429/20170429183859.jpg
-----
BODY:
<h2 id="ラズパイZero買ってきた">ラズパイZero買ってきた</h2>

<p>こちらのラジコンをつくる上で、軽量化が避けて通れなそうなので、ラズパイZeroを秋葉原で買ってきました。　　<br/>
<iframe src="https://hatenablog-parts.com/embed?url=http%3A%2F%2Fwww.tohuandkonsome.site%2Fentry%2F2017%2F04%2F23%2F122526" title="RaspBerryPiでラジコンをつくる(5) - 豆腐とコンソメ" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://tohutokonsome.hatenablog.com/entry/2017/04/23/122526">tohutokonsome.hatenablog.com</a></cite></p>

<p>5ドルで購入することができる、というラズパイZeroですが、発売されたばかりのせいか、単品売りしているお店は見当たらず、諸々のセット価格で3000円程度かかりました。</p>

<p>今現在(2017年3月末)のお店事情なので、もう単品の取り扱いは開始しているかもしれません。</p>

<p>この辺のネットショップで買ってみたい気もします。<br/>
<a href="https://raspberry-pi.ksyic.com/news/page/nwp.id/46">https://raspberry-pi.ksyic.com/news/page/nwp.id/46</a></p>

<p>とはいえ、無線LANとBlueToothを内蔵したラズパイZero(W)もそろそろ出回るみたいです。<br/>
なのでそっちが出たら、Zeroを買っちゃおうかと思います。</p>

<ul class="table-of-contents">
    <li><a href="#ラズパイZero買ってきた">ラズパイZero買ってきた</a><ul>
            <li><a href="#セット内容">セット内容</a></li>
            <li><a href="#ピンヘッダーの装着">ピンヘッダーの装着</a><ul>
                    <li><a href="#はんだづけをした">はんだづけをした</a></li>
                </ul>
            </li>
            <li><a href="#microSDにOSを書き込み">microSDにOSを書き込み</a></li>
            <li><a href="#ラズパイZeroを起動">ラズパイZeroを起動</a><ul>
                    <li><a href="#SSHで繋がるように設定する">SSHで繋がるように設定する。</a><ul>
                            <li><a href="#ifconfigでネットワークの状態を確認する">ifconfigでネットワークの状態を確認する</a></li>
                            <li><a href="#wifiドングルをラズパイZeroに挿す">wifiドングルをラズパイZeroに挿す</a><ul>
                                    <li><a href="#lsusb">lsusb</a></li>
                                    <li><a href="#lfconfig">lfconfig</a></li>
                                    <li><a href="#iwconfig">iwconfig</a></li>
                                    <li><a href="#iwlist">iwlist</a></li>
                                </ul>
                            </li>
                            <li><a href="#無線LANの設定を行う">無線LANの設定を行う</a><ul>
                                    <li><a href="#etcnetworkinterfaceの設定">/etc/network/interfaceの設定</a></li>
                                    <li><a href="#etcwpa_supplicantwpa_supplicantconfの設定">/etc/wpa_supplicant/wpa_supplicant.confの設定</a></li>
                                </ul>
                            </li>
                        </ul>
                    </li>
                </ul>
            </li>
            <li><a href="#思ったこと">思ったこと</a></li>
            <li><a href="#GPIO制御のWringPiを使うまで">GPIO制御のWringPiを使うまで</a></li>
            <li><a href="#IPアドレスの固定">IPアドレスの固定</a></li>
        </ul>
    </li>
</ul>

<h3 id="セット内容">セット内容</h3>

<p>以下が、お店で買った際のセット内容です。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170429/20170429183859.jpg" alt="f:id:konoemario:20170429183859j:plain:w300" title="f:id:konoemario:20170429183859j:plain:w300" class="hatena-fotolife" style="width:300px" itemprop="image"></span></p>

<ul>
<li>ラズパイZero本体</li>
<li>電源</li>
<li>microSD(4GB)</li>
<li>マイクロUSBケーブル</li>
<li>ミニHDMI変換アダプタ</li>
<li>ピンヘッダー(写真だとすでに本体に装着済みです)</li>
</ul>


<p>写真にはないけれども、SSHで接続するためにも、<strong>wifiドングルは必須！</strong></p>

<h3 id="ピンヘッダーの装着">ピンヘッダーの装着</h3>

<p>ラズパイZeroですが、GPIO見ての通りピンヘッダーが本体とばらばらになっていました。<br/>
なので、これをはんだづけしてくっつける必要があります。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170429/20170429182543.jpg" alt="f:id:konoemario:20170429182543j:plain:w300" title="f:id:konoemario:20170429182543j:plain:w300" class="hatena-fotolife" style="width:300px" itemprop="image"></span></p>

<p>※作業後に気づいたのだけれども、はんだつげしなくてもいけたかもしれない。<br/>
GPIO Hammer Headerで検索すると、ピンヘッダーをとんかちで叩いてくっつける方法が紹介されています。<br/>
動画では、とんかちで叩く際に、ラズパイZero本体を固定する機器があるので、はんだづけしなくてもよい、ピンヘッダーセットなのか、固定さえできればピンヘッダーはなんでもいいのか、とかその辺がわかってないです。</p>

<p><iframe width="480" height="270" src="https://www.youtube.com/embed/ddLbUNlaZ3U?start=75&feature=oembed" frameborder="0" allowfullscreen></iframe><cite class="hatena-citation"><a href="https://www.youtube.com/watch?v=ddLbUNlaZ3U&t=75s">www.youtube.com</a></cite></p>

<p>2017/8/29 追記
動画の内容は、はんだ付け不要の専用キットを使用しています！</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fwww.switch-science.com%2Fcatalog%2F3189%2F" title="GPIO Hammer Header - スイッチサイエンス" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://www.switch-science.com/catalog/3189/">www.switch-science.com</a></cite></p>

<p>ラズパイZeroのはんだづけは結構細かい作業になるので、不安であればこちらの使用をおすすめします。</p>

<h4 id="はんだづけをした">はんだづけをした</h4>

<p>ステッピングモーターを動かしてみた際にモータードライバのはんだづけをした経験があるので、余裕だぜ！と思ったのですが、大苦戦しました。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=http%3A%2F%2Fwww.tohuandkonsome.site%2Fentry%2F2017%2F04%2F16%2F150728" title="RaspBerryPiでステッピングモーターを動かす - 豆腐とコンソメ" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://tohutokonsome.hatenablog.com/entry/2017/04/16/150728">tohutokonsome.hatenablog.com</a></cite></p>

<p>以前、はんだづけをする際にブレッドボードに固定してやってみて、これって危ないのかな、なんて思ってたのですが、はんだづけするのは、そこまで間違っていないみたいでした。</p>

<p>はんだづけ完了後の状態ですが、ものすごい下手くそです。<br/>
現時点で動作確認してないので、GPIOがそれぞれ無事なのかがかなり不安です。
<span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170429/20170429185338.jpg" alt="f:id:konoemario:20170429185338j:plain:w300" title="f:id:konoemario:20170429185338j:plain:w300" class="hatena-fotolife" style="width:300px" itemprop="image"></span></p>

<p>※参考動画<br/>
<iframe width="480" height="270" src="https://www.youtube.com/embed/8N18lIL3Uwk?feature=oembed" frameborder="0" allowfullscreen></iframe><cite class="hatena-citation"><a href="https://www.youtube.com/watch?v=8N18lIL3Uwk">www.youtube.com</a></cite></p>

<h3 id="microSDにOSを書き込み">microSDにOSを書き込み</h3>

<p>ラズパイ3のときは、NOOBSを使って、GUI版の「RASPBIAN JESSIE WITH PIXEL」をインストールしました。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170429/20170429190738.png" alt="f:id:konoemario:20170429190738p:plain:w300" title="f:id:konoemario:20170429190738p:plain:w300" class="hatena-fotolife" style="width:300px" itemprop="image"></span></p>

<p>今回は、CUI版の一番最軽量の「RASPBIAN JESSIE LITE」を使います。
microSDが4GBで、imgファイルは1.3GBでした。</p>

<p><a href="https://www.raspberrypi.org/downloads/raspbian/">Download Raspbian for Raspberry Pi</a></p>

<p>ラズパイ3のときは、Windows環境でカードリーダーでmicroUSBを認識した後にimgファイルをドロップして完了！みたいな操作をした記憶があるのですが、今回はMac環境でイメージファイルを作成しました。</p>

<p>Terminalを起動して、コマンドでimgを書き込むとそれっぽい満足感を得られるのですが、一歩間違えるとOSやらなんやら消しかねないぞ！自信ないならこれをつかっとけ！という公式アドバイスに従って「Etcher」といツールを使用しました。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fetcher.io%2F" title="Etcher by resin.io" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://etcher.io/">etcher.io</a></cite></p>

<h3 id="ラズパイZeroを起動">ラズパイZeroを起動</h3>

<p>このへんは、ラズパイ3のときにすごく感動したのですが、二度目ともなると、大したこともないです。 <br/>
 HDMIをモニターに挿すことでコンソール画面が起動します。</p>

<p>が、sshの設定にものすごく時間が買ったので、ラズパイZero(W)購入の際に苦労しないようにメモをしておきます。</p>

<h4 id="SSHで繋がるように設定する">SSHで繋がるように設定する。</h4>

<p>「ラズパイ ssh」で検索すると参考記事がたくさんでてくるので、簡単そうだったのですが</p>

<ul>
<li>キーボードとwifiドングルを同時に挿せない</li>
<li>ラズパイ3にもwifiドングルが必須だという勘違い</li>
</ul>


<p>の二重苦によってかなり苦労しました。</p>

<h5 id="ifconfigでネットワークの状態を確認する">ifconfigでネットワークの状態を確認する</h5>

<p>ifconfigでネットワークインタフェースの状態を確認する。</p>

<p>・ifconfgのコマンド <br/>
<a href="http://www.atmarkit.co.jp/ait/articles/0109/29/news004.html">ifconfig &#x301C;&#xFF08;IP&#xFF09;&#x30CD;&#x30C3;&#x30C8;&#x30EF;&#x30FC;&#x30AF;&#x74B0;&#x5883;&#x306E;&#x78BA;&#x8A8D;&#xFF0F;&#x8A2D;&#x5B9A;&#x3092;&#x884C;&#x3046;&#xFF1A;&#x30CD;&#x30C3;&#x30C8;&#x30EF;&#x30FC;&#x30AF;&#x30B3;&#x30DE;&#x30F3;&#x30C9;&#x306E;&#x4F7F;&#x3044;&#x65B9; - &#xFF20;IT</a></p>

<p>ネットワークインタフェース(以降、NIC)は、コンピューターがネットワークに接続するために必要なもの。</p>

<p>無線LANを利用する場合も、それに対応したNICが必要になる。</p>

<p>最近のPCでは、有線のNICはもちろんのこと、無線のNICも内蔵している。<br/>
（<strong>ラズパイ3も無線のNICは内蔵しているのだよ！</strong>)</p>

<p>まず、ラズパイZeroを起動して、ローカライゼーションの設定を行った後、ifconfigを打ってみる。</p>

<pre class="code" data-lang="" data-unlink>pi@raspberrypi:~ $ ifconfig

lo        Link encap:Local Loopback
          inet addr:127.0.0.1  Mask:255.0.0.0
          inet6 addr: ::1/128 Scope:Host
          UP LOOPBACK RUNNING  MTU:65536  Metric:1
          RX packets:256 errors:0 dropped:0 overruns:0 frame:0
          TX packets:256 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1
          RX bytes:20736 (20.2 KiB)  TX bytes:20736 (20.2 KiB)

usb0      Link encap:Ethernet  HWaddr 消した
          inet6 addr: 消した Scope:Link
          UP BROADCAST MULTICAST  MTU:1500  Metric:1
          RX packets:0 errors:0 dropped:0 overruns:0 frame:0
          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000
          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)


※MACアドレスっぽいものや、なんとなくまずそうなものは消してます。  </pre>


<p>以下二つのみが存在していることが確認できる。</p>

<ul>
<li><p>lo</p></li>
<li><p>usb0</p></li>
</ul>


<p>loは必ず存在しているみたい。</p>

<blockquote><p>　loは「ローカルループバック」と呼ばれる特別な仮想インターフェイスだ。ホスト自身を示しており、OSのプロトコルスタックが必ず提供することになっている。従って、まったくNICを設置していない場合でも、このloだけは存在する。そうした初期状態であっても、仮想的にネットワークのテストなどに使えるように用意されているのだ。また、対応するIPアドレスは必ず127.0.0.1が割り当てられる。当然、このIPアドレスを用いて外部と通信することはできない。</p></blockquote>

<p>以下より抜粋<br/>
<a href="http://www.atmarkit.co.jp/ait/articles/0109/29/news004.html">ifconfig &#x301C;&#xFF08;IP&#xFF09;&#x30CD;&#x30C3;&#x30C8;&#x30EF;&#x30FC;&#x30AF;&#x74B0;&#x5883;&#x306E;&#x78BA;&#x8A8D;&#xFF0F;&#x8A2D;&#x5B9A;&#x3092;&#x884C;&#x3046;&#xFF1A;&#x30CD;&#x30C3;&#x30C8;&#x30EF;&#x30FC;&#x30AF;&#x30B3;&#x30DE;&#x30F3;&#x30C9;&#x306E;&#x4F7F;&#x3044;&#x65B9; - &#xFF20;IT</a></p>

<p>usb0は今の段階ではよくわからないので飛ばす。  <br/>
usbテザリングで使えるみたい。<br/>
<iframe src="https://hatenablog-parts.com/embed?url=http%3A%2F%2Fkassyjp.ninja-web.net%2Fras%2Fjessie%2Ftethering.htm" title="ex1.RaspberryPiでAndroidスマホのUSBテザリングを利用する（＋ルーター化） - RaspberryPiで各種サーバー作り！" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://kassyjp.ninja-web.net/ras/jessie/tethering.htm">kassyjp.ninja-web.net</a></cite></p>

<h5 id="wifiドングルをラズパイZeroに挿す">wifiドングルをラズパイZeroに挿す</h5>

<p>使えるUSBポートはひとつしかないので、wifiドングルとキーボードの両方を同時の使用することができません。</p>

<p>なので、キーボードを外すことになってしまいます。</p>

<p>仕方がないので、以下のようなシェルスクリプトを書いて実行した後に
キーボードを外して、wifiドングルを挿しました。</p>

<p><script src="https://gist.github.com/c58c215674b0c2e8e11f1c27a6c6d2b0.js"> </script></p>

<p><a href="https://gist.github.com/c58c215674b0c2e8e11f1c27a6c6d2b0">gistc58c215674b0c2e8e11f1c27a6c6d2b0</a></p>

<p>それぞれの結果を抜粋するとこんな感じでした。</p>

<h6 id="lsusb">lsusb</h6>

<pre class="code" data-lang="" data-unlink>Bus 001 Device 005: ID 0411:01ee BUFFALO INC. (formerly MelCo., Inc.) WLI-UC-GNM2 Wireless LAN Adapter [Ralink RT3070]

（確認点）
・wifiドングルが認識されていること。  
</pre>


<h6 id="lfconfig">lfconfig</h6>

<pre class="code" data-lang="" data-unlink>lo        Link encap:Local Loopback
          inet addr:127.0.0.1  Mask:255.0.0.0
          inet6 addr: ::1/128 Scope:Host
          UP LOOPBACK RUNNING  MTU:65536  Metric:1
          RX packets:256 errors:0 dropped:0 overruns:0 frame:0
          TX packets:256 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1
          RX bytes:20736 (20.2 KiB)  TX bytes:20736 (20.2 KiB)

usb0      Link encap:Ethernet  HWaddr 消した
          inet6 addr: 消した Scope:Link
          UP BROADCAST MULTICAST  MTU:1500  Metric:1
          RX packets:0 errors:0 dropped:0 overruns:0 frame:0
          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000
          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)

wlan0     Link encap:Ethernet  HWaddr 消した
          UP BROADCAST MULTICAST  MTU:1500  Metric:1
          RX packets:0 errors:0 dropped:0 overruns:0 frame:0
          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000
          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)


(確認点)
・wifiドングルを挿すことで新たなインタフェースが増えていること
   (大抵はwlan〜みたい)
</pre>


<h6 id="iwconfig">iwconfig</h6>

<p>突然でてきた「iwconfig」
ifconfigがNIC全体に対して、iwconfigは無線LANの専門みたい。<br/>
無線LANのESSIDとかの設定が確認できる。</p>

<p><a href="http://itpro.nikkeibp.co.jp/article/COLUMN/20060227/230803/?rt=nocnt">Linux&#x30B3;&#x30DE;&#x30F3;&#x30C9;&#x96C6; - &#x3010; iwconfig &#x3011; &#x7121;&#x7DDA;LAN&#x30A4;&#x30F3;&#x30BF;&#x30D5;&#x30A7;&#x30FC;&#x30B9;&#x306E;&#x53C2;&#x7167;&#x30FB;&#x8A2D;&#x5B9A;&#xFF1A;ITpro</a></p>

<pre class="code" data-lang="" data-unlink>wlan0     IEEE 802.11bgn  ESSID:off/any
          Mode:Managed  Access Point: Not-Associated   Tx-Power=20 dBm
          Retry short limit:7   RTS thr:off   Fragment thr:off
          Power Management:off

(確認点)
・見れることぐらい
    ESSIDやパスの設定をしてないので、繋がっていない状態
</pre>


<h6 id="iwlist">iwlist</h6>

<p>これは、無線LANのアクセスポイントを探すことができるコマンド。</p>

<p><span style="color: #ff0000">sudo権限で実行しないと、そんなコマンドねえよっていわれるので注意。</span></p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ sudo iwlist wlan0 scanning|<span class="synStatement">grep</span> ESSID
</pre>


<p><a href="http://www.atmarkit.co.jp/ait/articles/1506/16/news005.html">&#x30CD;&#x30C3;&#x30C8;&#x30EF;&#x30FC;&#x30AF;&#x7BA1;&#x7406;&#x306E;&#x57FA;&#x672C;Tips&#xFF1A;&#x7AEF;&#x672B;&#x304B;&#x3089;&#x30A2;&#x30AF;&#x30BB;&#x30B9;&#x30DD;&#x30A4;&#x30F3;&#x30C8;&#x306E;&#x60C5;&#x5831;&#x3092;&#x8ABF;&#x3079;&#x308B;&#x306B;&#x306F;&#xFF1F; iwlist&#x30B3;&#x30DE;&#x30F3;&#x30C9; - &#xFF20;IT</a></p>

<pre class="code" data-lang="" data-unlink>
                    ESSID:&#34;これもなんとなく消したESSID1&#34;
                    ESSID:&#34;これもなんとなく消したESSID2&#34;
                    ESSID:&#34;これもなんとなく消したESSID3&#34;
                    ESSID:&#34;これもなんとなく消したESSID4&#34;

(確認点)
・自宅のwifiルーターのESSIDが検出できていること
 </pre>


<p>このへんまで問題なければ、次の設定へ進む。</p>

<h5 id="無線LANの設定を行う">無線LANの設定を行う</h5>

<p>一旦、wifiドングルを外して、キーボードに差し替えて以下ファイルを編集する。</p>

<ul>
<li>interface</li>
<li>wpa_supplicant.conf</li>
</ul>


<h6 id="etcnetworkinterfaceの設定">/etc/network/interfaceの設定</h6>

<p>wifiドングル(NIC名:wlan0)用の設定を追加する必要がある。
記載ルールはDebianの資料にあるけれども理解しにくい。<br/>
<a href="https://www.debian.org/doc/manuals/debian-reference/ch05.ja.html#_the_basic_syntax_of_etc_network_interfaces">&#x7B2C;5&#x7AE0; &#x30CD;&#x30C3;&#x30C8;&#x30EF;&#x30FC;&#x30AF;&#x306E;&#x8A2D;&#x5B9A;</a></p>

<p>また、IPをDHCP経由ではなく固定する場合の書き方は後で調べる。</p>

<pre class="code" data-lang="" data-unlink># interfaces(5) file used by ifup(8) and ifdown(8)

# Please note that this file is written to be used with dhcpcd
# For static IP, consult /etc/dhcpcd.conf and &#39;man dhcpcd.conf&#39;

# Include files from /etc/network/interfaces.d:
source-directory /etc/network/interfaces.d

auto lo
iface lo inet loopback
iface eth0 inet manual

#ここから追加 wlan0用の設定

#ラズパイ起動時に自動でwlan0を起動
auto wlan0
#ホットプラグ(USBを電源いれっぱで抜き差し)を検知して起動
allow-hotplug wlan0
#dhcpでIPの設定を行う。固定にする場合はstatic？dhcpcd.confに書くの？
iface wlan0 inet dhcp

#wifiのSSID等の設定は、こっちに書く
wpa-conf /etc/wpa_supplicant/wpa_supplicant.conf</pre>


<h6 id="etcwpa_supplicantwpa_supplicantconfの設定">/etc/wpa_supplicant/wpa_supplicant.confの設定</h6>

<p>以下のコマンドで、wpa_supplicant.confの設定を行う。</p>

<pre class="code" data-lang="" data-unlink>sudo sh -c &#34;sudo wpa_passphrase SSIDの名前 パスワード &gt;&gt;  /etc/wpa_supplicant/wpa_supplicant.conf&#34;
</pre>


<p>そこからルーターの設定に応じて、kye_mgmt以降の設定を行います。<br/>
このへんは既にwifiで接続していたラズパイ3の設定をそのまま書くことにしました。</p>

<pre class="code" data-lang="" data-unlink>ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev
update_config=1
country=JP

network={
        ssid=&#34;rs500m-d6afa0-1&#34;
        #psk=&#34;暗号化前のpass&#34;
        psk=暗号化後のpass
        #以下を追加
        key_mgmt=WPA-PSK
        proto=WPA2
        pairwise=CCMP
        group=CCMP
        priority=2
}</pre>


<p>ここまで来たら、設定が完了です。<br/>
なんとなく再起動して、設定前に実行したシェルスクリプトを実行して、wifiドングルを挿します。</p>

<p>ifconfigの実行結果のinet addr のあたりにIPアドレスが振られていれば成功です。</p>

<pre class="code" data-lang="" data-unlink>wlan0     Link encap:Ethernet  HWaddr 消した
          inet addr:192.168.1.6  Bcast:192.168.1.255  Mask:255.255.255.0
          inet6 addr: 消した Scope:Link
          inet6 addr: 消した Scope:Global
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:8645 errors:0 dropped:12 overruns:0 frame:0
          TX packets:3175 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000 
          RX bytes:870992 (850.5 KiB)  TX bytes:503769 (491.9 KiB)</pre>


<h3 id="思ったこと">思ったこと</h3>

<p><span style="font-size: 200%">USBハブを購入したほうがよい。</span></p>

<p>※設定完了後、買いました。</p>

<h3 id="GPIO制御のWringPiを使うまで">GPIO制御のWringPiを使うまで</h3>

<p>以下を追記しました。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=http%3A%2F%2Fwww.tohuandkonsome.site%2Fentry%2F2017%2F04%2F30%2F163148" title="ラズパイZeroでWringPiが使えるまでメモ - 豆腐とコンソメ" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://tohutokonsome.hatenablog.com/entry/2017/04/30/163148">tohutokonsome.hatenablog.com</a></cite></p>

<h3 id="IPアドレスの固定">IPアドレスの固定</h3>

<p>アドホック接続の中で、行いました。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=http%3A%2F%2Fwww.tohuandkonsome.site%2Fentry%2F2017%2F05%2F05%2F202821" title="ラズパイをアドホック接続で使用する - 豆腐とコンソメ" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://www.tohuandkonsome.site/entry/2017/05/05/202821">www.tohuandkonsome.site</a></cite></p>

-----
COMMENT:
AUTHOR: konoemario
IP: 106.171.80.148
DATE: 08/29/2017 16:36:34
コメントありがとうございます！
気になったので購入しちゃいました！
-----
COMMENT:
AUTHOR: きぃたん
IP: 1.33.219.136
DATE: 08/28/2017 15:57:57
Solderless headerは専用のピンですよ
https://shop.pimoroni.com/products/gpio-hammer-header
-----
--------
AUTHOR: konoemario
TITLE: RaspBerryPiでラジコンをつくる(5)
BASENAME: 2017/04/23/122526
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 04/23/2017 12:25:26
CATEGORY: ラズパイ
CATEGORY: ラジコンシリーズ
IMAGE: https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170404/20170404214456.jpg
-----
BODY:
<p>時間が空いてしまいましたが、前回からの続きです。<br/>
タイトルをラジコンをつくるにかえました。</p>

<p>RaspBerryPiでラジコンをつくるシリーズ<br/>
<a href="http://tohutokonsome.hatenablog.com/entry/2017/03/05/200409">RaspBerryPi&#x3067;&#x30E2;&#x30FC;&#x30BF;&#x30FC;&#x3092;&#x52D5;&#x304B;&#x3059;(1) - &#x8C46;&#x8150;&#x3068;&#x30B3;&#x30F3;&#x30BD;&#x30E1;</a><br/>
<a href="http://tohutokonsome.hatenablog.com/entry/2017/03/06/223721">RaspBerryPi&#x3067;&#x30E2;&#x30FC;&#x30BF;&#x30FC;&#x3092;&#x52D5;&#x304B;&#x3059;(2) - &#x8C46;&#x8150;&#x3068;&#x30B3;&#x30F3;&#x30BD;&#x30E1;</a> <br/>
<a href="http://tohutokonsome.hatenablog.com/entry/2017/03/11/001512">RaspBerryPi&#x3067;&#x30E2;&#x30FC;&#x30BF;&#x30FC;&#x3092;&#x52D5;&#x304B;&#x3059;(3):&#x5727;&#x5012;&#x7684;&#x529B;&#x4E0D;&#x8DB3; - &#x8C46;&#x8150;&#x3068;&#x30B3;&#x30F3;&#x30BD;&#x30E1;</a><br/>
<a href="http://tohutokonsome.hatenablog.com/entry/2017/04/02/174735">RaspBerryPi&#x3067;&#x30E2;&#x30FC;&#x30BF;&#x30FC;&#x3092;&#x52D5;&#x304B;&#x3059;(4) - &#x8C46;&#x8150;&#x3068;&#x30B3;&#x30F3;&#x30BD;&#x30E1;</a></p>

<ul class="table-of-contents">
    <li><a href="#レゴを使う">レゴを使う</a></li>
    <li><a href="#再度レゴを買う">再度、レゴを買う</a></li>
    <li><a href="#方針を決める">方針を決める</a></li>
</ul>

<h2 id="レゴを使う">レゴを使う</h2>

<p>前回、ラジコンの材料になるかもという安易な気持ちでレゴブロックを購入しました。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170404/20170404214456.jpg" alt="f:id:konoemario:20170404214456j:plain:w300" title="f:id:konoemario:20170404214456j:plain:w300" class="hatena-fotolife" style="width:300px" itemprop="image"></span></p>

<p>しかし、組み立ててあらためてわかったのですが、</p>

<ul>
<li>モーターをつける必要がある</li>
<li>ラズパイとの接続の仕方がわからない</li>
</ul>


<p>ということに気づいてしまいました。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170404/20170404214459.jpg" alt="f:id:konoemario:20170404214459j:plain:w300" title="f:id:konoemario:20170404214459j:plain:w300" class="hatena-fotolife" style="width:300px" itemprop="image"></span></p>

<p>ということで、</p>

<p><span style="font-size: 150%">モーターで動くレゴを買ってみます</span></p>

<h2 id="再度レゴを買う">再度、レゴを買う</h2>

<p>ということで買っちゃいました。<br/>
<span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170422/20170422222454.jpg" alt="f:id:konoemario:20170422222454j:plain:w300" title="f:id:konoemario:20170422222454j:plain:w300" class="hatena-fotolife" style="width:300px" itemprop="image"></span></p>

<p>あれ、もうこれラジコンそのものでは、目標達成しちゃった？<br/>
とか大いなる疑問が湧いてきたのは事実なのですが、耳を塞ぎます。</p>

<p><span style="font-size: 150%">完成図  </span><br/>
<span style="font-size: 80%"><span style="color: #ff0000">ラジコンめっちゃ楽しい。</span></span><br/>
<span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170422/20170422222602.jpg" alt="f:id:konoemario:20170422222602j:plain:w300" title="f:id:konoemario:20170422222602j:plain:w300" class="hatena-fotolife" style="width:300px" itemprop="image"></span></p>

<h2 id="方針を決める">方針を決める</h2>

<p>今回購入したレゴのラジコンは見ての通りキャタピラカーになります。 <br/>
ということは以前、購入したキャタピラカーと似たようなものです。</p>

<p>※以前購入した<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%BF%A5%DF%A5%E4">タミヤ</a>の楽しい工作シリーズ<br/>
<span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170423/20170423114557.jpg" alt="f:id:konoemario:20170423114557j:plain:w300" title="f:id:konoemario:20170423114557j:plain:w300" class="hatena-fotolife" style="width:300px" itemprop="image"></span></p>

<p>とはいえ値段がかなり違います。<br/>
奥さんに白い目で見られながらも組み立て作業を行いました。</p>

<p>こうして書いてみると、</p>

<p>なぜ<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%BF%A5%DF%A5%E4">タミヤ</a>の<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%AD%A5%E3%A5%BF%A5%D4%A5%E9%A1%BC">キャタピラー</a>ではだめだったのか</p>

<p>もはや自分でもわからないです。</p>

<p><div class="hatena-asin-detail"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B01J41LWFW/hatena-blog-22/"><img src="https://images-fe.ssl-images-amazon.com/images/I/512umsiTqXL._SL160_.jpg" class="hatena-asin-detail-image" alt="レゴ (LEGO) テクニック RCトラックレーサー 42065" title="レゴ (LEGO) テクニック RCトラックレーサー 42065"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B01J41LWFW/hatena-blog-22/">レゴ (LEGO) テクニック RCトラックレーサー 42065</a></p><ul><li><span class="hatena-asin-detail-label">出版社/メーカー:</span> レゴ (<a class="keyword" href="http://d.hatena.ne.jp/keyword/LEGO">LEGO</a>)</li><li><span class="hatena-asin-detail-label">発売日:</span> 2016/12/02</li><li><span class="hatena-asin-detail-label">メディア:</span> おもちゃ＆ホビー</li><li><a href="http://d.hatena.ne.jp/asin/B01J41LWFW/hatena-blog-22" target="_blank">この商品を含むブログを見る</a></li></ul></div><div class="hatena-asin-detail-foot"></div></div><br/>
<div class="hatena-asin-detail"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B002DR3H5S/hatena-blog-22/"><img src="https://images-fe.ssl-images-amazon.com/images/I/51C3e7e2LVL._SL160_.jpg" class="hatena-asin-detail-image" alt="タミヤ 楽しい工作シリーズ No.108 タンク工作基本セット (70108)" title="タミヤ 楽しい工作シリーズ No.108 タンク工作基本セット (70108)"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B002DR3H5S/hatena-blog-22/">タミヤ 楽しい工作シリーズ No.108 タンク工作基本セット (70108)</a></p><ul><li><span class="hatena-asin-detail-label">出版社/メーカー:</span> <a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%BF%A5%DF%A5%E4">タミヤ</a></li><li><span class="hatena-asin-detail-label">発売日:</span> 2009/06/23</li><li><span class="hatena-asin-detail-label">メディア:</span> おもちゃ＆ホビー</li><li><span class="hatena-asin-detail-label">購入</span>: 1人 <span class="hatena-asin-detail-label">クリック</span>: 18回</li><li><a href="http://d.hatena.ne.jp/asin/B002DR3H5S/hatena-blog-22" target="_blank">この商品を含むブログ (1件) を見る</a></li></ul></div><div class="hatena-asin-detail-foot"></div></div></p>

<p>昔からレゴが好きだったんだよ！<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%EC%A5%B4%A5%E9%A5%F3%A5%C9">レゴランド</a>も出来たし、レゴ流行ってるからね！と誤魔化しながら突き進みます。</p>

<p>さてレゴのキャタピラカーですが、さきほど<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%BF%A5%DF%A5%E4">タミヤ</a>のキャタピラカーと同じといいました。</p>

<p>とはいえ決定的に異なる点があります。</p>

<p>それは、<span style="font-size: 150%">レゴのキャタピラカーは曲がる</span>というところです。</p>

<p>これを実現している仕組みですが、以下に絵をかいてみました。<br/>
<span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170423/20170423120349.png" alt="f:id:konoemario:20170423120349p:plain:w300" title="f:id:konoemario:20170423120349p:plain:w300" class="hatena-fotolife" style="width:300px" itemprop="image"></span></p>

<p>モーターが二つあり、</p>

<ul>
<li><p>モーターAとモーターBが同時に回ると、前（もしくは後ろ)に進みます。</p></li>
<li><p>モーターAだけ回ると左に曲がります。<br/>
(正確には左を向くと言う方がいいのかしら)</p></li>
<li><p>モーターBだけ回ると右に曲がります。<br/>
(正確には右を〜)</p></li>
</ul>


<p>素人考えですが、戦車のようなキャタピラカーはこのような仕組みになっているかと思います。</p>

<p>ただ、通常の車は「ステアリング」という仕組みを採用しているみたいで、ちょっと作りが異なります。 <br/>
これは、前輪のタイヤを右へ、左へと向くことでスムーズに曲がることができるみたいです。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170423/20170423121409.png" alt="f:id:konoemario:20170423121409p:plain:w300" title="f:id:konoemario:20170423121409p:plain:w300" class="hatena-fotolife" style="width:300px" itemprop="image"></span></p>

<p>今回はせっかくなので、キャタピラタイプではなく、ステアリングを実装したラジコンを作っていきたいと思います。</p>

<p><span style="color: #ff0000"><span style="font-size: 150%">あれ、レゴのキャタピラカーはどうなるの？</span></span></p>

<p>という疑問は一旦置いて、次回に続きます。</p>

<p><iframe src="http://tohutokonsome.hatenablog.com/embed/2017/05/06/210309" title="RaspBerryPiでラジコンをつくる(6)：とりあえず動くものができました - 豆腐とコンソメ" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://tohutokonsome.hatenablog.com/entry/2017/05/06/210309">tohutokonsome.hatenablog.com</a></cite></p>

-----
--------
AUTHOR: konoemario
TITLE: Python環境周り
BASENAME: 2017/05/27/085653
STATUS: Draft
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 04/16/2017 22:45:00
-----
BODY:
<p>自端末の環境が毎回わからなくなるので記載。</p>

<h2>参考記事</h2>

<p>[<a href="http://qiita.com/Kodaira">http://qiita.com/Kodaira</a><em>/items/feadfef9add468e3a85b:embed:cite]
<iframe src="//hatenablog-parts.com/embed?url=http%3A%2F%2Fqiita.com%2Fm3y%2Fitems%2F45c7be319e401b24fca8" title="pyenv 利用のまとめ - Qiita" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://qiita.com/m3y/items/45c7be319e401b24fca8">qiita.com</a></cite>
[<a href="http://qiita.com/th1nkd0g/items/d33a9be75098571cad72#">http://qiita.com/th1nkd0g/items/d33a9be75098571cad72#</a></em>reference-0ed5125b2dfcca45e1f1:embed:cite]</p>

<h2>環境確認</h2>

<p>現在の環境</p>

<pre class="code" data-lang="" data-unlink>python -V</pre>


<p>インス<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C8%A1%BC">トー</a>ル済みのバージョン一覧確認</p>

<pre class="code" data-lang="" data-unlink>pyenv versions</pre>




<pre class="code lang-sh" data-lang="sh" data-unlink>masao<span class="synConstant">-3</span>:.pyenv konoe_mario$ git clone https://github.com/yyuu/pyenv-virtualenv.git ~/.pyenv/plugins/pyenv-virtualenv
</pre>


<ul>
<li>virtualenvにはpyenv-virtualenvと、virtualenvがある</li>
<li>自分はpyenv-virtuakenvを使っていたみたい</li>
<li>両者の使い所の理解ができていないが、とりあえずpyenv-virtualenvを使用することにした</li>
</ul>


<p>pyenv-virtualenvの記事
<cite class="hatena-citation"><a href="http://qiita.com/Kodaira_/items/feadfef9add468e3a85b:embd">qiita.com</a></cite></p>

<p>virtualenvの記事 pyenv-virtualenvとの差異に言及あり
<iframe src="http://dackdive.hateblo.jp/embed/2015/12/12/163400" title=" [Python]pyenvとvirtualenvとpyenv-virtualenv - dackdive&#39;s blog" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://dackdive.hateblo.jp/entry/2015/12/12/163400">dackdive.hateblo.jp</a></cite></p>

<h2>raspberry3.5.1</h2>

<p>ラズパイ用に構築</p>

<h4>現在存在しているバージョンの確認</h4>

<pre class="code lang-sh" data-lang="sh" data-unlink>masao<span class="synConstant">-3</span>:~ konoe_mario$ pyenv versions
  system
  3.5.1
* 3.5.2 <span class="synPreProc">(</span><span class="synSpecial">set by /Users/konoe_mario/.pyenv/version</span><span class="synPreProc">)</span>
</pre>


<h4>ラズパイ用の環境を構築</h4>

<pre class="code lang-sh" data-lang="sh" data-unlink>masao<span class="synConstant">-3</span>:~ konoe_mario$ sudo pyenv virtualenv 3.5.1 raspberry_3.5.1
Password:
Ignoring indexes: https://pypi.python.org/simple
Requirement already satisfied <span class="synPreProc">(</span><span class="synSpecial">use --upgrade to upgrade</span><span class="synPreProc">)</span>: setuptools <span class="synError">in</span> /Users/konoe_mario/.pyenv/versions/3.5.1/envs/raspberry_3.5.1/lib/python3.5/site-packages
Requirement already satisfied <span class="synPreProc">(</span><span class="synSpecial">use --upgrade to upgrade</span><span class="synPreProc">)</span>: pip <span class="synError">in</span> /Users/konoe_mario/.pyenv/versions/3.5.1/envs/raspberry_3.5.1/lib/python3.5/site-packages
</pre>


<h4>環境の確認</h4>

<pre class="code lang-sh" data-lang="sh" data-unlink>masao<span class="synConstant">-3</span>:~ konoe_mario$ pyenv versions
  system
  3.5.1
  3.5.1/envs/raspberry_3.5.1
* 3.5.2 <span class="synPreProc">(</span><span class="synSpecial">set by /Users/konoe_mario/.pyenv/version</span><span class="synPreProc">)</span>
  raspberry_3.5.1
</pre>


<h4>環境の切り替え</h4>

<pre class="code lang-sh" data-lang="sh" data-unlink>masao<span class="synConstant">-3</span>:~ konoe_mario$ pyenv global raspberry_3.5.1 
<span class="synPreProc">(</span><span class="synSpecial">raspberry_3.5.1</span><span class="synPreProc">)</span> masao<span class="synConstant">-3</span>:~ konoe_mario$ 
</pre>


<p>パッケージは空っぽ</p>

<pre class="code lang-sh" data-lang="sh" data-unlink><span class="synPreProc">(</span><span class="synSpecial">raspberry_3.5.1</span><span class="synPreProc">)</span> masao<span class="synConstant">-3</span>:~ konoe_mario$ pip freeze
<span class="synPreProc">(</span><span class="synSpecial">raspberry_3.5.1</span><span class="synPreProc">)</span> masao<span class="synConstant">-3</span>:~ konoe_mario$ 
</pre>


<h4>作成した環境をPycharmで使用する</h4>

<p><iframe src="//hatenablog-parts.com/embed?url=http%3A%2F%2Fqiita.com%2Fm2t9%2Fitems%2F11aea3d8e6ebbeef88c9" title="PyCharmでpyenvとvirtualenvで構築したライブラリにパスを通す方法 - Qiita" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://qiita.com/m2t9/items/11aea3d8e6ebbeef88c9">qiita.com</a></cite></p>

<h2>Python3.5.2</h2>

<p>Udemy用に構築。</p>

<p>いつ設定したか記憶にないけれども、pyenvが入っているみたいなので、pyenvで3.5.2をインス<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C8%A1%BC">トー</a>ルする。</p>

<p>しかし、エラーになる。</p>

<pre class="code" data-lang="" data-unlink>masao-3:~ konoe_mario$ pyenv install 3.5.2
Downloading readline-6.3.tar.gz...
-&gt; https://yyuu.github.io/pythons/56ba6071b9462f980c5a72ab0023893b65ba6debb4eeb475d7a563dc65cafd43
Installing readline-6.3...

BUILD FAILED (OS X 10.10.5 using python-build 1.0.8-2-gb7d89ba)

Inspect or clean up the working tree at /var/folders/rn/tv8gxk290vgb3tq2dhk74fh00000gn/T/python-build.20170416222435.77644
Results logged to /var/folders/rn/tv8gxk290vgb3tq2dhk74fh00000gn/T/python-build.20170416222435.77644.log

Last 10 log lines:
    done
install: /Users/konoe_mario/.pyenv/versions/3.5.2/include/readline: No such file or directory
install: /Users/konoe_mario/.pyenv/versions/3.5.2/include/readline: No such file or directory
install: /Users/konoe_mario/.pyenv/versions/3.5.2/include/readline: No such file or directory
install: /Users/konoe_mario/.pyenv/versions/3.5.2/include/readline: No such file or directory
install: /Users/konoe_mario/.pyenv/versions/3.5.2/include/readline: No such file or directory
install: /Users/konoe_mario/.pyenv/versions/3.5.2/include/readline: No such file or directory
install: /Users/konoe_mario/.pyenv/versions/3.5.2/include/readline: No such file or directory
install: /Users/konoe_mario/.pyenv/versions/3.5.2/include/readline: No such file or directory
make: *** [install-headers] Error 71</pre>


<p>sudoで実行したらいけた。</p>

<pre class="code" data-lang="" data-unlink>masao-3:~ konoe_mario$ sudo pyenv install 3.5.2
Password:
Downloading readline-6.3.tar.gz...
-&gt; https://yyuu.github.io/pythons/56ba6071b9462f980c5a72ab0023893b65ba6debb4eeb475d7a563dc65cafd43
Installing readline-6.3...
Installed readline-6.3 to /Users/konoe_mario/.pyenv/versions/3.5.2

Downloading Python-3.5.2.tar.xz...
-&gt; https://www.python.org/ftp/python/3.5.2/Python-3.5.2.tar.xz
Installing Python-3.5.2...
patching file Lib/venv/scripts/posix/activate.fish
Installed Python-3.5.2 to /Users/konoe_mario/.pyenv/versions/3.5.2</pre>


<p>pipのバージョンを最新化(必須ではない)
masao-3:~ konoe_mario$ sudo pip install &ndash;upgrade pip</p>

<p>pipとは、<a class="keyword" href="http://d.hatena.ne.jp/keyword/python">python</a>のパッケージ管理システム</p>

-----
--------
AUTHOR: konoemario
TITLE: RaspBerryPiでステッピングモーターを動かす
BASENAME: 2017/04/16/150728
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 04/16/2017 15:07:28
CATEGORY: プログラム
CATEGORY: ラズパイ
IMAGE: https://images-fe.ssl-images-amazon.com/images/I/61CFZ5rsKCL._SL160_.jpg
-----
BODY:
<p><iframe src="https://hatenablog-parts.com/embed?url=http%3A%2F%2Fwww.tohuandkonsome.site%2Fentry%2F2017%2F04%2F09%2F175440" title="RaspBerryPiではじめる電子工作まとめ - 豆腐とコンソメ" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://tohutokonsome.hatenablog.com/entry/2017/04/09/175440">tohutokonsome.hatenablog.com</a></cite></p>

<p>ラジコンカーをつくるためにモーターを漁っていたら、「ステッピングモーター」に触れる機会があったので書いておきます！</p>

<p>動かすのに、かなり苦戦しました。</p>

<p><strong>誤っている箇所があればご指摘いただけると嬉しいです！</strong></p>

<ul class="table-of-contents">
    <li><a href="#ステッピングモーターとは">ステッピングモーターとは</a></li>
    <li><a href="#使用した製品">使用した製品</a></li>
    <li><a href="#モータードライバのはんだごて">モータードライバのはんだごて</a></li>
    <li><a href="#配線をしてみる">配線をしてみる</a></li>
    <li><a href="#Pythonで実行してみる">Pythonで実行してみる</a></li>
    <li><a href="#反省点">反省点</a><ul>
            <li><a href="#はんだごてが適当すぎた">はんだごてが適当すぎた</a></li>
            <li><a href="#データシート秋月電子通商のマニュアルをちゃんと読むべき">データシート、秋月電子通商のマニュアルをちゃんと読むべき</a></li>
        </ul>
    </li>
</ul>

<h2 id="ステッピングモーターとは">ステッピングモーターとは</h2>

<p>通常のモータは電流を流すと、ぷしゃあああと何回転もするの対して<br/>
ステッピングモータは、とりあえず30度回転しよっかみたいみたいな感じで<br/>
回転する角度を制御できるみたいです。</p>

<h2 id="使用した製品">使用した製品</h2>

<p>以下の製品を使用しました。</p>

<p>ステッピングモーター<br/>
<a href="http://akizukidenshi.com/catalog/g/gP-09438/">&#x30D0;&#x30A4;&#x30DD;&#x30FC;&#x30E9; &#x30B9;&#x30C6;&#x30C3;&#x30D4;&#x30F3;&#x30B0;&#x30E2;&#x30FC;&#x30BF;&#x30FC; &#xFF2D;&#xFF24;&#xFF30;&minus;&#xFF13;&#xFF15;&#xFF21; &#xFF14;&#xFF18;&#x30B9;&#x30C6;&#x30C3;&#x30D7;: &#x30D1;&#x30FC;&#x30C4;&#x4E00;&#x822C; &#x79CB;&#x6708;&#x96FB;&#x5B50;&#x901A;&#x5546; &#x96FB;&#x5B50;&#x90E8;&#x54C1; &#x30CD;&#x30C3;&#x30C8;&#x901A;&#x8CA9;</a></p>

<p>モータードライバ<br/>
<a href="http://akizukidenshi.com/catalog/g/gK-09848/">&#xFF24;&#xFF32;&#xFF36;&#xFF18;&#xFF18;&#xFF13;&#xFF15;&#x4F7F;&#x7528;&#x30B9;&#x30C6;&#x30C3;&#x30D4;&#x30F3;&#x30B0;&#xFF06;&#xFF24;&#xFF23;&#x30E2;&#x30FC;&#x30BF;&#x30C9;&#x30E9;&#x30A4;&#x30D0;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;: &#x7D44;&#x7ACB;&#x30AD;&#x30C3;&#x30C8; &#x79CB;&#x6708;&#x96FB;&#x5B50;&#x901A;&#x5546; &#x96FB;&#x5B50;&#x90E8;&#x54C1; &#x30CD;&#x30C3;&#x30C8;&#x901A;&#x8CA9;</a></p>

<p>これらは、ラズパイマガジン2017年2月&amp;4月号の電子工作入門部品セットに含まれています。</p>

<p><div class="hatena-asin-detail"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4822239225/hatena-blog-22/"><img src="https://images-fe.ssl-images-amazon.com/images/I/61CFZ5rsKCL._SL160_.jpg" class="hatena-asin-detail-image" alt="ラズパイマガジン 2017年2月号 (日経BPパソコンベストムック)" title="ラズパイマガジン 2017年2月号 (日経BPパソコンベストムック)"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4822239225/hatena-blog-22/">ラズパイマガジン 2017年2月号 (日経BPパソコンベストムック)</a></p><ul><li><span class="hatena-asin-detail-label">作者:</span> 日経Linux</li><li><span class="hatena-asin-detail-label">出版社/メーカー:</span> 日経BP社</li><li><span class="hatena-asin-detail-label">発売日:</span> 2016/12/15</li><li><span class="hatena-asin-detail-label">メディア:</span> 単行本</li><li><a href="http://d.hatena.ne.jp/asin/4822239225/hatena-blog-22" target="_blank">この商品を含むブログを見る</a></li></ul></div><div class="hatena-asin-detail-foot"></div></div><br/>
<div class="hatena-asin-detail"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4822239276/hatena-blog-22/"><img src="https://images-fe.ssl-images-amazon.com/images/I/61lk36R06UL._SL160_.jpg" class="hatena-asin-detail-image" alt="ラズパイマガジン 2017年4月号(日経BPパソコンベストムック)" title="ラズパイマガジン 2017年4月号(日経BPパソコンベストムック)"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4822239276/hatena-blog-22/">ラズパイマガジン 2017年4月号(日経BPパソコンベストムック)</a></p><ul><li><span class="hatena-asin-detail-label">作者:</span> 日経Linux</li><li><span class="hatena-asin-detail-label">出版社/メーカー:</span> 日経BP社</li><li><span class="hatena-asin-detail-label">発売日:</span> 2017/02/15</li><li><span class="hatena-asin-detail-label">メディア:</span> 単行本</li><li><a href="http://d.hatena.ne.jp/asin/4822239276/hatena-blog-22" target="_blank">この商品を含むブログを見る</a></li></ul></div><div class="hatena-asin-detail-foot"></div></div></p>

<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>


<p><ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-9454652061055047"
     data-ad-slot="9448453805"></ins></p>

<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>


<h2 id="モータードライバのはんだごて">モータードライバのはんだごて</h2>

<p>ブレッドボードに接続する際には、端子とモータードライバをはんだごてする必要があります。</p>

<p>モータードライバはものすごく小さい！<br/>
<span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170416/20170416014034.jpg" alt="f:id:konoemario:20170416014034j:plain" title="f:id:konoemario:20170416014034j:plain" class="hatena-fotolife" itemprop="image"></span></p>

<p>とりあえず部品を固定しないとどうにもならないので、ブレッドボードに挿して固定することにしました。<br/>
おそらく推奨されないやり方だと思われますが、突き進みます。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170416/20170416131614.jpg" alt="f:id:konoemario:20170416131614j:plain" title="f:id:konoemario:20170416131614j:plain" class="hatena-fotolife" itemprop="image"></span></p>

<p>はんだごてをするための「はんだ」も写っているのですが
部品に比べかなり大きいです。  <br/>
電子工作用のもうすこし細いやつを購入すればよかったかも。</p>

<p>また、端子は14本あったのですが、モータードライバは6本が2つ必要だったので手で折っちゃいました。<br/>
この辺のことは常識なのか、どこにも説明が書いてないので不安になります。</p>

<p>・<br/>
・<br/>
・</p>

<p>はんだごて途中経過</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170416/20170416014650.jpg" alt="f:id:konoemario:20170416014650j:plain" title="f:id:konoemario:20170416014650j:plain" class="hatena-fotolife" itemprop="image"></span></p>

<p>びっくりするぐらい下手くそですね。<br/>
念のため買っておいた、はんだ吸い取り線が大活躍しました。</p>

<p>・<br/>
・<br/>
・</p>

<p>汚いながらも、なんとか最後まで完了しました。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170416/20170416014907.jpg" alt="f:id:konoemario:20170416014907j:plain" title="f:id:konoemario:20170416014907j:plain" class="hatena-fotolife" itemprop="image"></span></p>

<h2 id="配線をしてみる">配線をしてみる</h2>

<p>伝える気があるのかないのかわからない絵ですが、こんな感じです。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170416/20170416021142.jpg" alt="f:id:konoemario:20170416021142j:plain" title="f:id:konoemario:20170416021142j:plain" class="hatena-fotolife" itemprop="image"></span></p>

<p>ラズパイから、モーター用の電源5V、モータドライバー用の電源3.3Vを供給しています。</p>

<p>モーターのデータシートをみると、駆動電圧12Vとなっており、モータドライバの方もMAX12Vと記載があるので、今回は少なめです。</p>

<p>絵の中のラズパイから伸びている、青、白、黄、赤の線ですが、こちらがプログラムで制御する部分になります。</p>

<p>ステッピングモーターは、DCモーターとは異なり、線が４本あります。</p>

<p>細かい仕組みはさっぱりですが、この線に決まった順序で電圧をかけていくことで、モーターが回転します。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170416/20170416134103.jpg" alt="f:id:konoemario:20170416134103j:plain" title="f:id:konoemario:20170416134103j:plain" class="hatena-fotolife" itemprop="image"></span></p>

<p>ここまでを簡単に整理すると、  以下の通りとなります。</p>

<ul>
<li>AIN1→AOUT1(青の線へ出力)</li>
<li>AIN2→AOUT2(白の線へ出力)</li>
<li>BIN1→BOUT1(黄の線へ出力)</li>
<li>BIN2→BOUT2(赤の線へ出力)</li>
</ul>


<p>ですので、今度はラズパイ側から、AIN1〜BIN2へ信号をおくるために配線を行っていきます。</p>

<p>まず前提のとなるラズパイ側ピンの役割は以下の通りとなります。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170416/20170416140214.jpg" alt="f:id:konoemario:20170416140214j:plain" title="f:id:konoemario:20170416140214j:plain" class="hatena-fotolife" itemprop="image"></span></p>

<p>※下段部分の絵は、公式の絵になります。
<iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fwww.raspberrypi.org%2Fdocumentation%2Fusage%2Fgpio-plus-and-raspi2%2F" title="GPIO: Models A+, B+, Raspberry Pi 2 B and Raspberry Pi 3 B - Raspberry Pi Documentation" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://www.raspberrypi.org/documentation/usage/gpio-plus-and-raspi2/">www.raspberrypi.org</a></cite></p>

<p>黄色のGPIOの部分がプログラムから制御できる部分になります。</p>

<p>今回は、AIN1〜BIN2の制御は以下のピンを使うことにしました。</p>

<ul>
<li>　７番のピン-AIN1</li>
<li>１１番のピン-AIN2</li>
<li>１３番のピン-BIN1</li>
<li>１５番のピン-BIN2</li>
</ul>


<p>ちなみに、１番のピンはモータードライバの電源、２番のピンはモーダー電源として利用しました。<br/>
６番もGND(マイナス側）として利用しています。</p>

<p>※GNDってなんだってなるのですが、ラズパイをただの乾電池として捉えると、理解しやすいかもです。<br/>
電流はプラスからマイナスに向かって電流が流れます。<br/>
なので、乾電池もプラス極とマイナス極をつないで初めて電流が流れます。</p>

<p>GPIOや電源の部分は全てプラスになります。<br/>
GND(マイナス)まで回路をつなぐことで、電流が流れ始めます。</p>

<p>全部つなげてみるとこんな感じになりました。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170416/20170416143227.jpg" alt="f:id:konoemario:20170416143227j:plain" title="f:id:konoemario:20170416143227j:plain" class="hatena-fotolife" itemprop="image"></span></p>

<h2 id="Pythonで実行してみる">Pythonで実行してみる</h2>

<p>コードは、以下の通りとなります。<br/>
冗長なコードかもしれませんが許してください。　</p>

<p>一点混乱するところとして、PINの番号とGPIOの番号が一致していません。</p>

<ul>
<li>GPIO4  -７番のピン</li>
<li>GPIO17-１１番のピン</li>
<li>GPIO27-１３番のピン</li>
<li>GPIO22-１５番のピン</li>
</ul>


<p>物理的なピンの番号と、内部の役割に応じた番号で違っているみたいです。<br/>
公式サイトにそれらしき関係が載っていました。<br/>
<a href="https://pinout.xyz/">Raspberry Pi GPIO Pinout</a></p>

<p><script src="https://gist.github.com/2ead7d3f720fd12f7be332eca99df0ba.js"> </script></p>

<p><a href="https://gist.github.com/2ead7d3f720fd12f7be332eca99df0ba">ステッピングモーターを動かす</a></p>

<h2 id="反省点">反省点</h2>

<p>備忘録がてら反省点を。</p>

<h3 id="はんだごてが適当すぎた">はんだごてが適当すぎた</h3>

<p>最初、モーターが全然動きませんでした。 <br/>
テスターを使ってステッピングモータのそれぞれの線に電流が流れているのかを確認した結果<br/>
白の線に電流が流れていないことが判明。<br/>
対応するモータドライバ部分のはんだをやり直した結果、電流が流れるようになった。</p>

<h3 id="データシート秋月電子通商のマニュアルをちゃんと読むべき">データシート、秋月電子通商のマニュアルをちゃんと読むべき</h3>

<p><a href="http://akizukidenshi.com/download/ds/sanyos/MDP-35A_a.pdf">http://akizukidenshi.com/download/ds/sanyos/MDP-35A_a.pdf</a>
<a href="http://akizukidenshi.com/download/ds/akizuki/AE-DRV8835-Ss.pdf">http://akizukidenshi.com/download/ds/akizuki/AE-DRV8835-Ss.pdf</a></p>

<p>作業の進め方は、ラズパイマガジン2月号のステッピングモーターの内容で進めていました。<br/>
ラズパイマガジンには、読者限定サイトが用意され、配線図や、Pythonコード収録されています。</p>

<p>しかし、配線図、コードを、そっくりそのまま実行したところ、モーターがまったく動きませんでした。</p>

<p>前述のはんだごてがダメだった部分もあり、調査にいろいろと時間がかかったのですが<br/>
最終的にデータシート、秋月電子通商のマニュアルをよく見ることで解決しました。</p>

-----
--------
AUTHOR: konoemario
TITLE: LEDを正しく光らせる
BASENAME: 2017/04/13/213238
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 04/13/2017 21:32:38
CATEGORY: プログラム
CATEGORY: ラズパイ
-----
BODY:
<p>電子工作まとめ<br/>
<iframe src="http://tohutokonsome.hatenablog.com/embed/2017/04/09/175440" title="RaspBerryPiではじめる電子工作まとめ - 豆腐とコンソメ" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://tohutokonsome.hatenablog.com/entry/2017/04/09/175440">tohutokonsome.hatenablog.com</a></cite></p>

<p>今回は、LEDを安全に点灯させてみる。</p>

<h2>LEDの仕様を確認する</h2>

<p>LEDを点灯するにあたっては、仕様がちゃんと存在していて、「データシート」と呼ばれるものに記載されている。</p>

<p>この「データシート」という名称は、モーターなどの製品でも存在していて
電子部品の仕様書みたいな存在ではないかと思われる。</p>

<p>使用するLEDのデータシートはこちら。<br/>
<a href="http://akizukidenshi.com/download/OSPW5111A-YZ.pdf">http://akizukidenshi.com/download/OSPW5111A-YZ.pdf</a></p>

<p>ファイルは、電子部品をオンラインでも購入することのできる<a class="keyword" href="http://d.hatena.ne.jp/keyword/%BD%A9%B7%EE%C5%C5%BB%D2%C4%CC%BE%A6">秋月電子通商</a>で検索するとあったりする。</p>

<p>データシートの必要箇所を抜粋する。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170413/20170413212051.png" alt="f:id:konoemario:20170413212051p:plain" title="f:id:konoemario:20170413212051p:plain" class="hatena-fotolife" itemprop="image"></span></p>

<p>まず、もっとも大事なのは絶対最大定格(Abosolute Maximum Rating)という値でこれを超えると電子機器がぶっ壊れるから守ってねという値。</p>

<p>表の内容から察するに30mAが限界ということがわかる。<br/>
一般的に最大の半分程度の電流を流すみたい。</p>

<p>なので、今回は20mAの電流を流してみたいと思う。</p>

<p>使用する電源は乾電池4本。<br/>
1本の電圧が1.5Vなので、6Vの電圧となる。</p>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%AA%A1%BC%A5%E0%A4%CE%CB%A1%C2%A7">オームの法則</a>より、6Vの電圧を使用して20mAの電流を流したい場合、抵抗をいれることで流れる電流をコン<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C8%A5%ED%A1%BC%A5%EB">トロール</a>することができる。</p>

<pre class="code" data-lang="" data-unlink>必要な抵抗 (Ω) = 6V /  20mA = 300Ω</pre>


<p>上記の式より、300Ωの抵抗が必要ということがわかる。</p>

<p>ではさっそく、300Ωの抵抗を用意しよう、というとそうではないのでややこしい。</p>

<p>というのも、LEDライトにも抵抗は存在しているのである。</p>

<p>なので、LEDライト抵抗値を調べ、そこからたりない分の抵抗を足す必要がある。</p>

<pre class="code" data-lang="" data-unlink>300Ω  = (LEDの抵抗) + たりない分の抵抗</pre>


<h2>LEDの抵抗は一定ではない</h2>

<p>LEDの抵抗を調べてみると、抵抗がどれくらいかは書いていないことがわかる。</p>

<p>厄介なことに、LEDや豆電球の抵抗値は固定ではなく、与える電圧によって変化をしてしまう性質をもっている。</p>

<p>自分がわかりやすかったのは、豆電球の例で、電圧を与えることで、豆電球のフィラメントと呼ばれる部分が熱をもって
その結果、電流が流れにくくなる（豆電球の抵抗が高くなる）ということが起きるらしい。</p>

<p>LEDも細かいことはわからないけれども、そういった性質をもっている。</p>

<p>LEDの抵抗がわからないと、どれだけ抵抗足せばいいかわかんない、となってしまうのだが、データシートに乗っている以下の部分にヒントがある。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170413/20170413212053.png" alt="f:id:konoemario:20170413212053p:plain" title="f:id:konoemario:20170413212053p:plain" class="hatena-fotolife" itemprop="image"></span></p>

<p>Electrical -Optical Characteristicsは直訳で「電気的諸特性」とよくわからない日本語だが
書いてある内容は、20mAを流したときの電圧が記載されている。</p>

<p>MinとMaxは文字通り、最少と最大で、Typは標準値という意味。</p>

<p>なので、このデータシートからLEDの抵抗値を読み取ることができる。</p>

<p>これも<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%AA%A1%BC%A5%E0%A4%CE%CB%A1%C2%A7">オームの法則</a>より</p>

<pre class="code" data-lang="" data-unlink>LEDの抵抗 =    3.4V / 20mA = 170Ω

※電圧は標準値(3.4V)を採用する。
※固定の抵抗値ではなく、20mAを流す場合の抵抗。
</pre>


<p>以上から、たりない分の抵抗は</p>

<pre class="code" data-lang="" data-unlink>たりない分の抵抗 =  300Ω  - 170 Ω = 130Ω</pre>


<p>ということがわかる。</p>

<p>ちなみに、こんなまわりくどい計算ではなく</p>

<pre class="code" data-lang="" data-unlink>必要な抵抗 = (電源の電圧 - LEDに必要な電圧)　/ LEDに流す電流

(6V - 3.4V) / 20mA = 130Ω
</pre>


<p>という考え方でも同じ値を求めることができる。<br/>
こちらの方がシンプル。</p>

<h2>点灯してみる</h2>

<p>残念ながら手元に130Ωの抵抗器はなく、100Ωの抵抗器しかなかった。<br/>
100Ωで問題ないかを計算してみる。</p>

<pre class="code" data-lang="" data-unlink>(6V - 3.4V) / 流れる電流の想定 = 100Ω

上記を解くと、流れる電流は26mA
</pre>


<p>ちょっと怖いけれども、30mAは超えないのでやってみる。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170413/20170413213053.jpg" alt="f:id:konoemario:20170413213053j:plain:w300" title="f:id:konoemario:20170413213053j:plain:w300" class="hatena-fotolife" style="width:300px" itemprop="image"></span></p>

<p>想定より3mAほど大きい電流が流れ焦りましたが、無事点灯することができました。</p>

<p>次回はRaspBerryPiと接続したいと思います。</p>

-----
--------
AUTHOR: konoemario
TITLE: 電圧やら、なんやらを計測してみた：テスターの使い方
BASENAME: 2017/04/10/225420
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 04/10/2017 22:54:20
CATEGORY: プログラム
CATEGORY: ラズパイ
IMAGE: https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170409/20170409175917.jpg
-----
BODY:
<p>電子工作まとめ<br/>
<iframe src="http://tohutokonsome.hatenablog.com/embed/2017/04/09/175440" title="RaspBerryPiではじめる電子工作まとめ - 豆腐とコンソメ" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://tohutokonsome.hatenablog.com/entry/2017/04/09/175440">tohutokonsome.hatenablog.com</a></cite></p>

<p>電気のことをあれこれと調べていると、実際のところはどんなもんじゃい！  と気になってくるのが人の性です。</p>

<p>なので、電圧、電流、抵抗を確認することのできる 、テスターを購入して、いろいろとみてみました。</p>

<p>電流の測定に関しては、なんだかしっくりこない結果になってしまいました。  <br/>
詳しい方がいらっしゃいましたらご指摘いただきたいです。</p>

<ul class="table-of-contents">
    <li><a href="#事前準備">事前準備</a></li>
    <li><a href="#使い方">使い方</a></li>
    <li><a href="#電圧を測定してみる">電圧を測定してみる</a></li>
    <li><a href="#抵抗を測定してみる">抵抗を測定してみる</a></li>
    <li><a href="#電流を測定してみる">電流を測定してみる</a><ul>
            <li><a href="#再チャレンジ">再チャレンジ</a></li>
        </ul>
    </li>
</ul>

<h2 id="事前準備">事前準備</h2>

<p>テスターにはアナログ式、デジタル式があります。<br/>
アナログ式のほうが正確に計れるみたいですが、一番安かったのがデジタル式だったので、デジタル式にしちゃいました。</p>

<p>お値段は1000円ぐらい。</p>

<p>M830B ポケットデジタルマルチメーター
<span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170409/20170409175917.jpg" alt="f:id:konoemario:20170409175917j:plain:w300" title="f:id:konoemario:20170409175917j:plain:w300" class="hatena-fotolife" style="width:300px" itemprop="image"></span></p>

<p>また、テスターを使用する際には、ブレッドボード経由で確認することになるので  こちらのクリップを購入するほうがよさそうです。<br/>
お値段は300円くらいでした。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170409/20170409180433.jpg" alt="f:id:konoemario:20170409180433j:plain" title="f:id:konoemario:20170409180433j:plain" class="hatena-fotolife" itemprop="image"></span></p>

<p>というのは、テスターの先端の先は細くとがっているのですが<br/>
ブレッドボードの穴に刺すには太すぎます。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170409/20170409181026.jpg" alt="f:id:konoemario:20170409181026j:plain:w300" title="f:id:konoemario:20170409181026j:plain:w300" class="hatena-fotolife" style="width:300px" itemprop="image"></span></p>

<p>ですので、以下のように、オス-オスのジャンパー線をクリップに刺して
<span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170409/20170409181030.jpg" alt="f:id:konoemario:20170409181030j:plain:w300" title="f:id:konoemario:20170409181030j:plain:w300" class="hatena-fotolife" style="width:300px" itemprop="image"></span></p>

<p>鰐口側でテスター先端部分をつまむようにすると、いい感じになります。<br/>
<span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170409/20170409181301.jpg" alt="f:id:konoemario:20170409181301j:plain:w300" title="f:id:konoemario:20170409181301j:plain:w300" class="hatena-fotolife" style="width:300px" itemprop="image"></span></p>

<h2 id="使い方">使い方</h2>

<p>この解説、同じものを買った人だけにしか役に立たない気がして正直どうかと思ったけれども、書いておく。</p>

<p>というのも付属の説明書読んでもいまいちわからなかった。</p>

<p>さらにいえば、自分が書いたものがあってるのかということさえ怪しい。</p>

<p>とりあえず、赤いテストリード線(プラス)、 黒いテストリード線(マイナス)を
写真の位置に刺す。<br/>
※奥深くまで以外に刺さった。<br/>
<span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170409/20170409183056.jpg" alt="f:id:konoemario:20170409183056j:plain" title="f:id:konoemario:20170409183056j:plain" class="hatena-fotolife" itemprop="image"></span></p>

<p>調べたいものに対応する形で、つまみの位置を動かす。<br/>
V~部分は交流電圧を図るためのものらしい。<br/>
また、交流電流は計測できないみたい。</p>

<p>おそらく、ともに使わない気がする。</p>

<p>緑で囲った部分だけれども、200mA以上の電流を計測する場合に使う。<br/>
赤いテストリード線も刺す位置が緑で囲った赤い穴に挿して、ツマミも10Aのところにすればよい。</p>

<h2 id="電圧を測定してみる">電圧を測定してみる</h2>

<p>さっそく、乾電池1本の電圧を測ってみる。<br/>
乾電池はおよそ1.5Vといわれているので、ツマミを直流電圧の2000mに合わせる。<br/>
この2000mというのは2000mV、つまり2Vまで計測できて、かつ計測単位は1mVだぜっていうツマミみたい。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170409/20170409184321.jpg" alt="f:id:konoemario:20170409184321j:plain:w300" title="f:id:konoemario:20170409184321j:plain:w300" class="hatena-fotolife" style="width:300px" itemprop="image"></span></p>

<p>出てきた数字は、1465mV、つまりおよそ1.5Vとなり、うまくできていることがわかる。</p>

<p>試しに、ブレッドボードを使わないでやってみたが、こちらも同じ結果となった。<br/>
<span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170409/20170409184331.jpg" alt="f:id:konoemario:20170409184331j:plain:w300" title="f:id:konoemario:20170409184331j:plain:w300" class="hatena-fotolife" style="width:300px" itemprop="image"></span></p>

<h2 id="抵抗を測定してみる">抵抗を測定してみる</h2>

<p>茶黒赤金の1000Ωのカーボン抵抗の抵抗をテスターで測ってみます。<br/>
1000Ωの抵抗なので、ツマミを2000Ωのところにしてみたところ
997Ωが表示されました。</p>

<p>こちらも問題なさそうです。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170409/20170409185622.jpg" alt="f:id:konoemario:20170409185622j:plain" title="f:id:konoemario:20170409185622j:plain" class="hatena-fotolife" itemprop="image"></span></p>

<p>※当初、茶黒茶金の100Ωの抵抗を繋いでいて、単位がぜんぜんわからないと  嘆いていたことは内緒です。</p>

<h2 id="電流を測定してみる">電流を測定してみる</h2>

<p>一番シンプルに、抵抗がまったくない、という想定で電流を測ってみることにしました。</p>

<p>つまり、1.5Vの乾電池で直接、電流を測ってみます。</p>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%AA%A1%BC%A5%E0%A4%CE%CB%A1%C2%A7">オームの法則</a>をもとに考えれば、流れる電流(A) は 電圧(V) / 抵抗(Ω)で求めることができます。</p>

<p>と、ここでふとした疑問がわきます。</p>

<p>抵抗がない、というのは0Ωなのか、1Ωなのかがわかりませんでした。<br/>
ただ、0Ωとすると、0で割ることなってしまいます。<br/>
なので、きっと抵抗がないってのは1Ωのことなんだろう、とします。</p>

<p>とすると、1.5Vの電池からは、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%AA%A1%BC%A5%E0%A4%CE%CB%A1%C2%A7">オームの法則</a>より</p>

<pre class="code" data-lang="" data-unlink>1.5V / 1Ω = 1.5A</pre>


<p>となり、1.5Aの電流が流れるはずです。</p>

<p>しかし、実際に試してみると、「276」という謎の数字が出ています。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170409/20170409215623.jpg" alt="f:id:konoemario:20170409215623j:plain:w300" title="f:id:konoemario:20170409215623j:plain:w300" class="hatena-fotolife" style="width:300px" itemprop="image"></span></p>

<p>ここでは、200mAを越す電流が流れることを想定して、赤のリード線をそれ専用の穴に挿し、ツマミも10Aのところに設定しています。</p>

<p>この数字が276mAなのか、2760mAなのかもよくわからなかったので<br/>
困った時の「<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%E4%A5%D5%A1%BC%C3%CE%B7%C3%C2%DE">ヤフー知恵袋</a>」です。</p>

<blockquote><p>まず、電圧と電流のを計る時のテスター内部の抵抗値について、正しく認識する必要があります。</p>

<p>単三電池(1.5V)単体では、+と-の電極間に電圧は発生していますが、電流は発生していません。従って、電圧を計るのが正しい測定です。</p>

<p>テスターのスイッチを電圧計にした時には、テスター内部の抵抗値は、比較的大きな値ですので、多くの電流は流れません。単三電池の電圧を測定すれば、ほぼ1.5Vという数値が表示されます。</p>

<p>次に、テスターで電流を測定しようとして、テスターの切り替えスイッチを電流にして電池につないだとすると、電流計になっている時の抵抗値は比較的低い値になっているので、大きな電流が流れます。</p>

<p>276という数値が表示されたということは、おそらく276mAということではないかと思いますが、そうすると、抵抗 = 電圧 ÷ 電流 の関係から、テスター内の抵抗値と電池内部の抵抗値の合計は、5.43Ωということになります。</p>

<p>1.5Vの電池に、5.43Ωの抵抗をつないだことと同じですので、276mAの電流が流れるのは当然です。</p></blockquote>

<p>回答いただいた内容によりますと、以下のことがわかりました。</p>

<ul>
<li>テスターには内部抵抗値が存在している。</li>
<li>内部抵抗値は、電圧測定と電流測定とで抵抗値がかわる。
(ツマミを変えることで抵抗値がかわっているのかも？)</li>
<li>電池にも内部抵抗が存在している。<br/>
特に抵抗が低い場合に、抵抗が大きくなってしまうみたい。 <br/>
<a href="http://wakariyasui.sakura.ne.jp/p/elec/kairo/kidenn.html">&#x96FB;&#x6C60;&#x306E;&#x8D77;&#x96FB;&#x529B;&#x3068;&#x5185;&#x90E8;&#x62B5;&#x6297; &#x25A0;&#x308F;&#x304B;&#x308A;&#x3084;&#x3059;&#x3044;&#x9AD8;&#x6821;&#x7269;&#x7406;&#x306E;&#x90E8;&#x5C4B;&#x25A0;</a></li>
</ul>


<h3 id="再チャレンジ">再チャレンジ</h3>

<p>テスターに内部抵抗が存在しているとして、ブレッドボードに繋いで再計測をしてみました。</p>

<p>しかし、計測される数値はさっきと異なり「1.78」という数値が表示されます。
（そして、時間とともに数値が下がっていきます。)</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170409/20170409231839.jpg" alt="f:id:konoemario:20170409231839j:plain:w300" title="f:id:konoemario:20170409231839j:plain:w300" class="hatena-fotolife" style="width:300px" itemprop="image"></span></p>

<p>そもそもの測り方が間違っている気がして仕方がありません。</p>

<p>今度は、100Ωの抵抗を間にいれて、計測してみることにしました。</p>

<p>図にしてみると、以下の通りです。</p>

<p>抵抗をいれて電流を測定したみた図
<span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170409/20170409233613.png" alt="f:id:konoemario:20170409233613p:plain:w300" title="f:id:konoemario:20170409233613p:plain:w300" class="hatena-fotolife" style="width:300px" itemprop="image"></span></p>

<p>こちらの予測値としては、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%AA%A1%BC%A5%E0%A4%CE%CB%A1%C2%A7">オームの法則</a>より</p>

<pre class="code" data-lang="" data-unlink>1.5V  / 100Ω =  15mA 

テスターの内部電圧が5Ωぐらいだとしたら  

1.5V / 105Ωv ≒ 14mA
</pre>


<p>とおよそ、14mA〜15mAと想定できます。</p>

<p>実際の継続結果は、こちらになります。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170409/20170409234612.jpg" alt="f:id:konoemario:20170409234612j:plain:w300" title="f:id:konoemario:20170409234612j:plain:w300" class="hatena-fotolife" style="width:300px" itemprop="image"></span></p>

<p>12.15いう数値になっています。<br/>
想定値が20mA以下なので、ツマミは20mAとして、赤のリード線も小さい電流用の穴に差し替えています。</p>

<p>ですので、おそらく12.15mAという数値だと思います。</p>

<p>想定値より少ない電流になりましたが、おそらくあっているのではないかと思います。<br/>
たぶん。</p>

<p>これらの使い方をもとに、実際の電気工作に生かしていきたいと思います。</p>

-----
--------
AUTHOR: konoemario
TITLE: RaspBerryPiではじめる電子工作まとめ
BASENAME: 2017/04/09/175440
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 04/09/2017 17:54:40
CATEGORY: プログラム
CATEGORY: ラズパイ
IMAGE: https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170327/20170327221105.jpg
-----
BODY:
<p>モーターを動かすに当たっていろいろ放置していた疑問を忘れないようにまとめていきます。</p>

<ul class="table-of-contents">
    <li><a href="#RaspBerryPiを使わずにLEDライトを光らせる">RaspBerryPiを使わずにLEDライトを光らせる</a><ul>
            <li><a href="#使用したもの">使用したもの</a></li>
            <li><a href="#とりあえずつなげてみる">とりあえず、つなげてみる</a></li>
        </ul>
    </li>
    <li><a href="#電気ってなんだろう">電気ってなんだろう</a></li>
    <li><a href="#電圧やらなんやらを計測してみた">電圧やらなんやらを計測してみた</a></li>
    <li><a href="#LEDを正しく点灯させる">LEDを正しく点灯させる</a></li>
    <li><a href="#RaspBerryPiでステッピングモーターを動かす">RaspBerryPiでステッピングモーターを動かす</a></li>
    <li><a href="#ラズパイZeroの初期設定">ラズパイZeroの初期設定</a></li>
</ul>

<h2 id="RaspBerryPiを使わずにLEDライトを光らせる">RaspBerryPiを<span style="font-size: 120%">使わずに</span>LEDライトを光らせる</h2>

<p>電子工作の基本というところで、まずは、<strong>RaspBerryPiを使わずに</strong>
実験を行ってみます。<br/>
まず最初にやることは、Lチカと呼ばれるLEDライトの点灯です。<br/>
電子工作界の「<a class="keyword" href="http://d.hatena.ne.jp/keyword/Hello%20World">Hello World</a>」とのこと。<br/>
なので、このLEDライトを使い、基本的な疑問を解決していきたいと思います。</p>

<h3 id="使用したもの">使用したもの</h3>

<ol>
<li>ブレッドボード</li>
<li>LEDライト</li>
<li>ブレッドボード用ジャンパー線</li>
<li>単三電池ボックス</li>
<li>単三電池2本</li>
</ol>


<p>単三電池２本以外、すべて以下から購入可能<br/>
<a href="http://akizukidenshi.com/catalog/g/gP-09257/">&#x30D6;&#x30EC;&#x30C3;&#x30C9;&#x30DC;&#x30FC;&#x30C9; &#xFF22;&#xFF22;&minus;&#xFF11;&#xFF10;&#xFF12;: &#x30D1;&#x30FC;&#x30C4;&#x4E00;&#x822C; &#x79CB;&#x6708;&#x96FB;&#x5B50;&#x901A;&#x5546; &#x96FB;&#x5B50;&#x90E8;&#x54C1; &#x30CD;&#x30C3;&#x30C8;&#x901A;&#x8CA9;</a><br/>
<a href="http://akizukidenshi.com/catalog/g/gP-00310/">&#x96FB;&#x6C60;&#x30DC;&#x30C3;&#x30AF;&#x30B9; &#x5358;&#xFF13;&times;&#xFF12;&#x672C; &#x30EA;&#x30FC;&#x30C9;&#x7DDA;&#x30FB;&#x30D5;&#x30BF;&#x30FB;&#x30B9;&#x30A4;&#x30C3;&#x30C1;&#x4ED8;: &#x30D1;&#x30FC;&#x30C4;&#x4E00;&#x822C; &#x79CB;&#x6708;&#x96FB;&#x5B50;&#x901A;&#x5546; &#x96FB;&#x5B50;&#x90E8;&#x54C1; &#x30CD;&#x30C3;&#x30C8;&#x901A;&#x8CA9;</a><br/>
<a href="http://akizukidenshi.com/catalog/g/gI-11655/">&#xFF15;&#xFF4D;&#xFF4D;&#x8D64;&#x8272;&#xFF2C;&#xFF25;&#xFF24; &#xFF2F;&#xFF33;&#xFF24;&#xFF32;&#xFF15;&#xFF11;&#xFF11;&#xFF13;&#xFF21;: LED(&#x767A;&#x5149;&#x30C0;&#x30A4;&#x30AA;&#x30FC;&#x30C9;) &#x79CB;&#x6708;&#x96FB;&#x5B50;&#x901A;&#x5546; &#x96FB;&#x5B50;&#x90E8;&#x54C1; &#x30CD;&#x30C3;&#x30C8;&#x901A;&#x8CA9;</a><br/>
<a href="http://akizukidenshi.com/catalog/g/gC-05371/">&#x30D6;&#x30EC;&#x30C3;&#x30C9;&#x30DC;&#x30FC;&#x30C9;&#x30FB;&#x30B8;&#x30E3;&#x30F3;&#x30D1;&#x30FC;&#x30B3;&#x30FC;&#x30C9;&#xFF08;&#x30AA;&#x30B9;&minus;&#x30AA;&#x30B9;&#xFF09;&#xFF08;&#xFF11;&#xFF10;&#xFF43;&#xFF4D;&#xFF09;&#xFF12;&#xFF10;&#x672C;&#x30BB;&#x30C3;&#x30C8;: &#x30D1;&#x30FC;&#x30C4;&#x4E00;&#x822C; &#x79CB;&#x6708;&#x96FB;&#x5B50;&#x901A;&#x5546; &#x96FB;&#x5B50;&#x90E8;&#x54C1; &#x30CD;&#x30C3;&#x30C8;&#x901A;&#x8CA9;</a></p>

<h3 id="とりあえずつなげてみる">とりあえず、つなげてみる</h3>

<p>LEDライトをつけるだけであれば、ブレッドボードで使用する部分はごくわずかなので、以下の写真部分を主に使っていきます。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170327/20170327221105.jpg" alt="f:id:konoemario:20170327221105j:plain:w300" title="f:id:konoemario:20170327221105j:plain:w300" class="hatena-fotolife" style="width:300px" itemprop="image"></span></p>

<p>この写真の向きで書くと、縦5個の穴が裏で繋がっている。<br/>
A1の穴にジャンパー線で電気を流すと、B1、C1、D1、E1に電気が流れるみたい。</p>

<p>最上部と最下部の+-のラインの使い所はまだあんまりしっくりきていないので割愛。</p>

<p>ちなみに、ブレッドボードの中身はこんな感じ。
金属っぽいものがたくさん並んでいることがわかる。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170405/20170405220231.jpg" alt="f:id:konoemario:20170405220231j:plain" title="f:id:konoemario:20170405220231j:plain" class="hatena-fotolife" itemprop="image"></span></p>

<p>このブレッドボードを使用して、LEDライト、単三電池ボックスをジャンパー線で繋ぎます。<br/>
図にしてみると、以下の通りです。</p>

<p>上段のくらげみたいなものがLEDライトになります。<br/>
プラスとマイナスを意識して書いています。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170328/20170328205332.png" alt="f:id:konoemario:20170328205332p:plain:w300" title="f:id:konoemario:20170328205332p:plain:w300" class="hatena-fotolife" style="width:300px" itemprop="image"></span></p>

<p>きっちりとした理屈はさっぱりわかりませんが、電気はマイナスからプラスに流れるみたいです。<br/>
なので？電池のプラスとマイナス、LEDライトのプラスとマイナスを意識してつなげる必要があります。</p>

<p>LEDライトのプラスとマイナスですが、足が長い方がプラスで、短い方がマイナスです。</p>

<p> <span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170327/20170327223145.jpg" alt="f:id:konoemario:20170327223145j:plain:w300" title="f:id:konoemario:20170327223145j:plain:w300" class="hatena-fotolife" style="width:300px" itemprop="image"></span></p>

<p>実際にブレッドボードを使って挿してみた図は以下の通りです。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170327/20170327223118.jpg" alt="f:id:konoemario:20170327223118j:plain:w300" title="f:id:konoemario:20170327223118j:plain:w300" class="hatena-fotolife" style="width:300px" itemprop="image"></span></p>

<p>しかし、このまま電池を入れるとLEDライトが<span style="font-size: 150%"><span style="color: #ff0000">壊れる可能性があります。</span></span></p>

<p>というのも、電子部品に電気を流すにあたって、適切な電気の量があります。<br/>
小学生の頃に豆電球から伸びる配線をコンセントに入れてみたら、ボン！という音ともに電球が真っ黒になったことがあります。 <br/>
 （大変危険みたいなので、やらないほうがいいです。)</p>

<p>このへんがわかっていないと、せっかく買ったRaspBerryPiや各種部品を壊してしまいそうなので、基本的なところから学んでいきたいと思います。</p>

<p>長いので個々の記事でまとめます。</p>

<h2 id="電気ってなんだろう">電気ってなんだろう</h2>

<p><iframe src="http://tohutokonsome.hatenablog.com/embed/2017/04/09/175421" title="RaspBerryPiではじめる電子工作まとめ：電気ってなんだろう - 豆腐とコンソメ" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://tohutokonsome.hatenablog.com/entry/2017/04/09/175421">tohutokonsome.hatenablog.com</a></cite></p>

<h2 id="電圧やらなんやらを計測してみた">電圧やらなんやらを計測してみた</h2>

<p><iframe src="http://tohutokonsome.hatenablog.com/embed/2017/04/10/225420" title="電圧やら、なんやらを計測してみた：テスターの使い方 - 豆腐とコンソメ" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://tohutokonsome.hatenablog.com/entry/2017/04/10/225420">tohutokonsome.hatenablog.com</a></cite></p>

<h2 id="LEDを正しく点灯させる">LEDを正しく点灯させる</h2>

<p><iframe src="http://tohutokonsome.hatenablog.com/embed/2017/04/13/213238" title="LEDを正しく光らせる - 豆腐とコンソメ" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://tohutokonsome.hatenablog.com/entry/2017/04/13/213238">tohutokonsome.hatenablog.com</a></cite></p>

<h2 id="RaspBerryPiでステッピングモーターを動かす">RaspBerryPiで<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B9%A5%C6%A5%C3%A5%D4%A5%F3%A5%B0%A5%E2%A1%BC%A5%BF%A1%BC">ステッピングモーター</a>を動かす</h2>

<p><iframe src="http://tohutokonsome.hatenablog.com/embed/2017/04/16/150728" title="RaspBerryPiでステッピングモーターを動かす - 豆腐とコンソメ" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://tohutokonsome.hatenablog.com/entry/2017/04/16/150728">tohutokonsome.hatenablog.com</a></cite></p>

<h2 id="ラズパイZeroの初期設定">ラズパイZeroの初期設定</h2>

<p><iframe src="http://tohutokonsome.hatenablog.com/embed/2017/04/29/223718" title="RaspBerry Pi Zeroの初期設定メモ  - 豆腐とコンソメ" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://tohutokonsome.hatenablog.com/entry/2017/04/29/223718">tohutokonsome.hatenablog.com</a></cite></p>

-----
--------
AUTHOR: konoemario
TITLE: RaspBerryPiではじめる電子工作まとめ：電気ってなんだろう
BASENAME: 2017/04/09/175421
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 04/09/2017 17:54:21
CATEGORY: プログラム
CATEGORY: ラズパイ
IMAGE: https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170409/20170409173539.png
-----
BODY:
<p>RaspBerryPiではじめる電子工作まとめ
<iframe src="http://tohutokonsome.hatenablog.com/embed/2017/04/09/175440" title="RaspBerryPiではじめる電子工作まとめ - 豆腐とコンソメ" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://tohutokonsome.hatenablog.com/entry/2017/04/09/175440">tohutokonsome.hatenablog.com</a></cite></p>

<h2>電気ってなんだろう</h2>

<p>いろいろなサイトを読みつつ、自分なりの理解を書くつもりだったのですが<br/>
電気とは、みたいなことを書こうとすると、かなりややこしいのでちょっと諦めちゃいました。</p>

<p>ここでは箇条書きにとどめます。<br/>
作業を進めていく上で、理屈に合わない点が出てきたら見直していきます。</p>

<ul>
<li><p>すべての物質は原子から成り立っている。</p></li>
<li><p>原子は、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%B8%B6%BB%D2%B3%CB">原子核</a>と<strong>電子</strong>で構成されており、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%B8%B6%BB%D2%B3%CB">原子核</a>は<strong>陽子</strong>と<a class="keyword" href="http://d.hatena.ne.jp/keyword/%C3%E6%C0%AD%BB%D2">中性子</a>で構成されている。</p></li>
<li><p>電子と陽子は引かれあう。ただ陽子の方が重いので、電子が陽子に引っ張られる。</p></li>
<li><p>便宜上、<strong>電子をマイナス</strong>、<strong>陽子をプラス</strong>とする。</p></li>
<li><p>乾電池のマイナス極とプラス極をなにかしらの物体でつなげると<br/>
マイナスの電子がプラスの陽子を求めて動き出す。
 この流れを<strong><span style="font-size: 150%">電流</span></strong>と呼ぶ。<br/>
  単位はA(アンペア)。<br/>
  ただし、電流はプラスからマイナスに流れるとされている。</p></li>
<li><p>電流は電位が高い方から、低い方に流れる。<br/>
 電位の差があればあるほど、電流はたくさん流れる。</p></li>
<li><p>電位差の単位を<strong><span style="font-size: 150%">電圧</span></strong>という。単位はV(ボルト)。</p></li>
</ul>


<p>ちょっと注釈。<br/>
この電位、および電位差というものがさっぱりわかりませんでした。
勝手な見解として、電子、または陽子が、より偏っている状態のことを<br/>
電位差があるのではないかと解釈してみました。</p>

<p>乾電池を例にしてみます。<br/>
以下の図のように、あぶれたマイナスの電子が相方を求めて
プラス極へ移動しようとします。</p>

<p>図1 電位差があまりない状態 <br/>
<span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170409/20170409173539.png" alt="f:id:konoemario:20170409173539p:plain:w300" title="f:id:konoemario:20170409173539p:plain:w300" class="hatena-fotolife" style="width:300px" itemprop="image"></span></p>

<p>このとき、あぶれたマイナスの電子が多ければ多いほど<br/>
たくさんの電子がプラス極へ移動するような気がします。</p>

<p>図2 電位差があり、電流がいっぱい流れる状態      <br/>
 <span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170409/20170409173928.png" alt="f:id:konoemario:20170409173928p:plain:w300" title="f:id:konoemario:20170409173928p:plain:w300" class="hatena-fotolife" style="width:300px" itemprop="image"></span></p>

<p>このとき、図2の状態は図1より電位差があるのではないか、とそう考えました。</p>

<p>つまり、乾電池が使えなくなった状態とは、以下の図のように
すべての電子が相方である陽子を見つけてしまったことにより<br/>
電子の移動が起きなくなった状態を指すのではないかと思いました。</p>

<p>図3 電位差がなく安定した世界<br/>
<span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170409/20170409174412.png" alt="f:id:konoemario:20170409174412p:plain:w300" title="f:id:konoemario:20170409174412p:plain:w300" class="hatena-fotolife" style="width:300px" itemprop="image"></span></p>

<p>では、箇条書きに戻ります。</p>

<ul>
<li><p>電流の流れを妨げる作用として<strong><span style="font-size: 150%">抵抗</span></strong>というものがある。<br/>
単位はΩ（オーム)。</p></li>
<li><p>豆電球など、電流を流すことで仕事をする物体そのものにも抵抗がある。</p></li>
<li><p>電圧、電流、抵抗の関係は<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%AA%A1%BC%A5%E0%A4%CE%CB%A1%C2%A7">オームの法則</a>で求められる。</p></li>
</ul>


<p>以下、参考にさせていただいた記事になります。</p>

<p>電池の仕組み<br/>
<a href="https://www.panasonic.com/global/consumer/battery/academy/jp/sikumi.html#01">&#x96FB;&#x6C60;&#x306E;&#x3057;&#x304F;&#x307F; - Panasonic</a><br/>
<a href="http://pecodrive.net/?p=2587">&#x4E7E;&#x96FB;&#x6C60;&#x304C;&#x96FB;&#x6C17;&#x3092;&#x751F;&#x307F;&#x51FA;&#x3059;&#x4ED5;&#x7D44;&#x307F; | pecodrive</a></p>

<p>流れた電気はどこにいくのか<br/>
<a href="http://fchem.4rm.jp/log/nichijo/646.html">&#x4F7F;&#x3063;&#x305F;&#x96FB;&#x6C17;&#x306F;&#x3069;&#x3053;&#x3078;&#x884C;&#x304F;&#xFF1F;</a></p>

<p>電位差とは<br/>
<a href="http://www.denki-cost.com/article/denisa.html">&#x96FB;&#x4F4D;&#x5DEE;&#xFF65;&#x96FB;&#x5727;&#x306E;&#x4ED5;&#x7D44;&#x307F;&#x3010;&#x96FB;&#x6C17;&#x4EE3;&#x306F;&#x304B;&#x305B;&#x3011;</a></p>

<p>豆電球を直列より、並列で接続したほうが明るい理由<br/>
<a href="http://wakariyasui.sakura.ne.jp/p/elec/kairo/tyokuhei.html">&#x76F4;&#x5217;&#x63A5;&#x7D9A;&#x3068;&#x4E26;&#x5217;&#x63A5;&#x7D9A; &#x25A0;&#x308F;&#x304B;&#x308A;&#x3084;&#x3059;&#x3044;&#x9AD8;&#x6821;&#x7269;&#x7406;&#x306E;&#x90E8;&#x5C4B;&#x25A0;</a></p>

<p>電気とは<br/>
<a href="http://www9.wind.ne.jp/fujin/diy/denki/kiso/denka.htm">&#x96FB;&#x6C17;&#x3068;&#x306F;</a></p>

<p>電子工作をはじめるにあたっての基本<br/>
<a href="http://www.buildinsider.net/small/electronics/01">&#x96FB;&#x6D41;&#x3068;&#x96FB;&#x5727; &#x2015; &#x96FB;&#x5B50;&#x5DE5;&#x4F5C;&#x3092;&#x59CB;&#x3081;&#x308B;&#x524D;&#x306E;&#x57FA;&#x790E;&#x77E5;&#x8B58; - Build Insider</a></p>

-----
--------
AUTHOR: konoemario
TITLE: 心の処方箋
BASENAME: 2017/04/06/003000
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 04/06/2017 00:30:00
CATEGORY: 幸せについて
CATEGORY: 仕事
IMAGE: https://images-fe.ssl-images-amazon.com/images/I/51SpT1wKAPL._SL160_.jpg
-----
BODY:
<p><div class="hatena-asin-detail"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4101252246/hatena-blog-22/"><img src="https://images-fe.ssl-images-amazon.com/images/I/51SpT1wKAPL._SL160_.jpg" class="hatena-asin-detail-image" alt="こころの処方箋 (新潮文庫)" title="こころの処方箋 (新潮文庫)"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4101252246/hatena-blog-22/">こころの処方箋 (新潮文庫)</a></p><ul><li><span class="hatena-asin-detail-label">作者:</span> <a class="keyword" href="http://d.hatena.ne.jp/keyword/%B2%CF%B9%E7%C8%BB%CD%BA">河合隼雄</a></li><li><span class="hatena-asin-detail-label">出版社/メーカー:</span> 新潮社</li><li><span class="hatena-asin-detail-label">発売日:</span> 1998/05/28</li><li><span class="hatena-asin-detail-label">メディア:</span> 文庫</li><li><span class="hatena-asin-detail-label">購入</span>: 34人 <span class="hatena-asin-detail-label">クリック</span>: 301回</li><li><a href="http://d.hatena.ne.jp/asin/4101252246/hatena-blog-22" target="_blank">この商品を含むブログ (166件) を見る</a></li></ul></div><div class="hatena-asin-detail-foot"></div></div>
ごめんなさい、タイトルと画像はイメージなんだ。
読んだことはあるけれども触れないです。</p>

<p>深夜に一度目が覚めると、怒涛のように仕事の内容が浮かんで、不安で目が醒めてしまう。</p>

<p>人は睡眠取ることで、頭の中が<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C7%A5%D5%A5%E9%A5%B0">デフラグ</a>されてスッキリするのだと思うけれど、リセットされて解放されたリソースが、勝手に仕事のことを考えてしまうのは本当になんとかしたい。</p>

<p>不安について「起きてもないことなのだから、気に病む必要はないんだから、気にするな」とか、「考え方をかえよう」だとか、「自分の課題と他者の課題を分けよう」だとか、そもそもそういった気持ちや考え方の切り替えって簡単に行かないわけで。</p>

<p>前回も同じようなことを書いたのだけれども、そういった切り替えは、勇気の問題でもあったりして、ない勇気をどう振り絞るのか、ということの解はなかったりするんじゃないかなって思うわけです。</p>

<p>解はないんじゃないかって、いった直後であれですが、あるとすれば、それはもう「行動」しかない気がします。</p>

<p>頭がどうしても不安なことで、埋まってしまうのであれば、体を強制的に動かすとか。</p>

<p>仕事が不安で辞めるって選択肢を取ったとしても、その後も不安で、にっちもさっちもいかないって人は、ブログで愚痴るのもありだと思います。</p>

<p>誰か見ていると思うと、例え幻想であったとしても、なんかのきっかけになるんじゃないかと思うと救われます。</p>

<p>ただ、「行動することができる」ってのも勇気の問題であって、行動することができない人はどうしたらいいんですか？って言われると、困っちゃいますが。</p>

<p>その点、最近は「怒り」という感情に可能性を感じます。</p>

<p>「怒り」はコン<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C8%A5%ED%A1%BC%A5%EB">トロール</a>できますとか、そういった話でもないんですが、人間怒ることによって行動に繋がる気がします。</p>

<p>頭にきて周りが見えなくなってしまった、なんていいますが、これは頭の中を怒りで埋め尽くすことができるという例だと思います。</p>

<p>嫌われる勇気を持てない人は、怒ることで、そのへんがどうでもよくなります。</p>

<p>あなたは悪くない。周りが悪いんです。</p>

<p>幸せになれるかっていうと、かなり微妙なんですが。</p>

<p>仕事をついに辞めた友人も、うんざりすることが続き怒り、辞めるという行動を取りました。</p>

<p>これも<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A5%C9%A5%E9%A1%BC">アドラー</a>的にいえば、辞めるために怒ったと考えられる気がして、因果関係がわからないですが。</p>

<p>とりあえず、希望を持てるように行動して行きたいという話でした。</p>

<p>あ、これも考え方をかえようって話でした。</p>

<p>難しいですね。</p>

-----
--------
AUTHOR: konoemario
TITLE: RaspBerryPiでモーターを動かす(5):だいぶ脱線
BASENAME: 2017/04/04/220012
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 04/04/2017 22:00:12
CATEGORY: プログラム
CATEGORY: 幸せについて
CATEGORY: ラズパイ
CATEGORY: ラジコンシリーズ
-----
BODY:
<h2>前回からの続き</h2>

<p>さて、前回からの続きです。<br/>
<iframe src="http://tohutokonsome.hatenablog.com/embed/2017/04/02/174735" title="RaspBerryPiでモーターを動かす(4) - 豆腐とコンソメ" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://tohutokonsome.hatenablog.com/entry/2017/04/02/174735">tohutokonsome.hatenablog.com</a></cite></p>

<p>前回は、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%B2%E3%BC%E8%A4%EA%C0%FE%B9%E1">蚊取り線香</a>BOXに積んだバッテリーやらRaspBerryPiやら電池やらが重すぎて<br/>
<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%AD%A5%E3%A5%BF%A5%D4%A5%E9%A1%BC">キャタピラー</a>が走らないという結果に終わりました。</p>

<p>なので、とりあえず<a class="keyword" href="http://d.hatena.ne.jp/keyword/%B2%E3%BC%E8%A4%EA%C0%FE%B9%E1">蚊取り線香</a>BOXにタイヤをつければ<br/>
うまいこと引っ張れるのではないかということで、タイヤをつけていく回です。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170402/20170402174331.png" alt="f:id:konoemario:20170402174331p:plain:w300" title="f:id:konoemario:20170402174331p:plain:w300" class="hatena-fotolife" style="width:300px" itemprop="image"></span></p>

<p>しかし冷静に考えれば、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%B2%E3%BC%E8%A4%EA%C0%FE%B9%E1">蚊取り線香</a>BOXにタイヤをつけるのではなく<br/>
代わりの台車っぽい何かがあればいいのになぁと。</p>

<h2>運命の出会い</h2>

<p>こんなモヤモヤをかかえたまま、新婚旅行に行ってきました。<br/>
ドイツ・<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%DD%A1%BC%A5%E9%A5%F3%A5%C9">ポーランド</a>の旅行だったのですが、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%DD%A1%BC%A5%E9%A5%F3%A5%C9">ポーランド</a>でたまたま入ったおもちゃ屋で<br/>
運命の出会いを果たしました。</p>

<p><span style="font-size: 300%"><b>こいつです！</b></span></p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170404/20170404205528.jpg" alt="f:id:konoemario:20170404205528j:plain:w300" title="f:id:konoemario:20170404205528j:plain:w300" class="hatena-fotolife" style="width:300px" itemprop="image"></span></p>

<p>前方の車がなんか引っ張ってます。<br/>
これだよ！これ！と早速購入しました。(19<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%BA%A5%A6%A5%A9%A5%C6%A5%A3">ズウォティ</a> ≒ 600円)</p>

<p>おもわず<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%DD%A1%BC%A5%E9%A5%F3%A5%C9">ポーランド</a>から<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%DF%A5%E5%A5%F3%A5%D8%A5%F3">ミュンヘン</a>への移動機内で組み立てちゃいました。  <br/>
機内で<a class="keyword" href="http://d.hatena.ne.jp/keyword/MacBook">MacBook</a>じゃなくって、ブロック組み立てるのってかなり意識高い気がしませんか！  <br/>
心なしかキャビンアテンドさんの目線が熱かった気がします。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170404/20170404205531.jpg" alt="f:id:konoemario:20170404205531j:plain:w300" title="f:id:konoemario:20170404205531j:plain:w300" class="hatena-fotolife" style="width:300px" itemprop="image"></span></p>

<p>ところで、このブロック、巷で話題の<a class="keyword" href="http://d.hatena.ne.jp/keyword/LEGO">LEGO</a>ブロックではなく「COBI」というブロックです。<br/>
<a class="keyword" href="http://d.hatena.ne.jp/keyword/LEGO">LEGO</a>に比べわりとお求め安いお値段になっている気がします。</p>

<p>この「COBI」はミリタリーものをテーマに扱っているみたいで、
<a class="keyword" href="http://d.hatena.ne.jp/keyword/Amazon">Amazon</a>とかで調べると、以下のような戦車のブロックとかいっぱいでてきます。</p>

<p><div class="hatena-asin-detail"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B01MXWBYJ1/hatena-blog-22/"><img src="https://images-fe.ssl-images-amazon.com/images/I/61AuyiryxSL._SL160_.jpg" class="hatena-asin-detail-image" alt="Cobi Small Army ミリタリーブロック WWII 第二次世界大戦 ソビエト軍 T-34/85 中戦車 T-34/85 m 1944 (New Version) #2476 【COBI日本正規総代理店】" title="Cobi Small Army ミリタリーブロック WWII 第二次世界大戦 ソビエト軍 T-34/85 中戦車 T-34/85 m 1944 (New Version) #2476 【COBI日本正規総代理店】"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B01MXWBYJ1/hatena-blog-22/">Cobi Small Army ミリタリーブロック WWII 第二次世界大戦 ソビエト軍 T-34/85 中戦車 T-34/85 m 1944 (New Version) #2476 【COBI日本正規総代理店】</a></p><ul><li><span class="hatena-asin-detail-label">出版社/メーカー:</span> DANAR INTERNATIONAL デイナー・インターナショナル</li><li><span class="hatena-asin-detail-label">メディア:</span> おもちゃ＆ホビー</li><li><a href="http://d.hatena.ne.jp/asin/B01MXWBYJ1/hatena-blog-22" target="_blank">この商品を含むブログを見る</a></li></ul></div><div class="hatena-asin-detail-foot"></div></div></p>

<p>ただ、このCOBIブロックを購入する直前に、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A5%A6%A5%B7%A5%E5%A5%D3%A5%C3%A5%C4">アウシュビッツ</a>、ビルケナウ収容所に行ってきて<br/>
つらい戦争の歴史を振り返っていただけに、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%DD%A1%BC%A5%E9%A5%F3%A5%C9">ポーランド</a>のおもちゃ屋にミリタリーを扱うブロックが
たくさん置かれているのは、なんだかな、と思っちゃいました。<br/>
ミリタリーで遊ぶのと戦争そのものは別っちゃ別ですけれども気持ちの問題ですかね。<br/>
興奮して買っている自分が言うと本当に意味がないのですが。</p>

<p>※ビルケナウ収容所  <br/>
<span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170404/20170404210730.jpg" alt="f:id:konoemario:20170404210730j:plain:w300" title="f:id:konoemario:20170404210730j:plain:w300" class="hatena-fotolife" style="width:300px" itemprop="image"></span></p>

<p>※収容された方の靴<br/>
<span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170404/20170404210716.jpg" alt="f:id:konoemario:20170404210716j:plain:w300" title="f:id:konoemario:20170404210716j:plain:w300" class="hatena-fotolife" style="width:300px" itemprop="image"></span></p>

<h2>別れ、そして出会い</h2>

<p>さて、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%DD%A1%BC%A5%E9%A5%F3%A5%C9">ポーランド</a>・ドイツの移動はベルギーを経由したため
６時間かかったのですが、６時間もあれば人は冷静になれます。</p>

<p>COBIブロック買ったはいいけれども、RaspBerryPiとどうやって接続すんだよこれ<br/>
帰りの荷物増えるじゃねえかと憤っていました。</p>

<p>そんな気持ちも<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%DF%A5%E5%A5%F3%A5%D8%A5%F3">ミュンヘン</a>でビールを２杯飲み終わる頃にはすっきりしていましたが。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170404/20170404214326.jpg" alt="f:id:konoemario:20170404214326j:plain:w300" title="f:id:konoemario:20170404214326j:plain:w300" class="hatena-fotolife" style="width:300px" itemprop="image"></span></p>

<p>ほろ酔い気分でビアホールから歩いている途中<br/>
また見つけてしまいました。</p>

<p><span style="font-size: 300%"><b>今度こそ運命の相手です！</b></span></p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170404/20170404214456.jpg" alt="f:id:konoemario:20170404214456j:plain:w300" title="f:id:konoemario:20170404214456j:plain:w300" class="hatena-fotolife" style="width:300px" itemprop="image"></span></p>

<p><span style="font-size: 200%">ごめん。<br/>
結局レゴブロックなんだ。</span></p>

<p>買ったのは、レゴブロックの中でも<a class="keyword" href="http://d.hatena.ne.jp/keyword/TECHNIC%A5%B7%A5%EA%A1%BC%A5%BA">TECHNICシリーズ</a>と呼ばれるもので、<br/>
一個一個のブロックが細かいのが特徴的で細やかな挙動や、いろいろな仕掛けがあるとのことです。</p>

<p>買った決め手としては、なんかかっこよかったから。</p>

<p>帰国して家についてから早速組み立ててみました。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170404/20170404214459.jpg" alt="f:id:konoemario:20170404214459j:plain:w300" title="f:id:konoemario:20170404214459j:plain:w300" class="hatena-fotolife" style="width:300px" itemprop="image"></span></p>

<p>ごらんのように、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%DD%A1%BC%A5%E9%A5%F3%A5%C9">ポーランド</a>で買った<span style="color: #5ed361">COBI</span>より、ドイツで買った<span style="color: #ff0000"><a class="keyword" href="http://d.hatena.ne.jp/keyword/LEGO">LEGO</a></span>の方が圧倒的です。<br/>
(他意はないです。)</p>

<p>ただ、<span style="color: #5ed361">COBI</span>だろうが<span style="color: #ff5252"><a class="keyword" href="http://d.hatena.ne.jp/keyword/LEGO">LEGO</a></span>だろうが、</p>

<p><span style="font-size: 200%">  RasbPerryPiとどうやってつなげるんだろう。</span><br/>
という根本的な疑問は解消されないまま次回に行きたいと思います。</p>

-----
--------
AUTHOR: konoemario
TITLE: RaspBerryPiでモーターを動かす(4)
BASENAME: 2017/04/02/174735
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 04/02/2017 17:47:35
CATEGORY: プログラム
CATEGORY: ラズパイ
CATEGORY: ラジコンシリーズ
IMAGE: https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170311/20170311000933.jpg
-----
BODY:
<h2>前回の続き</h2>

<p><iframe src="http://tohutokonsome.hatenablog.com/embed/2017/03/11/001512" title="RaspBerryPiでモーターを動かす(3):圧倒的力不足 - 豆腐とコンソメ" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://tohutokonsome.hatenablog.com/entry/2017/03/11/001512">tohutokonsome.hatenablog.com</a></cite></p>

<p>だいぶ日が空いてしまいましたが、前回からの続きです。</p>

<p>前回は、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%BF%A5%DF%A5%E4">タミヤ</a>の楽しい工作シリーズを使ってRaspBerryPiと無理やり接続し、走らせるところまで進めました。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170311/20170311000933.jpg" alt="f:id:konoemario:20170311000933j:plain:w300" title="f:id:konoemario:20170311000933j:plain:w300" class="hatena-fotolife" style="width:300px" itemprop="image"></span></p>

<p>しかし、モーターは回るものの、バッテリーやら、電池やら荷物が重すぎてタイヤが回らないという残念な結果になってしまいました。</p>

<p>これについては、単純にモーターを回すパワーが足りないのでないか、ということで今回は電池を増やしてみたいと思います。</p>

<h2>モータードライバーという存在</h2>

<p>電池を増やす際にふと気になったことがあります。<br/>
というのは、電池とモーターを直接つないだときと<br/>
<span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170402/20170402170803.png" alt="f:id:konoemario:20170402170803p:plain" title="f:id:konoemario:20170402170803p:plain" class="hatena-fotolife" itemprop="image"></span></p>

<p>モータードライバーを経由して電池とモーターをつなげたときとでは、タイヤの回る速度が異なるのです。<br/>
<span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170402/20170402170805.png" alt="f:id:konoemario:20170402170805p:plain" title="f:id:konoemario:20170402170805p:plain" class="hatena-fotolife" itemprop="image"></span></p>

<p>どちらが速いかというと、モーターと電池を直接つないだときの方が圧倒的に早く、モータードライバを経由した途端、回転速度がかなり落ちるのです。</p>

<p>いろいろとググってみたところ、モータードライバーを通すと電圧が低くなるとのことで、モーターに伝わる電気の量が少なくなってしまうみたいです。</p>

<p>※参考にさせていただいたサイト<br/>
<a href="http://www.hiramine.com/physicalcomputing/arduino/motordriver.html">DC&#x30E2;&#x30FC;&#x30BF;&#x3092;&#x52D5;&#x304B;&#x3059;&#xFF08;&#x30E2;&#x30FC;&#x30BF;&#x30C9;&#x30E9;&#x30A4;&#x30D0;&#x4F7F;&#x7528;&#xFF09;</a></p>

<p>かといってモータードライバーはモーターをRaspBerryPiから制御するために必要なので外すことはできません。<br/>
(正確には、今の自分の知識では外すという選択肢がありません)</p>

<p>話がそれてしまいましたが、モーターに伝わる電気に量が少なくなるのであれば、電池の量を増やせばいいということで、２本の電池から倍の４本の電池で試してみることにします。</p>

<p>※本来であれば、電圧、電流、抵抗といった電子工作に必要であろう知識を、私自身すっ飛ばしています。<br/>
どこかの回で、自分なりに整理していきたいと思います。</p>

<h2>電池を増やす</h2>

<p>さて、電池を増やすにあたって必要となるのが電池ケースです。近所の島忠（ホームセンター）を見にいったところ、残念なことに単３電池２本の電池ケースしかありません。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170402/20170402164103.jpg" alt="f:id:konoemario:20170402164103j:plain:w300" title="f:id:konoemario:20170402164103j:plain:w300" class="hatena-fotolife" style="width:300px" itemprop="image"></span></p>

<p>仕方がないので、ハンダごでも購入し、電池ケースをつなげることにしました。<br/>
ハンダごては、それこそ中学の授業以来でしたが、なんとかなりました。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170402/20170402172526.jpg" alt="f:id:konoemario:20170402172526j:plain:w300" title="f:id:konoemario:20170402172526j:plain:w300" class="hatena-fotolife" style="width:300px" itemprop="image"></span></p>

<h2>走れキャタピラカー（リベンジ)</h2>

<p>電池を倍にしたところで、いざ！</p>

<iframe width="420" height="315" frameborder="0" allowfullscreen="" src="//www.youtube.com/embed/hrb6Bsdf1ms"></iframe>


<p><br><a href="https://youtube.com/watch?v=hrb6Bsdf1ms">走れキャタピラカー（リベンジ)</a></p>

<p><span style="font-size: 200%"><b>うん、やっぱりだめでした。</b>  </span></p>

<p>以前よりは、引っ張ろうという気概が感じられるのですが、どうも<a class="keyword" href="http://d.hatena.ne.jp/keyword/%B2%E3%BC%E8%A4%EA%C0%FE%B9%E1">蚊取り線香</a>BOXが重くって前に進むことができなさそうです。</p>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/%B2%E3%BC%E8%A4%EA%C0%FE%B9%E1">蚊取り線香</a>BOXを引きちぎることができれば、キャタピラカーは走り出すことができるのでしょうが、それと同時に走るための電力を失うという、人生の難しさを表している構図になってしまいました。</p>

<p>とりあえずの策ですが、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%B2%E3%BC%E8%A4%EA%C0%FE%B9%E1">蚊取り線香</a>BOXにタイヤをつけることで、キャタピラカーの負担が減りそうです。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170402/20170402174331.png" alt="f:id:konoemario:20170402174331p:plain:w300" title="f:id:konoemario:20170402174331p:plain:w300" class="hatena-fotolife" style="width:300px" itemprop="image"></span></p>

<p>次回はタイヤをつけていきます。</p>

-----
--------
AUTHOR: konoemario
TITLE: システム障害に寛容になりたい
BASENAME: 2017/03/22/224412
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 03/22/2017 22:44:12
CATEGORY: プログラム
-----
BODY:
<p>システム障害が発生した場合、それが利用ユーザーに影響を及ぼす場合、ユーザーにWebサイトなり、詫状なりでお知らせすることは一般的だと思う。</p>

<p>※参考までに、「システム障害　お詫び」検索したらでてきたサイト</p>

<p><a href="http://www.aplus.co.jp/notes/2016/20160115_01.html">&#x91CD;&#x8981;&#x306A;&#x304A;&#x77E5;&#x3089;&#x305B; &#x300C;&#x30AD;&#x30E3;&#x30C3;&#x30B7;&#x30F3;&#x30B0;&#x30B5;&#x30FC;&#x30D3;&#x30B9;&#x306E;&#x5185;&#x5BB9;&#x306B;&#x3064;&#x3044;&#x3066;&#x300D;&#x304A;&#x3088;&#x3073;&#x300C;&#x30AD;&#x30E3;&#x30C3;&#x30B7;&#x30F3;&#x30B0;&#x30B5;&#x30FC;&#x30D3;&#x30B9;&#x5185;&#x5BB9;&#x306E;&#x304A;&#x77E5;&#x3089;&#x305B;&#x300D;&#x8A18;&#x8F09;&#x5185;&#x5BB9;&#x4E0D;&#x5099;&#x306B;&#x95A2;&#x3059;&#x308B;&#x304A;&#x77E5;&#x3089;&#x305B;&#x3068;&#x304A;&#x8A6B;&#x3073; | &#x30A2;&#x30D7;&#x30E9;&#x30B9; &#x65B0;&#x751F;&#x9280;&#x884C;&#x30B0;&#x30EB;&#x30FC;&#x30D7;</a></p>

<p>こんな簡素な文書の裏には、何名かの<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B7%A5%B9%A5%C6%A5%E0%A5%A8%A5%F3%A5%B8%A5%CB%A5%A2">システムエンジニア</a>の屍が潜んでいるように思える。少なくとも私の会社であれば、大事になっている。<br/>
これは、私の会社の文化というよりかは、金融系という業種が特別面倒なのではないかと思っているが、話を続けたい。</p>

<p>ここでいう大事とは、障害復旧にかかる作業（影響範囲の特定や、障害対応策）ではない。</p>

<p>その後の<a class="keyword" href="http://d.hatena.ne.jp/keyword/%C7%D4%C0%EF%BD%E8%CD%FD">敗戦処理</a>である。</p>

<p>障害がなぜ起きたのかを事細かに役職のある方々に説明し、根本的な原因を説明し、再発防止策を考案する必要がある。</p>

<p>そしてなにより厄介なのが、この再発防止策である。</p>

<p>再発防止策は障害の根本的原因に対応する形で考えるものかと思うが、この障害の根本的原因っていうのは、根本的というだけあって根が深い。</p>

<p>ユーザーコン<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C8%A5%ED%A1%BC%A5%EB">トロール</a>ができなくて、変更仕様が相次いだ結果、開発期間が短くなったとか、チーム作りがうまくいかなくって効率的に開発できなかったとか、各部門の連携に問題があったとか、ことマネジメントっぽい領域に入ってくると、それに対応する再発防止策っていうのは非常に難しい。</p>

<p>管理者側からすれば、マネジメントに問題があるといわれるよりかは、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B7%A5%B9%A5%C6%A5%E0%B3%AB%C8%AF">システム開発</a>者に責任があるといったほうがもちろん楽である。</p>

<p>結果的に、根本的原因を隠蔽し、それよりかすこし浅い層、例えばレアケースをあげることができなかったとし、チェックシートを作って、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B7%A5%B9%A5%C6%A5%E0%B3%AB%C8%AF">システム開発</a>時には毎回それを見ようみたいな、形骸化するゴミみたいな文書が作成されることになる。</p>

<p>もちろん、障害が起こりやすいとある業務において、障害が発生しやすいパターンというものはたしかにあるので、一概に上記対応が無駄というわけではない。<br/>
ただできれば、そういった特殊な業務は、そもそも業務設計としてなくすべきなんじゃないかと思う。<br/>
それを常に考慮してシステムが対応していく、ということが間違っている気がする。<br/>
腐った業務からは、腐ったシステムしか生まれない。</p>

<p>話がそれた。</p>

<p>こうして、障害が発生した場合、お偉い方に説明を行い、意味のない再発防止策に頭を悩ませなければいけない。<br/>
特に我が社では、お偉い方の説明のための打ち合わせみたいなのが頻繁に行われるだけあって、かなりの時間を取られるのである。</p>

<p>こういったことをしていると、そもそもこの障害は誰に迷惑をかけたのだろうか、損失はどれくらいあるのだろうか、と考えてしまう。</p>

<p>障害によって発生する大半の事象は、顧客にとってどうでもいいことのような気がする。</p>

<p>極一部のユーザーからは、非難されるかもしれないが、そういった非難が起こらないようにするシステム投資と、そのユーザーを切って、浮いたお金で、もっと大多数を幸せにするシステム投資とではどちらを取るべきかなんてのは明白な気がする。<br/>
ようは、０％から９０％まで対応するのは簡単だけれども、９０％から１００％にするのは途端に難しくなるっていう話と一緒だと思う。</p>

<p>これは、サービスを提供する側の視点であるが、完璧なシステムを作るのではなく、目的をある程度達成できるゆるいシステムが許容されるサービスっていいなって思う。</p>

<p>なので、自分がサービスを利用する際は、ある程度の不具合は穏やかな気持ちで受け入れたいと思う。</p>

<p>なので、ムラムラして自宅に帰った夜にDMMの月額アダルト動画になぜかログインできなくっても決してイライラはしない。</p>

-----
--------
AUTHOR: konoemario
TITLE: おっさんになった
BASENAME: 2017/03/11/181911
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 03/11/2017 18:19:11
CATEGORY: 幸せについて
-----
BODY:
<p>休日の夕方から、こんにちは。<br/>
安いビールを飲みながら、日記を書いているよ。</p>

<h3>おっさんになった</h3>

<p>まだ、高校生のころ、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%C2%BC%BE%E5%BD%D5%BC%F9">村上春樹</a>の「<a class="keyword" href="http://d.hatena.ne.jp/keyword/%B9%F1%B6%AD%A4%CE%C6%EE%A1%A2%C2%C0%CD%DB%A4%CE%C0%BE">国境の南、太陽の西</a>」、「<a class="keyword" href="http://d.hatena.ne.jp/keyword/%CD%D3%A4%F2%A4%E1%A4%B0%A4%EB%CB%C1%B8%B1">羊をめぐる冒険</a>」を読んだ。<br/>
何が刺さったのかわからないんだけれど、面白いと思った。
僕も大人になったら、女性やお金に困ることはないんだけれども、不思議な悩みを抱えながら、文化的雪かきをする人間になるのかなぁ、なんて思っていたし、憧れていたような気もする。</p>

<p>友人は<a class="keyword" href="http://d.hatena.ne.jp/keyword/%C2%BC%BE%E5%BD%D5%BC%F9">村上春樹</a>が、あの顔であの内容を書いてると思うとダメだわって言ってたけれども、その読書である私もあの顔のカテゴリーに入るわけで、顔は関係ないじゃないか！と言いたいところです。</p>

<p>でも、実際のところ、あの顔の僕の現実は、仕事はストレスフル、辞めたらお金がなくなって暮らしてけない、アイドルにの握手会で一喜一憂、みたいな日々を送っているわけなんですよ。<br/>
唯一、当てはまるとすれば、クソみたいな仕事がある種雪かきみたいなもんというところだけ。<br/>
同じ雪かきならピンちゃんと性的雪かきをしたいです。</p>

<p>さて、そんな歳のとりかたになってしまったのだけれども、他にも変化したところを上げていきたいと思う。</p>

<h3>会社生活での変化</h3>

<p>会社の人とは、あんまり関わりたくないって思っていた。  飲み会とかも行きたくないし、自分は自分の好きなことをするぜって思ってた。</p>

<p>でも、仕事をする上で気にすることはほんとに人のことばっかりで、会議の内容以上に、メンバーがやりやすいのかとか、そんなことばっかり気にするようになった。
だから、ちょっとした時間で雑談するとか、声をかけるとか、飲み会にいくとか、そういったこともするようになった。</p>

<p>こういうのって、なんというかスタイリッシュじゃなくって泥臭い部分な気もしてたけれども、最近は必要だと思うようになった。
これがやりたいことかっていうのはまた別の話。</p>

<h3>趣味の変化</h3>

<p>旅行を楽しめるようになった。<br/>
旅行先に欲しいものなんてないし、遠出までしてしたいことなんてあんまりなかった。<br/>
カジノがあったり、タイのゴーゴーバーみたいなうひょーみたいな場所があれば行く気がまだしてた。</p>

<p>でも最近は、旅行先の料理だったり、ビール飲んでまったりするだけで楽しめるようになった。</p>

<p>こうやって書いてると、ストレスフルで飲む機会が多くなって、ビールが好きになって、旅行先でもよく飲むようになって、アルコールが回って、感受性が豊かになって、その土地の風景を楽しめているだけ、という因果関係に気づくけれども、それもでもいいと思う。</p>

<h3>体臭が気になるようになった</h3>

<p>こちらは深刻な問題。<br/>
無臭で快便だったわたくしですが、最近足が臭くなってきた。<br/>
また、便秘気味でお腹がいつもすっきりしない。<br/>
全部ストレスのせいだと思っている。</p>

<h3>終わりに</h3>

<p>いまから新婚旅行に行ってくる。<br/>
行き先はドイツ。だから<a class="keyword" href="http://d.hatena.ne.jp/keyword/%C2%BC%BE%E5%BD%D5%BC%F9">村上春樹</a>のことを思い出したのだろうと思う。</p>

-----
--------
AUTHOR: konoemario
TITLE: RaspBerryPiでモーターを動かす(3):圧倒的力不足
BASENAME: 2017/03/11/001512
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 03/11/2017 00:15:12
CATEGORY: プログラム
CATEGORY: ラズパイ
CATEGORY: ラジコンシリーズ
IMAGE: https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170306/20170306222626.jpg
-----
BODY:
<h3>前回からの続き</h3>

<p><iframe src="http://tohutokonsome.hatenablog.com/embed/2017/03/06/223721" title="RaspBerryPiでモーターを動かす(2) - 豆腐とコンソメ" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://tohutokonsome.hatenablog.com/entry/2017/03/06/223721">tohutokonsome.hatenablog.com</a></cite></p>

<p>さて前回からの続きです。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170306/20170306222626.jpg" alt="f:id:konoemario:20170306222626j:plain:w300" title="f:id:konoemario:20170306222626j:plain:w300" class="hatena-fotolife" style="width:300px" itemprop="image"></span></p>

<p>こいつを組み立てて行きます。<br/>
<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%DF%A5%CB%BB%CD%B6%EE">ミニ四駆</a>を最後にこういったものを組み立てたことなかったのですが、なんとかなるだろうという思いで、やってみました。</p>

<p>・<br/>
・<br/>
・<br/>
・<br/>
・</p>

<p>なんとかなりました。２時間ぐらいかかったかもしれない。<br/>
ピースしてるのは、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A4%C7%A4%F3%A4%D1%C1%C8.inc">でんぱ組.inc</a>のみりんちゃんだよ！</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170309/20170309212347.jpg" alt="f:id:konoemario:20170309212347j:plain:w300" title="f:id:konoemario:20170309212347j:plain:w300" class="hatena-fotolife" style="width:300px" itemprop="image"></span></p>

<p>ちゃんと走ります。<br/>
なんか、うまいこと曲がってるのは、みりんちゃんがキャタピラに巻き込まれているおかげかと思われます。ありがとうみりんちゃん！</p>

<iframe width="420" height="315" frameborder="0" allowfullscreen="" src="//www.youtube.com/embed/2voCERjEM80"></iframe>


<p><br><a href="https://youtube.com/watch?v=2voCERjEM80">楽しい工作</a></p>

<p>これだけでも、童心を思い出し、テンションがあがります。
とはいえ、モーターと電池を積んでいるだけなので、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%DF%A5%CB%BB%CD%B6%EE">ミニ四駆</a>となんらかわりません。<br/>
ここから、RaspBerryPiとつなげていきます。</p>

<h3>RaspBerryPiとつなげる</h3>

<p>キャタピラカーの完成を10分ほど楽しんだら、RaspBerryPiにつなげるため、解体作業を行います。<br/>
この辺の切り替えの早さに、大人になったぜ、という感想を持ちました。</p>

<p>ただ、作業といっても、前回モーターを動かすことには成功しているので、キャタピラカーのモーターを、前回仕様に変更するだけです。　</p>

<p>実際につなげてみると、以下になります。<br/>
車輪がちゃんと回りました。</p>

<iframe width="420" height="315" frameborder="0" allowfullscreen="" src="//www.youtube.com/embed/r2F3vy4yE3M"></iframe>


<p><br><a href="https://youtube.com/watch?v=r2F3vy4yE3M">楽しい工作(2)</a></p>

<h3>RaspBerryPi用のバッテリーを買う</h3>

<p>現在、RaspBerryPiは家庭用コンセントから電源を供給しています。<br/>
このままでは、延長コード引っ張りながら走ることになってしまいます。<br/>
なので、RaspBerryPi用にバッテリーを購入しました。</p>

<p><div class="hatena-asin-detail"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00N6FYAX4/hatena-blog-22/"><img src="https://images-fe.ssl-images-amazon.com/images/I/31X8uwHq1gL._SL160_.jpg" class="hatena-asin-detail-image" alt="HIDISC スマートフォン用モバイルバッテリー　6600mAh（ホワイト）HIDISC急速充電モバイルバッテリー ML-HDMB6600IWH" title="HIDISC スマートフォン用モバイルバッテリー　6600mAh（ホワイト）HIDISC急速充電モバイルバッテリー ML-HDMB6600IWH"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00N6FYAX4/hatena-blog-22/">HIDISC スマートフォン用モバイルバッテリー　6600mAh（ホワイト）HIDISC急速充電モバイルバッテリー ML-HDMB6600IWH</a></p><ul><li><span class="hatena-asin-detail-label">出版社/メーカー:</span> <a class="keyword" href="http://d.hatena.ne.jp/keyword/%BC%A7%B5%A4%B8%A6%B5%E6%BD%EA">磁気研究所</a></li><li><span class="hatena-asin-detail-label">メディア:</span> エレクトロニクス</li><li><a href="http://d.hatena.ne.jp/asin/B00N6FYAX4/hatena-blog-22" target="_blank">この商品を含むブログを見る</a></li></ul></div><div class="hatena-asin-detail-foot"></div></div></p>

<p>2.5Aが理想という情報を見たのですが、2.1A程度あれば問題ないみたいです。</p>

<h3>問題発生</h3>

<p> 問題というか、冷静に考えれば当たり前のことなんですが、</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170309/20170309212347.jpg" alt="f:id:konoemario:20170309212347j:plain:w300" title="f:id:konoemario:20170309212347j:plain:w300" class="hatena-fotolife" style="width:300px" itemprop="image"></span></p>

<p><span style="font-size: 150%">↑に↓これらのパーツを積む必要があります。</span></p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170306/20170306221652.jpg" alt="f:id:konoemario:20170306221652j:plain:w300" title="f:id:konoemario:20170306221652j:plain:w300" class="hatena-fotolife" style="width:300px" itemprop="image"></span></p>

<p><span style="font-size: 150%">パーツ達</span></p>

<pre class="code" data-lang="" data-unlink>・電池
・ブレッドボード
・RaspBerryPi
・バッテリー
</pre>


<p>つまり、みりんちゃんが座っているスペースなぞ、取っている余裕はないのです。<br/>
いろいろと試行錯誤した結果、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%B2%E3%BC%E8%A4%EA%C0%FE%B9%E1">蚊取り線香</a>の箱に、いろいろと乗せて、キャタピラカーがそれを引っ張るという形に落ち着きました。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170311/20170311000933.jpg" alt="f:id:konoemario:20170311000933j:plain:w300" title="f:id:konoemario:20170311000933j:plain:w300" class="hatena-fotolife" style="width:300px" itemprop="image"></span></p>

<p>もうここまでくると、完成は目の前です。</p>

<h3>走れキャタピラカー</h3>

<p><iframe width="459" height="344" src="https://www.youtube.com/embed/gtN1fkAI-mA?feature=oembed" frameborder="0" allowfullscreen></iframe><cite class="hatena-citation"><a href="https://youtu.be/gtN1fkAI-mA">youtu.be</a></cite></p>

<p><span style="font-size: 300%">うん、だめでした。</span></p>

<p>次回に続きます。</p>

<p><iframe src="http://tohutokonsome.hatenablog.com/embed/2017/04/02/174735" title="RaspBerryPiでモーターを動かす(4) - 豆腐とコンソメ" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://tohutokonsome.hatenablog.com/entry/2017/04/02/174735">tohutokonsome.hatenablog.com</a></cite></p>

-----
--------
AUTHOR: konoemario
TITLE: 不安で眠れない夜は、怖い話を聴く
BASENAME: 2017/03/07/000750
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 03/07/2017 00:07:50
CATEGORY: 幸せについて
-----
BODY:
<h3>日記</h3>

<p>この、月曜に無事出社できた、という記事は何回書けばいいんだろう、と思う今日この頃です。<br/>
日曜の夜の辛さは緩和されることはなく、日々重くのしかかるばかりです。<br/>
だからこそ、月曜に休まずに出社できた、というこのひとつだけのことでも、日記として書きたくなるわけです。</p>

<p>思い返せば、学生のころから明日行きたくないな、と思うことは多々あったはずなので、今この状態が目新しいことかといえば、そうでもありません。<br/>
ただ昔は、嫌なこと、それこそ学校が終われば、ひゃっほうという爽快感に溢れていました。<br/>
それが、今ではどうでしょう。21時に会社を出ようが、19時に会社を出ようが、何か心が死んでいる気がします。</p>

<p>今回も<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A5%C9%A5%E9%A1%BC%BF%B4%CD%FD%B3%D8">アドラー心理学</a>の考え方を借りるのであれば、過去や未来の不安に囚われるあまり、現在を生きていない、にあたるのかと思います。<br/>
ただこれも、「気になること」を気にしないようにするってどうしようもなく難しいですよね。<br/>
方法論的なことをいえば、今以外のことを考えられないような状況に持って行く、それこそ目一杯走るだとか、筋トレするとかってのがそれにあたるのかと思います。</p>

<p>ただ学生のころは、今以外のことを考えられないような状況に意図的に持って行く必要もなく、爽快感や幸福感を感じられていたのですが、それはなんででしょうかね。<br/>
ぱっと思いつくことといえば、何か夢中になることが多くって、それのおかげで過去・未来の不安を覆い隠していたのでしょうか。 <br/>
そうすると、今現在、夢中になることがないのはなんでだろうかっていう話になるのですが。</p>

<p>これも、仕事のストレスで、無気力になり、興味があったことにも、興味がなくなるという循環だと思っているので、ますます悪い循環に入っていっている気がします。</p>

<h3>本題</h3>

<p>日記部分にも書きましたが、結局のところ不安は、すでに終わった、もしくはこれから起こるかもわからない部分について、発生します。<br/>
つまり、今現在悩んで、苦しむことについてはまったくといっていいほど意味がないのです。<br/>
不安など頭の片隅に追いやって、睡眠をとるなり、楽しいことを全力で楽しむことのほうが、不安に対する最善の対応かと思います。<br/>
が、そうはいっても、不安に支配された状態から脱することは容易ではありません。</p>

<p>不幸を噛みしめるようなブログを読むのもありっちゃありなのですが、ここではあえて別の方法を提案します。</p>

<p>それは、タイトルからネタバレしてますが、<a class="keyword" href="http://d.hatena.ne.jp/keyword/Youtube">Youtube</a>等で怖い話を聴くことです。</p>

<p>恐怖は、今抱えている不安を上塗りしてくれます。</p>

<p>なんかずっと聞いていると、布団にくるまっているだけで少し幸せを感じます。</p>

<p>日曜の夜や、会社をさぼってしまった日の夜など、ぜひ実践してみてください。</p>

<p>なんの解決にもなりませんが。</p>

-----
--------
AUTHOR: konoemario
TITLE: RaspBerryPiでモーターを動かす(2)
BASENAME: 2017/03/06/223721
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 03/06/2017 22:37:21
CATEGORY: プログラム
CATEGORY: ラズパイ
CATEGORY: ラジコンシリーズ
IMAGE: https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170306/20170306215556.jpg
-----
BODY:
<h3>　前回からの続き</h3>

<p><iframe src="http://tohutokonsome.hatenablog.com/embed/2017/03/05/200409" title="RaspBerryPiでモーターを動かす(1) - 豆腐とコンソメ" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://tohutokonsome.hatenablog.com/entry/2017/03/05/200409">tohutokonsome.hatenablog.com</a></cite></p>

<p>モーターを動かすにあたって、まずジャンパー線を使って、RaspBerryPiとモーターやらをつなげていく必要があります。</p>

<p>以下、写真の手前部分に、いくつものピンが並んでいるのですが、そこにひとつひとつ番号が振られているみたいです。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170306/20170306215556.jpg" alt="f:id:konoemario:20170306215556j:plain:w300" title="f:id:konoemario:20170306215556j:plain:w300" class="hatena-fotolife" style="width:300px" itemprop="image"></span></p>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/Python">Python</a>コードからは、各ピンについて信号を出力する、しないを指定するだけなので、コート自体は非常にシンプルなものになっています。</p>

<pre class="code" data-lang="" data-unlink>import time, wiringpi as pi
#wiringpi はピンを扱うためのライブラリっぽい

#モータピンの番号を指定する
motor_pin1 = 23
motor_pin2 = 24

#初期化
pi.wiringPiSetupGpio()
pi.pinMode( motor_pin1, 1 )
pi.pinMode( motor_pin2, 1 )

#動かす
while True:
    pi.digitalWrite( motor_pin1, 1 )
    pi.digitalWrite( motor_pin2, 0)
    time.sleep(1)
</pre>


<p>部品をごにょごにょするほうが時間がかかっています。</p>

<p>部品をつなげる際には、以下写真のようにRaspBerryPi本体と部品をハンダゴテ等で直接つなげる方法もありますが、なかなかハードルも高く、くっつけたり、外したりがしにくいみたいです。
（ラジコンが作りたい、となると最終的にはハンダゴテは避けて通れない気がしています。)</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170306/20170306220831.jpg" alt="f:id:konoemario:20170306220831j:plain:w300" title="f:id:konoemario:20170306220831j:plain:w300" class="hatena-fotolife" style="width:300px" itemprop="image"></span></p>

<p>そこで使うのが、ブレッドボードなるものです。</p>

<p>以下の写真の配線はあくまでイメージですが、ブレッドボードにジャンパー線を刺すことで、各部品をつなげることができるのです。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170306/20170306220835.jpg" alt="f:id:konoemario:20170306220835j:plain:w300" title="f:id:konoemario:20170306220835j:plain:w300" class="hatena-fotolife" style="width:300px" itemprop="image"></span></p>

<p>肝心の配線図ですが、私は雑誌をそのまんま参考にしたのですが、このへんの知識はどうやって取得するのかがよくわかっていません。
中学生の技術の時間に、電池の直列が〜みたいな記憶がうっすらあるだけで、何もわかっていません。</p>

<p>が、そんな状態でも、雑誌の情報そのままで配線を組むことができました。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170306/20170306221652.jpg" alt="f:id:konoemario:20170306221652j:plain:w300" title="f:id:konoemario:20170306221652j:plain:w300" class="hatena-fotolife" style="width:300px" itemprop="image"></span></p>

<p>そして、奥さんにモーターを持ってもらい 、モーターを動かす<a class="keyword" href="http://d.hatena.ne.jp/keyword/Python">Python</a>コードを打鍵すると、これが↓</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170306/20170306221655.jpg" alt="f:id:konoemario:20170306221655j:plain:w300" title="f:id:konoemario:20170306221655j:plain:w300" class="hatena-fotolife" style="width:300px" itemprop="image"></span></p>

<p><span style="font-size: 200%">回ります！</span></p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170306/20170306221700.jpg" alt="f:id:konoemario:20170306221700j:plain:w300" title="f:id:konoemario:20170306221700j:plain:w300" class="hatena-fotolife" style="width:300px" itemprop="image"></span></p>

<p>あのですね、<span style="font-size: 200%">ものすごく楽しいです。</span></p>

<p>新人のころにいたパートナー会社の年配の方が<br/>
「昔はパンチカードにプログラムを書いていて、そのプログラムの処理に応じて目の前のテープが動いてたんだよ（うろ覚え）」と言っていて、目の前のものが動くっていいですね！なんて会話をしたのを思い出しました。</p>

<p>目の前のものが動くのは素敵です。</p>

<p>さて、この勢いのまま、こっそり買ってた、楽しい工作シリーズのキャタピラカーと、モーターをつなげることができないかを、次回以降試行錯誤していきたいと思います。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170306/20170306222626.jpg" alt="f:id:konoemario:20170306222626j:plain:w300" title="f:id:konoemario:20170306222626j:plain:w300" class="hatena-fotolife" style="width:300px" itemprop="image"></span></p>

<p>もうパッケージからしてロマンですね。</p>

<p>次回に続きます。</p>

<p><iframe src="http://tohutokonsome.hatenablog.com/embed/2017/03/11/001512" title="RaspBerryPiでモーターを動かす(3):圧倒的力不足 - 豆腐とコンソメ" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://tohutokonsome.hatenablog.com/entry/2017/03/11/001512">tohutokonsome.hatenablog.com</a></cite></p>

-----
--------
AUTHOR: konoemario
TITLE: RaspBerryPiでモーターを動かす(1)
BASENAME: 2017/03/05/200409
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 03/05/2017 20:04:09
CATEGORY: プログラム
CATEGORY: ラズパイ
CATEGORY: ラジコンシリーズ
IMAGE: https://images-fe.ssl-images-amazon.com/images/I/61kgL2zA-xL._SL160_.jpg
-----
BODY:
<h3>前回からの続き</h3>

<p>前回は、RaspBerryにOS「Raspbian」をインス<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C8%A1%BC%A5%EB">トール</a>しました！<br/>
最終目的は、ラジコンを作る、というところまでやりたいのだけども、段階を踏んでいきたいので、とりあえずモーターを動かすところまでやっていきます。</p>

<p><iframe src="http://tohutokonsome.hatenablog.com/embed/2017/02/27/170623" title="ラズパイ(RaspberryPi3)を買ってきた：セットアップ編 - 豆腐とコンソメ" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://tohutokonsome.hatenablog.com/entry/2017/02/27/170623">tohutokonsome.hatenablog.com</a></cite></p>

<h3>なにはともあれ材料を買う</h3>

<p>先週に引き続き、2度目の<a class="keyword" href="http://d.hatena.ne.jp/keyword/%BD%A9%CD%D5%B8%B6">秋葉原</a>。</p>

<p><iframe src="http://tohutokonsome.hatenablog.com/embed/2017/02/26/005009" title="ラズパイ（RaspberyyPi3)を買ってきた - 豆腐とコンソメ" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://tohutokonsome.hatenablog.com/entry/2017/02/26/005009">tohutokonsome.hatenablog.com</a></cite></p>

<p>モータを回すのに必要な部品といっても、さっぱりなのですが、以下の本を参考にしました。</p>

<p><div class="hatena-asin-detail"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4822236404/hatena-blog-22/"><img src="https://images-fe.ssl-images-amazon.com/images/I/61kgL2zA-xL._SL160_.jpg" class="hatena-asin-detail-image" alt="ラズパイマガジン 2016年6月号(日経BPパソコンベストムック)" title="ラズパイマガジン 2016年6月号(日経BPパソコンベストムック)"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4822236404/hatena-blog-22/">ラズパイマガジン 2016年6月号(日経BPパソコンベストムック)</a></p><ul><li><span class="hatena-asin-detail-label">作者:</span> 日経<a class="keyword" href="http://d.hatena.ne.jp/keyword/Linux">Linux</a></li><li><span class="hatena-asin-detail-label">出版社/メーカー:</span> <a class="keyword" href="http://d.hatena.ne.jp/keyword/%C6%FC%B7%D0BP%BC%D2">日経BP社</a></li><li><span class="hatena-asin-detail-label">発売日:</span> 2016/04/18</li><li><span class="hatena-asin-detail-label">メディア:</span> 単行本</li><li><a href="http://d.hatena.ne.jp/asin/4822236404/hatena-blog-22" target="_blank">この商品を含むブログ (1件) を見る</a></li></ul></div><div class="hatena-asin-detail-foot"></div></div></p>

<p>本の内容から必要なものを抜粋しましたが、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%DF%A5%CB%BB%CD%B6%EE">ミニ四駆</a>以上のものを触ってない私には、あまりピンこない。</p>

<p>※<a class="keyword" href="http://d.hatena.ne.jp/keyword/Amazon">Amazon</a>商品の内容はイメージです。<br/>
  実際に使った部品ではないです。</p>

<ul>
<li><p>ブレッドボード
<div class="hatena-asin-detail"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B009ALRR9M/hatena-blog-22/"><img src="https://images-fe.ssl-images-amazon.com/images/I/31ZNGqED7pL._SL160_.jpg" class="hatena-asin-detail-image" alt="普通のブレッドボード" title="普通のブレッドボード"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B009ALRR9M/hatena-blog-22/">普通のブレッドボード</a></p><ul><li><span class="hatena-asin-detail-label">出版社/メーカー:</span> スイッチサイエンス</li><li><span class="hatena-asin-detail-label">メディア:</span> エレクトロニクス</li><li><a href="http://d.hatena.ne.jp/asin/B009ALRR9M/hatena-blog-22" target="_blank">この商品を含むブログを見る</a></li></ul></div><div class="hatena-asin-detail-foot"></div></div></p></li>
<li><p>モーター</p></li>
<li><p>モータードライバー
<div class="hatena-asin-detail"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B01KNRWRUU/hatena-blog-22/"><img src="https://images-fe.ssl-images-amazon.com/images/I/317NcSs3GYL._SL160_.jpg" class="hatena-asin-detail-image" alt="モータードライバー　TA7291P　2個セット" title="モータードライバー　TA7291P　2個セット"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B01KNRWRUU/hatena-blog-22/">モータードライバー　TA7291P　2個セット</a></p><ul><li><span class="hatena-asin-detail-label">出版社/メーカー:</span> 株式会社<a class="keyword" href="http://d.hatena.ne.jp/keyword/%C5%EC%BC%C7">東芝</a>セミコンダクター社(<a class="keyword" href="http://d.hatena.ne.jp/keyword/TOSHIBA">TOSHIBA</a>)</li><li><span class="hatena-asin-detail-label">メディア:</span> その他</li><li><a href="http://d.hatena.ne.jp/asin/B01KNRWRUU/hatena-blog-22" target="_blank">この商品を含むブログを見る</a></li></ul></div><div class="hatena-asin-detail-foot"></div></div></p></li>
<li><p>電池</p></li>
<li>ジャンパー線</li>
</ul>


<p><div class="hatena-asin-detail"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00P9BVKOK/hatena-blog-22/"><img src="https://images-fe.ssl-images-amazon.com/images/I/41-7rhrfkDL._SL160_.jpg" class="hatena-asin-detail-image" alt="ブレッドボード・ジャンパーワイヤ（メス-オス）（20cm）40本" title="ブレッドボード・ジャンパーワイヤ（メス-オス）（20cm）40本"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00P9BVKOK/hatena-blog-22/">ブレッドボード・ジャンパーワイヤ（メス-オス）（20cm）40本</a></p><ul><li><span class="hatena-asin-detail-label">出版社/メーカー:</span> <a class="keyword" href="http://d.hatena.ne.jp/keyword/oem">oem</a></li><li><span class="hatena-asin-detail-label">メディア:</span> エレクトロニクス</li><li><a href="http://d.hatena.ne.jp/asin/B00P9BVKOK/hatena-blog-22" target="_blank">この商品を含むブログを見る</a></li></ul></div><div class="hatena-asin-detail-foot"></div></div></p>

<ul>
<li><a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%C7%A5%F3%A5%B5">コンデンサ</a>ー
<div class="hatena-asin-detail"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00BG46J5O/hatena-blog-22/"><img src="https://images-fe.ssl-images-amazon.com/images/I/31r4TebzlbL._SL160_.jpg" class="hatena-asin-detail-image" alt="オレンジドロップ コンデンサー 0.022uF SPRAGUE ORANGE DROP 715P 223 600V" title="オレンジドロップ コンデンサー 0.022uF SPRAGUE ORANGE DROP 715P 223 600V"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00BG46J5O/hatena-blog-22/">オレンジドロップ コンデンサー 0.022uF SPRAGUE ORANGE DROP 715P 223 600V</a></p><ul><li><span class="hatena-asin-detail-label">出版社/メーカー:</span> SPRAGUE</li><li><span class="hatena-asin-detail-label">メディア:</span> </li><li><a href="http://d.hatena.ne.jp/asin/B00BG46J5O/hatena-blog-22" target="_blank">この商品を含むブログを見る</a></li></ul></div><div class="hatena-asin-detail-foot"></div></div></li>
</ul>


<p>とりあえず、以上のラインナップを頭の片隅にいれつつ、本に紹介されていた<a class="keyword" href="http://d.hatena.ne.jp/keyword/%BD%A9%B7%EE%C5%C5%BB%D2%C4%CC%BE%A6">秋月電子通商</a>へ行くと、そこには大量の部品と人が、、、<br/>
（圧倒されて、写真撮ることも忘れてた）</p>

<p>店員さんに、欲しいものをいうと、いろいろなアド<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D0%A5%A4%A5%B9">バイス</a>をくれるという情報もあったので気楽に行ったのだけど、かなりの混雑っぷりに、そんな余裕もなさそう。</p>

<p>これは出直したほうがいいかもしらん、と思ったところで目に付いた、「ラズパイマガジン　電子工作入門部品セット」を購入することにした。</p>

<p>「ラズパイマガジン」ではLEDライトをつけたり、モーターを動かしたりとする場合の必要な部品が掲載されているのだけれども、それをセットにまとめたものみたい。  <br/>
また、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%BD%A9%B7%EE%C5%C5%BB%D2%C4%CC%BE%A6">秋月電子通商</a>では、通販も取り扱っているみたいで、わざわざ買いにいかなくても大丈夫みたいです。</p>

<p><iframe src="//hatenablog-parts.com/embed?url=http%3A%2F%2Fakizukidenshi.com%2Fcatalog%2Fg%2FgK-11419%2F" title="ラズパイマガジン２０１７年２月号＆４月号企画部品セット: マイコン関連 秋月電子通商 電子部品 ネット通販" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://akizukidenshi.com/catalog/g/gK-11419/">akizukidenshi.com</a></cite></p>

<p>ということで、買ってきました。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170305/20170305193606.jpg" alt="f:id:konoemario:20170305193606j:plain:w300" title="f:id:konoemario:20170305193606j:plain:w300" class="hatena-fotolife" style="width:300px" itemprop="image"></span></p>

<p>買ったセットが、ラズパイマガジン2017年2月号、4月号共通のものだったので、ラズパイマガジンも新しいものを購入しました。</p>

<p>セットが5000円ぐらいで、ラズパイマガジンが2000円くらいです。<br/>
先入観でセットが2000円くらいと踏んでおり、かつ財布の中身も確認していないという失態が重なり、会計時にお金が足りないことに気づく、という恐ろしい出来事があったのは内緒です。<br/>
（店外をうろついていた奥さんが、たまたま戻ってきてくれて、事なきを得ました。)</p>

<p>開封してみると、ものっそいいろんな部品と、部品の明細が入っています。<br/>
明細には「ご購入後には、まず上記部品が揃っているかご確認ください。」との一文が書かれているんだけれども、はっきりいって、どれが何の部品なのかよくわからないので、揃っているかどうかも確認することができなかった。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170305/20170305195009.jpg" alt="f:id:konoemario:20170305195009j:plain:w300" title="f:id:konoemario:20170305195009j:plain:w300" class="hatena-fotolife" style="width:300px" itemprop="image"></span></p>

<p>以下のように、袋に部品名が書いてあるものはわかるのだけれども、書いてない袋の中身については、なんだろうこれ状態でした。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170305/20170305195436.jpg" alt="f:id:konoemario:20170305195436j:plain:w300" title="f:id:konoemario:20170305195436j:plain:w300" class="hatena-fotolife" style="width:300px" itemprop="image"></span></p>

<p>これは、あとあと思ったのですが、モーターを動かす！という具体的な目的があるのであれば、ラズパイマガジンに必要な部品の通販コードが書いてあるので、それをもとに<a class="keyword" href="http://d.hatena.ne.jp/keyword/%BD%A9%B7%EE%C5%C5%BB%D2%C4%CC%BE%A6">秋月電子通商</a>に通販で買ったほうが、お手軽だったなぁと思います。</p>

<p>長くなったので次回にわけます！</p>

<p><iframe src="http://tohutokonsome.hatenablog.com/embed/2017/03/06/223721" title="RaspBerryPiでモーターを動かす(2) - 豆腐とコンソメ" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://tohutokonsome.hatenablog.com/entry/2017/03/06/223721">tohutokonsome.hatenablog.com</a></cite></p>

-----
--------
AUTHOR: konoemario
TITLE: アドラー心理学、すべては勇気の問題。でも勇気がない。
BASENAME: 2017/03/01/223256
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 03/01/2017 22:32:56
CATEGORY: 幸せについて
-----
BODY:

<div class="section">
    <h3>日記部分</h3>
    <p>気分がずっと落ち込んでいる。<br />
仕事中だけだから、鬱とかではないんだ。</p><p>今の仕事に対して心からやる気がでない。<br />
それぞれにフォーカスを当てれば、チーム作りだったり<a class="keyword" href="http://d.hatena.ne.jp/keyword/%B3%AB%C8%AF%A5%D7%A5%ED%A5%BB%A5%B9">開発プロセス</a>の改善だったり、わかりやすいドキュメントの作り方だったりいろいろ学ぶべきものはたくさんある。<br />
ただ、いまの組織に対して、努力の成果を施す気持ちにはちっともなれない。<br />
唯一、配下のメンバー対しては申し訳ない気持ちが日々募る。</p><p>組織だけではなく自分もポンコツなのだ。</p><p>別の話題。</p><p>下請けのシステム屋は、発注側から無理難題を言われるのは日常茶飯事だと思う。<br />
それをいかにコン<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C8%A5%ED%A1%BC%A5%EB">トロール</a>していくか、というところに手腕が求められ、プロジェクトマネージメント試験なんかでも、スコープを明確にするなんて謳われている。<br />
でも、実態として受注側としては、手戻りが発生しようが、発注側のわがままを聞いてあげたほうが評価は受けられる。<br />
一度決めたはずのルールから逸脱したものを断ると、評価は下がる。<br />
他の会社、部署、担当者はやってくれたのに対応してくれない、と評価される。</p><p>誰かが無茶を聞くことでユーザーは横暴になるのである。<br />
だから無理なものは無理と断ることを業界全体でしていただきたい。</p><p>でも、市場の考え方でいえば、それも止められないのかな。</p>

</div>
<div class="section">
    <h3>本題</h3>
    <p><a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A5%C9%A5%E9%A1%BC%BF%B4%CD%FD%B3%D8">アドラー心理学</a>の考え方として、自分の課題と他人の課題を分けるという考え方がある。<br />
この考え方は、革新的なものでもなんでもない。<br />
課題が課題として残ったときに、自分が困らないとしたら、それは自分の課題ではなく他者の課題として見る、という考え方で理解している。<br />
こういった視点でみたとき、今担当しているプロジェクトが失敗しようが、自分が困らない。<br />
自分の評価は下がるかもしれないけれども、会社を辞める予定の自分にとっては、その評価は意味をなさない。<br />
まして、評価があがろうが、下がろうが、給与明細に反映される金額は微々たるものだ。<br />
プロジェクトの成功可否については、自分の課題ではないのだ。<br />
だから、仕事のことで夜眠れなかったり、たまの休日に気分が落ち込んだりするのは本当にもったいないことである。</p><p>なんだけれども、職務の責任としては、プロジェクトの成功確率をあげるという役割は多少ともある。<br />
これについて、自分には関係がないこと、といえるのはもうその人の心構え、すなわち勇気の問題である。</p><p>自分が辞めた場合、少なくとも数人には迷惑がかかるであろう。<br />
（誰も迷惑がからないとしたら嬉しい反面、存在意義として悲しい）<br />
それを飲み込んだ上で、辞めるという選択肢を取るのは、嫌われてもよいから、自分のやりたいことをやるという第一歩である。</p><p><a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A5%C9%A5%E9%A1%BC%BF%B4%CD%FD%B3%D8">アドラー心理学</a>を扱ったタイトルの書籍が「嫌われる勇気」というタイトルだったけれども、このタイトルが<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A5%C9%A5%E9%A1%BC%BF%B4%CD%FD%B3%D8">アドラー心理学</a>のすべてを語っているような気がする。</p><p>でも、肝心の勇気はどうやったら出るんだろう。</p><p>人はどうしたら、壁を越えるのだろう。その手法は<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A5%C9%A5%E9%A1%BC%BF%B4%CD%FD%B3%D8">アドラー心理学</a>では語られていないと思う。</p><p>嫌われる勇気をください。</p>

</div>
-----
--------
AUTHOR: konoemario
TITLE: ラズパイ(RaspberryPi3)を買ってきた：セットアップ編
BASENAME: 2017/02/27/170623
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 02/27/2017 17:06:23
CATEGORY: プログラム
CATEGORY: 幸せについて
CATEGORY: ラズパイ
IMAGE: https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170226/20170226110126.png
-----
BODY:
<h3>前回からの続き</h3>

<p><iframe src="http://tohutokonsome.hatenablog.com/embed/2017/02/26/005009" title="ラズパイ（RaspberyyPi3)を買ってきた - 豆腐とコンソメ" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://tohutokonsome.hatenablog.com/entry/2017/02/26/005009">tohutokonsome.hatenablog.com</a></cite></p>

<p>さっそくセットアップを行なっていきます。</p>

<h3>セットアップ</h3>

<p>まず、OSをインスールする必要があります。
RaspberryPi3のOSインス<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C8%A1%BC%A5%EB">トール</a>の選択肢にはいくつかあるみたいなので、以下のようにまとめてみました。 <br/>
※XMind使ってみたんだけれども、思ったより使いにくかった。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170429/20170429190738.png" alt="f:id:konoemario:20170429190738p:plain" title="f:id:konoemario:20170429190738p:plain" class="hatena-fotolife" itemprop="image"></span><br/>
※<a class="keyword" href="http://d.hatena.ne.jp/keyword/GUI">GUI</a>版のOSが「RASPBIAN JESSIE WITH PIXEL」になってたので修正</p>

<p>今回は、一番標準っぽいNOOBSを使います。</p>

<p>以下の公式サイトからNOOBSをダウンロードします。</p>

<p><iframe src="//hatenablog-parts.com/embed?url=https%3A%2F%2Fwww.raspberrypi.org%2Fdownloads%2F" title="Raspberry Pi Downloads - Software for the Raspberry Pi" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://www.raspberrypi.org/downloads/">www.raspberrypi.org</a></cite></p>

<h4><a class="keyword" href="http://d.hatena.ne.jp/keyword/microSD">microSD</a>カードにOSのファイルを移す</h4>

<p>ダウンロードしたOSを<a class="keyword" href="http://d.hatena.ne.jp/keyword/microSD">microSD</a>カード移します。 <br/>
RaspberyyPiはこの<a class="keyword" href="http://d.hatena.ne.jp/keyword/microSD">microSD</a>カードが、そのままメインのストレージになるとのことです。 <br/>
が、ここで問題発生。</p>

<p><span style="font-size: 150%"><a class="keyword" href="http://d.hatena.ne.jp/keyword/microSD">microSD</a>にデータってどうやっていれるんだろう。</span></p>

<p>なんなく本体のRaspberryPiに<a class="keyword" href="http://d.hatena.ne.jp/keyword/microSD">microSD</a>カードを挿せばいいんじゃろう、ぐらいしか考えていませんでした。
OSが既に入っいる状態の<a class="keyword" href="http://d.hatena.ne.jp/keyword/microSD">microSD</a>カードを挿す必要があるのね。</p>

<p>適当に調べてみると、<a class="keyword" href="http://d.hatena.ne.jp/keyword/microSD">microSD</a>カードリーダーなるものが、100均で売っていることなので、<br/>
近所のセリアにダッシュしてきました。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170226/20170226110958.jpg" alt="f:id:konoemario:20170226110958j:plain:w300" title="f:id:konoemario:20170226110958j:plain:w300" class="hatena-fotolife" style="width:300px" itemprop="image"></span></p>

<p>無事、購入できたのでデスクトップPCから<a class="keyword" href="http://d.hatena.ne.jp/keyword/microSD">microSD</a>にOSを移します。</p>

<h4>いざ起動</h4>

<p>ここでも、問題が二つ発生。</p>

<h5>Raspberryの専用ケースがない</h5>

<p>いろいろなサイトを見ると、Raspberry本体を保護するためのケースに入っている写真ばかり見る。</p>

<p>↓こういうの。　　　
<div class="hatena-asin-detail"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00NEEA4DM/hatena-blog-22/"><img src="https://images-fe.ssl-images-amazon.com/images/I/41B-R1rDJxL._SL160_.jpg" class="hatena-asin-detail-image" alt="Raspberry Pi 3B/2B/B+　専用ケース　（Black）" title="Raspberry Pi 3B/2B/B+　専用ケース　（Black）"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00NEEA4DM/hatena-blog-22/">Raspberry Pi 3B/2B/B+　専用ケース　（Black）</a></p><ul><li><span class="hatena-asin-detail-label">出版社/メーカー:</span> <a class="keyword" href="http://d.hatena.ne.jp/keyword/Raspberry%20Pi">Raspberry Pi</a></li><li><span class="hatena-asin-detail-label">メディア:</span> エレクトロニクス</li><li><a href="http://d.hatena.ne.jp/asin/B00NEEA4DM/hatena-blog-22" target="_blank">この商品を含むブログを見る</a></li></ul></div><div class="hatena-asin-detail-foot"></div></div></p>

<p><div class="hatena-asin-detail"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B01I2XLY8S/hatena-blog-22/"><img src="https://images-fe.ssl-images-amazon.com/images/I/51J8e%2BVm9YL._SL160_.jpg" class="hatena-asin-detail-image" alt="Kuman 3.5インチ Raspberry Pi用ディスプレイ タッチパネル 320*480 解析度 保護ケース ヒートシンク タッチパネル+タッチペン+ヒートシンク＋保護ケース 16GB TF SDカード（動作資料を含め、別途に書き込め不要）SDカードで直接挿入 ディスプレイ動作容易 Raspberry Pi 3B 2B B+ A+ A Bに適用 ラズベリーパイ SC11-TF" title="Kuman 3.5インチ Raspberry Pi用ディスプレイ タッチパネル 320*480 解析度 保護ケース ヒートシンク タッチパネル+タッチペン+ヒートシンク＋保護ケース 16GB TF SDカード（動作資料を含め、別途に書き込め不要）SDカードで直接挿入 ディスプレイ動作容易 Raspberry Pi 3B 2B B+ A+ A Bに適用 ラズベリーパイ SC11-TF"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B01I2XLY8S/hatena-blog-22/">Kuman 3.5インチ Raspberry Pi用ディスプレイ タッチパネル 320*480 解析度 保護ケース ヒートシンク タッチパネル+タッチペン+ヒートシンク＋保護ケース 16GB TF SDカード（動作資料を含め、別途に書き込め不要）SDカードで直接挿入 ディスプレイ動作容易 Raspberry Pi 3B 2B B+ A+ A Bに適用 ラズベリーパイ SC11-TF</a></p><ul><li><span class="hatena-asin-detail-label">出版社/メーカー:</span> Kuman</li><li><span class="hatena-asin-detail-label">メディア:</span> エレクトロニクス</li><li><a href="http://d.hatena.ne.jp/asin/B01I2XLY8S/hatena-blog-22" target="_blank">この商品を含むブログを見る</a></li></ul></div><div class="hatena-asin-detail-foot"></div></div></p>

<p><div class="hatena-asin-detail"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B01CQH48KC/hatena-blog-22/"><img src="https://images-fe.ssl-images-amazon.com/images/I/51hqubnYjTL._SL160_.jpg" class="hatena-asin-detail-image" alt="本体＋ケース　Raspberry Pi 3 Model B【2016年2月29日発売】RSコンポーネンツ公式 Made in the UK Wales工場生産品　(SB_Clear)" title="本体＋ケース　Raspberry Pi 3 Model B【2016年2月29日発売】RSコンポーネンツ公式 Made in the UK Wales工場生産品　(SB_Clear)"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B01CQH48KC/hatena-blog-22/">本体＋ケース　Raspberry Pi 3 Model B【2016年2月29日発売】RSコンポーネンツ公式 Made in the UK Wales工場生産品　(SB_Clear)</a></p><ul><li><span class="hatena-asin-detail-label">出版社/メーカー:</span> きばん本舗</li><li><span class="hatena-asin-detail-label">メディア:</span> </li><li><a href="http://d.hatena.ne.jp/asin/B01CQH48KC/hatena-blog-22" target="_blank">この商品を含むブログを見る</a></li></ul></div><div class="hatena-asin-detail-foot"></div></div></p>

<p>てっきり、本体を買うと付いてくるものだと思っていたのですが、どうやらそうではなかったみたい。
必須ではないとのことだけれども、万が一ということもあり、適当にケースをつくることにした。</p>

<p>Raspberryの箱をくり抜いただけの代物だが、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D5%A5%A1%A5%DF%A5%B3%A5%F3">ファミコン</a>のカセットのパッケージを彷彿とさせるいい感じのものが出来上がった。</p>

<p><span style="font-size: 80%">防御力はひどいと思われる。</span>　</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170226/20170226111718.jpg" alt="f:id:konoemario:20170226111718j:plain:w300" title="f:id:konoemario:20170226111718j:plain:w300" class="hatena-fotolife" style="width:300px" itemprop="image"></span></p>

<h5>ディスプレイが必要なのね</h5>

<p>自分の中ではデスクトップPCから<a class="keyword" href="http://d.hatena.ne.jp/keyword/WiFI">WiFI</a>でRaspberryに<a class="keyword" href="http://d.hatena.ne.jp/keyword/ssh">ssh</a>接続して設定を行うイメージをもっていた。<br/>
なのでディスプレイはいらない、と勝手に思っていた。<br/>
なんだけれども、そもそも<a class="keyword" href="http://d.hatena.ne.jp/keyword/WiFi">WiFi</a>で接続するためにはRaspberryを起動して<a class="keyword" href="http://d.hatena.ne.jp/keyword/ssh">ssh</a>の設定を行う必要がある。</p>

<p>このことに気づいて、<a class="keyword" href="http://d.hatena.ne.jp/keyword/HDMI">HDMI</a>ケーブルをまた買いにいかなくてはいけないのか、と絶望したのだけれども
幸い<a class="keyword" href="http://d.hatena.ne.jp/keyword/PS4">PS4</a>で<a class="keyword" href="http://d.hatena.ne.jp/keyword/HDMI">HDMI</a>ケーブルを使っていたので、そちらを拝借してテレビにつなげることにした。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170227/20170227165645.jpg" alt="f:id:konoemario:20170227165645j:plain:w300" title="f:id:konoemario:20170227165645j:plain:w300" class="hatena-fotolife" style="width:300px" itemprop="image"></span></p>

<p>マウスはデスクトップPCのものを拝借し、キーボードは余っているものがあったのでそちらを流用した。
（<a class="keyword" href="http://d.hatena.ne.jp/keyword/Windows">Windows</a>のデスクトップPCを買った際に、ちょっと良いキーボードを買おうと思いたち<br/>
結果<a class="keyword" href="http://d.hatena.ne.jp/keyword/Mac">Mac</a>のキーボードを買ってみるも使いこなせない、という悲しい歴史の遺物が役に立った。)</p>

<h4>ようやく起動</h4>

<p>電源をコンセントに挿すと、無事に起動。<br/>
特に手の込んだことをはまったくしなかったのに、なぜかえらい感動した。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170227/20170227170150.jpg" alt="f:id:konoemario:20170227170150j:plain:w300" title="f:id:konoemario:20170227170150j:plain:w300" class="hatena-fotolife" style="width:300px" itemprop="image"></span></p>

<p>ネットは<a class="keyword" href="http://d.hatena.ne.jp/keyword/WiFi">WiFi</a>トグルを挿して、デスクトップ画面から<a class="keyword" href="http://d.hatena.ne.jp/keyword/SSID">SSID</a>を選択したらあっさり繋がった。<br/>
<a class="keyword" href="http://d.hatena.ne.jp/keyword/SSH">SSH</a>の設定もとくに難しいこともなかった。</p>

<p>これで普通に使えるようになった。
次回はモーターを動かすというところに挑戦していきたい。<br/>
（ただパーツを買いに<a class="keyword" href="http://d.hatena.ne.jp/keyword/%BD%A9%CD%D5%B8%B6">秋葉原</a>にまた行かなきゃいけなそうなので、平日は作業できなそう。)</p>

-----
--------
AUTHOR: konoemario
TITLE: ラズパイ（RaspberyyPi3)を買ってきた
BASENAME: 2017/02/26/005009
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 02/26/2017 00:50:09
CATEGORY: プログラム
CATEGORY: 幸せについて
CATEGORY: ラズパイ
IMAGE: https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170225/20170225235540.jpg
-----
BODY:
<h3>はじめに</h3>

<p>前回からの続き、ではないのです。</p>

<p><iframe src="http://tohutokonsome.hatenablog.com/embed/2017/02/23/221944" title="アイドルとのチェキ画像から親密度を図る(2) - 豆腐とコンソメ" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://tohutokonsome.hatenablog.com/entry/2017/02/23/221944">tohutokonsome.hatenablog.com</a></cite></p>

<p>一旦、動くものは作ったので、コードを綺麗にしてあげよう！とかやってる内に<br/>
こっちに興味が湧いちゃいました。</p>

<p><iframe src="//hatenablog-parts.com/embed?url=https%3A%2F%2Fcodezine.jp%2Farticle%2Fdetail%2F9829" title="ラズパイで動くロボット「GoPiGo」をつかって遠隔見守りロボットを作ろう（1） 開発準備編" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://codezine.jp/article/detail/9829">codezine.jp</a></cite></p>

<p>記事を見ていただけるとわかるのですが、タイヤとカメラがついた物体が、動くみたいです。<br/>
それだけならまだしも、<a class="keyword" href="http://d.hatena.ne.jp/keyword/Python">Python</a>でラジコンみたいに、動きをいろいろとコン<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C8%A5%ED%A1%BC%A5%EB">トロール</a>できるみたいなのです。</p>

<p>私はラジコンに対して、熱い思いを持っております。
というのも、幼きころラジコンがほしくってほしくって、お婆ちゃんに駄々を捏ねて困らせたことがあります。見かねたお婆ちゃんが、おもちゃ屋で買ってきたラジコンは、コントローラーと車が有線で繋がっているという代物で、その結果私はわんわんと泣き腫らし、お婆ちゃんを困らせたという過去があります。</p>

<p>(お婆ちゃんが買ってきたラジコンイメージ)</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170225/20170225235540.jpg" alt="f:id:konoemario:20170225235540j:plain:w300" title="f:id:konoemario:20170225235540j:plain:w300" class="hatena-fotolife" style="width:300px" itemprop="image"></span></p>

<p>その過去の代償を払うためには私自身がラジコンを作る必要があるのではないのでしょうか。<br/>
そして完成したラジコンは今は亡き、お婆ちゃんに捧げます。</p>

<h3>GoPiGoちょっと高いし、手に入るのに時間がかかりそう</h3>

<p>ごめん、お婆ちゃん。<br/>
紹介されていた走るロボット「GoPiGo」を買おうと思ったのだけれどもRaspberryPiとGoPiGoがセットになっているものが199ドルぐらいで、かつ通販サイトを見ても在庫なしの状態なんだ。</p>

<p>さて、GoPiGoは諦めて、ピンキーの興味を引くネタでも考えるか、といつもならなるのですが<br/>
幸運なことに以下の記事を見つけました。</p>

<p><iframe src="//hatenablog-parts.com/embed?url=http%3A%2F%2Fqiita.com%2FRyosukeKamei%2Fitems%2F147de58738084826f749" title="Raspberry Pi 3でpythonを使いモータードライバーを使いモータを制御する！ - Qiita" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://qiita.com/RyosukeKamei/items/147de58738084826f749">qiita.com</a></cite></p>

<p>GoPiGoなしでも、RaspberryPiだけでモーターを制御しているという素敵な内容です。 <br/>
先人の方がいる、かつモーターが動くのであればいける！と謎の自信が湧いてきたので、とりあえずRassberryPiだけを購入することにしました。</p>

<h3><a class="keyword" href="http://d.hatena.ne.jp/keyword/%BD%A9%CD%D5%B8%B6">秋葉原</a>に行ってきた</h3>

<p>購入にあたっては、以下の記事を参考にさせていただきました。</p>

<p><iframe src="//hatenablog-parts.com/embed?url=https%3A%2F%2Fliginc.co.jp%2F250796" title="ラズベリーパイを買いに、勇気を出して秋葉原へ【お買い物編】 | かとえみのRaspberryPiロボット入門" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://liginc.co.jp/250796">liginc.co.jp</a></cite></p>

<p>参考というか、そっくりそのままお買い物編をなぞりました。
記事に書いてある通り、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%BD%A9%CD%D5%B8%B6">秋葉原</a>に出向いて、上がっているお店を周ってみました。
<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%E8%A5%C9%A5%D0%A5%B7%A5%AB%A5%E1%A5%E9">ヨドバシカメラ</a>とかではない、ローカル感漂う電気屋に入るのってやけに緊張します。</p>

<p>また、いろいろな店舗にいる方たちは何を目的に商品を探しているのか気になりました。
(<a class="keyword" href="http://d.hatena.ne.jp/keyword/microSD">microSD</a>カードに群がる、50代、60代のおじ様方は、一体何に使うのだろう)</p>

<p>自分のまだ知らない世界がいっぱいあるのでしょう。</p>

<h3>購入したもの</h3>

<p>以下を購入しました。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170226/20170226002304.jpg" alt="f:id:konoemario:20170226002304j:plain:w300" title="f:id:konoemario:20170226002304j:plain:w300" class="hatena-fotolife" style="width:300px" itemprop="image"></span></p>

<ol>
<li>RaspberryPi3本体</li>
<li><a class="keyword" href="http://d.hatena.ne.jp/keyword/microSD">microSD</a>カード(32GBでクラス10のもの)</li>
<li><a class="keyword" href="http://d.hatena.ne.jp/keyword/%C5%C5%B8%BB%A5%B1%A1%BC%A5%D6%A5%EB">電源ケーブル</a></li>
<li><a class="keyword" href="http://d.hatena.ne.jp/keyword/WiFi">WiFi</a>トグル</li>
<li>ラズパイマガジン(たまたま見つけたので購入)</li>
</ol>


<p>(6.はピンキーのサイン入りWWDベストアルバムだよ！）</p>

<p>お値段は、<s>こいつ、この値段でこれ買ってやんの、という視線を受けるのがつらくって</s>書くのが面倒だったのでレシート貼ってます。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170226/20170226002747.jpg" alt="f:id:konoemario:20170226002747j:plain:w300" title="f:id:konoemario:20170226002747j:plain:w300" class="hatena-fotolife" style="width:300px" itemprop="image"></span></p>

<p>RaspberryPi3本体だけであれば、5000円ジャストでした。</p>

<p>ながくなったので次回にセットアップ編を書きます。</p>

-----
--------
AUTHOR: konoemario
TITLE: アイドルとのチェキ画像から親密度を図る(2)
BASENAME: 2017/02/23/221944
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 02/23/2017 22:19:44
CATEGORY: プログラム
CATEGORY: 幸せについて
CATEGORY: Python
IMAGE: https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170220/20170220234807.png
-----
BODY:
<h3>前回からの続き</h3>

<p><iframe src="http://tohutokonsome.hatenablog.com/embed/2017/02/21/001602" title="アイドルとのチェキ画像から親密度を図る(1) - 豆腐とコンソメ" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://tohutokonsome.hatenablog.com/entry/2017/02/21/001602">tohutokonsome.hatenablog.com</a></cite></p>

<p>下記図のところの①の部分をやっていきます。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170220/20170220234807.png" alt="f:id:konoemario:20170220234807p:plain:w300" title="f:id:konoemario:20170220234807p:plain:w300" class="hatena-fotolife" style="width:300px" itemprop="image"></span></p>

<h3>書いたコード</h3>

<p>といっても、ググればいくらでもでてくる内容なので説明はとくにないというおさぼり記事です。
何かあれば突っ込んでいただけると大変うれしいです。</p>

<h6>実装していないことメモ</h6>

<ul>
<li>一度、取得したツイート内容は取得しないようにしたい。</li>
<li>1ツイート内に、複数メディア情報（写真が２枚等）ある場合を考慮していない。<br/>
(おそらく、常に1枚目の写真のみをとってくる)</li>
</ul>


<h6>よくわかっていない部分</h6>

<p>Pychamから、PEP8のコーディング規約に則っていない、という点で以下のWarningがでている。</p>

<pre><code>PEP8 block comment should start with '#'
</code></pre>

<p>&lsquo;#'でコメントつけている箇所全てにでているのだけれども、どうやったら解消されるのかがわからない。</p>

<p><script src="https://gist.github.com/9cb849f270ce00f14fba36fb57934d37.js"> </script></p>

<p><a href="https://gist.github.com/9cb849f270ce00f14fba36fb57934d37">ツイッターの情報を取得する</a></p>

-----
--------
AUTHOR: konoemario
TITLE: Pythonの初心者向け勉強会に行ってきた
BASENAME: 2017/02/21/232827
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 02/21/2017 23:28:27
CATEGORY: プログラム
CATEGORY: 幸せについて
CATEGORY: Python
-----
BODY:
<h3>謝辞</h3>

<p>星印（よくわかってないです）ありがとうございます！<br/>
前回の記事で、星印を４ついただけました。</p>

<p><iframe src="http://tohutokonsome.hatenablog.com/embed/2017/02/21/001602" title="アイドルとのチェキ画像から親密度を図る(1) - 豆腐とコンソメ" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://tohutokonsome.hatenablog.com/entry/2017/02/21/001602">tohutokonsome.hatenablog.com</a></cite></p>

<p>それでなんですが、このブログのアクセス数って一日１〜３件ぐらいなんですよ。  　　</p>

<p>こう書くと、なんだか悲しくなるのですが、<br/>
アクセス数１〜３の中で、星を４つもいただけたということは<br/>
ブログを読んでくれた方、全員が星をつけれくれた、と考えることもできるわけです。</p>

<p>本当にありがとうございます！<br/>
<span style="font-size: 50%">また、読んでくれた方の中に、ピンキーがいたらすぐに連絡ください。
</span></p>

<h3>勉強会に行ってきました。</h3>

<p><iframe src="//hatenablog-parts.com/embed?url=https%3A%2F%2Fconnpass.com%2Fevent%2F50580%2F" title="2/21開催 「Python」入門講座 ★参加無料★ (2017/02/21 18:30〜)" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://connpass.com/event/50580/">connpass.com</a></cite></p>

<p>18:30〜21:30の3時間で、<a class="keyword" href="http://d.hatena.ne.jp/keyword/Python">Python</a>の入門の勉強会でした。</p>

<h3>参加者</h3>

<p>50名ぐらいいた気がします。男性が9割ぐらいでした。<br/>
年齢層は20代の大学生のような方から、初老（失礼ですかね？）の方までいました。<br/>
大半は20代後半から30代のように見えました。</p>

<h3>やったこと</h3>

<p>以下のようなことを行いました。</p>

<ul>
<li>プログラムとは</li>
<li>環境の構築</li>
<li>基本的な構文を用いて演習</li>
<li>標準モジュールの紹介(re、<a class="keyword" href="http://d.hatena.ne.jp/keyword/json">json</a>とか)</li>
<li>その他モジュールの紹介(numpy,matplotlibとか)</li>
</ul>


<p>以下は、演習課題のコードです。<br/>
みてのとおり、<a class="keyword" href="http://d.hatena.ne.jp/keyword/Python">Python</a>入門以上に、プログラム入門の側面が強かったです。</p>

<p><script src="https://gist.github.com/01ad243dda718233457c8be4eeff4484.js"> </script></p>

<p><a href="https://gist.github.com/01ad243dda718233457c8be4eeff4484">勉強会で行った課題</a></p>

<h3>感想</h3>

<p>気合をいれて、「みんなの<a class="keyword" href="http://d.hatena.ne.jp/keyword/Python">Python</a>」を読んでいったので、演習の内容で新しく学ぶことは特にありませんでした。
<a class="keyword" href="http://d.hatena.ne.jp/keyword/Python">Python</a>入門というところで、何も知らないで行っても大丈夫なような内容になっていました。</p>

<p>なので、<a class="keyword" href="http://d.hatena.ne.jp/keyword/Python">Python</a>という部分より、講習の中で触れた「Scrach」と呼ばれる<br/>
レゴブロックを使うような感覚でプログラムができるサービスに興味を持ちました。<br/>
こどもが出来たらぜひ触らせたい。</p>

<p><iframe src="//hatenablog-parts.com/embed?url=https%3A%2F%2Fscratch.mit.edu%2F" title="Scratch - Imagine, Program, Share" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://scratch.mit.edu/">scratch.mit.edu</a></cite></p>

<p>ただ、一番すごい！と思ったのが冒頭で紹介された講師の方が<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%CF%A5%C3%A5%AB%A5%BD%A5%F3">ハッカソン</a>で作ったアプリでした。
棒人間をお絵描きすると、そのポーズを3Dキャラクターが行うみたいなやつ。　　
24時間で作れるのだろうか。。。</p>

<p>また、以下は勉強会の中で気になったワードです。<br/>
どこかで使ってみたい。</p>

<ul>
<li>pyserial</li>
<li>tensorflow</li>
<li>SDN</li>
<li>Openflow</li>
<li><a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%CF%A5%C3%A5%AB%A5%BD%A5%F3">ハッカソン</a></li>
<li>xlwings</li>
</ul>


<p>勉強会というところで、周りの方と話せたりするのかな、とか思っていたのですが　
自分から話しかけることもできず、周りの方もサクッと帰っていたので、嬉しい交流はありませんでした。
が、これをきっかけに勉強会に参加していきたいと思います。</p>

-----
--------
AUTHOR: konoemario
TITLE: アイドルとのチェキ画像から親密度を図る(1)
BASENAME: 2017/02/21/001602
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 02/21/2017 00:16:02
CATEGORY: プログラム
CATEGORY: 幸せについて
CATEGORY: Python
IMAGE: https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170220/20170220234807.png
-----
BODY:
<h3>やりたいこと</h3>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/Python">Python</a>始めたばかりで、なにかおもしろいことができないかな！</p>

<p>というところで、取っつきやすいネタを探していました。
いろいろ調べてみると、</p>

<ul>
<li>TwitterAPIを使って、ツイートを取ってくる。</li>
<li>CloudVisionを使って、顔認識、ラベル認識を行う。</li>
<li><a class="keyword" href="http://d.hatena.ne.jp/keyword/OpenCV">OpenCV</a>を使ってイメージに矩形を書く。</li>
</ul>


<p>このへんが取っつきやすそうでした。</p>

<p>これを使ってなにかやりたいことないかなぁと思った時に
タイトルの「アイドルとのチェキ画像から親密度を図る」なら楽しくできるかも、というところでやってみました。</p>

<h3>処理イメージ</h3>

<p>以下の順に処理をしていきます。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170220/20170220234807.png" alt="f:id:konoemario:20170220234807p:plain:w300" title="f:id:konoemario:20170220234807p:plain:w300" class="hatena-fotolife" style="width:300px" itemprop="image"></span></p>

<ol>
<li><a class="keyword" href="http://d.hatena.ne.jp/keyword/Twitter">Twitter</a>から特定の<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%CF%A5%C3%A5%B7%A5%E5%A5%BF%A5%B0">ハッシュタグ</a>をもとに検索を行い<br/>
ツイート内に含まれる画像を取得する。</li>
<li><p>取得した画像を、CloudVisionへ渡して顔認識 +αを行う。</p></li>
<li><p>CloudVisionから返却された顔認識の座標の情報をもとに、画像に矩形を書く。</p></li>
<li><p>投稿者に顔認識結果の画像と、親密度の結果をリプする。</p></li>
</ol>


<h3>親密度をどう図るか</h3>

<p>一番重要な部分です。<br/>
が、残念なことに、私にはそこをどうにかする技術がないのです。  <span style="font-size: 80%">ないのです</span>。 <span style="font-size: 50%">ないのです</span>。</p>

<p>ここは<a class="keyword" href="http://d.hatena.ne.jp/keyword/Google">Google</a>さんのCloudVisionに全面的に依存します。
処理イメージの2. の顔認識+αのα部分です。
幸いなことに、CloudVisionには、顔認識の他に、以下の感情を５段階で返却してくれます。</p>

<table>
<thead>
<tr>
<th style="text-align:left;"> 感情 </th>
<th> にほんご</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;"> Joy</td>
<td> 喜び</td>
</tr>
<tr>
<td style="text-align:left;"> Sorrow</td>
<td> 悲しみ</td>
</tr>
<tr>
<td style="text-align:left;"> Anger </td>
<td> 怒り</td>
</tr>
<tr>
<td style="text-align:left;"> Surprised</td>
<td> 驚き</td>
</tr>
</tbody>
</table>


<p>ですので、この結果を使って親密度を計測しようと思います。</p>

<p>普段は、「ぐへへ、腰の位置が近いざんす！」とかで喜んでいるので、この辺をもう少し使えたら、独自性がでるかと思います。</p>

<p><s>といっても、顔認識の感情も腰の位置も、システムが判断するまでもなく、人が見ればいいのですが。</s></p>

<p>短いですが、具体的な内容は次回に回したいと思います。</p>

<p>こんな感じのものができます。
<span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170220/20170220235915.png" alt="f:id:konoemario:20170220235915p:plain" title="f:id:konoemario:20170220235915p:plain" class="hatena-fotolife" itemprop="image"></span></p>

<h3>明日、初の勉強会</h3>

<p>ドキドキです。<br/>
行ってきます。</p>

<p><iframe src="//hatenablog-parts.com/embed?url=https%3A%2F%2Fconnpass.com%2Fevent%2F50580%2F" title="2/21開催 「Python」入門講座 ★参加無料★ (2017/02/21 18:30〜)" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://connpass.com/event/50580/">connpass.com</a></cite></p>

-----
--------
AUTHOR: konoemario
TITLE: OpenCVを入れる
BASENAME: 2017/02/16/220935
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 02/16/2017 22:09:35
CATEGORY: プログラム
CATEGORY: Python
IMAGE: https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170216/20170216214338.png
-----
BODY:
<h3>Anacondaに<a class="keyword" href="http://d.hatena.ne.jp/keyword/OpenCV">OpenCV</a>をインス<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C8%A1%BC%A5%EB">トール</a>する</h3>

<p>Pychamで<a class="keyword" href="http://d.hatena.ne.jp/keyword/OpenCV">OpenCV</a>をインス<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C8%A1%BC%A5%EB">トール</a>しようとしたら、以下エラーが発生した。
どうやら、python3.6と<a class="keyword" href="http://d.hatena.ne.jp/keyword/OpenCV">OpenCV</a>のバージョン間の問題とのこと。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170216/20170216214338.png" alt="f:id:konoemario:20170216214338p:plain:w300" title="f:id:konoemario:20170216214338p:plain:w300" class="hatena-fotolife" style="width:300px" itemprop="image"></span></p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170216/20170216214343.png" alt="f:id:konoemario:20170216214343p:plain:w300" title="f:id:konoemario:20170216214343p:plain:w300" class="hatena-fotolife" style="width:300px" itemprop="image"></span></p>

<p>condaを使うことで解決できた。</p>

<p><iframe src="//hatenablog-parts.com/embed?url=http%3A%2F%2Fqiita.com%2Fshowsuzu%2Fitems%2Fe2fddf22f725f4d2ab8c" title="Condaの使い方メモ - Qiita" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://qiita.com/showsuzu/items/e2fddf22f725f4d2ab8c">qiita.com</a></cite></p>

<p>python3.5であれば、<a class="keyword" href="http://d.hatena.ne.jp/keyword/OpenCV">OpenCV</a>が使えそうなので、以下を実行</p>

<p><code>$ conda create -n py35 python=3.5 anaconda</code></p>

<p>PycharmのPreferences->Project:プロジェクトネーム->Project <a class="keyword" href="http://d.hatena.ne.jp/keyword/Interpreter">Interpreter</a>から歯車のアイコンを選択し
「Add Local」でcondaで作成した環境を選択。
 ※Annacondaのインス<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C8%A1%BC%A5%EB">トール</a><a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C7%A5%A3%A5%EC%A5%AF%A5%C8">ディレクト</a>リ配下のenvにあった。</p>

<p>  ▼のMoreを選択すると、作成した環境がでてきた。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170216/20170216220438.png" alt="f:id:konoemario:20170216220438p:plain:w300" title="f:id:konoemario:20170216220438p:plain:w300" class="hatena-fotolife" style="width:300px" itemprop="image"></span></p>

<p>以下のモジュールがインポートできた。
<code>import numpy</code>
<code>import cv2</code></p>

-----
--------
AUTHOR: konoemario
TITLE: Python初心者:CloudVisonを使ってみた(1)
BASENAME: 2017/02/14/233932
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 02/14/2017 23:39:32
CATEGORY: Python
-----
BODY:
<h2 id="目次">目次</h2>

<ul class="table-of-contents">
    <li><a href="#目次">目次</a><ul>
            <li><a href="#前回からの続き">前回からの続き</a></li>
            <li><a href="#必要な情報を揃える">必要な情報を揃える</a></li>
        </ul>
    </li>
    <li><a href="#まずはリクエスト">まずはリクエスト</a><ul>
            <li><a href="#とりあえずリクエスト処理を行う">とりあえずリクエスト処理を行う。</a></li>
            <li><a href="#イメージデータを渡す">イメージデータを渡す</a></li>
        </ul>
    </li>
</ul>

<h4 id="前回からの続き">前回からの続き</h4>

<p>前回からの続きになります。</p>

<p><iframe src="http://tohutokonsome.hatenablog.com/embed/2017/02/14/201936" title="Python初心者:CloudVisonを使ってみることにしました - 豆腐とコンソメ" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://tohutokonsome.hatenablog.com/entry/2017/02/14/201936">tohutokonsome.hatenablog.com</a></cite></p>

<h4 id="必要な情報を揃える">必要な情報を揃える</h4>

<p>以下の記事を参考にさせていただきます。</p>

<p><iframe src="//hatenablog-parts.com/embed?url=https%3A%2F%2Fsyncer.jp%2Fcloud-vision-api" title="Cloud Vision APIの使い方まとめ" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://syncer.jp/cloud-vision-api">syncer.jp</a></cite></p>

<p><iframe src="http://vaaaaaanquish.hatenablog.com/embed/2016/08/08/160353" title="PythonでGoogle Cloud Visionを使った顔検出 - Stimulator" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://vaaaaaanquish.hatenablog.com/entry/2016/08/08/160353">vaaaaaanquish.hatenablog.com</a></cite></p>

<p>内容を多少理解することができたら、<a class="keyword" href="http://d.hatena.ne.jp/keyword/Google">Google</a>公式を見ることにします。</p>

<p><a href="https://cloud.google.com/vision/docs/requests-and-responses?hl=ja">Cloud Vision API &#x306E;&#x30EA;&#x30AF;&#x30A8;&#x30B9;&#x30C8;&#x3068;&#x30EC;&#x30B9;&#x30DD;&#x30F3;&#x30B9; &nbsp;|&nbsp; Google Cloud Vision API &#x30C9;&#x30AD;&#x30E5;&#x30E1;&#x30F3;&#x30C8; &nbsp;|&nbsp; Google Cloud Platform</a></p>

<h3 id="まずはリクエスト">まずはリクエスト</h3>

<p><a href="https://syncer.jp/cloud-vision-api">Cloud Vision API&#x306E;&#x4F7F;&#x3044;&#x65B9;&#x307E;&#x3068;&#x3081; (&#x30B5;&#x30F3;&#x30D7;&#x30EB;&#x30B3;&#x30FC;&#x30C9;&#x4ED8;&#x304D;)</a>のリクエスト方法を参考に作業していきます。</p>

<p><script src="https://gist.github.com/4792b71adfbac7ad2685ebd90b33020e.js"> </script></p>

<p><a href="https://gist.github.com/4792b71adfbac7ad2685ebd90b33020e">CloudVison_01.py</a></p>

<p>CloudVisionを利用するためには、<a class="keyword" href="http://d.hatena.ne.jp/keyword/API">API</a>にリクエストを投げる必要があります。
<a class="keyword" href="http://d.hatena.ne.jp/keyword/Python">Python</a>でHTTPリクエストを投げるにはどうすればいいんだろう？と思ったところで</p>

<p><a href="http://vaaaaaanquish.hatenablog.com/entry/2016/08/08/160353">Python&#x3067;Google Cloud Vision&#x3092;&#x4F7F;&#x3063;&#x305F;&#x9854;&#x691C;&#x51FA; - Stimulator</a>のコードを参考にします。</p>

<p>Session()、Request()関数あたりが、該当処理になりそうです。</p>

<h4 id="とりあえずリクエスト処理を行う">とりあえずリクエスト処理を行う。</h4>

<p>「みんなの<a class="keyword" href="http://d.hatena.ne.jp/keyword/Python">Python</a>」では、Webリクエスト処理として、標準ライブラリのurllibが紹介されていましたが
　<strong><em>今風ではない？</em></strong>ということでしょうか。
   こちらの記事を参考に、Requestsライブラリを利用していきます。</p>

<p><a href="http://requests-docs-ja.readthedocs.io/en/latest/user/quickstart/">&#x30AF;&#x30A4;&#x30C3;&#x30AF;&#x30B9;&#x30BF;&#x30FC;&#x30C8; &mdash; requests-docs-ja 1.0.4 documentation</a></p>

<p><script src="https://gist.github.com/707c5e61a4989ac51c04195c3fcac157.js"> </script></p>

<p><a href="https://gist.github.com/707c5e61a4989ac51c04195c3fcac157">とりあえずリクエスト</a></p>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/API">API</a>にリクエストを投げることができました（と思います。）</p>

<p>とはいえ、結果は返ってきていないです。</p>

<p>というのも、肝心のイメージデータを渡していません。</p>

<h4 id="イメージデータを渡す">イメージデータを渡す</h4>

<p>イメージデータですが、CloudVisonの<a class="keyword" href="http://d.hatena.ne.jp/keyword/API">API</a>はHTTPのPOSTメソッドで、かつ<a class="keyword" href="http://d.hatena.ne.jp/keyword/JSON">JSON</a>形式のデータを
リクエストボディに渡す仕様になっています。</p>

<p><a href="https://cloud.google.com/vision/docs/requests-and-responses?hl=ja#post_requests">Cloud Vision API &#x306E;&#x30EA;&#x30AF;&#x30A8;&#x30B9;&#x30C8;&#x3068;&#x30EC;&#x30B9;&#x30DD;&#x30F3;&#x30B9; &nbsp;|&nbsp; Google Cloud Vision API &#x30C9;&#x30AD;&#x30E5;&#x30E1;&#x30F3;&#x30C8; &nbsp;|&nbsp; Google Cloud Platform</a></p>

<p>そもそも、HTTPのPOSTメソッドってなんじゃ、みたいな状態ですが
それっぽいことを書いています。</p>

<p>このへんの事は、以下を読むとなんとなくほーん、という感じになります。</p>

<p><div class="hatena-asin-detail"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774142042/hatena-blog-22/"><img src="https://images-fe.ssl-images-amazon.com/images/I/51qo6pgjaSL._SL160_.jpg" class="hatena-asin-detail-image" alt="Webを支える技術 -HTTP、URI、HTML、そしてREST (WEB+DB PRESS plus)" title="Webを支える技術 -HTTP、URI、HTML、そしてREST (WEB+DB PRESS plus)"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774142042/hatena-blog-22/">Webを支える技術 -HTTP、URI、HTML、そしてREST (WEB+DB PRESS plus)</a></p><ul><li><span class="hatena-asin-detail-label">作者:</span> 山本陽平</li><li><span class="hatena-asin-detail-label">出版社/メーカー:</span> <a class="keyword" href="http://d.hatena.ne.jp/keyword/%B5%BB%BD%D1%C9%BE%CF%C0%BC%D2">技術評論社</a></li><li><span class="hatena-asin-detail-label">発売日:</span> 2010/04/08</li><li><span class="hatena-asin-detail-label">メディア:</span> 単行本（ソフトカバー）</li><li><span class="hatena-asin-detail-label">購入</span>: 143人 <span class="hatena-asin-detail-label">クリック</span>: 4,320回</li><li><a href="http://d.hatena.ne.jp/asin/4774142042/hatena-blog-22" target="_blank">この商品を含むブログ (182件) を見る</a></li></ul></div><div class="hatena-asin-detail-foot"></div></div></p>

<p>中身が薄いわりに、ながくなったので次回に回します。</p>

<p>※HTTPリクエストの中身をみたいのですが、なにかよい方法はないでしょうか。
<a class="keyword" href="http://d.hatena.ne.jp/keyword/Wireshark">Wireshark</a>で見れるかも！と思い立って覗いたのですが、膨大な量のパケットが飛び交っていて
どれが目的のリクエストなのかがわからず。。。</p>

<p>PyCharmでそういった素敵なデバック機能はないのでしょうか。</p>

-----
--------
AUTHOR: konoemario
TITLE: Python初心者:CloudVisonを使ってみた（0)
BASENAME: 2017/02/14/201936
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 02/14/2017 20:19:36
CATEGORY: プログラム
CATEGORY: Python
IMAGE: https://images-fe.ssl-images-amazon.com/images/I/61vpArlxcQL._SL160_.jpg
-----
BODY:
<h2 id="目次">目次</h2>

<ul class="table-of-contents">
    <li><a href="#目次">目次</a><ul>
            <li><a href="#みんなのPythonの読み方">みんなのPythonの読み方</a></li>
            <li><a href="#Cloud-Vison-APIで遊んでみる">Cloud Vison APIで遊んでみる</a></li>
        </ul>
    </li>
</ul>

<h3 id="みんなのPythonの読み方">みんなの<a class="keyword" href="http://d.hatena.ne.jp/keyword/Python">Python</a>の読み方</h3>

<p>早速、<a class="keyword" href="http://d.hatena.ne.jp/keyword/Python">Python</a>に触れていきたいと思います。
とりあえず、「みんなの<a class="keyword" href="http://d.hatena.ne.jp/keyword/Python">Python</a>」を買ったので、読み始めました。</p>

<p><div class="hatena-asin-detail"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/479738946X/hatena-blog-22/"><img src="https://images-fe.ssl-images-amazon.com/images/I/61vpArlxcQL._SL160_.jpg" class="hatena-asin-detail-image" alt="みんなのPython 第4版" title="みんなのPython 第4版"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/479738946X/hatena-blog-22/">みんなのPython 第4版</a></p><ul><li><span class="hatena-asin-detail-label">作者:</span> <a class="keyword" href="http://d.hatena.ne.jp/keyword/%BC%C6%C5%C4%BD%DF">柴田淳</a></li><li><span class="hatena-asin-detail-label">出版社/メーカー:</span> SBクリエイティブ</li><li><span class="hatena-asin-detail-label">発売日:</span> 2016/12/22</li><li><span class="hatena-asin-detail-label">メディア:</span> 単行本</li><li><a href="http://d.hatena.ne.jp/asin/479738946X/hatena-blog-22" target="_blank">この商品を含むブログ (1件) を見る</a></li></ul></div><div class="hatena-asin-detail-foot"></div></div></p>

<p>「みんなの<a class="keyword" href="http://d.hatena.ne.jp/keyword/Python">Python</a>」の目次は、以下の通りになっています。</p>

<ol>
<li><a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D7%A5%ED%A5%B0%A5%E9%A5%DF%A5%F3%A5%B0%B8%C0%B8%EC">プログラミング言語</a> <a class="keyword" href="http://d.hatena.ne.jp/keyword/Python">Python</a></li>
<li><a class="keyword" href="http://d.hatena.ne.jp/keyword/Python">Python</a>でプログラミングをはじめよう</li>
<li><a class="keyword" href="http://d.hatena.ne.jp/keyword/Python">Python</a>の基礎をマスターする</li>
<li>組み込み型を使いこなす</li>
<li><a class="keyword" href="http://d.hatena.ne.jp/keyword/Python">Python</a>と<a class="keyword" href="http://d.hatena.ne.jp/keyword/%B4%D8%BF%F4%B7%BF%A5%D7%A5%ED%A5%B0%A5%E9%A5%DF%A5%F3%A5%B0">関数型プログラミング</a></li>
<li>クラスとオブジェクト思考開発</li>
<li>クラスの継承と高度なオブジェクト思考機能</li>
<li>モジュール</li>
<li>スコープとオブジェクト</li>
<li>例外処理</li>
<li>標準ライブラリを使う</li>
<li><a class="keyword" href="http://d.hatena.ne.jp/keyword/Python">Python</a>とデータサイエンス</li>
<li>Python2</li>
</ol>


<p>内容をざっくりとみたのですが、第１章〜第３章までは「Pycharm」を使って手を動かし
以降の章については、電車の中で、眺めるだけにしました。</p>

<p>というのも、使ってみないとなんともいえないなぁという要素が多いです。</p>

<p>ですので実際に、目的に沿った動くものを作ることにしました。</p>

<h3 id="Cloud-Vison-APIで遊んでみる">Cloud Vison <a class="keyword" href="http://d.hatena.ne.jp/keyword/API">API</a>で遊んでみる</h3>

<p>実際に作るものがないと、なかなかモチベーションがあがってこないです。
ここでは、<a class="keyword" href="http://d.hatena.ne.jp/keyword/Python">Python</a>に向いているかどうかは<strong><em>一切無視</em></strong>で、楽しそうなネタがないかなぁというところで
いろいろ探してみました。</p>

<p>結果、CloudVisionという非常におもしろそうな、サービスがあったので、こちらを<a class="keyword" href="http://d.hatena.ne.jp/keyword/Python">Python</a>で使ってみたいと思います。</p>

<p><iframe src="//hatenablog-parts.com/embed?url=https%3A%2F%2Fsyncer.jp%2Fcloud-vision-api" title="Cloud Vision APIの使い方まとめ" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://syncer.jp/cloud-vision-api">syncer.jp</a></cite></p>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/Google">Google</a>さんが用意している<a class="keyword" href="http://d.hatena.ne.jp/keyword/API">API</a>で画像を渡すことで、いろいろな解析結果が返ってくるみたいです。</p>

<p>中でも、画像の顔認識結果から、対象人物の表情を読み取り、感情の結果を返してくれるという機能に、非常に期待しております。
<a class="keyword" href="http://d.hatena.ne.jp/keyword/%B5%A1%B3%A3%B3%D8%BD%AC">機械学習</a>はハードルが高そうなので、とりあえずありもののサービスを使うこととします。</p>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/Python">Python</a>でCloudVisionを使っている記事は検索すればたくさんでてきます。
（ありがたや、ありがたや）</p>

<p>ここでは、いろいろな記事や、「みんなの<a class="keyword" href="http://d.hatena.ne.jp/keyword/Python">Python</a>」から得た知識等を利用して、少しずつ進めて行きたいと思います！</p>

<p>長くなりそうなので、次回に続きます。</p>

-----
--------
AUTHOR: konoemario
TITLE: コーディング中に聞きたいBGMメモ
BASENAME: 2017/02/13/234131
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 02/13/2017 23:41:31
CATEGORY: プログラム
CATEGORY: 幸せについて
-----
BODY:
<h3>日記</h3>

<p>月曜に会社に無事会社に行くことのできたみなさん、こんばんは。</p>

<p>無事に行けた、とホッとする反面、仕事に対するやる気のなさにびっくりします。</p>

<p>会社の同期が、朝遅刻気味になっているそうで、すこし鬱の傾向が見られ心配です。
その同期の先輩は、既に鬱で休職したみたいです。
そのまた部長もメンタルをやられ、休職中とのことです。</p>

<p>人を壊してまでやる仕事ってなんなんですかね。</p>

<p>本当に忙しい時は、残業、休日出勤で時間を投入してなんとかするのではなく
終わらない、という決断をするのも大事かと思います。</p>

<p>その仕事が終わらなかった時、責任を取るのは誰でしょうか。</p>

<p>大半は、自身ではなく組織です。</p>

<p>個人の頑張りで、なんとかしてしまうのではなく、できないものはできないと開きなおりましょう。</p>

<p>もちろん、個人でなんとかしようとがんばる姿勢は、とても大切で、尊敬に値します。
優れたリーダーになれるかもしれません。</p>

<p>ただ、組織が、個人のがんばりに期待して、手法を何も変えないようでは
いつまでたっても腐ったやり方が横行します。</p>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A5%C9%A5%E9%A1%BC%BF%B4%CD%FD%B3%D8">アドラー心理学</a>に、自分の課題と他者の課題を分離せよ、自分の課題だけに集中すればよいということが書かれています。
自分の課題と、他者の課題の区別の仕方は、</p>

<p>「その選択によってもたらせる結末を最終的に引き受けるのは誰か」</p>

<p>だそうです。</p>

<p>つまり、糞みたいなプロジェクトが失敗しようがしまいが、私にはまったく関係がないということです。</p>

<p>すみません、こう考えないと、私自身もメンタルがやられます。</p>

<h3>本題</h3>

<p>作業中によく聴くBGMをメモがてら貼っておきます。
みなさんもオススメがあればぜひ教えてください。</p>

<h5>ライブ配信</h5>

<p>おしゃれな<a class="keyword" href="http://d.hatena.ne.jp/keyword/hiphop">hiphop</a>系（だと認識してます。音楽も詳しくないんだ。）
24時間流れてる気がする。毎朝聞いてる。</p>

<p><iframe width="459" height="344" src="https://www.youtube.com/embed/ljQsRLN2dXA?feature=oembed" frameborder="0" allowfullscreen></iframe><cite class="hatena-citation"><a href="https://www.youtube.com/watch?v=ljQsRLN2dXA">www.youtube.com</a></cite></p>

<p>こっちも似たようなやつ。</p>

<p><iframe width="459" height="344" src="https://www.youtube.com/embed/LiXKCGPrFts?feature=oembed" frameborder="0" allowfullscreen></iframe><cite class="hatena-citation"><a href="https://www.youtube.com/watch?v=LiXKCGPrFts">www.youtube.com</a></cite></p>

<h5><a class="keyword" href="http://d.hatena.ne.jp/keyword/Nujabes">Nujabes</a></h5>

<p>大好き。
20:00〜の<a class="keyword" href="http://d.hatena.ne.jp/keyword/Shingo2">Shingo2</a>の「Luv(sic)」はよい曲。
この動画で知った、49:10~あたりの<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%AF%A5%E9%A5%E0%A5%DC%A5%F3">クラムボン</a>の「Folklore」は本当にささった。</p>

<p><iframe width="480" height="270" src="https://www.youtube.com/embed/YibGpBSPibI?start=180&feature=oembed" frameborder="0" allowfullscreen></iframe><cite class="hatena-citation"><a href="https://www.youtube.com/watch?v=YibGpBSPibI&t=180s">www.youtube.com</a></cite></p>

<h5>定番かもしれないゲームBGM</h5>

<p>これも、テンションあがる。
ただ、該当のゲームをやったことがあるか、というと全くなく
初めて聴くものが多いのだけれども好きになった。</p>

<p><iframe width="459" height="344" src="https://www.youtube.com/embed/TYeAvS7VxXw?start=2979&feature=oembed" frameborder="0" allowfullscreen></iframe><cite class="hatena-citation"><a href="https://www.youtube.com/watch?v=TYeAvS7VxXw&t=2979s">www.youtube.com</a></cite></p>

-----
--------
AUTHOR: konoemario
TITLE: 流れに乗っかってPythonを始めました
BASENAME: 2017/02/12/194855
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 02/12/2017 19:48:55
CATEGORY: プログラム
CATEGORY: 幸せについて
CATEGORY: Python
IMAGE: https://images-fe.ssl-images-amazon.com/images/I/61vpArlxcQL._SL160_.jpg
-----
BODY:
<h3>日記</h3>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/YouTube">YouTube</a>で音楽を聴いていたら、去年の今頃リリースされていた音楽が流れていました。
もう一年たったんだなぁと。</p>

<p>この一年を振り返った時に、僕は何を得たんだろうかと考えつらくなりました。</p>

<p>仕事面では、進んでるのか進んでないのかさっぱりわからないプロジェクトに
ただただ精神と時間をすり減らしました。</p>

<p>残業で唯一得たお金は、為替に突っ込んで、瞬く間に消えました。</p>

<p>人を好きになりました。学生の頃以来の、胸キュンです。</p>

<p>でも相手はアイドルです。</p>

<p>観る映画・読む本は、昔見たものを繰り返し観ることが多くなりました。
安心して見れるからだと思います。</p>

<p>ゲームも<a class="keyword" href="http://d.hatena.ne.jp/keyword/FIFA%A5%B7%A5%EA%A1%BC%A5%BA">FIFAシリーズ</a>を毎年少しずつやっている。
うまくなったかなと思うと、次のシリーズが出る。毎年リセットされる。</p>

<p>既に死んでいる気がして仕方がない。</p>

<p>日曜の夜は、どうしても暗くなりますね。とりあえず前に進んでいる感がほしい、今日このごろです。
前っていっても、どこに向かうかわかっていないと、それこそ進んでいるかどうかなんてわからないわけですが
とりあえず、ある地点からある地点へ動いたということが大事だ、と思うことにします。</p>

<p>そして、動いた証跡を、人のいる場所に出していくことが大事なんだろうとも思います。</p>

<h3>本題</h3>

<p>前回、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%B5%A1%B3%A3%B3%D8%BD%AC">機械学習</a>のほんの表面に触れました。</p>

<p><iframe src="http://tohutokonsome.hatenablog.com/embed/2017/02/07/230949" title="機械学習に感動した話。 - 豆腐とコンソメ" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://tohutokonsome.hatenablog.com/entry/2017/02/07/230949">tohutokonsome.hatenablog.com</a></cite></p>

<p>感動しました。</p>

<p>ゴール地点はまったく見えないけれども、自分も<a class="keyword" href="http://d.hatena.ne.jp/keyword/Python">Python</a>を初めてみようと思いました。</p>

<h4>やったこと</h4>

<h5>とりあえず本を購入</h5>

<p>いろんなサイトでおすすめされている、「みんなの<a class="keyword" href="http://d.hatena.ne.jp/keyword/Python">Python</a>」を買いました。
「みんなの」部分を、自身の名前に変えてモチベーションをあげたという記事にならい
さっそく、「<a class="keyword" href="http://d.hatena.ne.jp/keyword/%BA%CC%B2%BB">彩音</a>の<a class="keyword" href="http://d.hatena.ne.jp/keyword/Python">Python</a>」と書き加えてみましたが、効果は抜群です。</p>

<p><div class="hatena-asin-detail"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/479738946X/hatena-blog-22/"><img src="https://images-fe.ssl-images-amazon.com/images/I/61vpArlxcQL._SL160_.jpg" class="hatena-asin-detail-image" alt="みんなのPython 第4版" title="みんなのPython 第4版"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/479738946X/hatena-blog-22/">みんなのPython 第4版</a></p><ul><li><span class="hatena-asin-detail-label">作者:</span> <a class="keyword" href="http://d.hatena.ne.jp/keyword/%BC%C6%C5%C4%BD%DF">柴田淳</a></li><li><span class="hatena-asin-detail-label">出版社/メーカー:</span> SBクリエイティブ</li><li><span class="hatena-asin-detail-label">発売日:</span> 2016/12/22</li><li><span class="hatena-asin-detail-label">メディア:</span> 単行本</li><li><a href="http://d.hatena.ne.jp/asin/479738946X/hatena-blog-22" target="_blank">この商品を含むブログ (1件) を見る</a></li></ul></div><div class="hatena-asin-detail-foot"></div></div></p>

<h5>開発環境を導入</h5>

<p><iframe src="//hatenablog-parts.com/embed?url=https%3A%2F%2Fwww.jetbrains.com%2Fpycharm%2F" title="PyCharm" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://www.jetbrains.com/pycharm/">www.jetbrains.com</a></cite></p>

<p>PyCharmが書籍でも紹介されていたので、こちらを使っていくことにします。
無料の「CommunityEdition」と有料の「ProfessionalEdition」がありますが
無料の「CommunityEdition」を使っていきます。
Webアプリケーションを作る場合には、「ProfessionalEdition」が良いという記事がありましたが
とりあえずは、無料でさわってみて必要に応じて切り替えたいと思います。</p>

<p>また、<a class="keyword" href="http://d.hatena.ne.jp/keyword/Python">Python</a>ですが、こちらも書籍で紹介されている「Anaconda」を使用していくことにします。</p>

<p>PyCharmで新規プロジェクトを作った後に
<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%BF%A5%D7%A5%EA%A5%BF">インタプリタ</a>を「Anaconda」を選んであげればOKみたいです。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170212/20170212193502.png" alt="f:id:konoemario:20170212193502p:plain:w300" title="f:id:konoemario:20170212193502p:plain:w300" class="hatena-fotolife" style="width:300px" itemprop="image"></span></p>

<p>また、キー<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D0%A5%A4%A5%F3%A5%C7%A5%A3%A5%F3%A5%B0">バインディング</a>を<a class="keyword" href="http://d.hatena.ne.jp/keyword/Vim">Vim</a>にできるみたいなので、こちらも設定します。</p>

<p>PyCharmCommunityEdition->Preferences->Plugins->Install JetBrains pluginから
「<a class="keyword" href="http://d.hatena.ne.jp/keyword/Vim">Vim</a>」と検索すれば、IdealVimという<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D7%A5%E9%A5%B0%A5%A4%A5%F3">プラグイン</a>が出てくるので選択して、インストールします。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170212/20170212194710.png" alt="f:id:konoemario:20170212194710p:plain:w300" title="f:id:konoemario:20170212194710p:plain:w300" class="hatena-fotolife" style="width:300px" itemprop="image"></span></p>

<p>また、PyCharmのプログラムを起動する「Run」のショートカットキーが
<a class="keyword" href="http://d.hatena.ne.jp/keyword/Vim">Vim</a>と競合？したためか、動かないので、キーマップを変更しました。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170212/20170212194713.png" alt="f:id:konoemario:20170212194713p:plain:w300" title="f:id:konoemario:20170212194713p:plain:w300" class="hatena-fotolife" style="width:300px" itemprop="image"></span></p>

<p>PyCharmCommunityEdition->Preferences->Keymap から
「Run」のショートカットキーに alt + Rを追加しました。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170212/20170212194713.png" alt="f:id:konoemario:20170212194713p:plain:w300" title="f:id:konoemario:20170212194713p:plain:w300" class="hatena-fotolife" style="width:300px" itemprop="image"></span></p>

<h5>さらにモチベーションをあげるために</h5>

<p>勉強会に初参加することにしました。
勉強会を検索してみると、初心者歓迎とかは多いのですが、20代〜、若手〜とか書いてあると不安になりますね！
とりあえず行ってみることにします。</p>

<p><iframe src="//hatenablog-parts.com/embed?url=https%3A%2F%2Fconnpass.com%2Fevent%2F50580%2F" title="2/21開催 「Python」入門講座 ★参加無料★ (2017/02/21 18:30〜)" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://connpass.com/event/50580/">connpass.com</a></cite></p>

<p>なんとなく<a class="keyword" href="http://d.hatena.ne.jp/keyword/%B5%A1%B3%A3%B3%D8%BD%AC">機械学習</a>にたどり着く前に、ちがう方向に行きそうな気配が既にありますが、
やっていこうと思います！
(既に<a class="keyword" href="http://d.hatena.ne.jp/keyword/Python">Python</a>でまずWebアプリケーションを作りたいと思っています。)</p>

-----
--------
AUTHOR: konoemario
TITLE: 
BASENAME: 2017/02/14/085117
STATUS: Draft
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 02/11/2017 17:37:45
-----
BODY:
<p>この本を読んで思ったこと。</p><br />
<br />
<p>プライシング能力</p><p>マーケット感覚を身につけるには</p><p>プライシング能力<br />
市場に評価される方法を学ぶ<br />
  いかに市場の声をフィードバックしていくか</p><p>インセンティブシステムの理解<br />
  泥臭い人間の思想<br />
成功と失敗の関係性を学ぶ<br />
  失敗してフィードバックしろ<br />
市場性の高い環境</p><br />
<p>従来</p><p>人が物を買うときには、相場より安いかどうか、でそれがお買い得かどうかを判断する。<br />
コストがこれだけかかるから、この値段にする。</p><p>これから</p><p>自分がそのものについて価値があるかどうかを判断し、それに見合った値段かどうかを判断する癖をつける。</p><p>売り手側としては、買い手側の状況を想像し、どこに価値があって購入に至っているのかを考えることで、金塊を見つけることができる。<br />
金塊の値段もユーザーならいくら払うかという発想で値段をつける。</p><p>高いとみんなが思えば、その業界は廃れる。<br />
市場に評価されるということ。</p><p>自身の価値はいくらだ。<br />
当然わからない。自分でわからないなら市場に評価させよう。</p><br />
<br />
<br />
<br />
<p>この発想の延長に、商品の値段はもっと流動してもいいのではと思った。</p><br />
<br />
<br />
<p>いい本、映画、情報にしろ、何かしらのコンテンツを買った時、この値段でこれか、というときと、この値段でこれは安いと思う時がある。</p><p>購入者側としては、この値段でこれは安い！と思えるほうが当然いいわけだけれども、作成者側としては、もう少し値段上げても良かったかなと思うわけである。</p><p>難しいのが、コンテンツに対する値段の感じ方は、本当に人それぞれだから</p>

-----
--------
AUTHOR: konoemario
TITLE: 機械学習に感動した話。
BASENAME: 2017/02/07/230949
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 02/07/2017 23:09:49
CATEGORY: 幸せについて
CATEGORY: プログラム
IMAGE: https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170207/20170207225531.jpg
-----
BODY:
<h3>日記</h3>

<p>好きなアイドル（ピンキー）のおっぱいがやけに大きくみえる。</p>

<p>こちらを見ていただきたい。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170207/20170207225531.jpg" alt="f:id:konoemario:20170207225531j:plain:w300" title="f:id:konoemario:20170207225531j:plain:w300" class="hatena-fotolife" style="width:300px" itemprop="image"></span></p>

<p>何カップあるのだろうか。
（念のためですが、右の子です。）</p>

<p>気になって眠れない。</p>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/Google%C0%E8%C0%B8">Google先生</a>に答えを求めていると、こんな記事をみつけた。</p>

<p><iframe src="//hatenablog-parts.com/embed?url=http%3A%2F%2Fqiita.com%2Fsummer4an%2Fitems%2Fdb0124eee8103c1d3b85" title="ディープラーニングで顔写真から巨乳かどうかを判別してみる (うまくいったか微妙) - Qiita" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://qiita.com/summer4an/items/db0124eee8103c1d3b85">qiita.com</a></cite></p>

<p>すごすぎる！しかも、実際に判定するフォームまでついている。</p>

<p><a href="http://www.nakajimadevnakajima.info/kyohin/form.html">http://www.nakajimadevnakajima.info/kyohin/form.html</a></p>

<p>試しにやってみたところ、「誤判定」という結果が返ってきたものの夢を膨らませるには十分すぎる。
（ピンキーの顔認識までできているし、冗談抜きに感動した。左の方は対象外になっているのかな。)
　</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170207/20170207225637.png" alt="f:id:konoemario:20170207225637p:plain:w300" title="f:id:konoemario:20170207225637p:plain:w300" class="hatena-fotolife" style="width:300px" itemprop="image"></span></p>

<p>しかし、ここで終わっては答えがわからない。</p>

<p>そこで、私が独自に持つ、おっぱいのサイズを判断してくれるエンジンを紹介したい。</p>

<p>LINEに希望の画像を送ると、おっぱいのサイズを教えてくれるという、なんともシンプルなサービスだ。
しかも、判断に利用される蓄積データは過去２９年分というなかなかのデータ量である。</p>

<p>利用した結果はこちら。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170207/20170207225538.png" alt="f:id:konoemario:20170207225538p:plain:w300" title="f:id:konoemario:20170207225538p:plain:w300" class="hatena-fotolife" style="width:300px" itemprop="image"></span></p>

<p>これは、これでムラムラして眠れない。</p>

<p>（でぃーというのは右の子がDカップであるという意味のはずです。）</p>

<h3>公開直後追記</h3>

<p>本物の<a class="keyword" href="http://d.hatena.ne.jp/keyword/%B5%A1%B3%A3%B3%D8%BD%AC">機械学習</a>を利用した結果をよく見ますと、「巨乳」と出ていますね。
（おそるべし。。。）</p>

<p>誤判定は、入力フォームの結果と判定結果が異なる、という意味でしょうか。
ピンキーが貧乳であってほしいという私の希望が、誤解を招く結果になってしまいました。</p>

-----
--------
AUTHOR: konoemario
TITLE: 幸せになる方法はわかっているけれども、なんかちがう
BASENAME: 2017/02/07/001423
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 02/07/2017 00:14:23
CATEGORY: プログラム
CATEGORY: 幸せについて
IMAGE: https://images-fe.ssl-images-amazon.com/images/I/51GLVSqdPLL._SL160_.jpg
-----
BODY:
<h2>日記</h2>

<p>月曜を無事乗り越えたみなさん、こんばんは。
月曜さぼってしまった方は、今日の夜震えることになると思いますが頑張って下さい。</p>

<p>会社に行けたので、前向きなことを書きます。</p>

<h2>幸せになるためには</h2>

<p>ありふれていることしか、書けません。
といってもありふれている内容には、ありふれているなりに納得することが多いです。</p>

<p>自分が思う幸せになる方法を列挙してみます。</p>

<h4>現状の価値を認識しよう</h4>

<p>今日、電車の中で「マーケット感覚を身につけよう」を読んでいました。</p>

<p><div class="hatena-asin-detail"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4478064784/hatena-blog-22/"><img src="https://images-fe.ssl-images-amazon.com/images/I/51GLVSqdPLL._SL160_.jpg" class="hatena-asin-detail-image" alt="マーケット感覚を身につけよう---「これから何が売れるのか?」わかる人になる5つの方法" title="マーケット感覚を身につけよう---「これから何が売れるのか?」わかる人になる5つの方法"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4478064784/hatena-blog-22/">マーケット感覚を身につけよう---「これから何が売れるのか?」わかる人になる5つの方法</a></p><ul><li><span class="hatena-asin-detail-label">作者:</span> ちきりん</li><li><span class="hatena-asin-detail-label">出版社/メーカー:</span> <a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C0%A5%A4%A5%E4%A5%E2%A5%F3%A5%C9%BC%D2">ダイヤモンド社</a></li><li><span class="hatena-asin-detail-label">発売日:</span> 2015/02/20</li><li><span class="hatena-asin-detail-label">メディア:</span> 単行本（ソフトカバー）</li><li><a href="http://d.hatena.ne.jp/asin/4478064784/hatena-blog-22" target="_blank">この商品を含むブログ (26件) を見る</a></li></ul></div><div class="hatena-asin-detail-foot"></div></div></p>

<p>友人から借りた、「自分の時間を取り戻そう」が読みやすく、確かになぁと思う内容が多かったので、同じシリーズである
「マーケット感覚を身につけよう」を読み始めました。</p>

<p>本書の冒頭で、金塊を価値として認識する能力がなければ、金塊を手に入れても不安が消える日はない
という文書が書いてありました。
ここでいう金塊とは、商売になるチャンスだったりを指しているのですが、それを認識することができなければ、
そのチャンスも生かすことができないんだよということが言いたい一文だと思っています。
（まだ冒頭しか読めてないの間違ってたらごめんなさい。）</p>

<p>この本は、あくまでマーケット感覚なることについて書かれたものですが、
価値あるものを価値として認識するということは、幸せを考える上でとても大事なことだと思います。</p>

<p>不満の大半は、手に入らないものへの渇望から生まれてくると思っています。
とはいえ、渇望したものを手にした途端、きっとまた欲しいものがでてくるはずです。</p>

<p>永遠に自分自身を満たすものがない以上、どこかで満足をしない限り、幸せになることはできない、と考えています。</p>

<p>この根拠は、小学生のとき、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%C7%A4%C5%B7%C6%B2">任天堂</a>６４の「<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B4%A1%BC%A5%EB%A5%C7%A5%F3%A5%A2%A5%A4">ゴールデンアイ</a>」を初めて購入したとき、これは一生遊べるゲームだ！と大興奮したのですが1年近くプレイすると、さすがに飽きてきた、という私の経験からきています。</p>

<p>となると、大事なのは現状の幸せを認識する能力だと思っています。</p>

<h4>具体的な方法</h4>

<p>このへんは、実践してないのですべて想像です。</p>

<h5>瞑想をする</h5>

<p>瞑想については、まったく詳しくないのですが、呼吸を意識する、という一点だけで自分の中で信ぴょう性がかなり高いです。
スポーツにしろ、仕事にしろ、無意識でやっていることを、いかに意識的に改善していく例というのは
たくさんあると思います。
サッカーの本田さんも、歩き方から工夫したみたいな話もあった気がします。（すごいうろ覚えです。）</p>

<p>呼吸なんか毎秒レベルでしてるはずなので、これを改善するというのは、人類として進化するんじゃねえかぐらいの期待度が
私の中にあります。</p>

<h5><a class="keyword" href="http://d.hatena.ne.jp/keyword/SNS">SNS</a>をやめる</h5>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/%C1%EA%C2%D0%C9%BE%B2%C1">相対評価</a>で幸せを考える限り、終わりがありません。
<a class="keyword" href="http://d.hatena.ne.jp/keyword/SNS">SNS</a>なんか、幸せの情報で溢れかえっているので、見るべきじゃありません。
いいね！されて喜んでいるようじゃだめです。
<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A5%C9%A5%E9%A1%BC">アドラー</a>の心理学にも、承認欲求ではなく、自分自身を褒めるようにしましょう的なことが書いてあったはずです。</p>

<h5>つまりは、</h5>

<p>欲望を捨て、現状に価値を見出し、他者の期待に応えるでもなく、自分で自分を褒めれるようにしよう。</p>

<p>みたいなことだと思うのです。</p>

<p>なので、日々、ピンキーと付き合いたいだとか、会社をいますぐ辞めたいだとか、自己管理能力がまったくないだとか
<a class="keyword" href="http://d.hatena.ne.jp/keyword/COBOL">COBOL</a>しかできないの？まじかよ、とかいわれようが、あったかい布団で寝れればいいじゃないと思うことが
幸せの第一歩だと思うのですよ。</p>

<h5>でもね、心が震えない</h5>

<p>足りないものに対する渇望を諦めることは、救いになるかもしれない。
でも、それを諦めるのは、サッカーを一生懸命やってる最中に、負けてもたががサッカーだしなぁと思ってしまうことに
似ている気がする。</p>

<p>心の平穏を守るためには、そういう考え方も持っておくべきだけれども、苦しい思いをして得るものもきっとあるだろう。</p>

<p>うん、とても前向きな気持ちになったので、ピンキーと付き合いたいという気持ちは大事にしたいと思えてきました。</p>

<p>なので、以下の試みは途中までしか作ってないけれども、一旦ピンキーに連携しちゃおうかと思います。</p>

<p><iframe src="http://tohutokonsome.hatenablog.com/embed/2017/01/31/230551" title="COBOLERが頑張る：日めくりカレンダー：参考サイト - 豆腐とコンソメ" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://tohutokonsome.hatenablog.com/entry/2017/01/31/230551">tohutokonsome.hatenablog.com</a></cite></p>

<p data-height="631" data-theme-id="0" data-slug-hash="EZpjMd" data-default-tab="result" data-user="tohu" data-embed-version="2" data-pen-title="EZpjMd" class="codepen">See the Pen <a href="http://codepen.io/tohu/pen/EZpjMd/">EZpjMd</a> by tohu (<a href="http://codepen.io/tohu">@tohu</a>) on <a href="http://codepen.io">CodePen</a>.</p>


<script async src="https://production-assets.codepen.io/assets/embed/ei.js"></script>




-----
--------
AUTHOR: konoemario
TITLE: 自分はプログラムが好きなのだろうか
BASENAME: 2017/02/06/013616
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 02/06/2017 01:36:16
CATEGORY: プログラム
CATEGORY: 幸せについて
IMAGE: https://images-fe.ssl-images-amazon.com/images/I/51JvwGFV4kL._SL160_.jpg
-----
BODY:
<h2>日記</h2>

<p>日曜の夜は不安で眠れない。</p>

<p>いろいろ考えすぎてしまう。</p>

<p>ふと、ブログを更新してみれば、寝れるかもしれない、という思いで書いてみる。</p>

<h3>不安</h3>

<p>不安は、仕事に行きたくない、という思いから発生している。
仕事に行きたくない理由を列挙すると以下のとおりである。</p>

<ul>
<li>要件もスケジュールも予算もすべてぐたぐだなプロジェクトの存在</li>
<li>自分の責任がどこまでなのかが不明</li>
<li>配下メンバーをうまく使うことができない</li>
<li>ユーザーのシステム部門の担当者の<a class="keyword" href="http://d.hatena.ne.jp/keyword/%BF%CD%B4%D6%C0%AD">人間性</a>が無理</li>
</ul>


<p>こうしてみると、いわゆるSEならではの不満が多い。<br/>
そしてこの年齢になると、自分はこんなことをやりたかったのか、と自問自答することが多い。<br/>
自分はもっと開発がしたかったのでは、と思う。</p>

<p>私の会社はユーザー系のIT企業で、周りを見渡せば、ホスト担当で<a class="keyword" href="http://d.hatena.ne.jp/keyword/COBOL">COBOL</a>しか使わないよっていう人もたくさんいる。<br/>
サーバー周りを担当している人でも、<a class="keyword" href="http://d.hatena.ne.jp/keyword/C%B8%C0%B8%EC">C言語</a>がメインだったりしていて
いわゆるレガシーなシステムが現役で動いている。</p>

<p>新しいことをやろうと考える人は、ほとんどいなくて、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%BC%AB%B8%CA%B7%BC%C8%AF">自己啓発</a>でプログラムを勉強してます、なんて人は全くいない。<br/>
会社のお金を利用して、社外の研究会や勉強会に出る人も少数派だ。</p>

<p>こんな環境だから、少しでもプログラムって楽しいなって思って自分で何かするやつは、とても目立つ。（いい意味で）<br/>
私も配属された直後は、<a class="keyword" href="http://d.hatena.ne.jp/keyword/COBOL">COBOL</a>でもExcelVBAでも、プログラムって楽しいなという気持ちで仕事ができていたと思う。</p>

<p>自分からいろいろ調べて、担当外の部分でもいろいろとコードを見たり、業務のドキュメントを読んだりとしてきた。<br/>
だから、こいつはできるやつだという評価はもらってきたと思う。</p>

<p>評価をもらい続けて気づけば、開発はいっさい行わずに、ユーザーとの調整、<a class="keyword" href="http://d.hatena.ne.jp/keyword/Excel">Excel</a>とWord文書の作成、配下メンバーのスケジュール管理等
やりたくないことばかりやるようになってしまった。</p>

<p>SEって大抵こんな状態の人ばかりだと思う。</p>

<p>SEの仕事はつまんないとか、SEは必要ないとかいう気はなくって
要件定義やプロジェクト管理だけをやっていて、手を動かすことがまったくない状態に不安を覚えている。</p>

<p>こんだけ炎上プロジェクトが多いのだから、優秀なPMという存在意義は大きい。<br/>
でもまったく触ったことのないシステムを管理していくことができるのだろうか。</p>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/%A4%BD%A4%E2%A4%BD%A4%E2">そもそも</a>、プロジェクト管理に向いている気がしないことも感じる。</p>

<p>そういう思いもあって、もっと開発できるポジションにつきたいって感じていた。<br/>
今の会社を辞めて、別の会社に行くなり、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D5%A5%EA%A1%BC%A5%E9%A5%F3%A5%B9">フリーランス</a>で頑張りたいとも思った。</p>

<p>だから、日々技術系の書籍を読んだり、ブログで情報を漁っているけれども、そういうものを読めば読むほど不安になる。
必要な情報は日々増えていって、求められる技術も変わっている。</p>

<p>最近では、良書だからおすすめと書かれていた「良いコードを書く技術」を読んだ。</p>

<p><div class="hatena-asin-detail"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774145963/hatena-blog-22/"><img src="https://images-fe.ssl-images-amazon.com/images/I/51JvwGFV4kL._SL160_.jpg" class="hatena-asin-detail-image" alt="良いコードを書く技術　?読みやすく保守しやすいプログラミング作法 (WEB+DB PRESS plus)" title="良いコードを書く技術　?読みやすく保守しやすいプログラミング作法 (WEB+DB PRESS plus)"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774145963/hatena-blog-22/">良いコードを書く技術　?読みやすく保守しやすいプログラミング作法 (WEB+DB PRESS plus)</a></p><ul><li><span class="hatena-asin-detail-label">作者:</span> 縣俊貴</li><li><span class="hatena-asin-detail-label">出版社/メーカー:</span> <a class="keyword" href="http://d.hatena.ne.jp/keyword/%B5%BB%BD%D1%C9%BE%CF%C0%BC%D2">技術評論社</a></li><li><span class="hatena-asin-detail-label">発売日:</span> 2011/04/09</li><li><span class="hatena-asin-detail-label">メディア:</span> 単行本（ソフトカバー）</li><li><span class="hatena-asin-detail-label">購入</span>: 46人 <span class="hatena-asin-detail-label">クリック</span>: 2,459回</li><li><a href="http://d.hatena.ne.jp/asin/4774145963/hatena-blog-22" target="_blank">この商品を含むブログ (68件) を見る</a></li></ul></div><div class="hatena-asin-detail-foot"></div></div></p>

<p>冒頭に以下のことが書かれていた。</p>

<ul>
<li><a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%AA%A1%BC%A5%D7%A5%F3%A5%BD%A1%BC%A5%B9">オープンソース</a>のコードを読め</li>
<li>とにかくコードを書け</li>
<li>道具(エディタ・ビルドの自動化・バージョン管理等)を最高の状態にしておけ</li>
</ul>


<p>最もなことが書いてあって、その通りだと思った。<br/>
でも、今の私に書いてあることを実践するモチベーションがまったくわいてこない。</p>

<p>たぶん、コードを書くことが、そこまで好きなことじゃないんだろうと思う。<br/>
すこし広い舞台で見れば、会社の多数派の人間も私自身もそうかわらないのだと思う。</p>

<p>今のぬるい会社を辞めて、エンジニアとしてやっていけるのだろうかと不安になる。<br/>
かといって、今の会社の業務をずっとやっていくのも、心が死んでいく気がする。</p>

<p>今年中に会社を辞めることは決意しているのだけれども、その後が見えない。</p>

-----
--------
AUTHOR: konoemario
TITLE: BoostnoteをMacとWindows環境に導入してみたがうまく同期できない
BASENAME: 2017/02/04/203554
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 02/04/2017 20:35:54
CATEGORY: プログラム
IMAGE: https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170204/20170204201858.png
-----
BODY:
<p>どなたか助けてくれるかもしれないということでメモ</p>

<h2>導入のきっかけ</h2>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/MacBook">MacBook</a>と<a class="keyword" href="http://d.hatena.ne.jp/keyword/iPhone">iPhone</a>間では、<a class="keyword" href="http://d.hatena.ne.jp/keyword/Evernote">Evernote</a>を使ってメモ帳を同期していました。
最近、FallOut4をやるために買ったきりの<a class="keyword" href="http://d.hatena.ne.jp/keyword/Windows8">Windows8</a>.1端末を有効活用しようと思いたち<a class="keyword" href="http://d.hatena.ne.jp/keyword/Evernote">Evernote</a>を<a class="keyword" href="http://d.hatena.ne.jp/keyword/Windows8">Windows8</a>.1端末にインストールしてました。</p>

<p>しかし、以下の問題があり、他に素敵なメモ帳はないかと探していました。</p>

<ul>
<li><a class="keyword" href="http://d.hatena.ne.jp/keyword/Windows">Windows</a>で<a class="keyword" href="http://d.hatena.ne.jp/keyword/Evernote">Evernote</a>を見ると、表示が汚い</li>
<li><a class="keyword" href="http://d.hatena.ne.jp/keyword/Evernote">Evernote</a>で同期できる端末の台数が無料プランでは2台に制限されていた</li>
</ul>


<p>適当にぐぐってみると、以下の記事があり、さっそく試してみることにしました。</p>

<h2>Boostnoteとは</h2>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D7%A5%ED%A5%B0%A5%E9%A5%DE">プログラマ</a>向けのメモ帳みたいです。</p>

<p><iframe src="//hatenablog-parts.com/embed?url=http%3A%2F%2Fnelog.jp%2Fboostnote" title="プログラマ向けのメモアプリ「Boostnote」が便利。Markdownメモ、スニペットの管理に。" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://nelog.jp/boostnote">nelog.jp</a></cite></p>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D7%A5%ED%A5%B0%A5%E9%A5%DE">プログラマ</a>向けという響きだけで、にやにやしながら導入することにしました。</p>

<h2>データ同期</h2>

<p>自分でもなんとか使えそうだ！と思ったのですが、やりたかったことは、<a class="keyword" href="http://d.hatena.ne.jp/keyword/MacBook">MacBook</a>と<a class="keyword" href="http://d.hatena.ne.jp/keyword/Windows8">Windows8</a>.1端末間のメモ帳の内容の同期です。
こちらも調べてみると、以下の記事があったので早速設定をしてみました。</p>

<p><iframe src="//hatenablog-parts.com/embed?url=http%3A%2F%2Fnelog.jp%2Fhow-to-sync-boostnote-memos" title="BoostnoteのメモをDropboxを用いて複数PC間で同期させる方法" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://nelog.jp/how-to-sync-boostnote-memos">nelog.jp</a></cite></p>

<h2>うまくいかない</h2>

<p>データ同期の記事を参考に<a class="keyword" href="http://d.hatena.ne.jp/keyword/Google">Google</a>ドライブを作成して、<a class="keyword" href="http://d.hatena.ne.jp/keyword/MacBook">MacBook</a>と<a class="keyword" href="http://d.hatena.ne.jp/keyword/Windows8">Windows8</a>.1端末から参照できるようにした。</p>

<h5>1.MacBookでGoogleDriveをストレージに指定</h5>

<p>[<span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170204/20170204201858.png" alt="f:id:konoemario:20170204201858p:plain:w300" title="f:id:konoemario:20170204201858p:plain:w300" class="hatena-fotolife" style="width:300px" itemprop="image"></span> ]</p>

<h5>2.MacBookでGoogleDrive配下にフォルダ、ノートを作成</h5>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170204/20170204202027.png" alt="f:id:konoemario:20170204202027p:plain:w300" title="f:id:konoemario:20170204202027p:plain:w300" class="hatena-fotolife" style="width:300px" itemprop="image"></span></p>

<h5>3.<a class="keyword" href="http://d.hatena.ne.jp/keyword/Windows8">Windows8</a>.1端末でGoogleDriveをストレージに指定</h5>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/Win8">Win8</a>.1端末は、テーマを黒にしました。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170204/20170204202058.png" alt="f:id:konoemario:20170204202058p:plain:w300" title="f:id:konoemario:20170204202058p:plain:w300" class="hatena-fotolife" style="width:300px" itemprop="image"></span></p>

<h5>4.<a class="keyword" href="http://d.hatena.ne.jp/keyword/Windows8">Windows8</a>.1端末でリロード(Ctrl + R)を行う。</h5>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170204/20170204202258.png" alt="f:id:konoemario:20170204202258p:plain:w300" title="f:id:konoemario:20170204202258p:plain:w300" class="hatena-fotolife" style="width:300px" itemprop="image"></span></p>

<h5>5.うまくいかず</h5>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/MacBook">MacBook</a>で編集されたフォルダ、ノートがでてくると思いきやでてこない。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170204/20170204203156.png" alt="f:id:konoemario:20170204203156p:plain:w300" title="f:id:konoemario:20170204203156p:plain:w300" class="hatena-fotolife" style="width:300px" itemprop="image"></span></p>

<p>ためしに、Windouws8.1端末からフォルダ、ノートを作成してみると、
<a class="keyword" href="http://d.hatena.ne.jp/keyword/MacBook">MacBook</a>側からはUnknown状態で参照することができた。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170204/20170204203141.png" alt="f:id:konoemario:20170204203141p:plain:w300" title="f:id:konoemario:20170204203141p:plain:w300" class="hatena-fotolife" style="width:300px" itemprop="image"></span></p>

<p>Boostnoteの問題ではなく、GoogleDriveの同期タイミングの問題なんでしょうか。</p>

-----
COMMENT:
AUTHOR: junp0819
IP: 126.247.9.126
DATE: 08/31/2017 17:50:47
ありがとうございます！
今後ともよろしくお願いします！
-----
COMMENT:
AUTHOR: konoemario
IP: 126.94.66.69
DATE: 08/31/2017 16:47:33
ご連絡ありがとうございます！使ってみます！
-----
COMMENT:
AUTHOR: junp0819
IP: 106.181.182.176
DATE: 08/31/2017 11:36:45
私、Boostnoteを開発しているチームのjunp0819と申します。

Boostnoteについて書いていただきまして誠にありがとうございます！

この度私たちは、Boostnoteのモバイル版をAppstore,Androidにてリリースしましたので、是非ご利用ください！

■App Store URL
https://itunes.apple.com/us/app/boostnote/id1273066636?l=ja&ls=1&mt=8

■GooglePlay URL
https://play.google.com/store/apps/details?id=io.boostnote


こちらに詳細を上げております。
http://boostnote.hatenablog.com/entry/2017/08/28/113045
-----
--------
AUTHOR: konoemario
TITLE: TeckAcademy無料体験をためしてみた
BASENAME: 2017/02/04/174428
STATUS: Draft
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 02/04/2017 17:44:28
CATEGORY: 開発系
-----
BODY:
<ol>
<li>
<h3>きっかけ</h3>
</li>
</ol>
<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/NHK">NHK</a>で女性の社会進出</p>
<p>過去に<a class="keyword" href="http://d.hatena.ne.jp/keyword/Wordpress">Wordpress</a>の構築を<a class="keyword" href="http://d.hatena.ne.jp/keyword/AWS">AWS</a>(アマゾン<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A6%A5%A7%A5%D6%A5%B5%A1%BC%A5%D3%A5%B9">ウェブサービス</a>)で試してみたりして結構楽しかった。ただ<a class="keyword" href="http://d.hatena.ne.jp/keyword/Wordpress">Wordpress</a>作ったはいいものの、書くことがなくて<a class="keyword" href="http://d.hatena.ne.jp/keyword/AWS">AWS</a>のEC2の<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%B9%A5%BF%A5%F3%A5%B9">インスタンス</a>は落としたままにしていた。</p>
<p>今回、「<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A4%CF%A4%C6%A4%CA%A5%D6%A5%ED%A5%B0">はてなブログ</a>」は記事を書くことを重視して、とりとめのないことを書いているが、今後</p>
<p> </p>
<p>aaa</p>
<ol>
<li>
<h3>感想</h3>
</li>
</ol>
<p>TeckAcademyそのものより、オンライン学習の技術そのものに感動した。</p>
<p> </p>
<ol>
<li>
<h3>内容</h3>
</li>
<li>
<h3> </h3>
</li>
</ol>
-----
--------
AUTHOR: konoemario
TITLE: 
BASENAME: 2017/02/01/231859
STATUS: Draft
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 02/01/2017 23:18:59
-----
BODY:

<div class="section">
    <h4>まずは1カラム</h4>
    <p><p data-height="265" data-theme-id="dark" data-slug-hash="WRzeBa" data-default-tab="css,result" data-user="tohu" data-embed-version="2" data-pen-title="Calendar_01" class="codepen">See the Pen <a href="https://codepen.io/tohu/pen/WRzeBa/">Calendar_01</a> by tohu (<a href="http://codepen.io/tohu">@tohu</a>) on <a href="http://codepen.io">CodePen</a>.</p><script async src="https://production-assets.codepen.io/assets/embed/ei.js"></script><br />
</p>

</div>
<div class="section">
    <h4>途中経過</h4>
    <p><p data-height="265" data-theme-id="dark" data-slug-hash="KaoKvO" data-default-tab="css,result" data-user="tohu" data-embed-version="2" data-pen-title="Calendar_02" class="codepen">See the Pen <a href="https://codepen.io/tohu/pen/KaoKvO/">Calendar_02</a> by tohu (<a href="http://codepen.io/tohu">@tohu</a>) on <a href="http://codepen.io">CodePen</a>.</p><script async src="https://production-assets.codepen.io/assets/embed/ei.js"></script></p>

</div>
-----
--------
AUTHOR: konoemario
TITLE: COBOLERが頑張る：日めくりカレンダー：参考サイト
BASENAME: 2017/01/31/230551
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 01/31/2017 23:05:51
CATEGORY: プログラム
IMAGE: https://c1.staticflickr.com/1/350/31816328123_38e6c03852_o.gif
-----
BODY:

<div class="section">
    <h3>前回からの続き</h3>
    <p><iframe src="http://tohutokonsome.hatenablog.com/embed/2017/01/30/165110" title="COBOLERが頑張る：日めくりカレンダー：キックオフ - 豆腐とコンソメ" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="http://tohutokonsome.hatenablog.com/entry/2017/01/30/165110">tohutokonsome.hatenablog.com</a></cite></p><p>さて、早速日めくりカレンダーをつくっていきたいと思います。</p>

<div class="section">
    <h4>学んだこと</h4>
    <p>Webブラウザで参照できるようにしたいので、HTMLを書くんだろうなというのは、さすがに知ってます。</p><p>どっから手をつけようかな、というところで、以下が目についたので無料体験だけ簡単にやってみました。<br />
<iframe src="//hatenablog-parts.com/embed?url=https%3A%2F%2Ftechacademy.jp%2Flp-htmlcss-trial-s" title="TechAcademyの無料体験" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://techacademy.jp/lp-htmlcss-trial-s">techacademy.jp</a></cite><br />
</p>

<div class="section">
    <h5>TeckAcademy</h5>
    <p>オンラインで、プログラムを学ぶことができるとのこと。<br />
手厚い？チャットサポートなんかがついている。無料体験中も、課題を提出したら、１時間後ぐらいには「引き続きがんばってください！」的なメッセージが届いた。</p><p>無料体験の中身は、結構あっさりしている。ちゃんとお金を払えば効果はありそう。<br />
ただ、４週間で１２万という値段なので、働いていて帰って勉強する時間があんまりとれない人だとちょっと勿体無い気もする。</p><p>とりえあえず３時間程度で学習が終わった。</p><p>一番の発見は「Cloud9」というサイトの存在。<br />
こんな便利なものがあるのね。</p>

</div>
<div class="section">
    <h5>ドットインストール</h5>
    <p>動画で学習できるサイト。全部無料な上に、わかりやすい。<br />
HTML入門と<a class="keyword" href="http://d.hatena.ne.jp/keyword/CSS">CSS</a>をざっくり見た。</p><p><a href="http://dotinstall.com/lessons/basic_html_v3">http://dotinstall.com/lessons/basic_html_v3</a><br />
<a href="http://dotinstall.com/lessons/basic_css_v3">http://dotinstall.com/lessons/basic_css_v3</a><br />
<a href="http://dotinstall.com/lessons/basic_css3_v2">http://dotinstall.com/lessons/basic_css3_v2</a><br />
<a href="http://dotinstall.com/lessons/basic_css_layout">http://dotinstall.com/lessons/basic_css_layout</a></p><br />
<p>アニメーションを<a class="keyword" href="http://d.hatena.ne.jp/keyword/CSS">CSS</a>で作成することができるんだ、すげえというとこが一番の発見。<br />
こちらも、ざっくり3.4時間程度で詰め込んだ。が、怪しいところは多い。<br />
<br />
</p>

</div>
<div class="section">
    <h5><a class="keyword" href="http://d.hatena.ne.jp/keyword/CSS">CSS</a>レイアウトを学ぶ</h5>
    <p><a href="http://ja.learnlayout.com">CSS&#x30EC;&#x30A4;&#x30A2;&#x30A6;&#x30C8;&#x3092;&#x5B66;&#x3076;</a></p><p>ドットインストールと重なる部分は多いけれども、参考になるものが多かった。<br />
ただ、記載通りの挙動通りにならないものがちょこちょこあって、自信がない。<br />
何かを間違えているのだろう。</p><p>これは1時間30分〜2時間程度かかった気がする。<br />
<br />
</p>

</div>
<div class="section">
    <h5>CodePen</h5>
    <p>ここまで、なんとなくレイアウトってこう作るんだよというものを見てきたのですが<br />
やりたいアニメーションをどう実現すればいいのか、いまいちよくわかっていませんでした。<br />
しかし、<a class="keyword" href="http://d.hatena.ne.jp/keyword/CSS">CSS</a>、アニメーションでインターネットの森をさまよっているときに、見つけてしまいました。</p><p><iframe id="cp_embed_WRRVpb" src="https://codepen.io/slyka85/embed/preview/WRRVpb?height=300&amp;amp;slug-hash=WRRVpb&amp;amp;default-tabs=css,result&amp;amp;host=http%3A%2F%2Fcodepen.io&amp;amp;embed-version=2" title="#dailycssimages Calendar CSS" scrolling="no" frameborder="0" height="300" allowtransparency="true" class="cp_embed_iframe" style="width: 100%; overflow: hidden;"></iframe><cite class="hatena-citation"><a href="https://codepen.io/slyka85/full/WRRVpb/">codepen.io</a></cite></p><p>これがやりたかったことじゃ！<br />
作者様に感謝しつつ、コードを見ることにした。<br />
CodePenはHTML・<a class="keyword" href="http://d.hatena.ne.jp/keyword/CSS">CSS</a>・<a class="keyword" href="http://d.hatena.ne.jp/keyword/JavaScript">JavaScript</a>を編集・共有できるサービスみたいです。<br />
<br />
</p>

</div>
<div class="section">
    <h5>再度、ドットインストール</h5>
    <p>上記、ソースを覗いていてみると、<a class="keyword" href="http://d.hatena.ne.jp/keyword/JavaScript">JavaScript</a>の知識が必要そうなことがわかったので以下を学習。</p><p><a href="http://dotinstall.com/lessons/basic_javascript_v2">http://dotinstall.com/lessons/basic_javascript_v2</a></p><p>さらに、よくみると<a class="keyword" href="http://d.hatena.ne.jp/keyword/jQuery">jQuery</a>の技術も使っていたことがわかったので以下を学習。<br />
<a href="http://dotinstall.com/lessons/basic_jquery_v2">http://dotinstall.com/lessons/basic_jquery_v2</a></p><p>このへん、結構時間かかった上に、いろいろ怪しい。<br />
<br />
</p>

</div>
<div class="section">
    <h5>とりあえず、今はこんな感じ</h5>
    <p>ピンちゃんと撮ったチェキを素材に作成した。<br />
なぜHTMLではなく、gifかというと、PCで開いたらおもくっそレイアウトが崩れることがわかったので<br />
一旦、gifにした。</p><p><a href="https://c1.staticflickr.com/1/350/31816328123_38e6c03852_o.gif" class="http-image" target="_blank"><img src="https://c1.staticflickr.com/1/350/31816328123_38e6c03852_o.gif" class="http-image" alt="https://c1.staticflickr.com/1/350/31816328123_38e6c03852_o.gif"></a></p><br />
<p>次回は、PCと<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B9%A5%DE%A5%DB">スマホ</a>、どちらでもそれなりに見えるすることを目標とする。<br />
また、記憶があるうちにHTML・<a class="keyword" href="http://d.hatena.ne.jp/keyword/CSS">CSS</a>を貼っておきたい。<br />
CodePenの使い方がさっぱりわからない。</p>

</div>
</div>
</div>
-----
--------
AUTHOR: konoemario
TITLE: 
BASENAME: 2017/01/30/212518
STATUS: Draft
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 01/30/2017 21:25:18
-----
BODY:
<p>heiightは親要素が明確にサイズを指定していないと機能しない。</p><p>body,htmlに50%しないと直下の要素が機能しない</p><p>marginの相殺</p>

-----
--------
AUTHOR: konoemario
TITLE: COBOLERが頑張る：日めくりカレンダー：キックオフ
BASENAME: 2017/01/30/165110
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 01/30/2017 16:51:10
CATEGORY: プログラム
IMAGE: https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170130/20170130162604.png
-----
BODY:

<div class="section">
    <h3>改めて自己紹介</h3>
    <p>こんにちは。<br />
世間が<a class="keyword" href="http://d.hatena.ne.jp/keyword/%B5%A1%B3%A3%B3%D8%BD%AC">機械学習</a>やら、なんやらで盛り上がっている最中、なぜいまさらこんなものを、というものを作っていきたいと思います。</p><br />
<p>年齢：29<br />
大学：文系<br />
ユーザー系子会社に新卒で入社。<br />
要件定義・設計・製造をやってきた。<br />
環境：<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%E1%A5%A4%A5%F3%A5%D5%A5%EC%A1%BC%A5%E0">メインフレーム</a><br />
使用言語：JCL、<a class="keyword" href="http://d.hatena.ne.jp/keyword/COBOL">COBOL</a>　以上<br />
たまに、ExcelVBA使うぐらい。</p><p>サンデー<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D7%A5%ED%A5%B0%A5%E9%A5%DE">プログラマ</a>的に、浅く<a class="keyword" href="http://d.hatena.ne.jp/keyword/C%B8%C0%B8%EC">C言語</a>や、<a class="keyword" href="http://d.hatena.ne.jp/keyword/C%23">C#</a>やらに手を出したことはある。</p>

</div>
<div class="section">
    <h3>目的</h3>
    
<ul>
<li>エンジニアに対しての憧れ。</li>
<li>技術系の話で盛り上がれるようになりたい。</li>
<li>自分が楽しいと思えるものを作りたい。</li>
<li>自宅で働ける環境に、転職したい。</li>
</ul>
</div>
<div class="section">
    <h3>作るもの</h3>
    <p>「日めくりカレンダー」</p>

<div class="section">
    <h4>要件</h4>
    
<ul>
<li>用意された写真を、今日の日付と共に表示すること。</li>
<li>めくられる感じで、前日分から本日分が表示されること。</li>
<li><a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B9%A5%DE%A5%DB">スマホ</a>の画面で見ることがメインなので、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B9%A5%DE%A5%DB">スマホ</a>画面のサイズを意識して作ること。</li>
<li>専用アプリを入れなくても観れるように、Webブラウザで参照できること。</li>
</ul><p><br />
※作成イメージ<br />
<span itemscope itemtype="http://schema.org/Photograph"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/konoemario/20170130/20170130162604.png" alt="f:id:konoemario:20170130162604p:plain" title="f:id:konoemario:20170130162604p:plain" class="hatena-fotolife" itemprop="image"></span><br />
</p>

</div>
<div class="section">
    <h4>なぜ日めくりカレンダーか</h4>
    
<ul>
<li>モチベーションを維持するために、好きなアイドルの写真を見ながら作業することができるから。</li>
<li>作成したものをあわよくば、<a class="keyword" href="http://d.hatena.ne.jp/keyword/SNS">SNS</a>で見せることができるから。</li>
</ul><p>このように書くと非常に気持ちが悪いですが、誰も見てないから大丈夫！</p><p>では、次回から具体的な作業内容を書いて行こうと思います。</p>

</div>
</div>
-----
--------
AUTHOR: konoemario
TITLE: 彼は価値観に殺されたのだ
BASENAME: 2017/01/26/220922
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 01/26/2017 22:09:22
CATEGORY: 幸せについて
-----
BODY:

<div class="section">
    <h3>日記</h3>
    <p>インフルエンザ２日目にして、熱が36度台の平熱近くになってきた。本当にインフルエンザなのだろうかと疑問にも思ったが<br />
きっと医学が進歩したに違いない。でも、人に移すのはよくないから会社に行けないのはしょうがない。<br />
ビールでも飲もう。</p>

</div>
<div class="section">
    <h3>本題</h3>
    <p>人にはこうなりたいという理想像がいくつもある。私も常々、「ペイバック」のメル<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%AE%A5%D6%A5%BD%A5%F3">ギブソン</a>が演じるポーターや、「<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%BF%A5%A4%A5%BF%A5%CB%A5%C3%A5%AF">タイタニック</a>」のディカプリオが演じるジャックのようになりたいと思っている。（ディカプリオにとってのジャック役は呪縛みたいなものかもしれないけれども）<br />
さっきの理想は、夢みたいなものだけれども、もう少し身近な理想を考えたときに、「こうはなりたくない」という方向からも考えることもできる。</p>

<ul>
<li>業務を理解する立場なのに、俺はユーザーじゃねえから業務はわかんないよ！と逆ギレし、ユーザーの要求を管理できないポンコツにはなりたくない</li>
<li>ITショットをひとつ終わらせるのに二日かかるようなポンコツにはなりたくない</li>
</ul><p>これは、今の仕事の上での私の価値観である。<br />
だから別の次元で考えれば、そもそも仕事なんてどうでもいいので、私自身まったく困らないから大丈夫という見方もできる。</p><p>奥さんから、お前は本当にぺらぺらな人間だな！とよく非難されるが、ぺらぺらな方がいざという時に丈夫な気がするのです。</p><p>こんな話をすると、大学の仲の良かった友人を思い出す。彼をここではKとする。（「こころ」のKとは関係がない。たまたまだよ。）</p><p>Kは周りに厳しい人だった。<br />
私とKは同じ部活に入っていた。私は世の大学生の例に漏れず(それよりかポンコツ)、講義はろくに出ず、アル<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D0%A5%A4">バイ</a>トもしない、ただ部活のみ熱心に行うという生活を送っていた。幸い金銭面については、実家から大学に通っていたため、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%BE%A9%B3%D8%B6%E2">奨学金</a>を利用することで両親の負担は低かったと思う。（お小遣いはもらってました。）<br />
一方のKは、私と同じくらい熱心に部活に取り組んでおり、さらに講義も出席し、アル<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D0%A5%A4">バイ</a>トもこなし、一人暮らしをするという生活をしていた。</p><p>普段の私とKはふざけた話ばかりしていたが、時折Kの口から、周囲の人間に対する批判を聞くことがあり、そこから彼の価値観を伺うことができた。</p>

<ul>
<li>部活に平気な顔で遅刻してくるのはありえない</li>
<li>部活の、部長のような人間が、ああいった言動をするのは許せない</li>
<li>大学を卒業して、就職活動もしないで遊んでいるのはありえない、ましてやフリーターなんでだめでしょ</li>
</ul><p>こういった発言を受けて、当時の私や他の友人たちも含め、Kは真面目だなぁという印象を持っていたと思う。</p><p>大学卒業後、Kは地元の信用金庫に就職した。<br />
私も今の会社に就職したが、私とK以外の仲の良かった４名は皆、留年、もしくはフリーターになっていた。</p><p>それから数年間の間は、当時の友人グループで年に２回程度集まって遊ぶようになっていた。</p><p>卒業して2年経ったぐらいだと思う。<br />
Kが仕事を辞めた、と言った。<br />
営業に向いていないし、上司との関係もよくない、ということだった。<br />
今は何をしているのかと聞くと、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D0%A5%A4">バイ</a>トをしているとのことだった。</p><p>この話を聞いた時、私達友人グループの中には、まだ大学生をやっている奴もいたし、家庭教師の<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D0%A5%A4">バイ</a>トをしているって奴もいたからKが辞めたこと自体、まったく何も思っていなかった。</p><br />
<br />
<p>それから、１年経ったくらいだったと思う。<br />
Kの彼女から、話があるからそっちの家に行っていいか、という連絡があった。（Kの彼女も同じ部活で、私も知り合いだった）</p><p>Kの彼女は、開口一番に、Kが死んじゃった、と言った。</p><p>自殺だった。</p><p>Kは、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D0%A5%A4">バイ</a>トも辞め、自宅に一人でいることが多くなっていたそうだ。<br />
LINEのグループでやり取りすることはあったけれど、Kが自殺するとか、追い詰められているようなそんな素振りは見られなかった。</p><p>でも私は思う。<br />
大学時代のKの価値観がその当時も変わっていなかったら</p>

<ul>
<li>仕事を辞め、嫌悪していた立場にいざ自分が経ってしまった時、どんなことを思ったのだろう。</li>
</ul>
<ul>
<li>仲の良い友人から結婚式の招待状が届いた時、何を考えたのだろう。</li>
</ul><p>これらのことは勝手な推測だけれども、Kは自身の価値観に殺されたのだ、と私は思う。</p><p>こうなりたい、こうあるべきという気持ちは、より高みを目指すためには必要な思考だと思う。けれど<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C0%A5%D6%A5%EB%A5%B9%A5%BF%A5%F3%A5%C0%A1%BC%A5%C9">ダブルスタンダード</a>やら、自分のことは棚にあげといてやた言われても、柔軟に切り替えることができたほうが精神的には安全だと思う。</p><p>いつ自分が40代でポンコツになるかはわからないのだから。</p><p>その時は<a class="keyword" href="http://d.hatena.ne.jp/keyword/%C0%DA%CA%A2">切腹</a>するという侍思考もありますね。</p>

</div>
-----
--------
AUTHOR: konoemario
TITLE: CSSでアニメーション
BASENAME: 2017/01/26/191601
STATUS: Draft
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 01/26/2017 19:16:01
CATEGORY: プログラミング
-----
BODY:

-----
--------
AUTHOR: konoemario
TITLE: 銀行の窓口
BASENAME: 2017/01/25/215412
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 01/25/2017 21:54:12
CATEGORY: 幸せについて
-----
BODY:

<div class="section">
    <h3>日記</h3>
    <p>インフルエンザになった。<br />
会社を先週一週間休んでからの、今週インフルエンザという社会人としてあるまじき状態になってしまった。</p><p><a class="keyword" href="http://d.hatena.ne.jp/keyword/%A4%CF%A4%C6%A4%CA">はてな</a>のグループ「プログラミング」に参加していることから<br />
それっぽいことをそろそろ書かないとまずいのだけれども、全然できていない。</p>

</div>
<div class="section">
    <h3>それっぽいことを書く</h3>
    <p>物作りも、こういうことをしたいというモチベーションがないと、なかなか続きませんよね。</p><p>私自身、過去にやってみるか！という思いで以下例のようなことをしたことがあるのですが<br />
途中で終わってしまいました。<br />
<br />
</p>

<ul>
<li><a class="keyword" href="http://d.hatena.ne.jp/keyword/WordPress">WordPress</a>でも構築するか→構築しても、それを利用するコンテンツがないので、構築して終わった</li>
<li>アダルトサイトでも作ってみるか→類似サイトがあまたある中で、やる意味はあるのだろうか、という思いで枠だけつくって終わった。</li>
</ul><p><br />
このへんの作業が仕事の役にたてばいいのですが、<br />
私の仕事は<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%E1%A5%A4%A5%F3%A5%D5%A5%EC%A1%BC%A5%E0">メインフレーム</a>で<a class="keyword" href="http://d.hatena.ne.jp/keyword/COBOL">COBOL</a>を触る→以降はSEとして基本<a class="keyword" href="http://d.hatena.ne.jp/keyword/Excel">Excel</a>しか触ってない、というエンジニアから見ると終わってる感満載の<br />
業務内容になっています。</p><p>このへんもエンジニアを目指すのか、業務屋を目指すのか、とかで評価も考え方も変わってくると思うので<br />
どっちがいいかなんていう話は今回は特に書きません。<br />
（さらにいえば、私自身エンジニアではないので、エンジニアの良いところ、悪いところなんてわかりません。）</p><p>そして今日の本題なんですが</p><p>医者にいって、インフルエンザの診断を受けた後、私はその足で銀行に向かいました。<br />
というのも、キャッシュカードのICチップが壊れたかなんかで、ATMからお金が下ろせない状態になっていたのです。<br />
この事象は、先々月もあり、その時もカード再発行を依頼して、２〜３週間の後に手元に届くという経験をしました。</p><p>私のカードの扱い方に問題があるのはもちろんですが、カードがない間、簡単にお金が下ろせないので、だいぶ不便です。</p><p>また、再発行を依頼する手順も以下の手順を踏み、最終的にに1時間ほどかかりました。</p>

<ol>
<li>係の人が対応してくれて、ラップトップに名前・住所・カード番号等を入力させる。</li>
<li>40分ほど自分順番がくるのを待つ</li>
<li>順番が来たら受付の方が、なにやら紙やら控えやらを印刷するので待つ</li>
<li>紙に自署を書く</li>
<li>暗証番号を入力する</li>
</ol><p><a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%DC%A5%C8%A5%EB%A5%CD%A5%C3%A5%AF">ボトルネック</a>になっている部分は、順番待ちのところですね。<br />
ITに携わっていると、受付の窓口にこなくても、オンラインで手続きできるようにする、とか一番最初にラップトップ使ってるんだから<br />
そこに、以降必要な機能を集約すればいいとかそういう案がでてくるかと思います。</p><p>これも、もちろんすばらしいのですが、システムを使わなくなって、暗証番号を入力しているんだから自署なんか書かなくてもいいのでは、とか<br />
最初の係のひとに必要な書類渡して、あとはお願いしますとか、単純な方法もあるかなと思います。</p><p>まとまりがない内容になってしまいましたが、なんでもかんでもシステム化するというよりかは<br />
しなくて簡単に済む方法も忘れないようにしたい、という話でした。</p><p>※別の切り口として、１時間待つのぐらいどうってことない、という考え方にするという方法ももちろんありますよね。<br />
  個人的には、この考え方がベストな気もするんですが、いかんせん体調不良で待つのがしんどかったので、今日こんなことを思いました。</p>

</div>
-----
--------
AUTHOR: konoemario
TITLE: 言いたいこともいえ、いや言いたいことがない
BASENAME: 2017/01/24/205251
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 01/24/2017 20:52:51
CATEGORY: 幸せについて
-----
BODY:
<p>休み明けで風邪をひいた。</p><p>仕事において、ホウレンソウが大事とよく言われるかと思います。</p><p>私は、この相談部分が非常に苦手です。<br />
この人に相談して意味があるのだろうか、ということが多過ぎます。<br />
特に自分の中の着地点がないまま、そんな相手に相談することにあまり意味を見出せません。</p><p>でも、伝えること、言うことそのものが大事な時もあるんではないか。</p>

<div class="section">
    <h3>奥さんと排水溝</h3>
    <p>引っ越した家は、お風呂の排水溝がよくつまる。<br />
きちんと掃除をしているのに、結構な頻度で水が溜まっている。</p><p>奥さんは、管理人に文句を言いたい！と意気込んだ。<br />
私は、管理人に文句をいってもどうしようもないのではないか、排水溝に問題があるんであれば、<br />
それこそ大規模な工事が必要になるし、工事なんて現実できではないと思う、と伝えた。</p><p>奥さんは、激怒した。<br />
なぜ、私の味方ではなく、管理人の味方になるのかと。</p><p>私は、管理人の方をもっているわけではなく、言っても意味がないんじゃないか、といった。</p><p>それでも奥さんは怒っていた。</p><p>この話は、伝えることに意味がなければどうしようもないのでは、という私の考えと<br />
伝えることそのものに意味があると考えている奥さんの考えの相違から来ている。</p><p>奥さん自身としては、私は怒っているということを伝えることが大切であって<br />
そこに結果がついてくるかどうかは二の次なんだろうと思う。</p><p>（私は、人に文句を言う事が非常に苦手で、険悪な雰囲気というものが大変苦手であり<br />
下手に文句を言うことで、あの部屋の住人は面倒と思われたくない、という別の理由も存在していたと思う。）<br />
<br />
</p>

</div>
<div class="section">
    <h3>破綻しているプロジェクト</h3>
    <p>さきほどのケースは男女間の考え方の相違という括りで語ってもよいのだけれども<br />
仕事で配下のメンバーに批判され、年甲斐もなく泣きそうになった。</p><p>私はあるプロジェクトの特定領域のリーダーを担っていた。<br />
しかし、このプロジェクトも数ある糞プロジェクトの例にもれず<br />
現状の業務分析ができていない、そもそもやりたいことって何でしたっけ、仕様が決まらない、という悲惨な状況にあった。<br />
プロジェクトのマスタースケジュールも、要件定義工程が1年半以上遅延しているにも関わらず、一向に状況は改善されない。</p><p>追い討ちをかけるように実施時期が近い保守案件に人が取られ、プロジェクトの要員も確保できないという惨憺たる状況であった。</p><p>私は、状況はもう改善しようがないと見切りをつけ要員や、スケジュールに文句を言う事はやめる事にした。<br />
文句を言ったところで、どうしょうもないのだ。</p><p>そんな状況を受け、配下メンバーは私に</p>

<ul>
<li>なぜ、要員がもっと必要と強く言わないのか。</li>
<li>なぜ、スケジュールについて文句を言わずに、黙っているのか。</li>
</ul><p>と事ある度に言ってくるのだ。</p><p>形だけでも、上司、プロジェクトマネージャー、ユーザーにキレるべきなんだろうか。</p><br />
<p>怒って状況がかわるのだろうか。私は迷っている。</p>

</div>
-----
--------
AUTHOR: konoemario
TITLE: 妄想と幸せ
BASENAME: 2017/01/23/223012
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 01/23/2017 22:30:12
CATEGORY: 幸せについて
-----
BODY:
<p>１０日ぶりに無事出社することができた。</p>
<p> </p>
<p>心なしか、ではなく明らかに周りの視線は痛かったが、明日にはみんな忘れているだろう。</p>
<p> </p>
<p>日曜の夜は不安で、ほとんど寝れなかったが、今日はきっと眠れる気がする。</p>
<p> </p>
<p>さて、みなさんは寝る前に何を考えていますか。</p>
<p>人によっては、考えごとをせずにそのまま寝るという方もいるかと思いますが、私は寝る前の妄想が本当に好きです。</p>
<p> </p>
<p>せっかくの機会なので、過去の妄想ネタを振り返ってみたいと思います。</p>
<p> </p>
<p>定番</p>
<ul>
<li>小学校１〜２年：<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C9%A5%E9%A5%B4%A5%F3%A5%DC%A1%BC%A5%EB">ドラゴンボール</a>の<a class="keyword" href="http://d.hatena.ne.jp/keyword/%C2%B9%B8%E7%B6%F5">孫悟空</a>とチチがいちゃいちゃする</li>
<li>小学校３年：らんま２分の１の、らんまとシャンプーがいちゃいちゃする</li>
<li>小学校４年〜大学１年：<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A8%A5%F4%A5%A1">エヴァ</a>の<a class="keyword" href="http://d.hatena.ne.jp/keyword/%C4%F6%A5%B7%A5%F3%A5%B8">碇シンジ</a>と<a class="keyword" href="http://d.hatena.ne.jp/keyword/%B0%BD%C7%C8">綾波</a>がいちゃいちゃする</li>
<li>大学２年〜社会人４年目：<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A8%A5%F4%A5%A1">エヴァ</a>の<a class="keyword" href="http://d.hatena.ne.jp/keyword/%C4%F6%A5%B7%A5%F3%A5%B8">碇シンジ</a>とアスカがいちゃいちゃする</li>
</ul>
<p>単発</p>
<ul>
<li>わりと最近：俺がいるの八幡とゆきのん</li>
<li>わりと最近：俺がいるの八幡と<a class="keyword" href="http://d.hatena.ne.jp/keyword/%CD%B3%C8%E6%A5%F6%C9%CD">由比ヶ浜</a></li>
<li>わりと最近：俺がいるの八幡と<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A4%A4%A4%ED%A4%CF%A4%B9">いろはす</a></li>
</ul>
<p> </p>
<p>気づいたこと</p>
<ul>
<li>全部に共通して、女性が男を無理やりというシチュエーションが好き</li>
</ul>
<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C9%A5%E9%A5%B4%A5%F3%A5%DC%A1%BC%A5%EB">ドラゴンボール</a>の悟空が青年になった時の<a class="keyword" href="http://d.hatena.ne.jp/keyword/%C5%B7%B2%BC%B0%EC%C9%F0%C6%BB%B2%F1">天下一武道会</a>って本当に素敵です。</p>
<p>特にチチが匿名希望として、悟空と戦うシーンは、私の性癖を決めた気がします。</p>
<p>そこから、シャンプーが好きになるというのは順当な流れな気がします。</p>
<p>（らんま自体が女性から迫ってくる漫画ですし）</p>
<p>その後の<a class="keyword" href="http://d.hatena.ne.jp/keyword/%B0%BD%C7%C8">綾波</a>の長期政権っぷりはすごいなぁと自分でも思います。</p>
<p>また、碇君って<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A8%A5%F4%A5%A1">エヴァ</a>ファンからはわりとボロクソにいわれている気がしますが、私は碇君好きです。</p>
<p>　　</p>
<ul>
<li><a class="keyword" href="http://d.hatena.ne.jp/keyword/%B0%BD%C7%C8">綾波</a>好きからアスカ好きになったあたりで、人間的に成長した気がする。</li>
</ul>
<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/%B0%BD%C7%C8">綾波</a>とアスカどっちが好きといわれ、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%B0%BD%C7%C8">綾波</a>と答えるやつは間違いなく暗い<br />青春を送る傾向がある気がします。</p>
<p>大学の時に、アスカっていいなと思えたのは私の思考が<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%EA%A5%A2%BD%BC">リア充</a>へとシフトしていった証に違いありません。ちなみに、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%DF%A5%B5%A5%C8%A4%B5%A4%F3">ミサトさん</a>が好きというのが、女子受けが一番いいはずです。（推測）</p>
<ul>
<li>ゆきのん→<a class="keyword" href="http://d.hatena.ne.jp/keyword/%CD%B3%C8%E6%A5%F6%C9%CD">由比ヶ浜</a>→<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A4%A4%A4%ED%A4%CF%A4%B9">いろはす</a>という過程で、人間的に成長した気がする。</li>
</ul>
<p>　　これも一緒です。ゆきのんが一番！とか言っているやつは、</p>
<p>　　<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A4%A4%A4%ED%A4%CF%A4%B9">いろはす</a>好きの便を腸内に注入されるべきです。</p>
<p>　　</p>
<ul>
<li>全部二次元で男役は自分ではない</li>
</ul>
<p>これは不思議でしたが、冷静に考えると自分に自信がない顕れかと思います。</p>
<p>好きな人物が、自分なんかといちゃいちゃして楽しいはずがないという、悲しい潜在意識が、きっと自分を登場させないのだろうと思います。</p>
<p>また、自分を登場させることができない以上、好きな人物のカップリング相手は自分以外になるわけですが、その際、現実世界の相手では嫉妬に狂うことが想定されます。</p>
<p>現実世界の女性について妄想する際に、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A8%A5%ED%A5%B2%A1%BC">エロゲー</a>みたく無個性の主人公を登場させるスキルがあれば違ったかもしれませんが、そんなスキルは私にはありませんでした。結果、妄想の対象も二次元に限定されるのではないかという結論が導きだされました。</p>
<p> </p>
<p>さて、寝る前の妄想の話でしたが、現実世界で女の子に事欠かない紳士は、寝る前に何を考えているのでしょうか。私の推測が正しければ、自分を主人公にして、妄想相手とくんずほぐれずをしているはずです。</p>
<p>行動が思考を変えるといいますが、その逆もあるとすれば、妄想の方向性をかえることで私も幸せになることができるかもしれません。</p>
<p> </p>
<p>ということで、さっそく今晩からピンちゃんとチュッチュしていきたいと思います。　</p>
<p> </p>
<p> </p>
-----
--------
AUTHOR: konoemario
TITLE: 腸内環境と思考
BASENAME: 2017/01/22/211826
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 01/22/2017 21:18:26
CATEGORY: 幸せについて
-----
BODY:
<p>3分に1度の頻度で、明日の仕事に対する恐怖がこみ上げてくる。</p>
<p>大きな視点で見れば本当に些細な状況なのに、そうと開き直れない性格で本当に損をしている。</p>
<p> </p>
<p>もっと大きな器の人間になりたい！ということで今日は腸内細菌の話です。</p>
<p>最近、小耳に挟んだのですが、脳は腸に支配されているそうじゃないですか。</p>
<p>いくつかググってみると、以下のような記事がヒットしました。</p>
<p> </p>
<p><iframe class="embed-card embed-webcard" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;" title="性格は「腸内細菌」によって決まる：研究結果｜WIRED.jp" src="//hatenablog-parts.com/embed?url=http%3A%2F%2Fwired.jp%2F2015%2F05%2F01%2Fbacteria-and-mental%2F" frameborder="0" scrolling="no"></iframe></p>
<p><cite class="hatena-citation"><a href="http://wired.jp/2015/05/01/bacteria-and-mental/">wired.jp</a></cite></p>
<p> </p>
<p>上記の記事から引用しますと、腸内細菌の具合で社交的に慣れるみたいです。</p>
<blockquote>
<p style="box-sizing: border-box; margin: 0px 1.25rem 1.25rem 8.75rem; color: #000000; font-family: 'Helvetica Neue', Helvetica, Arial, YuGothic, 'Yu Gothic', 游ゴシック体, 游ゴシック, 'ヒラギノ角ゴ ProN W3', 'Hiragino Kaku Gothic ProN', 'ヒラギノ角ゴ Pro W3', 'Hiragino Kaku Gothic Pro', メイリオ, Meiryo, 'MS ゴシック', 'MS Gothic', sans-serif; font-size: 14px;">クライアン教授によれば、マウスを使った研究では、腸内細菌が行動にまで影響を与える場合があることがわかっている。例えば、<span style="color: #ff0000;">腸内細菌をまったくもたないように繁殖させたマウスは、通常の腸内細菌をもつマウスと比べて非社会的な行動が多くなり</span>、ほかのマウスと過ごす時間が少なくなるという。</p>
</blockquote>
<p> </p>
<p>この発見は、 人生を変えうる大きな可能性を秘めています。</p>
<p> </p>
<p>腸内環境を整えるには、乳酸菌を摂取して、いわゆる善玉菌というものを増やせばよいみたいです。</p>
<p>興味深いことに、腸内環境は善玉菌、悪玉菌の二者だけではなく「<a class="keyword" href="http://d.hatena.ne.jp/keyword/%C6%FC%CF%C2%B8%AB">日和見</a>菌」という謎の菌がいるとのことです。 </p>
<p>さらにいえば、この「<a class="keyword" href="http://d.hatena.ne.jp/keyword/%C6%FC%CF%C2%B8%AB">日和見</a>菌」全体の75%ほどを占めているらしく、善玉菌、悪玉菌は残り25%の枠内に生息していみたいなんです。 </p>
<p><span style="font-size: 80%;">※以下は、一般的な健康体の腸内環境イメージ</span></p>
<div class="infogram-embed" data-id="ee0167e2-fe84-4a92-85e0-05ea4f599862" data-type="interactive" data-title="腸内環境"> </div>
<script>// <![CDATA[
!function(e,t,n,s){var i="InfogramEmbeds",o=e.getElementsByTagName(t),d=o[0],a=/^http:/.test(e.location)?"http:":"https:";if(/^\/{2}/.test(s)&&(s=a+s),window[i]&&window[i].initialized)window[i].process&&window[i].process();else if(!e.getElementById(n)){var r=e.createElement(t);r.async=1,r.id=n,r.src=s,d.parentNode.insertBefore(r,d)}}(document,"script","infogram-async","//e.infogr.am/js/dist/embed-loader-min.js");
// ]]></script>
<div style="padding: 8px 0; font-family: Arial!important; font-size: 13px!important; line-height: 15px!important; text-align: center; border-top: 1px solid #dadada; margin: 0 30px;"><a style="color: #989898!important; text-decoration: none!important;" href="https://infogr.am/ee0167e2-fe84-4a92-85e0-05ea4f599862" target="_blank" rel="nofollow">腸内環境</a><br /><a style="color: #989898!important; text-decoration: none!important;" href="http://charts.infogr.am/pie-chart?utm_source=embed_bottom&amp;utm_medium=seo&amp;utm_campaign=pie_chart" target="_blank" rel="nofollow">Create pie charts</a></div>
<p> そして恐ろしいことに、この「<a class="keyword" href="http://d.hatena.ne.jp/keyword/%C6%FC%CF%C2%B8%AB">日和見</a>菌」、悪玉菌と善玉菌が凌ぎを削りあった結果の勝者側につくという性質を持っているみたいです。</p>
<p>極端な話、悪玉菌が腸を制した日には腸内がマッドマックス状態になってしまうんです。</p>
<p> </p>
<p>なので秩序を取り戻すためには、我らがフェラルちゃん「乳酸菌」を投与する必要があるのです。</p>
<p> </p>
<p>とはいえ、わたくし<a class="keyword" href="http://d.hatena.ne.jp/keyword/%C6%FD%BB%C0%B6%DD%B0%FB%CE%C1">乳酸菌飲料</a>は大好物でして、「飲むヨーグルト」をはじめとして、「マミー」「<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D4%A5%EB%A5%AF%A5%EB">ピルクル</a>」「フルーツオレ」をほぼ毎日欠かさず飲んでおります。</p>
<p>それなのに、会社生活に震えるというのは未だ腸内環境が改善されていないと見受けられます。</p>
<p> </p>
<p>もはやもうだめか、と思っていたところ、なんと驚きの方法があるみたいなんです。</p>
<p>その名も「糞便移植」と呼ばれる方法です。</p>
<p>「糞便移植」とは、健康な他人の便を直接お尻の穴から注入するというスカトロマニアもびっくりな健康法なのですが、ふざけた話ではなく本当にあるみたいです。</p>
<p>ただし、残念なことにまだ<a class="keyword" href="http://d.hatena.ne.jp/keyword/%CE%D7%BE%B2%BB%EE%B8%B3">臨床試験</a>の段階らしくすぐに実践できるような状態ではないとのことです。</p>
<p> </p>
<p>幸せになるためにも、上記治療法が確立されピンちゃんのうん◯が投入される時を心待ちにしております。</p>
<p> </p>
<p> </p>
<p> </p>
-----
--------
AUTHOR: konoemario
TITLE: AVのインタビューシーンに見る人生の楽しみ方
BASENAME: 2017/01/21/223139
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 01/21/2017 22:31:39
CATEGORY: 幸せについて
IMAGE: https://images-fe.ssl-images-amazon.com/images/I/51ChWmmG2WL._SL160_.jpg
-----
BODY:
<p>会社を有給 + サボりで一週間休んだことによって、土曜日の夜から恐怖で震えている。</p>
<p> </p>
<p>ここ最近、心から何かを楽しいと思ったことがない。</p>
<p>仕事がその原因の大半を占めていると思うが、それだけでもない気がする。</p>
<p> </p>
<p>仕事を辞めることできるが、次に何をするかがでてこない。</p>
<p>やりたいことはあったのだけれども、暗い気持ちのときは何も考えつかず、寝ることしかできなくなる。</p>
<p>こういう時は走りにいくなりして体を動かすことで気分転換ができることは重々承知なんだけれども、体が動かない。</p>
<p> </p>
<p>本当に楽しいものとは、短期的にすぐ楽しさがわかるものではない。</p>
<p>行動をして、時間をかけ、徐々にわかってくるものが本当に楽しいものである。</p>
<p> </p>
<p>だけれども、気持ちが沈んでいると時間がかかるものに対して、行動を起こすことが億劫になる。</p>
<p>結果的に簡単に楽しめるものに走りがちになる。</p>
<p> </p>
<p>これでは本当に駄目になってしまう。</p>
<p> </p>
<p>好きな本に、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B5%A5%DE%A5%BB%A5%C3%A5%C8%A1%A6%A5%E2%A1%BC%A5%E0">サマセット・モーム</a>の「人間の絆」がある。</p>
<p>おすすめの本ではなく、印象に残った本である。</p>
<p> </p>
<div class="freezed">
<div class="hatena-asin-detail"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/410213025X/hatena-blog-22/"><img class="hatena-asin-detail-image" title="人間の絆 上巻 (新潮文庫 モ 5-11)" src="https://images-fe.ssl-images-amazon.com/images/I/51ChWmmG2WL._SL160_.jpg" alt="人間の絆 上巻 (新潮文庫 モ 5-11)" /></a>
<div class="hatena-asin-detail-info">
<p class="hatena-asin-detail-title"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/410213025X/hatena-blog-22/">人間の絆 上巻 (新潮文庫 モ 5-11)</a></p>
<ul>
<li><span class="hatena-asin-detail-label">作者:</span> <a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%E2%A1%BC%A5%E0">モーム</a>,<a class="keyword" href="http://d.hatena.ne.jp/keyword/%C3%E6%CC%EE%B9%A5%C9%D7">中野好夫</a></li>
<li><span class="hatena-asin-detail-label">出版社/メーカー:</span> 新潮社</li>
<li><span class="hatena-asin-detail-label">発売日:</span> 2007/04/24</li>
<li><span class="hatena-asin-detail-label">メディア:</span> 文庫</li>
<li><span class="hatena-asin-detail-label">クリック</span>: 4回</li>
<li><a href="http://d.hatena.ne.jp/asin/410213025X/hatena-blog-22" target="_blank">この商品を含むブログ (14件) を見る</a></li>
</ul>
</div>
<div class="hatena-asin-detail-foot"> </div>
</div>
</div>
<p> </p>
<p>印象に残った理由だけれども、全く面白くなかったのである。</p>
<p> </p>
<p>内容が難しく、自分の理解が及ばないという類のつまらなさではなく、話として面白くなかったのである。 </p>
<p> </p>
<p>読んだのは１０年ぐらい前になるので、記憶が非常にあいまいなのであらすじは、ぐぐっていただければと思う。</p>
<p> </p>
<p>この「人間の絆」は文庫本にすると全５巻、６巻ぐらいのボリュームで<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A4%A2%A4%EA%A4%B5">ありさ</a>らっと読めるような本でもない。それでも、どうやって終わるのかが気になって最後まで読むことができた。</p>
<p> </p>
<p>最終的に、主人公フィリップは、熱を上げていた女性とは別の女性と結ばれる。</p>
<p> </p>
<p>これにえらく感動した。</p>
<p> </p>
<p>男女がくっつく内容の話など腐る程あるのだが、こんだけ時間をかけた本で、最終的に主人公が幸せになる。それも、長い暗闇の先に、栄光に登り詰めるたぐいの幸せではなく、ほっこりとするような幸せだ。</p>
<p> </p>
<p>それなのに、いやそれ故にとてもこころに響く。</p>
<p> </p>
<p>人生に、瞬間的に天井に触れるような幸せというのは早々ない。</p>
<p>（残念なことに、その逆、地下の奥深くの深くというものはあるかもしれない)</p>
<p>結果的に幸せを感じるというのは、日々の日常の中なのである。</p>
<p> </p>
<p>「人間の絆」は名著としてあげられる本なので、自分が理解できてないだけで、良い部分はたくさんある。と思う。</p>
<p> </p>
<p>今現在、手元にないから、気軽に読む機会はないのだけれども、もう一度読みたい。</p>
<p> </p>
<p>本題です。</p>
<p> </p>
<p> 短期的なものは一瞬の楽しみしか生みません。</p>
<p> </p>
<p>つまり、AVはインタビューシーンを飛ばさずにきちんと見よう、ということです。</p>
<p> </p>
-----
--------
AUTHOR: konoemario
TITLE: 「おっぱい」がいえない
BASENAME: 2017/01/20/135958
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 01/20/2017 13:59:58
CATEGORY: 幸せについて
IMAGE: https://images-fe.ssl-images-amazon.com/images/I/51pfi-lM-HL._SL160_.jpg
-----
BODY:
<p>子供のころの一人称はなんだったろうかと思い出すと、私は「りょうちゃん（自分の名前 + ちゃん)」であったと思う。</p>
<p>小学校にあがるころには、「僕」になっていた気がする。</p>
<p>思春期まっさかりのころも「僕」だったのだが、まわりの一人称が、徐々に「俺」にかわってくることに違和感を覚えた。</p>
<p>仲のよかった友達のことを「けんちゃん」と私は呼んでいたのだが、気づけばまわりは「西田」と苗字で呼ぶようになっていた。</p>
<p> </p>
<p>気づけば周囲は大人への一歩を進み始めていたのだ。</p>
<p> </p>
<p>一方、私はこの変化がどうしようもなく恥ずかしく、一人称も他者への呼び方も変えることができなかった。自分の中で、「自分はこういう人間だ」という像があり、そこから外れることはできなかったんだと思う。</p>
<p>さらにいえば、人からどう見られているか、を意識しすぎていたのだと思う。</p>
<p>結局、一人称は「私」「自分」、もしくは極力言わないという今の形に落ち着いた。（社会人になって、上司の前では「僕」を使うようになった。）</p>
<p> </p>
<p>こんな状態だったから、当然周りの友人から徐々に下ネタが増えていく流れにも乗っかっていくことはできなかった。</p>
<p> </p>
<p>そういった知識がなかったからとかそういうわけでもない。</p>
<p>幼いころから両親や兄弟と洋画を見るのが好きで、当時のホラー映画にカップルがやってるシーンなんて、当たり前のように入っていたし、その意味もわかってた。</p>
<p>また、私が中学に上がる前には我が家に<a class="keyword" href="http://d.hatena.ne.jp/keyword/Windows98">Windows98</a>と<a class="keyword" href="http://d.hatena.ne.jp/keyword/ISDN">ISDN</a>の環境が構築され、私は夜な夜なウッホウッホしていた。友人がコンビニでエロ本を買ったと騒いでいる傍らで、ネットにはけしからん画像がいっぱい転がっていたのである。</p>
<p> </p>
<p>ここで、ネットで得た知識を駆使して、下ネタの輪に入っていければ多少人生はかわったのかもしれない。付き合う友人というものは、人生に大きく影響するからだ。</p>
<p>とはいえ、一方で暗澹たる歴史を刻むことになる一歩だった可能性もあるわけで、どっちがよかったかはもはやわからない。</p>
<p> </p>
<p>「りょうちゃん」は下ネタを言わないのだ。</p>
<p> </p>
<p>さて、私の「自分はこういった人間である」という性質は29になる今でも続いている。</p>
<p>私の人生において、この考え方はプラスかマイナスかといえば、マイナスだったように思える。</p>
<p>結局のところ、人にどう思われるのかを意識しすぎているのである。</p>
<p>最近、「嫌われる勇気」という本が話題になっている。まだ読んでいないのだが、読んでみたいと思う。</p>
<p> </p>
<div class="freezed">
<div class="hatena-asin-detail"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00H7RACY8/hatena-blog-22/"><img class="hatena-asin-detail-image" title="嫌われる勇気" src="https://images-fe.ssl-images-amazon.com/images/I/51pfi-lM-HL._SL160_.jpg" alt="嫌われる勇気" /></a>
<div class="hatena-asin-detail-info">
<p class="hatena-asin-detail-title"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00H7RACY8/hatena-blog-22/">嫌われる勇気</a></p>
<ul>
<li><span class="hatena-asin-detail-label">作者:</span> 岸見一郎,古賀史健</li>
<li><span class="hatena-asin-detail-label">出版社/メーカー:</span> <a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C0%A5%A4%A5%E4%A5%E2%A5%F3%A5%C9%BC%D2">ダイヤモンド社</a></li>
<li><span class="hatena-asin-detail-label">発売日:</span> 2013/12/16</li>
<li><span class="hatena-asin-detail-label">メディア:</span> <a class="keyword" href="http://d.hatena.ne.jp/keyword/Kindle">Kindle</a>版</li>
<li><a href="http://d.hatena.ne.jp/asin/B00H7RACY8/hatena-blog-22" target="_blank">この商品を含むブログ (24件) を見る</a></li>
</ul>
</div>
<div class="hatena-asin-detail-foot"> </div>
</div>
</div>
<p> </p>
<p> </p>
<p>これを読めばきっと、「ピンキー！おっぱい見せて！」ぐらい言えるはずである。</p>
<p> </p>
<p>※ピンキー　「<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A4%C7%A4%F3%A4%D1%C1%C8.inc">でんぱ組.inc</a>」の青い子</p>
<p><iframe src="//www.youtube.com/embed/ih19o9c-xDo" width="420" height="315" frameborder="0" allowfullscreen=""></iframe><br /><a href="https://youtube.com/watch?v=ih19o9c-xDo">でんぱ組.inc「WWDBEST」MV Full</a></p>
<p> </p>
<p> </p>
<p> </p>
<p> </p>
<p> </p>
<p> </p>
<p> </p>
-----
--------
AUTHOR: konoemario
TITLE: ワークライフバランス
BASENAME: 2017/01/20/130554
STATUS: Draft
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 01/19/2017 17:09:11
-----
BODY:
<p>最近、社内でも「働き方改革」といって週一は定時で帰るような取り組みや、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%BA%DF%C2%F0%A5%EF%A1%BC%A5%AF">在宅ワーク</a>等新しい働き方の在り方を模索するようになっている。</p>
<p>さて、当社でもこの働き方を改革するという動きは、なんとなく以下の目的のもと行われている。（と思われる。）</p>
<ul>
<li>社員一人一人が<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%EF%A1%BC%A5%AF%A5%E9%A5%A4%A5%D5%A5%D0%A5%E9%A5%F3%A5%B9">ワークライフバランス</a>を充実させる。</li>
<li>社外活動や読書等を積極的に行う時間を確保し、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%BC%AB%B8%CA%B7%BC%C8%AF">自己啓発</a>を促す。</li>
</ul>
<p>一見すると、早く帰れるんだな！と思える内容だけれども、この意味の裏にはもちろん</p>
<ul>
<li>社員一人一人が<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%EF%A1%BC%A5%AF%A5%E9%A5%A4%A5%D5%A5%D0%A5%E9%A5%F3%A5%B9">ワークライフバランス</a>を充実させる。</li>
</ul>
<p>　　<span style="color: #ff0000;">→創造的思考を磨いて、仕事に還元しろ。</span></p>
<ul>
<li>社外活動や読書等を積極的に行う時間を確保し、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%BC%AB%B8%CA%B7%BC%C8%AF">自己啓発</a>を促す。</li>
</ul>
<p>　　<span style="color: #ff0000;">→幅広い知識を得て、仕事に還元しろ。</span></p>
<p> </p>
<p>という意図があるので注意が必要なのである。</p>
<p>早く帰って家でビールでも飲むか！なんてやってると取り返しのつかないことになってしまうのだ。</p>
<p>ましてや、私みたいに仕事をさぼって、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A4%C7%A4%F3%A4%D1%C1%C8.inc">でんぱ組.inc</a>のイベントに行くようならお先真っ暗なのである。</p>
<p> </p>
<p> </p>
<p> </p>
<p> </p>
<p> </p>
<p> </p>
<p> </p>
<p> </p>
<p> </p>
<p> </p>
<p> </p>
<p> </p>
<p> </p>
<p> </p>
<p> </p>
<p> </p>
<p> </p>
-----
--------
AUTHOR: konoemario
TITLE: 童貞思考を直したい
BASENAME: 2017/01/19/164714
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 01/19/2017 16:47:14
CATEGORY: 幸せについて
-----
BODY:
<p>私には奥さんがいる。童貞ではない。</p>
<p>ここで語るのは物理的童貞ではなく、精神的童貞のことである。</p>
<p> </p>
<p>私は人に好意を伝えるのが苦手だ。</p>
<p>特に異性が相手ともなると、好意が相手に伝わってしまったらどうしよう、という恐怖を抱く。これは、「さては、こいつ私にアプローチしているな」とバレるのが恥ずかしいという点から来る恐怖で、典型的、童貞思考と言うことができる。</p>
<p> </p>
<p>冷静に考えれば、突拍子もない相手から、突然好意をストレートに伝えられるより、それっぽい関係になって、自然とそうなっていくというのが最も成功率が高い。</p>
<p>クラスの女の子を校舎裏に呼んで突然告白するなどという手法は、成人ともなれば避けなければいけないのである。</p>
<p> </p>
<p>私は<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A4%C7%A4%F3%A4%D1%C1%C8.inc">でんぱ組.inc</a>が好きだ。</p>
<p>中でも<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A4%C7%A4%F3%A4%D1%C1%C8.inc">でんぱ組.inc</a>のピンキーこと<a class="keyword" href="http://d.hatena.ne.jp/keyword/%C6%A3%BA%E9%BA%CC%B2%BB">藤咲彩音</a>さんが大好きである。</p>
<p> </p>
<p>先日、人生初めての握手会に行ってきた。</p>
<p>事前に話す内容をさんざん考えたにも関わらず、いざ本人を目の前にしたときには、想定通りのことは何も言うことができず、素っ気ない態度で「頑張ってね」ということしかできなかった。</p>
<p>好意がばれてしまったらどうしよう、といまだに考えているのである。</p>
<p>隣のトトロのかんた未満のアプローチしかすることができなかったのである。</p>
<p> </p>
<p>そして、隣で「あやねさん、かわいいよ！」と叫んでいる大学生に嫉妬するのである。</p>
<p>私も今後は「ピンキー！チューして！」ぐらい言えるようになりたい。</p>
<p> </p>
<p>尚、アイドルに真剣に恋をしているという点については、一旦棚にあげておきたいと思う。</p>
<p> </p>
<p> </p>
-----
--------
AUTHOR: konoemario
TITLE: きっかけは些細なこと
BASENAME: 2017/01/18/204537
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
DATE: 01/18/2017 20:45:37
CATEGORY: 幸せについて
-----
BODY:
<p style="margin-top: 1em; margin-bottom: 1em; font-family: 'PT Sans', 'Helvetica Neue', Arial, 'Hiragino Kaku Gothic Pro', Meiryo, 'MS PGothic', sans-serif;">過去の人生を振り返って</p>
<ul>
<li>あの時の経験が人生の分岐点だった</li>
<li>あれがあったから今こうしている</li>
</ul>
<p style="margin-top: 1em; margin-bottom: 1em; font-family: 'PT Sans', 'Helvetica Neue', Arial, 'Hiragino Kaku Gothic Pro', Meiryo, 'MS PGothic', sans-serif;">そういったこと出来事（長期的、短期的であれ）がある方は少なくないかと思います。</p>
<p style="margin-top: 1em; margin-bottom: 1em; font-family: 'PT Sans', 'Helvetica Neue', Arial, 'Hiragino Kaku Gothic Pro', Meiryo, 'MS PGothic', sans-serif;">またその出来事も、何か大きな決意のもとに行われたものではなく、思い返せば些細なことがきっかけだったということもよくあることかと思います。</p>
<p style="margin-top: 1em; margin-bottom: 1em; font-family: 'PT Sans', 'Helvetica Neue', Arial, 'Hiragino Kaku Gothic Pro', Meiryo, 'MS PGothic', sans-serif;">少なくとも私自身はそうでした。</p>
<p style="margin-top: 1em; margin-bottom: 1em; font-family: 'PT Sans', 'Helvetica Neue', Arial, 'Hiragino Kaku Gothic Pro', Meiryo, 'MS PGothic', sans-serif;">このブログも、今日仕事に行くのが嫌だな、と思いさぼってしまったことをきっかけに始めることにしました。</p>
<p style="margin-top: 1em; margin-bottom: 1em; font-family: 'PT Sans', 'Helvetica Neue', Arial, 'Hiragino Kaku Gothic Pro', Meiryo, 'MS PGothic', sans-serif;">明日には終わっているかもしれません。</p>
<p style="margin-top: 1em; margin-bottom: 1em; font-family: 'PT Sans', 'Helvetica Neue', Arial, 'Hiragino Kaku Gothic Pro', Meiryo, 'MS PGothic', sans-serif;"> </p>
<p style="margin-top: 1em; margin-bottom: 1em; font-family: 'PT Sans', 'Helvetica Neue', Arial, 'Hiragino Kaku Gothic Pro', Meiryo, 'MS PGothic', sans-serif;">それでも数年後、この記事を書いたことが分岐点だったな、と思えるものになれば素敵だなと思います。</p>
<p style="margin-top: 1em; margin-bottom: 1em; font-family: 'PT Sans', 'Helvetica Neue', Arial, 'Hiragino Kaku Gothic Pro', Meiryo, 'MS PGothic', sans-serif;">今後は、幸せになるにはどうしたらいいのだろうという点を中心に書いていこうかと思っています。</p>
<p style="margin-top: 1em; margin-bottom: 1em; font-family: 'PT Sans', 'Helvetica Neue', Arial, 'Hiragino Kaku Gothic Pro', Meiryo, 'MS PGothic', sans-serif;"> </p>
<p style="margin-top: 1em; margin-bottom: 1em; font-family: 'PT Sans', 'Helvetica Neue', Arial, 'Hiragino Kaku Gothic Pro', Meiryo, 'MS PGothic', sans-serif;">よろしくお願いします。</p>
-----
--------
